{
  "api/Remora.Discord.API.Abstractions.DiscordAPIVersion.html": {
    "href": "api/Remora.Discord.API.Abstractions.DiscordAPIVersion.html",
    "title": "Enum DiscordAPIVersion | Remora.Discord",
    "keywords": "Enum DiscordAPIVersion Enumerates various released versions of the Discord API. Namespace : Remora.Discord.API.Abstractions Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum DiscordAPIVersion Fields Name Description Default The default version of the API. Stable The stable version of the API. V10 Version 10 of the API. V6 Version 6 of the API. V7 Version 7 of the API. V8 Version 8 of the API. V9 Version 9 of the API."
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Bidirectional.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Bidirectional.html",
    "title": "Namespace Remora.Discord.API.Abstractions.Gateway.Bidirectional | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions.Gateway.Bidirectional Interfaces IHeartbeat Represents a heartbeat command to or from Discord. IHeartbeatAcknowledge Represents a heartbeat acknowledgement. This interface defines no data."
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Bidirectional.IHeartbeat.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Bidirectional.IHeartbeat.html",
    "title": "Interface IHeartbeat | Remora.Discord",
    "keywords": "Interface IHeartbeat Represents a heartbeat command to or from Discord. Namespace : Remora.Discord.API.Abstractions.Gateway.Bidirectional Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IHeartbeat : IGatewayCommand, IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source LastSequenceNumber Gets the last sequence number received by the client. Declaration long? LastSequenceNumber { get; } Property Value Type Description Nullable < Int64 >"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Bidirectional.IHeartbeatAcknowledge.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Bidirectional.IHeartbeatAcknowledge.html",
    "title": "Interface IHeartbeatAcknowledge | Remora.Discord",
    "keywords": "Interface IHeartbeatAcknowledge Represents a heartbeat acknowledgement. This interface defines no data. Namespace : Remora.Discord.API.Abstractions.Gateway.Bidirectional Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IHeartbeatAcknowledge : IGatewayEvent, IGatewayCommand, IGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Commands.GatewayIntents.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Commands.GatewayIntents.html",
    "title": "Enum GatewayIntents | Remora.Discord",
    "keywords": "Enum GatewayIntents Enumerates the gateway intents that can be specified. Namespace : Remora.Discord.API.Abstractions.Gateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] [Flags] public enum GatewayIntents Fields Name Description DirectMessageReactions Subscribes to the following events: MESSAGE_REACTION_ADD MESSAGE_REACTION_REMOVE MESSAGE_REACTION_REMOVE_ALL MESSAGE_REACTION_REMOVE_EMOJI DirectMessages Subscribes to the following events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE CHANNEL_PINS_UPDATE DirectMessageTyping Subscribes to the following events: TYPING_START GuildBans Subscribes to the following events: GUILD_BAN_ADD GUILD_BAN_REMOVE GuildEmojisAndStickers Subscribes to the following events: GUILD_EMOJIS_UPDATE GUILD_STICKERS_UPDATE GuildIntegrations Subscribes to the following events: GUILD_INTEGRATIONS_UPDATE INTEGRATION_CREATE INTEGRATION_UPDATE INTEGRATION_DELETE GuildInvites Subscribes to the following events: INVITE_CREATE INVITE_DELETE GuildMembers Subscribes to the following events: GUILD_MEMBER_ADD GUILD_MEMBER_UPDATE GUILD_MEMBER_REMOVE THREAD_MEMBERS_UPDATE GuildMessageReactions Subscribes to the following events: MESSAGE_REACTION_ADD MESSAGE_REACTION_REMOVE MESSAGE_REACTION_REMOVE_ALL MESSAGE_REACTION_REMOVE_EMOJI GuildMessages Subscribes to the following events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE MESSAGE_DELETE_BULK GuildMessageTyping Subscribes to the following events: TYPING_START GuildPresences Subscribes to the following events: PRESENCE_UPDATE Guilds Subscribes to the following events: GUILD_CREATE GUILD_UPDATE GUILD_DELETE GUILD_ROLE_CREATE GUILD_ROLE_UPDATE GUILD_ROLE_DELETE CHANNEL_CREATE CHANNEL_UPDATE CHANNEL_DELETE CHANNEL_PINS_UPDATE THREAD_CREATE THREAD_UPDATE THREAD_DELETE THREAD_LIST_SYNC THREAD_MEMBER_UPDATE THREAD_MEMBERS_UPDATE STAGE_INSTANCE_UPDATE STAGE_INSTANCE_DELETE GuildScheduledEvents Subscribes to the following events: GUILD_SCHEDULED_EVENT_CREATE GUILD_SCHEDULED_EVENT_UPDATE GUILD_SCHEDULED_EVENT_DELETE GUILD_SCHEDULED_EVENT_USER_ADD ** GUILD_SCHEDULED_EVENT_USER_REMOVE ** GuildVoiceStates Subscribes to the following events: VOICE_STATE_UPDATE GuildWebhooks Subscribes to the following events: WEBHOOKS_UPDATE MessageContents Does not subscribe to any particular events, but requests that message contents be sent along with the following events: MESSAGE_CREATE MESSAGE_UPDATE MESSAGE_DELETE If this intent is not specified, all raw message content strings will be empty. You may still receive user input using interactions, such as slash commands or modals."
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Commands.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Commands.html",
    "title": "Namespace Remora.Discord.API.Abstractions.Gateway.Commands | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions.Gateway.Commands Interfaces IConnectionProperties Represents a set of connection properties sent to the Discord gateway. IGatewayCommand Represents a marker interface for gateway commands. IIdentify Represents an identification command sent to the Discord gateway. IRequestGuildMembers Represents a command used to request guild members. IResume Represents a resume command. IShardIdentification Represents an identification set for a sharded connection. IUpdatePresence Represents a command to update the presence of a user. IUpdateVoiceState Represents a command to update the voice state of the client. Enums GatewayIntents Enumerates the gateway intents that can be specified."
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Commands.IConnectionProperties.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Commands.IConnectionProperties.html",
    "title": "Interface IConnectionProperties | Remora.Discord",
    "keywords": "Interface IConnectionProperties Represents a set of connection properties sent to the Discord gateway. Namespace : Remora.Discord.API.Abstractions.Gateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IConnectionProperties Properties | Improve this Doc View Source Browser Gets the browser in use by the connection. Typically, this is the name of the library that initialized the connection. Declaration string Browser { get; } Property Value Type Description String | Improve this Doc View Source Device Gets the device in use by the connection. Typically, this is the name of the library that initializes the connection. Declaration string Device { get; } Property Value Type Description String | Improve this Doc View Source OperatingSystem Gets the operating system in use by the connection. Declaration string OperatingSystem { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Commands.IGatewayCommand.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Commands.IGatewayCommand.html",
    "title": "Interface IGatewayCommand | Remora.Discord",
    "keywords": "Interface IGatewayCommand Represents a marker interface for gateway commands. Namespace : Remora.Discord.API.Abstractions.Gateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGatewayCommand : IGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Commands.IIdentify.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Commands.IIdentify.html",
    "title": "Interface IIdentify | Remora.Discord",
    "keywords": "Interface IIdentify Represents an identification command sent to the Discord gateway. Namespace : Remora.Discord.API.Abstractions.Gateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IIdentify : IGatewayCommand, IGatewayPayloadData Properties | Improve this Doc View Source Compress Gets an optional field, containing a value that indicates whether the connection supports compressed packets. Declaration Optional<bool> Compress { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Intents Gets an optional field, containing the gateway intents the connection wants to receive. Declaration GatewayIntents Intents { get; } Property Value Type Description GatewayIntents | Improve this Doc View Source LargeThreshold Gets an optional field, containing the threshold value of total guild members before a guild is considered large, and offline members will not automatically be sent. Declaration Optional<byte> LargeThreshold { get; } Property Value Type Description Remora.Rest.Core.Optional < Byte > | Improve this Doc View Source Presence Gets an optional field, containing initial presence information. Declaration Optional<IUpdatePresence> Presence { get; } Property Value Type Description Remora.Rest.Core.Optional < IUpdatePresence > | Improve this Doc View Source Properties Gets the connection properties. Declaration IConnectionProperties Properties { get; } Property Value Type Description IConnectionProperties | Improve this Doc View Source Shard Gets an optional field, containing the sharding ID for this connection. Declaration Optional<IShardIdentification> Shard { get; } Property Value Type Description Remora.Rest.Core.Optional < IShardIdentification > | Improve this Doc View Source Token Gets the authentication token. Declaration string Token { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Commands.IRequestGuildMembers.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Commands.IRequestGuildMembers.html",
    "title": "Interface IRequestGuildMembers | Remora.Discord",
    "keywords": "Interface IRequestGuildMembers Represents a command used to request guild members. Namespace : Remora.Discord.API.Abstractions.Gateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IRequestGuildMembers : IGatewayCommand, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild that members should be requested from. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Limit Gets a limiting number of users to fetch. Declaration Optional<int> Limit { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Nonce Gets a nonce (unique string) to identify the incoming guild member chunks after the request has been accepted. Declaration Optional<string> Nonce { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Presences Gets a value indicating whether we want to fetch the presences of the users. Declaration Optional<bool> Presences { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Query Gets a query string that the requested usernames should start with. Declaration Optional<string> Query { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source UserIDs Gets a collection of user IDs that should be fetched. Declaration Optional<IReadOnlyList<Snowflake>> UserIDs { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >>"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Commands.IResume.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Commands.IResume.html",
    "title": "Interface IResume | Remora.Discord",
    "keywords": "Interface IResume Represents a resume command. Namespace : Remora.Discord.API.Abstractions.Gateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IResume : IGatewayCommand, IGatewayPayloadData Properties | Improve this Doc View Source SequenceNumber Gets the last received sequence number. Declaration int SequenceNumber { get; } Property Value Type Description Int32 | Improve this Doc View Source SessionID Gets the last session ID. Declaration string SessionID { get; } Property Value Type Description String | Improve this Doc View Source Token Gets the session token. Declaration string Token { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Commands.IShardIdentification.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Commands.IShardIdentification.html",
    "title": "Interface IShardIdentification | Remora.Discord",
    "keywords": "Interface IShardIdentification Represents an identification set for a sharded connection. Namespace : Remora.Discord.API.Abstractions.Gateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IShardIdentification Properties | Improve this Doc View Source ShardCount Gets the total number of shards. Declaration int ShardCount { get; } Property Value Type Description Int32 | Improve this Doc View Source ShardID Gets the ID of this shard. Declaration int ShardID { get; } Property Value Type Description Int32"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Commands.IUpdatePresence.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Commands.IUpdatePresence.html",
    "title": "Interface IUpdatePresence | Remora.Discord",
    "keywords": "Interface IUpdatePresence Represents a command to update the presence of a user. Namespace : Remora.Discord.API.Abstractions.Gateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IUpdatePresence : IGatewayCommand, IGatewayPayloadData Properties | Improve this Doc View Source Activities Gets the user's new activities. Declaration IReadOnlyList<IActivity> Activities { get; } Property Value Type Description IReadOnlyList < IActivity > | Improve this Doc View Source IsAFK Gets a value indicating whether the user is AFK. Declaration bool IsAFK { get; } Property Value Type Description Boolean | Improve this Doc View Source Since Gets the unix time in milliseconds of when the client went idle, or null if the client is not idle. Declaration DateTimeOffset? Since { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Status Gets the user's status. Declaration ClientStatus Status { get; } Property Value Type Description ClientStatus"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Commands.IUpdateVoiceState.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Commands.IUpdateVoiceState.html",
    "title": "Interface IUpdateVoiceState | Remora.Discord",
    "keywords": "Interface IUpdateVoiceState Represents a command to update the voice state of the client. Namespace : Remora.Discord.API.Abstractions.Gateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IUpdateVoiceState : IGatewayCommand, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the channel the client wants to join, or null if disconnecting. Declaration Snowflake? ChannelID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildID Gets the guild that the status should be updated in. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsSelfDeafened Gets a value indicating whether the client is deafened. Declaration bool IsSelfDeafened { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSelfMuted Gets a value indicating whether the client is muted. Declaration bool IsSelfMuted { get; } Property Value Type Description Boolean"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.html",
    "title": "Namespace Remora.Discord.API.Abstractions.Gateway.Events | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions.Gateway.Events Interfaces IApplicationCommandPermissionsUpdate Represents an update to the permissions of a command. IChannelCreate Represents the creation of a channel. IChannelDelete Represents the deletion of a channel. IChannelPinsUpdate Represents a pin or unpin of a message in a channel. This is not sent when a pinned message is deleted. IChannelUpdate Represents the update of a channel. IGatewayEvent Acts as a marker interface for gateway events. IGuildBanAdd Represents a user being banned. IGuildBanRemove Represents a user being unbanned. IGuildCreate Represents the creation of a guild. This event is sent in one of three scenarios: When a user is initially connecting to lazily load and backfill information for all unavailable guilds sent in the IReady event. When a guild becomes available again to the client. When the current user joins a guild. IGuildDelete Represents the delete of a guild. IGuildEmojisUpdate Represents an update to a guild's emojis. IGuildIntegrationsUpdate Represents an update to a guild integration. IGuildMemberAdd Represents a new user joining the guild. IGuildMemberRemove Represents a user being removed from the guild. IGuildMembersChunk Represents a chunk of guild members. IGuildMemberUpdate Represents a user being updated in the guild. IGuildRoleCreate Represents the creation of a role. IGuildRoleDelete Represents a role deletion. IGuildRoleUpdate Represents an update to a role. IGuildScheduledEventCreate Sent when a scheduled event is created. IGuildScheduledEventDelete Sent when a scheduled event is deleted. IGuildScheduledEventUpdate Sent when a scheduled event is updated. IGuildScheduledEventUserAdd Sent when a user subscribes to a scheduled event. IGuildScheduledEventUserRemove Sent when a user unsubscribes from a scheduled event. IGuildStickersUpdate Represents a change to the stickers in a guild. IGuildUpdate Represents the update of a guild. IHello Represents the greeting event sent by the gateway after connection. IIntegrationCreate Represents the creation of an integration. IIntegrationDelete Represents the creation of an integration. IIntegrationUpdate Represents the creation of an integration. IInteractionCreate Represents a user-invoked slash command. IInvalidSession Represents a reconnection event from the gateway. IInviteCreate Represents the creation of an invite. IInviteDelete Represents the deletion of an invite link. IMessageCreate Represents the creation of a message. IMessageDelete Represents the deletion of a message. IMessageDeleteBulk Represents a bulk deletion of a set of messages. IMessageReactionAdd Represents the addition of a reaction to a message. IMessageReactionRemove Represents the removal of a reaction from a message. IMessageReactionRemoveAll Represents the removal of all reaction from a message. IMessageReactionRemoveEmoji Represents the removal of all instances of a given emoji from a message. IMessageUpdate Represents the creation of a message. IPresenceUpdate Represents the update of a user's presence. IReady Represents initial gateway state information. IReconnect Represents a reconnection request. This interface defines no data. IResumed Represents an event that marks the completion of a session resumption. IStageInstanceCreate Represents the creation of a stage instance. IStageInstanceDelete Represents a deletion of a stage instance. IStageInstanceUpdate Represents an update of a stage instance. IThreadCreate Represents the creation of a channel. IThreadDelete Represents the creation of a channel. IThreadListSync Sent when the current user gains access to a thread channel. IThreadMembersUpdate Represents an update to the member list of a thread. IThreadMemberUpdate Represents an update to the current user's thread member object. IThreadUpdate Represents the creation of a channel. ITypingStart Sent when a user starts typing in a channel. IUnknownEvent Represents an unknown event. IUserUpdate Represents an update to a user. IVoiceServerUpdate Represents an update to a voice server of a guild. IVoiceStateUpdate Represents an update to a user's voice state. IWebhooksUpdate Represents an update to a webhook in a channel."
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IApplicationCommandPermissionsUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IApplicationCommandPermissionsUpdate.html",
    "title": "Interface IApplicationCommandPermissionsUpdate | Remora.Discord",
    "keywords": "Interface IApplicationCommandPermissionsUpdate Represents an update to the permissions of a command. Inherited Members IGuildApplicationCommandPermissions.ID IGuildApplicationCommandPermissions.ApplicationID IGuildApplicationCommandPermissions.GuildID IGuildApplicationCommandPermissions.Permissions IGuildApplicationCommandPermissions.IPartialGuildApplicationCommandPermissions.ID IGuildApplicationCommandPermissions.IPartialGuildApplicationCommandPermissions.ApplicationID IGuildApplicationCommandPermissions.IPartialGuildApplicationCommandPermissions.GuildID IGuildApplicationCommandPermissions.IPartialGuildApplicationCommandPermissions.Permissions Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IApplicationCommandPermissionsUpdate : IGatewayEvent, IGatewayPayloadData, IGuildApplicationCommandPermissions, IPartialGuildApplicationCommandPermissions"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IChannelCreate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IChannelCreate.html",
    "title": "Interface IChannelCreate | Remora.Discord",
    "keywords": "Interface IChannelCreate Represents the creation of a channel. Inherited Members IChannel.ID IChannel.Type IChannel.GuildID IChannel.Position IChannel.PermissionOverwrites IChannel.Name IChannel.Topic IChannel.IsNsfw IChannel.LastMessageID IChannel.Bitrate IChannel.UserLimit IChannel.RateLimitPerUser IChannel.Recipients IChannel.Icon IChannel.OwnerID IChannel.ApplicationID IChannel.ParentID IChannel.LastPinTimestamp IChannel.RTCRegion IChannel.VideoQualityMode IChannel.MessageCount IChannel.MemberCount IChannel.ThreadMetadata IChannel.Member IChannel.DefaultAutoArchiveDuration IChannel.Permissions IChannel.IPartialChannel.ID IChannel.IPartialChannel.Type IChannel.IPartialChannel.GuildID IChannel.IPartialChannel.Position IChannel.IPartialChannel.PermissionOverwrites IChannel.IPartialChannel.Name IChannel.IPartialChannel.Topic IChannel.IPartialChannel.IsNsfw IChannel.IPartialChannel.LastMessageID IChannel.IPartialChannel.Bitrate IChannel.IPartialChannel.UserLimit IChannel.IPartialChannel.RateLimitPerUser IChannel.IPartialChannel.Recipients IChannel.IPartialChannel.Icon IChannel.IPartialChannel.OwnerID IChannel.IPartialChannel.ApplicationID IChannel.IPartialChannel.ParentID IChannel.IPartialChannel.LastPinTimestamp IChannel.IPartialChannel.RTCRegion IChannel.IPartialChannel.VideoQualityMode IChannel.IPartialChannel.MessageCount IChannel.IPartialChannel.MemberCount IChannel.IPartialChannel.ThreadMetadata IChannel.IPartialChannel.Member IChannel.IPartialChannel.DefaultAutoArchiveDuration IChannel.IPartialChannel.Permissions Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IChannelCreate : IGatewayEvent, IGatewayPayloadData, IChannel, IPartialChannel"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IChannelDelete.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IChannelDelete.html",
    "title": "Interface IChannelDelete | Remora.Discord",
    "keywords": "Interface IChannelDelete Represents the deletion of a channel. Inherited Members IChannel.ID IChannel.Type IChannel.GuildID IChannel.Position IChannel.PermissionOverwrites IChannel.Name IChannel.Topic IChannel.IsNsfw IChannel.LastMessageID IChannel.Bitrate IChannel.UserLimit IChannel.RateLimitPerUser IChannel.Recipients IChannel.Icon IChannel.OwnerID IChannel.ApplicationID IChannel.ParentID IChannel.LastPinTimestamp IChannel.RTCRegion IChannel.VideoQualityMode IChannel.MessageCount IChannel.MemberCount IChannel.ThreadMetadata IChannel.Member IChannel.DefaultAutoArchiveDuration IChannel.Permissions IChannel.IPartialChannel.ID IChannel.IPartialChannel.Type IChannel.IPartialChannel.GuildID IChannel.IPartialChannel.Position IChannel.IPartialChannel.PermissionOverwrites IChannel.IPartialChannel.Name IChannel.IPartialChannel.Topic IChannel.IPartialChannel.IsNsfw IChannel.IPartialChannel.LastMessageID IChannel.IPartialChannel.Bitrate IChannel.IPartialChannel.UserLimit IChannel.IPartialChannel.RateLimitPerUser IChannel.IPartialChannel.Recipients IChannel.IPartialChannel.Icon IChannel.IPartialChannel.OwnerID IChannel.IPartialChannel.ApplicationID IChannel.IPartialChannel.ParentID IChannel.IPartialChannel.LastPinTimestamp IChannel.IPartialChannel.RTCRegion IChannel.IPartialChannel.VideoQualityMode IChannel.IPartialChannel.MessageCount IChannel.IPartialChannel.MemberCount IChannel.IPartialChannel.ThreadMetadata IChannel.IPartialChannel.Member IChannel.IPartialChannel.DefaultAutoArchiveDuration IChannel.IPartialChannel.Permissions Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IChannelDelete : IGatewayEvent, IGatewayPayloadData, IChannel, IPartialChannel"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IChannelPinsUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IChannelPinsUpdate.html",
    "title": "Interface IChannelPinsUpdate | Remora.Discord",
    "keywords": "Interface IChannelPinsUpdate Represents a pin or unpin of a message in a channel. This is not sent when a pinned message is deleted. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IChannelPinsUpdate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID of the channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source LastPinTimestamp Gets the time at which the most recent pinned message was pinned. Declaration Optional<DateTimeOffset?> LastPinTimestamp { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >>"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IChannelUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IChannelUpdate.html",
    "title": "Interface IChannelUpdate | Remora.Discord",
    "keywords": "Interface IChannelUpdate Represents the update of a channel. Inherited Members IChannel.ID IChannel.Type IChannel.GuildID IChannel.Position IChannel.PermissionOverwrites IChannel.Name IChannel.Topic IChannel.IsNsfw IChannel.LastMessageID IChannel.Bitrate IChannel.UserLimit IChannel.RateLimitPerUser IChannel.Recipients IChannel.Icon IChannel.OwnerID IChannel.ApplicationID IChannel.ParentID IChannel.LastPinTimestamp IChannel.RTCRegion IChannel.VideoQualityMode IChannel.MessageCount IChannel.MemberCount IChannel.ThreadMetadata IChannel.Member IChannel.DefaultAutoArchiveDuration IChannel.Permissions IChannel.IPartialChannel.ID IChannel.IPartialChannel.Type IChannel.IPartialChannel.GuildID IChannel.IPartialChannel.Position IChannel.IPartialChannel.PermissionOverwrites IChannel.IPartialChannel.Name IChannel.IPartialChannel.Topic IChannel.IPartialChannel.IsNsfw IChannel.IPartialChannel.LastMessageID IChannel.IPartialChannel.Bitrate IChannel.IPartialChannel.UserLimit IChannel.IPartialChannel.RateLimitPerUser IChannel.IPartialChannel.Recipients IChannel.IPartialChannel.Icon IChannel.IPartialChannel.OwnerID IChannel.IPartialChannel.ApplicationID IChannel.IPartialChannel.ParentID IChannel.IPartialChannel.LastPinTimestamp IChannel.IPartialChannel.RTCRegion IChannel.IPartialChannel.VideoQualityMode IChannel.IPartialChannel.MessageCount IChannel.IPartialChannel.MemberCount IChannel.IPartialChannel.ThreadMetadata IChannel.IPartialChannel.Member IChannel.IPartialChannel.DefaultAutoArchiveDuration IChannel.IPartialChannel.Permissions Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IChannelUpdate : IGatewayEvent, IGatewayPayloadData, IChannel, IPartialChannel"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGatewayEvent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGatewayEvent.html",
    "title": "Interface IGatewayEvent | Remora.Discord",
    "keywords": "Interface IGatewayEvent Acts as a marker interface for gateway events. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGatewayEvent : IGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildBanAdd.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildBanAdd.html",
    "title": "Interface IGuildBanAdd | Remora.Discord",
    "keywords": "Interface IGuildBanAdd Represents a user being banned. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildBanAdd : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source User Gets the banned user. Declaration IUser User { get; } Property Value Type Description IUser"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildBanRemove.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildBanRemove.html",
    "title": "Interface IGuildBanRemove | Remora.Discord",
    "keywords": "Interface IGuildBanRemove Represents a user being unbanned. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildBanRemove : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source User Gets the banned user. Declaration IUser User { get; } Property Value Type Description IUser"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildCreate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildCreate.html",
    "title": "Interface IGuildCreate | Remora.Discord",
    "keywords": "Interface IGuildCreate Represents the creation of a guild. This event is sent in one of three scenarios: When a user is initially connecting to lazily load and backfill information for all unavailable guilds sent in the IReady event. When a guild becomes available again to the client. When the current user joins a guild. Inherited Members IGuild.ID IGuild.Name IGuild.Icon IGuild.Splash IGuild.DiscoverySplash IGuild.IsOwner IGuild.OwnerID IGuild.Permissions IGuild.AFKChannelID IGuild.AFKTimeout IGuild.VerificationLevel IGuild.DefaultMessageNotifications IGuild.ExplicitContentFilter IGuild.Roles IGuild.Emojis IGuild.GuildFeatures IGuild.MFALevel IGuild.ApplicationID IGuild.IsWidgetEnabled IGuild.WidgetChannelID IGuild.SystemChannelID IGuild.SystemChannelFlags IGuild.RulesChannelID IGuild.MaxPresences IGuild.MaxMembers IGuild.VanityUrlCode IGuild.Description IGuild.Banner IGuild.PremiumTier IGuild.PremiumSubscriptionCount IGuild.PreferredLocale IGuild.PublicUpdatesChannelID IGuild.MaxVideoChannelUsers IGuild.ApproximateMemberCount IGuild.ApproximatePresenceCount IGuild.WelcomeScreen IGuild.NSFWLevel IGuild.Stickers IGuild.IsPremiumProgressBarEnabled IGuild.IPartialGuild.ID IGuild.IPartialGuild.Name IGuild.IPartialGuild.Icon IGuild.IPartialGuild.Splash IGuild.IPartialGuild.DiscoverySplash IGuild.IPartialGuild.IsOwner IGuild.IPartialGuild.OwnerID IGuild.IPartialGuild.Permissions IGuild.IPartialGuild.AFKChannelID IGuild.IPartialGuild.AFKTimeout IGuild.IPartialGuild.VerificationLevel IGuild.IPartialGuild.DefaultMessageNotifications IGuild.IPartialGuild.ExplicitContentFilter IGuild.IPartialGuild.Roles IGuild.IPartialGuild.Emojis IGuild.IPartialGuild.GuildFeatures IGuild.IPartialGuild.MFALevel IGuild.IPartialGuild.ApplicationID IGuild.IPartialGuild.IsWidgetEnabled IGuild.IPartialGuild.WidgetChannelID IGuild.IPartialGuild.SystemChannelID IGuild.IPartialGuild.SystemChannelFlags IGuild.IPartialGuild.RulesChannelID IGuild.IPartialGuild.MaxPresences IGuild.IPartialGuild.MaxMembers IGuild.IPartialGuild.VanityUrlCode IGuild.IPartialGuild.Description IGuild.IPartialGuild.Banner IGuild.IPartialGuild.PremiumTier IGuild.IPartialGuild.PremiumSubscriptionCount IGuild.IPartialGuild.PreferredLocale IGuild.IPartialGuild.PublicUpdatesChannelID IGuild.IPartialGuild.MaxVideoChannelUsers IGuild.IPartialGuild.ApproximateMemberCount IGuild.IPartialGuild.ApproximatePresenceCount IGuild.IPartialGuild.WelcomeScreen IGuild.IPartialGuild.NSFWLevel IGuild.IPartialGuild.Stickers IGuild.IPartialGuild.IsPremiumProgressBarEnabled Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildCreate : IGatewayEvent, IGatewayPayloadData, IGuild, IPartialGuild Properties | Improve this Doc View Source Channels Gets the channels in the guild. Declaration Optional<IReadOnlyList<IChannel>> Channels { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IChannel >> | Improve this Doc View Source GuildScheduledEvents Gets the scheduled events in the guild. Declaration Optional<IReadOnlyList<IGuildScheduledEvent>> GuildScheduledEvents { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IGuildScheduledEvent >> | Improve this Doc View Source IsLarge Gets a value indicating whether this is considered a large guild. Declaration Optional<bool> IsLarge { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsUnavailable Gets a value indicating whether the guild is unavailable due to an outage. Declaration Optional<bool> IsUnavailable { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source JoinedAt Gets the time when the current user joined the guild. Declaration Optional<DateTimeOffset> JoinedAt { get; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source MemberCount Gets the number of members in the guild. Declaration Optional<int> MemberCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Members Gets the members in the guild. Declaration Optional<IReadOnlyList<IGuildMember>> Members { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IGuildMember >> | Improve this Doc View Source Presences Gets the presences of the members in the guild. Declaration Optional<IReadOnlyList<IPartialPresence>> Presences { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialPresence >> | Improve this Doc View Source StageInstances Gets the stage instances in the guild. Declaration Optional<IReadOnlyList<IStageInstance>> StageInstances { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IStageInstance >> | Improve this Doc View Source Threads Gets the threads in the guild. Declaration Optional<IReadOnlyList<IChannel>> Threads { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IChannel >> | Improve this Doc View Source VoiceStates Gets the states of members currently in voice channels. Declaration Optional<IReadOnlyList<IPartialVoiceState>> VoiceStates { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialVoiceState >>"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildDelete.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildDelete.html",
    "title": "Interface IGuildDelete | Remora.Discord",
    "keywords": "Interface IGuildDelete Represents the delete of a guild. Inherited Members IUnavailableGuild.ID IUnavailableGuild.IsUnavailable Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildDelete : IGatewayEvent, IGatewayPayloadData, IUnavailableGuild"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildEmojisUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildEmojisUpdate.html",
    "title": "Interface IGuildEmojisUpdate | Remora.Discord",
    "keywords": "Interface IGuildEmojisUpdate Represents an update to a guild's emojis. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildEmojisUpdate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source Emojis Gets the guild's emojis. Declaration IReadOnlyList<IEmoji> Emojis { get; } Property Value Type Description IReadOnlyList < IEmoji > | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildIntegrationsUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildIntegrationsUpdate.html",
    "title": "Interface IGuildIntegrationsUpdate | Remora.Discord",
    "keywords": "Interface IGuildIntegrationsUpdate Represents an update to a guild integration. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildIntegrationsUpdate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild whose integrations were updated. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildMemberAdd.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildMemberAdd.html",
    "title": "Interface IGuildMemberAdd | Remora.Discord",
    "keywords": "Interface IGuildMemberAdd Represents a new user joining the guild. Inherited Members IGuildMember.User IGuildMember.Nickname IGuildMember.Avatar IGuildMember.Roles IGuildMember.JoinedAt IGuildMember.PremiumSince IGuildMember.IsDeafened IGuildMember.IsMuted IGuildMember.IsPending IGuildMember.Permissions IGuildMember.CommunicationDisabledUntil IGuildMember.IPartialGuildMember.User IGuildMember.IPartialGuildMember.Nickname IGuildMember.IPartialGuildMember.Avatar IGuildMember.IPartialGuildMember.Roles IGuildMember.IPartialGuildMember.JoinedAt IGuildMember.IPartialGuildMember.PremiumSince IGuildMember.IPartialGuildMember.IsDeafened IGuildMember.IPartialGuildMember.IsMuted IGuildMember.IPartialGuildMember.IsPending IGuildMember.IPartialGuildMember.Permissions IGuildMember.IPartialGuildMember.CommunicationDisabledUntil Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildMemberAdd : IGuildMember, IPartialGuildMember, IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild the member is in. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildMemberRemove.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildMemberRemove.html",
    "title": "Interface IGuildMemberRemove | Remora.Discord",
    "keywords": "Interface IGuildMemberRemove Represents a user being removed from the guild. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildMemberRemove : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild the member was in. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source User Gets the user. Declaration IUser User { get; } Property Value Type Description IUser"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildMembersChunk.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildMembersChunk.html",
    "title": "Interface IGuildMembersChunk | Remora.Discord",
    "keywords": "Interface IGuildMembersChunk Represents a chunk of guild members. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildMembersChunk : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChunkCount Gets the total number of expected chunks for this response. Declaration int ChunkCount { get; } Property Value Type Description Int32 | Improve this Doc View Source ChunkIndex Gets the index of this chunk in the expected chunks of the response. Declaration int ChunkIndex { get; } Property Value Type Description Int32 | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Members Gets the members in this chunk. Declaration IReadOnlyList<IGuildMember> Members { get; } Property Value Type Description IReadOnlyList < IGuildMember > | Improve this Doc View Source Nonce Gets the nonce used in the original request. Declaration Optional<string> Nonce { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source NotFound Gets a list of guild members that were not found. Declaration Optional<IReadOnlyList<Snowflake>> NotFound { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Presences Gets the presences of the returned members. Declaration Optional<IReadOnlyList<IPresence>> Presences { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPresence >>"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildMemberUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildMemberUpdate.html",
    "title": "Interface IGuildMemberUpdate | Remora.Discord",
    "keywords": "Interface IGuildMemberUpdate Represents a user being updated in the guild. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildMemberUpdate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source Avatar Gets the member's guild avatar hash. Declaration Optional<IImageHash> Avatar { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source CommunicationDisabledUntil Gets the DateTimeOffset until the user has communication disabled. Declaration Optional<DateTimeOffset?> CommunicationDisabledUntil { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source GuildID Gets the ID of the guild the member is in. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsDeafened Gets a value indicating whether the user is deafened in voice channels. Declaration Optional<bool> IsDeafened { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMuted Gets a value indicating whether the user is muted in voice channels. Declaration Optional<bool> IsMuted { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsPending Gets a value indicating whether the user has not yet passed the screening requirements. Declaration Optional<bool> IsPending { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source JoinedAt Gets the date when the user joined the guild. Declaration DateTimeOffset? JoinedAt { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Nickname Gets the user's nickname, if they have one set. Declaration Optional<string> Nickname { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source PremiumSince Gets the date when the user started boosting the guild. Declaration Optional<DateTimeOffset?> PremiumSince { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Roles Gets the roles the user has. Declaration IReadOnlyList<Snowflake> Roles { get; } Property Value Type Description IReadOnlyList < Remora.Rest.Core.Snowflake > | Improve this Doc View Source User Gets the user. Declaration IUser User { get; } Property Value Type Description IUser"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildRoleCreate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildRoleCreate.html",
    "title": "Interface IGuildRoleCreate | Remora.Discord",
    "keywords": "Interface IGuildRoleCreate Represents the creation of a role. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildRoleCreate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Role Gets the role. Declaration IRole Role { get; } Property Value Type Description IRole"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildRoleDelete.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildRoleDelete.html",
    "title": "Interface IGuildRoleDelete | Remora.Discord",
    "keywords": "Interface IGuildRoleDelete Represents a role deletion. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildRoleDelete : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source RoleID Gets the ID of the role. Declaration Snowflake RoleID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildRoleUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildRoleUpdate.html",
    "title": "Interface IGuildRoleUpdate | Remora.Discord",
    "keywords": "Interface IGuildRoleUpdate Represents an update to a role. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildRoleUpdate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Role Gets the role. Declaration IRole Role { get; } Property Value Type Description IRole"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildScheduledEventCreate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildScheduledEventCreate.html",
    "title": "Interface IGuildScheduledEventCreate | Remora.Discord",
    "keywords": "Interface IGuildScheduledEventCreate Sent when a scheduled event is created. Inherited Members IGuildScheduledEvent.ID IGuildScheduledEvent.GuildID IGuildScheduledEvent.ChannelID IGuildScheduledEvent.CreatorID IGuildScheduledEvent.Name IGuildScheduledEvent.Description IGuildScheduledEvent.ScheduledStartTime IGuildScheduledEvent.ScheduledEndTime IGuildScheduledEvent.PrivacyLevel IGuildScheduledEvent.Status IGuildScheduledEvent.EntityType IGuildScheduledEvent.EntityID IGuildScheduledEvent.EntityMetadata IGuildScheduledEvent.Creator IGuildScheduledEvent.UserCount IGuildScheduledEvent.Image Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax public interface IGuildScheduledEventCreate : IGatewayEvent, IGatewayPayloadData, IGuildScheduledEvent"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildScheduledEventDelete.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildScheduledEventDelete.html",
    "title": "Interface IGuildScheduledEventDelete | Remora.Discord",
    "keywords": "Interface IGuildScheduledEventDelete Sent when a scheduled event is deleted. Inherited Members IGuildScheduledEvent.ID IGuildScheduledEvent.GuildID IGuildScheduledEvent.ChannelID IGuildScheduledEvent.CreatorID IGuildScheduledEvent.Name IGuildScheduledEvent.Description IGuildScheduledEvent.ScheduledStartTime IGuildScheduledEvent.ScheduledEndTime IGuildScheduledEvent.PrivacyLevel IGuildScheduledEvent.Status IGuildScheduledEvent.EntityType IGuildScheduledEvent.EntityID IGuildScheduledEvent.EntityMetadata IGuildScheduledEvent.Creator IGuildScheduledEvent.UserCount IGuildScheduledEvent.Image Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax public interface IGuildScheduledEventDelete : IGatewayEvent, IGatewayPayloadData, IGuildScheduledEvent"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildScheduledEventUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildScheduledEventUpdate.html",
    "title": "Interface IGuildScheduledEventUpdate | Remora.Discord",
    "keywords": "Interface IGuildScheduledEventUpdate Sent when a scheduled event is updated. Inherited Members IGuildScheduledEvent.ID IGuildScheduledEvent.GuildID IGuildScheduledEvent.ChannelID IGuildScheduledEvent.CreatorID IGuildScheduledEvent.Name IGuildScheduledEvent.Description IGuildScheduledEvent.ScheduledStartTime IGuildScheduledEvent.ScheduledEndTime IGuildScheduledEvent.PrivacyLevel IGuildScheduledEvent.Status IGuildScheduledEvent.EntityType IGuildScheduledEvent.EntityID IGuildScheduledEvent.EntityMetadata IGuildScheduledEvent.Creator IGuildScheduledEvent.UserCount IGuildScheduledEvent.Image Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax public interface IGuildScheduledEventUpdate : IGatewayEvent, IGatewayPayloadData, IGuildScheduledEvent"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildScheduledEventUserAdd.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildScheduledEventUserAdd.html",
    "title": "Interface IGuildScheduledEventUserAdd | Remora.Discord",
    "keywords": "Interface IGuildScheduledEventUserAdd Sent when a user subscribes to a scheduled event. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildScheduledEventUserAdd : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild the event is in. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildScheduledEventID Gets the ID of the event. Declaration Snowflake GuildScheduledEventID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source UserID Gets the ID of the user that subscribed to the event. Declaration Snowflake UserID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildScheduledEventUserRemove.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildScheduledEventUserRemove.html",
    "title": "Interface IGuildScheduledEventUserRemove | Remora.Discord",
    "keywords": "Interface IGuildScheduledEventUserRemove Sent when a user unsubscribes from a scheduled event. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildScheduledEventUserRemove : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild the event is in. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildScheduledEventID Gets the ID of the event. Declaration Snowflake GuildScheduledEventID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source UserID Gets the ID of the user that unsubscribed from the event. Declaration Snowflake UserID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildStickersUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildStickersUpdate.html",
    "title": "Interface IGuildStickersUpdate | Remora.Discord",
    "keywords": "Interface IGuildStickersUpdate Represents a change to the stickers in a guild. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildStickersUpdate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild that the update occurred in. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Stickers Gets the new set of stickers available to the guild. Declaration IReadOnlyList<ISticker> Stickers { get; } Property Value Type Description IReadOnlyList < ISticker >"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IGuildUpdate.html",
    "title": "Interface IGuildUpdate | Remora.Discord",
    "keywords": "Interface IGuildUpdate Represents the update of a guild. Inherited Members IGuild.ID IGuild.Name IGuild.Icon IGuild.Splash IGuild.DiscoverySplash IGuild.IsOwner IGuild.OwnerID IGuild.Permissions IGuild.AFKChannelID IGuild.AFKTimeout IGuild.VerificationLevel IGuild.DefaultMessageNotifications IGuild.ExplicitContentFilter IGuild.Roles IGuild.Emojis IGuild.GuildFeatures IGuild.MFALevel IGuild.ApplicationID IGuild.IsWidgetEnabled IGuild.WidgetChannelID IGuild.SystemChannelID IGuild.SystemChannelFlags IGuild.RulesChannelID IGuild.MaxPresences IGuild.MaxMembers IGuild.VanityUrlCode IGuild.Description IGuild.Banner IGuild.PremiumTier IGuild.PremiumSubscriptionCount IGuild.PreferredLocale IGuild.PublicUpdatesChannelID IGuild.MaxVideoChannelUsers IGuild.ApproximateMemberCount IGuild.ApproximatePresenceCount IGuild.WelcomeScreen IGuild.NSFWLevel IGuild.Stickers IGuild.IsPremiumProgressBarEnabled IGuild.IPartialGuild.ID IGuild.IPartialGuild.Name IGuild.IPartialGuild.Icon IGuild.IPartialGuild.Splash IGuild.IPartialGuild.DiscoverySplash IGuild.IPartialGuild.IsOwner IGuild.IPartialGuild.OwnerID IGuild.IPartialGuild.Permissions IGuild.IPartialGuild.AFKChannelID IGuild.IPartialGuild.AFKTimeout IGuild.IPartialGuild.VerificationLevel IGuild.IPartialGuild.DefaultMessageNotifications IGuild.IPartialGuild.ExplicitContentFilter IGuild.IPartialGuild.Roles IGuild.IPartialGuild.Emojis IGuild.IPartialGuild.GuildFeatures IGuild.IPartialGuild.MFALevel IGuild.IPartialGuild.ApplicationID IGuild.IPartialGuild.IsWidgetEnabled IGuild.IPartialGuild.WidgetChannelID IGuild.IPartialGuild.SystemChannelID IGuild.IPartialGuild.SystemChannelFlags IGuild.IPartialGuild.RulesChannelID IGuild.IPartialGuild.MaxPresences IGuild.IPartialGuild.MaxMembers IGuild.IPartialGuild.VanityUrlCode IGuild.IPartialGuild.Description IGuild.IPartialGuild.Banner IGuild.IPartialGuild.PremiumTier IGuild.IPartialGuild.PremiumSubscriptionCount IGuild.IPartialGuild.PreferredLocale IGuild.IPartialGuild.PublicUpdatesChannelID IGuild.IPartialGuild.MaxVideoChannelUsers IGuild.IPartialGuild.ApproximateMemberCount IGuild.IPartialGuild.ApproximatePresenceCount IGuild.IPartialGuild.WelcomeScreen IGuild.IPartialGuild.NSFWLevel IGuild.IPartialGuild.Stickers IGuild.IPartialGuild.IsPremiumProgressBarEnabled Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildUpdate : IGatewayEvent, IGatewayPayloadData, IGuild, IPartialGuild"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IHello.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IHello.html",
    "title": "Interface IHello | Remora.Discord",
    "keywords": "Interface IHello Represents the greeting event sent by the gateway after connection. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IHello : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source HeartbeatInterval Gets the heartbeat interval (in milliseconds). Declaration TimeSpan HeartbeatInterval { get; } Property Value Type Description TimeSpan"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IIntegrationCreate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IIntegrationCreate.html",
    "title": "Interface IIntegrationCreate | Remora.Discord",
    "keywords": "Interface IIntegrationCreate Represents the creation of an integration. Inherited Members IIntegration.ID IIntegration.Name IIntegration.Type IIntegration.IsEnabled IIntegration.IsSyncing IIntegration.RoleID IIntegration.EnableEmoticons IIntegration.ExpireBehaviour IIntegration.ExpireGracePeriod IIntegration.User IIntegration.Account IIntegration.SyncedAt IIntegration.SubscriberCount IIntegration.IsRevoked IIntegration.Application IIntegration.IPartialIntegration.ID IIntegration.IPartialIntegration.Name IIntegration.IPartialIntegration.Type IIntegration.IPartialIntegration.IsEnabled IIntegration.IPartialIntegration.IsSyncing IIntegration.IPartialIntegration.RoleID IIntegration.IPartialIntegration.EnableEmoticons IIntegration.IPartialIntegration.ExpireBehaviour IIntegration.IPartialIntegration.ExpireGracePeriod IIntegration.IPartialIntegration.User IIntegration.IPartialIntegration.Account IIntegration.IPartialIntegration.SyncedAt IIntegration.IPartialIntegration.SubscriberCount IIntegration.IPartialIntegration.IsRevoked IIntegration.IPartialIntegration.Application Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IIntegrationCreate : IIntegration, IPartialIntegration, IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild the integration was created on. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IIntegrationDelete.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IIntegrationDelete.html",
    "title": "Interface IIntegrationDelete | Remora.Discord",
    "keywords": "Interface IIntegrationDelete Represents the creation of an integration. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IIntegrationDelete : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ApplicationID Gets the ID of the application the integration was associated with. Declaration Optional<Snowflake> ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildID Gets the ID of the guild the integration was deleted on. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ID Gets the ID of the deleted integration. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IIntegrationUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IIntegrationUpdate.html",
    "title": "Interface IIntegrationUpdate | Remora.Discord",
    "keywords": "Interface IIntegrationUpdate Represents the creation of an integration. Inherited Members IIntegration.ID IIntegration.Name IIntegration.Type IIntegration.IsEnabled IIntegration.IsSyncing IIntegration.RoleID IIntegration.EnableEmoticons IIntegration.ExpireBehaviour IIntegration.ExpireGracePeriod IIntegration.User IIntegration.Account IIntegration.SyncedAt IIntegration.SubscriberCount IIntegration.IsRevoked IIntegration.Application IIntegration.IPartialIntegration.ID IIntegration.IPartialIntegration.Name IIntegration.IPartialIntegration.Type IIntegration.IPartialIntegration.IsEnabled IIntegration.IPartialIntegration.IsSyncing IIntegration.IPartialIntegration.RoleID IIntegration.IPartialIntegration.EnableEmoticons IIntegration.IPartialIntegration.ExpireBehaviour IIntegration.IPartialIntegration.ExpireGracePeriod IIntegration.IPartialIntegration.User IIntegration.IPartialIntegration.Account IIntegration.IPartialIntegration.SyncedAt IIntegration.IPartialIntegration.SubscriberCount IIntegration.IPartialIntegration.IsRevoked IIntegration.IPartialIntegration.Application Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IIntegrationUpdate : IIntegration, IPartialIntegration, IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source GuildID Gets the ID of the guild the integration was updated on. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IInteractionCreate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IInteractionCreate.html",
    "title": "Interface IInteractionCreate | Remora.Discord",
    "keywords": "Interface IInteractionCreate Represents a user-invoked slash command. Inherited Members IInteraction.ID IInteraction.ApplicationID IInteraction.Type IInteraction.Data IInteraction.GuildID IInteraction.ChannelID IInteraction.Member IInteraction.User IInteraction.Token IInteraction.Version IInteraction.Message IInteraction.Locale IInteraction.GuildLocale Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInteractionCreate : IInteraction, IGatewayEvent, IGatewayPayloadData Extension Methods InteractionCreateExtensions.CreateContext(IInteractionCreate)"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IInvalidSession.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IInvalidSession.html",
    "title": "Interface IInvalidSession | Remora.Discord",
    "keywords": "Interface IInvalidSession Represents a reconnection event from the gateway. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInvalidSession : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source IsResumable Gets a value indicating whether the session is resumable. Declaration bool IsResumable { get; } Property Value Type Description Boolean"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IInviteCreate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IInviteCreate.html",
    "title": "Interface IInviteCreate | Remora.Discord",
    "keywords": "Interface IInviteCreate Represents the creation of an invite. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInviteCreate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID of the channel the invite is for. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Code Gets the unique code of the invite. Declaration string Code { get; } Property Value Type Description String | Improve this Doc View Source CreatedAt Gets the time the invite was created. Declaration DateTimeOffset CreatedAt { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source GuildID Gets the ID of the guild the invite is for. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Inviter Gets the user that created the invite. Declaration Optional<IUser> Inviter { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source IsTemporary Gets a value indicating whether the invite is temporary (invited users will be kicked on disconnect unless they're assigned to a role). Declaration bool IsTemporary { get; } Property Value Type Description Boolean | Improve this Doc View Source MaxAge Gets the time (in seconds) the invite is valid for. Declaration TimeSpan MaxAge { get; } Property Value Type Description TimeSpan | Improve this Doc View Source MaxUses Gets the maximum number of times the invite can be used. Declaration int MaxUses { get; } Property Value Type Description Int32 | Improve this Doc View Source TargetApplication Gets the embedded application this invite is for. Declaration Optional<IPartialApplication> TargetApplication { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source TargetType Gets the type of user target for this invite. Declaration Optional<InviteTarget> TargetType { get; } Property Value Type Description Remora.Rest.Core.Optional < InviteTarget > | Improve this Doc View Source TargetUser Gets the target user for this invite. Declaration Optional<IPartialUser> TargetUser { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialUser > | Improve this Doc View Source Uses Gets how many times the invite has been used. Always zero. Declaration int Uses { get; } Property Value Type Description Int32"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IInviteDelete.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IInviteDelete.html",
    "title": "Interface IInviteDelete | Remora.Discord",
    "keywords": "Interface IInviteDelete Represents the deletion of an invite link. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInviteDelete : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID fo the channel the invite is for. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Code Gets the unique invite code. Declaration string Code { get; } Property Value Type Description String | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake >"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageCreate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageCreate.html",
    "title": "Interface IMessageCreate | Remora.Discord",
    "keywords": "Interface IMessageCreate Represents the creation of a message. Inherited Members IMessage.ID IMessage.ChannelID IMessage.GuildID IMessage.Author IMessage.Member IMessage.Content IMessage.Timestamp IMessage.EditedTimestamp IMessage.IsTTS IMessage.MentionsEveryone IMessage.Mentions IMessage.MentionedRoles IMessage.MentionedChannels IMessage.Attachments IMessage.Embeds IMessage.Reactions IMessage.Nonce IMessage.IsPinned IMessage.WebhookID IMessage.Type IMessage.Activity IMessage.Application IMessage.ApplicationID IMessage.MessageReference IMessage.Flags IMessage.ReferencedMessage IMessage.Interaction IMessage.Thread IMessage.Components IMessage.StickerItems IMessage.IPartialMessage.ID IMessage.IPartialMessage.ChannelID IMessage.IPartialMessage.GuildID IMessage.IPartialMessage.Author IMessage.IPartialMessage.Member IMessage.IPartialMessage.Content IMessage.IPartialMessage.Timestamp IMessage.IPartialMessage.EditedTimestamp IMessage.IPartialMessage.IsTTS IMessage.IPartialMessage.MentionsEveryone IMessage.IPartialMessage.Mentions IMessage.IPartialMessage.MentionedRoles IMessage.IPartialMessage.MentionedChannels IMessage.IPartialMessage.Attachments IMessage.IPartialMessage.Embeds IMessage.IPartialMessage.Reactions IMessage.IPartialMessage.Nonce IMessage.IPartialMessage.IsPinned IMessage.IPartialMessage.WebhookID IMessage.IPartialMessage.Type IMessage.IPartialMessage.Activity IMessage.IPartialMessage.Application IMessage.IPartialMessage.ApplicationID IMessage.IPartialMessage.MessageReference IMessage.IPartialMessage.Flags IMessage.IPartialMessage.ReferencedMessage IMessage.IPartialMessage.Interaction IMessage.IPartialMessage.Thread IMessage.IPartialMessage.Components IMessage.IPartialMessage.StickerItems Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageCreate : IGatewayEvent, IGatewayPayloadData, IMessage, IPartialMessage Extension Methods MessageCreateExtensions.CreateContext(IMessageCreate)"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageDelete.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageDelete.html",
    "title": "Interface IMessageDelete | Remora.Discord",
    "keywords": "Interface IMessageDelete Represents the deletion of a message. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageDelete : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID of the channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Gets the ID of the message. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageDeleteBulk.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageDeleteBulk.html",
    "title": "Interface IMessageDeleteBulk | Remora.Discord",
    "keywords": "Interface IMessageDeleteBulk Represents a bulk deletion of a set of messages. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageDeleteBulk : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID of the channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IDs Gets the IDs of the removed messages. Declaration IReadOnlyList<Snowflake> IDs { get; } Property Value Type Description IReadOnlyList < Remora.Rest.Core.Snowflake >"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageReactionAdd.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageReactionAdd.html",
    "title": "Interface IMessageReactionAdd | Remora.Discord",
    "keywords": "Interface IMessageReactionAdd Represents the addition of a reaction to a message. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageReactionAdd : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID of the channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Emoji Gets the emoji. Declaration IPartialEmoji Emoji { get; } Property Value Type Description IPartialEmoji | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Member Gets the guild member information. Declaration Optional<IGuildMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source MessageID Gets the ID of the message. Declaration Snowflake MessageID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source UserID Gets the ID of the user. Declaration Snowflake UserID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageReactionRemove.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageReactionRemove.html",
    "title": "Interface IMessageReactionRemove | Remora.Discord",
    "keywords": "Interface IMessageReactionRemove Represents the removal of a reaction from a message. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageReactionRemove : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID of the channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Emoji Gets the emoji. Declaration IPartialEmoji Emoji { get; } Property Value Type Description IPartialEmoji | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source MessageID Gets the ID of the message. Declaration Snowflake MessageID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source UserID Gets the ID of the user. Declaration Snowflake UserID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageReactionRemoveAll.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageReactionRemoveAll.html",
    "title": "Interface IMessageReactionRemoveAll | Remora.Discord",
    "keywords": "Interface IMessageReactionRemoveAll Represents the removal of all reaction from a message. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageReactionRemoveAll : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID of the channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source MessageID Gets the ID of the message. Declaration Snowflake MessageID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageReactionRemoveEmoji.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageReactionRemoveEmoji.html",
    "title": "Interface IMessageReactionRemoveEmoji | Remora.Discord",
    "keywords": "Interface IMessageReactionRemoveEmoji Represents the removal of all instances of a given emoji from a message. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageReactionRemoveEmoji : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID of the channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Emoji Gets the emoji. Declaration IPartialEmoji Emoji { get; } Property Value Type Description IPartialEmoji | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source MessageID Gets the ID of the message. Declaration Snowflake MessageID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IMessageUpdate.html",
    "title": "Interface IMessageUpdate | Remora.Discord",
    "keywords": "Interface IMessageUpdate Represents the creation of a message. Inherited Members IPartialMessage.ID IPartialMessage.ChannelID IPartialMessage.GuildID IPartialMessage.Author IPartialMessage.Member IPartialMessage.Content IPartialMessage.Timestamp IPartialMessage.EditedTimestamp IPartialMessage.IsTTS IPartialMessage.MentionsEveryone IPartialMessage.Mentions IPartialMessage.MentionedRoles IPartialMessage.MentionedChannels IPartialMessage.Attachments IPartialMessage.Embeds IPartialMessage.Reactions IPartialMessage.Nonce IPartialMessage.IsPinned IPartialMessage.WebhookID IPartialMessage.Type IPartialMessage.Activity IPartialMessage.Application IPartialMessage.ApplicationID IPartialMessage.MessageReference IPartialMessage.Flags IPartialMessage.ReferencedMessage IPartialMessage.Interaction IPartialMessage.Thread IPartialMessage.Components IPartialMessage.StickerItems Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageUpdate : IPartialMessage, IGatewayEvent, IGatewayPayloadData Extension Methods MessageUpdateExtensions.CreateContext(IMessageUpdate)"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IPresenceUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IPresenceUpdate.html",
    "title": "Interface IPresenceUpdate | Remora.Discord",
    "keywords": "Interface IPresenceUpdate Represents the update of a user's presence. Inherited Members IPresence.User IPresence.GuildID IPresence.Status IPresence.Activities IPresence.ClientStatus IPresence.IPartialPresence.User IPresence.IPartialPresence.GuildID IPresence.IPartialPresence.Status IPresence.IPartialPresence.Activities IPresence.IPartialPresence.ClientStatus Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPresenceUpdate : IGatewayEvent, IGatewayPayloadData, IPresence, IPartialPresence"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IReady.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IReady.html",
    "title": "Interface IReady | Remora.Discord",
    "keywords": "Interface IReady Represents initial gateway state information. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IReady : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source Application Gets the OAuth2 application associated with this session. Declaration IPartialApplication Application { get; } Property Value Type Description IPartialApplication | Improve this Doc View Source Guilds Gets a list of guilds the user is in. Declaration IReadOnlyList<IUnavailableGuild> Guilds { get; } Property Value Type Description IReadOnlyList < IUnavailableGuild > | Improve this Doc View Source SessionID Gets the session ID. Used for resuming. Declaration string SessionID { get; } Property Value Type Description String | Improve this Doc View Source Shard Gets the shard information associated with this session. Declaration Optional<IShardIdentification> Shard { get; } Property Value Type Description Remora.Rest.Core.Optional < IShardIdentification > | Improve this Doc View Source User Gets information about the current user. Declaration IUser User { get; } Property Value Type Description IUser | Improve this Doc View Source Version Gets the gateway version. Declaration int Version { get; } Property Value Type Description Int32"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IReconnect.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IReconnect.html",
    "title": "Interface IReconnect | Remora.Discord",
    "keywords": "Interface IReconnect Represents a reconnection request. This interface defines no data. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IReconnect : IGatewayEvent, IGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IResumed.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IResumed.html",
    "title": "Interface IResumed | Remora.Discord",
    "keywords": "Interface IResumed Represents an event that marks the completion of a session resumption. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IResumed : IGatewayEvent, IGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IStageInstanceCreate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IStageInstanceCreate.html",
    "title": "Interface IStageInstanceCreate | Remora.Discord",
    "keywords": "Interface IStageInstanceCreate Represents the creation of a stage instance. Inherited Members IStageInstance.ID IStageInstance.GuildID IStageInstance.ChannelID IStageInstance.Topic IStageInstance.PrivacyLevel IStageInstance.IsDiscoveryDisabled IStageInstance.GuildScheduledEventID Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IStageInstanceCreate : IStageInstance, IGatewayEvent, IGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IStageInstanceDelete.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IStageInstanceDelete.html",
    "title": "Interface IStageInstanceDelete | Remora.Discord",
    "keywords": "Interface IStageInstanceDelete Represents a deletion of a stage instance. Inherited Members IStageInstance.ID IStageInstance.GuildID IStageInstance.ChannelID IStageInstance.Topic IStageInstance.PrivacyLevel IStageInstance.IsDiscoveryDisabled IStageInstance.GuildScheduledEventID Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IStageInstanceDelete : IStageInstance, IGatewayEvent, IGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IStageInstanceUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IStageInstanceUpdate.html",
    "title": "Interface IStageInstanceUpdate | Remora.Discord",
    "keywords": "Interface IStageInstanceUpdate Represents an update of a stage instance. Inherited Members IStageInstance.ID IStageInstance.GuildID IStageInstance.ChannelID IStageInstance.Topic IStageInstance.PrivacyLevel IStageInstance.IsDiscoveryDisabled IStageInstance.GuildScheduledEventID Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IStageInstanceUpdate : IStageInstance, IGatewayEvent, IGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadCreate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadCreate.html",
    "title": "Interface IThreadCreate | Remora.Discord",
    "keywords": "Interface IThreadCreate Represents the creation of a channel. Inherited Members IChannel.ID IChannel.Type IChannel.GuildID IChannel.Position IChannel.PermissionOverwrites IChannel.Name IChannel.Topic IChannel.IsNsfw IChannel.LastMessageID IChannel.Bitrate IChannel.UserLimit IChannel.RateLimitPerUser IChannel.Recipients IChannel.Icon IChannel.OwnerID IChannel.ApplicationID IChannel.ParentID IChannel.LastPinTimestamp IChannel.RTCRegion IChannel.VideoQualityMode IChannel.MessageCount IChannel.MemberCount IChannel.ThreadMetadata IChannel.Member IChannel.DefaultAutoArchiveDuration IChannel.Permissions IChannel.IPartialChannel.ID IChannel.IPartialChannel.Type IChannel.IPartialChannel.GuildID IChannel.IPartialChannel.Position IChannel.IPartialChannel.PermissionOverwrites IChannel.IPartialChannel.Name IChannel.IPartialChannel.Topic IChannel.IPartialChannel.IsNsfw IChannel.IPartialChannel.LastMessageID IChannel.IPartialChannel.Bitrate IChannel.IPartialChannel.UserLimit IChannel.IPartialChannel.RateLimitPerUser IChannel.IPartialChannel.Recipients IChannel.IPartialChannel.Icon IChannel.IPartialChannel.OwnerID IChannel.IPartialChannel.ApplicationID IChannel.IPartialChannel.ParentID IChannel.IPartialChannel.LastPinTimestamp IChannel.IPartialChannel.RTCRegion IChannel.IPartialChannel.VideoQualityMode IChannel.IPartialChannel.MessageCount IChannel.IPartialChannel.MemberCount IChannel.IPartialChannel.ThreadMetadata IChannel.IPartialChannel.Member IChannel.IPartialChannel.DefaultAutoArchiveDuration IChannel.IPartialChannel.Permissions Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IThreadCreate : IGatewayEvent, IGatewayPayloadData, IChannel, IPartialChannel Properties | Improve this Doc View Source IsNewlyCreated Gets a value indicating whether the thread was newly created. Declaration bool IsNewlyCreated { get; } Property Value Type Description Boolean"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadDelete.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadDelete.html",
    "title": "Interface IThreadDelete | Remora.Discord",
    "keywords": "Interface IThreadDelete Represents the creation of a channel. Inherited Members IPartialChannel.ID IPartialChannel.Type IPartialChannel.GuildID IPartialChannel.Position IPartialChannel.PermissionOverwrites IPartialChannel.Name IPartialChannel.Topic IPartialChannel.IsNsfw IPartialChannel.LastMessageID IPartialChannel.Bitrate IPartialChannel.UserLimit IPartialChannel.RateLimitPerUser IPartialChannel.Recipients IPartialChannel.Icon IPartialChannel.OwnerID IPartialChannel.ApplicationID IPartialChannel.ParentID IPartialChannel.LastPinTimestamp IPartialChannel.RTCRegion IPartialChannel.VideoQualityMode IPartialChannel.MessageCount IPartialChannel.MemberCount IPartialChannel.ThreadMetadata IPartialChannel.Member IPartialChannel.DefaultAutoArchiveDuration IPartialChannel.Permissions Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IThreadDelete : IGatewayEvent, IGatewayPayloadData, IPartialChannel"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadListSync.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadListSync.html",
    "title": "Interface IThreadListSync | Remora.Discord",
    "keywords": "Interface IThreadListSync Sent when the current user gains access to a thread channel. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IThreadListSync : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelIDs Gets the parent channel IDs whose threads are being synced. Declaration Optional<IReadOnlyList<Snowflake>> ChannelIDs { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source GuildID Gets the ID of the guild that the thread is synchronizing on. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Members Gets all thread member objects from the synchronized threads. Declaration IReadOnlyList<IThreadMember> Members { get; } Property Value Type Description IReadOnlyList < IThreadMember > | Improve this Doc View Source Threads Gets all active threads that the current user can access. Declaration IReadOnlyList<IChannel> Threads { get; } Property Value Type Description IReadOnlyList < IChannel >"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadMembersUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadMembersUpdate.html",
    "title": "Interface IThreadMembersUpdate | Remora.Discord",
    "keywords": "Interface IThreadMembersUpdate Represents an update to the member list of a thread. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IThreadMembersUpdate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source AddedMembers Gets the users who were added to the thread. Declaration Optional<IReadOnlyList<IThreadMember>> AddedMembers { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IThreadMember >> | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ID Gets the ID of the thread. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source MemberCount Gets the approximate member count of members in the thread. Stops counting after 50. Declaration int MemberCount { get; } Property Value Type Description Int32 | Improve this Doc View Source RemovedMemberIDs Gets the IDs of the users who were removed from the thread. Declaration Optional<IReadOnlyList<Snowflake>> RemovedMemberIDs { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >>"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadMemberUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadMemberUpdate.html",
    "title": "Interface IThreadMemberUpdate | Remora.Discord",
    "keywords": "Interface IThreadMemberUpdate Represents an update to the current user's thread member object. Inherited Members IThreadMember.ID IThreadMember.UserID IThreadMember.JoinTimestamp IThreadMember.Flags IThreadMember.Member IThreadMember.Presence Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IThreadMemberUpdate : IGatewayEvent, IGatewayPayloadData, IThreadMember Properties | Improve this Doc View Source GuildID Gets the ID of the guild the thread member was updated in. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IThreadUpdate.html",
    "title": "Interface IThreadUpdate | Remora.Discord",
    "keywords": "Interface IThreadUpdate Represents the creation of a channel. Inherited Members IChannel.ID IChannel.Type IChannel.GuildID IChannel.Position IChannel.PermissionOverwrites IChannel.Name IChannel.Topic IChannel.IsNsfw IChannel.LastMessageID IChannel.Bitrate IChannel.UserLimit IChannel.RateLimitPerUser IChannel.Recipients IChannel.Icon IChannel.OwnerID IChannel.ApplicationID IChannel.ParentID IChannel.LastPinTimestamp IChannel.RTCRegion IChannel.VideoQualityMode IChannel.MessageCount IChannel.MemberCount IChannel.ThreadMetadata IChannel.Member IChannel.DefaultAutoArchiveDuration IChannel.Permissions IChannel.IPartialChannel.ID IChannel.IPartialChannel.Type IChannel.IPartialChannel.GuildID IChannel.IPartialChannel.Position IChannel.IPartialChannel.PermissionOverwrites IChannel.IPartialChannel.Name IChannel.IPartialChannel.Topic IChannel.IPartialChannel.IsNsfw IChannel.IPartialChannel.LastMessageID IChannel.IPartialChannel.Bitrate IChannel.IPartialChannel.UserLimit IChannel.IPartialChannel.RateLimitPerUser IChannel.IPartialChannel.Recipients IChannel.IPartialChannel.Icon IChannel.IPartialChannel.OwnerID IChannel.IPartialChannel.ApplicationID IChannel.IPartialChannel.ParentID IChannel.IPartialChannel.LastPinTimestamp IChannel.IPartialChannel.RTCRegion IChannel.IPartialChannel.VideoQualityMode IChannel.IPartialChannel.MessageCount IChannel.IPartialChannel.MemberCount IChannel.IPartialChannel.ThreadMetadata IChannel.IPartialChannel.Member IChannel.IPartialChannel.DefaultAutoArchiveDuration IChannel.IPartialChannel.Permissions Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IThreadUpdate : IGatewayEvent, IGatewayPayloadData, IChannel, IPartialChannel"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.ITypingStart.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.ITypingStart.html",
    "title": "Interface ITypingStart | Remora.Discord",
    "keywords": "Interface ITypingStart Sent when a user starts typing in a channel. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface ITypingStart : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID of the channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Member Gets the member who started typing (if it happened in a guild). Declaration Optional<IGuildMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source Timestamp Gets the unix time (in seconds) when the user started typing. Declaration DateTimeOffset Timestamp { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source UserID Gets the ID of the user. Declaration Snowflake UserID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IUnknownEvent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IUnknownEvent.html",
    "title": "Interface IUnknownEvent | Remora.Discord",
    "keywords": "Interface IUnknownEvent Represents an unknown event. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IUnknownEvent : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source Data Gets the JSON string that represents the unknown event. Declaration string Data { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IUserUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IUserUpdate.html",
    "title": "Interface IUserUpdate | Remora.Discord",
    "keywords": "Interface IUserUpdate Represents an update to a user. Inherited Members IUser.ID IUser.Username IUser.Discriminator IUser.Avatar IUser.IsBot IUser.IsSystem IUser.IsMFAEnabled IUser.Banner IUser.AccentColour IUser.Locale IUser.IsVerified IUser.Email IUser.Flags IUser.PremiumType IUser.PublicFlags IUser.IPartialUser.ID IUser.IPartialUser.Username IUser.IPartialUser.Discriminator IUser.IPartialUser.Avatar IUser.IPartialUser.IsBot IUser.IPartialUser.IsSystem IUser.IPartialUser.IsMFAEnabled IUser.IPartialUser.Banner IUser.IPartialUser.AccentColour IUser.IPartialUser.Locale IUser.IPartialUser.IsVerified IUser.IPartialUser.Email IUser.IPartialUser.Flags IUser.IPartialUser.PremiumType IUser.IPartialUser.PublicFlags Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IUserUpdate : IGatewayEvent, IGatewayPayloadData, IUser, IPartialUser"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IVoiceServerUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IVoiceServerUpdate.html",
    "title": "Interface IVoiceServerUpdate | Remora.Discord",
    "keywords": "Interface IVoiceServerUpdate Represents an update to a voice server of a guild. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceServerUpdate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source Endpoint Gets the voice server host. Declaration string Endpoint { get; } Property Value Type Description String | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Token Gets the voice server token. Declaration string Token { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IVoiceStateUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IVoiceStateUpdate.html",
    "title": "Interface IVoiceStateUpdate | Remora.Discord",
    "keywords": "Interface IVoiceStateUpdate Represents an update to a user's voice state. Inherited Members IVoiceState.GuildID IVoiceState.ChannelID IVoiceState.UserID IVoiceState.Member IVoiceState.SessionID IVoiceState.IsDeafened IVoiceState.IsMuted IVoiceState.IsSelfDeafened IVoiceState.IsSelfMuted IVoiceState.IsStreaming IVoiceState.IsVideoEnabled IVoiceState.IsSuppressed IVoiceState.RequestToSpeakTimestamp IVoiceState.IPartialVoiceState.GuildID IVoiceState.IPartialVoiceState.ChannelID IVoiceState.IPartialVoiceState.UserID IVoiceState.IPartialVoiceState.Member IVoiceState.IPartialVoiceState.SessionID IVoiceState.IPartialVoiceState.IsDeafened IVoiceState.IPartialVoiceState.IsMuted IVoiceState.IPartialVoiceState.IsSelfDeafened IVoiceState.IPartialVoiceState.IsSelfMuted IVoiceState.IPartialVoiceState.IsStreaming IVoiceState.IPartialVoiceState.IsVideoEnabled IVoiceState.IPartialVoiceState.IsSuppressed IVoiceState.IPartialVoiceState.RequestToSpeakTimestamp Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceStateUpdate : IGatewayEvent, IGatewayPayloadData, IVoiceState, IPartialVoiceState"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.Events.IWebhooksUpdate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.Events.IWebhooksUpdate.html",
    "title": "Interface IWebhooksUpdate | Remora.Discord",
    "keywords": "Interface IWebhooksUpdate Represents an update to a webhook in a channel. Namespace : Remora.Discord.API.Abstractions.Gateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IWebhooksUpdate : IGatewayEvent, IGatewayPayloadData Properties | Improve this Doc View Source ChannelID Gets the ID of the channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.GatewayCloseStatus.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.GatewayCloseStatus.html",
    "title": "Enum GatewayCloseStatus | Remora.Discord",
    "keywords": "Enum GatewayCloseStatus Enumerates the various close codes that the Discord gateway can send. Namespace : Remora.Discord.API.Abstractions.Gateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum GatewayCloseStatus Fields Name Description AlreadyAuthenticated An identify payload has already been sent. AuthenticationFailed The authentication token sent in the identify payload was invalid. DecodeError An invalid payload was sent to the gateway. DisallowedIntent A disallowed set of gateway intents were sent. InvalidAPIVersion An invalid API version was sent to the gateway. InvalidIntents An invalid set of gateway intents were sent. InvalidSequence An invalid sequence number was provided when resuming. Reconnect and start a new session. InvalidShard An invalid shard was sent when identifying. NotAuthenticated A payload was sent before identifying. RateLimited You are being rate limited. Wait a while and reconnect. SessionTimedOut Your session timed out. Reconnect and start a new session. ShardingRequired Sharding is required by this session. UnknownError Unknown error. Attempt to reconnect. UnknownOpcode An invalid opcode or opcode/payload combination was sent to the gateway."
  },
  "api/Remora.Discord.API.Abstractions.Gateway.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.html",
    "title": "Namespace Remora.Discord.API.Abstractions.Gateway | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions.Gateway Interfaces IEventPayload Represents an event payload. IGatewayPayloadData Represents a marker interface for gateway payload data. IPayload Marker interface for payload classes. IPayload<TData> Marker interface for payload classes. Enums GatewayCloseStatus Enumerates the various close codes that the Discord gateway can send. OperationCode Enumerates operation codes sent to or received by the Discord gateway in payloads."
  },
  "api/Remora.Discord.API.Abstractions.Gateway.IEventPayload.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.IEventPayload.html",
    "title": "Interface IEventPayload | Remora.Discord",
    "keywords": "Interface IEventPayload Represents an event payload. Namespace : Remora.Discord.API.Abstractions.Gateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IEventPayload : IPayload Properties | Improve this Doc View Source EventName Gets the name of the event. Declaration string EventName { get; } Property Value Type Description String | Improve this Doc View Source OperationCode Gets the operation code of the event. Declaration OperationCode OperationCode { get; } Property Value Type Description OperationCode | Improve this Doc View Source SequenceNumber Gets the sequence number of the event. Declaration int SequenceNumber { get; } Property Value Type Description Int32"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.IGatewayPayloadData.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.IGatewayPayloadData.html",
    "title": "Interface IGatewayPayloadData | Remora.Discord",
    "keywords": "Interface IGatewayPayloadData Represents a marker interface for gateway payload data. Namespace : Remora.Discord.API.Abstractions.Gateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.IPayload.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.IPayload.html",
    "title": "Interface IPayload | Remora.Discord",
    "keywords": "Interface IPayload Marker interface for payload classes. Namespace : Remora.Discord.API.Abstractions.Gateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPayload"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.IPayload-1.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.IPayload-1.html",
    "title": "Interface IPayload<TData> | Remora.Discord",
    "keywords": "Interface IPayload<TData> Marker interface for payload classes. Namespace : Remora.Discord.API.Abstractions.Gateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPayload<out TData> : IPayload Type Parameters Name Description TData The data contained in the payload. Properties | Improve this Doc View Source Data Gets the data contained in the payload. Declaration TData Data { get; } Property Value Type Description TData"
  },
  "api/Remora.Discord.API.Abstractions.Gateway.OperationCode.html": {
    "href": "api/Remora.Discord.API.Abstractions.Gateway.OperationCode.html",
    "title": "Enum OperationCode | Remora.Discord",
    "keywords": "Enum OperationCode Enumerates operation codes sent to or received by the Discord gateway in payloads. Namespace : Remora.Discord.API.Abstractions.Gateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum OperationCode Fields Name Description Dispatch An event was dispatched. Heartbeat Fired periodically by the client to keep the connection alive. HeartbeatAcknowledge Sent in response to receiving a heartbeat to acknowledge that it has been received. Hello Sent immediately after connecting. Contains the heartbeat interval to use. Identify Starts a new session during the initial handshake. InvalidSession The session has been invalidated. You should reconnect and identify/resume accordingly. PresenceUpdate Update the client's presence. Reconnect You should attempt to reconnect and resume immediately. RequestGuildMembers Request information about offline guild members in a large guild. Resume Resume a previous session that was disconnected. Unknown This opcode is unknown. VoiceStateUpdate Used to join/leave or move between voice channels."
  },
  "api/Remora.Discord.API.Abstractions.html": {
    "href": "api/Remora.Discord.API.Abstractions.html",
    "title": "Namespace Remora.Discord.API.Abstractions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions Enums DiscordAPIVersion Enumerates various released versions of the Discord API."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ActivityFlags.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ActivityFlags.html",
    "title": "Enum ActivityFlags | Remora.Discord",
    "keywords": "Enum ActivityFlags Enumerates the flags an activity can have. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] [Flags] public enum ActivityFlags Fields Name Description Embedded The activity is embedded. Instance The activity has a specific instance. Join The activity can be joined. JoinRequest The activity can be sent a join request. PartyPrivacyFriends The activity is restricted to friends only. PartyPrivacyVoiceChannel The activity is restricted to members of the same voice channel. Play The activity is currently ongoing? Discord's documentation is unclear. Spectate The activity can be spectated. Sync The activity is synchronized? Discord's documentation is unclear."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ActivityType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ActivityType.html",
    "title": "Enum ActivityType | Remora.Discord",
    "keywords": "Enum ActivityType Enumerates the activity types supported by Discord. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum ActivityType Fields Name Description Competing The user is competing in something. Custom The user has a custom status. Game The user is playing a game. Listening The user is listening to music. Streaming The user is streaming video. Watching The user is watching a video."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ApplicationCommandOptionType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ApplicationCommandOptionType.html",
    "title": "Enum ApplicationCommandOptionType | Remora.Discord",
    "keywords": "Enum ApplicationCommandOptionType Enumerates various option types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum ApplicationCommandOptionType Fields Name Description Attachment The option is an attachment (an image, document, etc). Boolean The option is a boolean. Channel The option is a channel reference. Integer The option is an integer. Mentionable The option is some type of mentionable object (member, role, channel, etc). Number The option is a floating-point number (double precision). Role The option is a role reference. String The option is a string. SubCommand The option is not a value; rather, it is a subcommand. SubCommandGroup The option is not a value; rather, it is a subgroup. User The option is a user reference."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ApplicationCommandPermissionType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ApplicationCommandPermissionType.html",
    "title": "Enum ApplicationCommandPermissionType | Remora.Discord",
    "keywords": "Enum ApplicationCommandPermissionType Enumerates application permission types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum ApplicationCommandPermissionType Fields Name Description Channel The permission applies to a channel. Role The permission applies to a role. User The permission applies to a user."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ApplicationCommandType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ApplicationCommandType.html",
    "title": "Enum ApplicationCommandType | Remora.Discord",
    "keywords": "Enum ApplicationCommandType Enumerates various application command types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum ApplicationCommandType Fields Name Description ChatInput Slash commands; a text-based command that shows up when a user types /. Message A UI-based command that shows up when you right click or tap on a messages. User A UI-based command that shows up when you right click or tap on a user."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ApplicationFlags.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ApplicationFlags.html",
    "title": "Enum ApplicationFlags | Remora.Discord",
    "keywords": "Enum ApplicationFlags Enumerates various application flags. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] [Flags] public enum ApplicationFlags Fields Name Description Embedded The application is embedded. GatewayGuildMembers The application is allowed to receive guild members over the gateway. GatewayGuildMembersLimited The application is allowed to receive limited guild members over the gateway. GatewayMessageContent The application has access to message contents over the gateway. GatewayMessageContentLimited The application's access to message contents over the gateway is limited. GatewayPresence The application is allowed to receive presence information over the gateway. GatewayPresenceLimited The application is allowed to receive limited presence information over the gateway. VerificationPendingGuildLimit The application is currently pending verification and has hit the guild limit."
  },
  "api/Remora.Discord.API.Abstractions.Objects.AuditLogEvent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.AuditLogEvent.html",
    "title": "Enum AuditLogEvent | Remora.Discord",
    "keywords": "Enum AuditLogEvent Enumerates various possible audit log events. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum AuditLogEvent Fields Name Description ApplicationCommandPermissionUpdate The permissions for an application command were updated. BotAdd A bot was added to the guild. ChannelCreate A channel was created. ChannelDelete A channel was deleted. ChannelOverwriteCreate A channel permission overwrite was created. ChannelOverwriteDelete A channel permission overwrite was deleted. ChannelOverwriteUpdate A channel permission overwrite was edited. ChannelUpdate A channel was edited. EmojiCreate An emoji was created. EmojiDelete An emoji was deleted. EmojiUpdate An emoji was edited. GuildScheduledEventCreate A scheduled guild event was created. GuildScheduledEventDelete A scheduled guild event was deleted. GuildScheduledEventUpdate A scheduled guild event was updated. GuildUpdate The guild information was updated. IntegrationCreate An integration was created. IntegrationDelete An integration was deleted. IntegrationUpdate An integration was edited. InviteCreate An invite code was created. InviteDelete An invite code was deleted. InviteUpdate An invite code was edited. MemberBanAdd A member was banned. MemberBanRemove A member was unbanned. MemberDisconnect A member disconnected. MemberKick A member was kicked. MemberMove A member moved. MemberPrune The member list was pruned. MemberRoleUpdate A member's roles were updated. MemberUpdate A member was edited. MessageBulkDelete A number of messages were bulk deleted. MessageDelete A message was deleted. MessagePin A message was pinned. MessageUnpin A message was unpinned. RoleCreate A role was created. RoleDelete A role was deleted. RoleUpdate A role was edited. StageInstanceCreate A stage instance was created. StageInstanceDelete A stage instance was deleted. StageInstanceUpdate A stage instance was updated. StickerCreate A sticker was created. StickerDelete A sticker was deleted. StickerUpdate A sticker was updated. ThreadCreate A thread was created. ThreadDelete A thread was deleted. ThreadUpdate A thread was updated. WebhookCreate A webhook was created. WebhookDelete A webhook was deleted. WebhookUpdate A webhook was edited."
  },
  "api/Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration.html",
    "title": "Enum AutoArchiveDuration | Remora.Discord",
    "keywords": "Enum AutoArchiveDuration Enumerates various recognized auto-archival durations. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum AutoArchiveDuration Fields Name Description Day Threads will be archived after one day. Hour Threads will be archived after one hour. ThreeDays Threads will be archived after three days. Week Threads will be archived after one week. Extension Methods AutoArchiveDurationExtensions.ToTimeSpan()"
  },
  "api/Remora.Discord.API.Abstractions.Objects.ButtonComponentStyle.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ButtonComponentStyle.html",
    "title": "Enum ButtonComponentStyle | Remora.Discord",
    "keywords": "Enum ButtonComponentStyle Enumerates various button styles. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum ButtonComponentStyle Fields Name Description Danger A red button, indicating rejection or danger. Link A grey button with a link. Primary A standard-looking blurple button. Secondary A grey, incognito button. Success A green button, indicating confirmation or success."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ChannelFlags.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ChannelFlags.html",
    "title": "Enum ChannelFlags | Remora.Discord",
    "keywords": "Enum ChannelFlags Enumerates various channel flags. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] [Flags] public enum ChannelFlags Fields Name Description Pinned The thread is pinned to the top of its parent forum channel."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ChannelType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ChannelType.html",
    "title": "Enum ChannelType | Remora.Discord",
    "keywords": "Enum ChannelType Enumerates various channel types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum ChannelType Fields Name Description DM A direct message between two users. GroupDM A direct message between three or more users. GuildCategory An organizational category that contains up to 50 channels. GuildDirectory A channel in a student hub that contains a list of other guilds. GuildNews A channel that users can follow and crosspost into their own servers. GuildNewsThread A temporary sub-channel within a GuildNews channel. GuildPrivateThread A temporary sub-channel within a GuildText channel that is only viewable by those invited, and those with the ManageThreads permission. GuildPublicThread A temporary sub-channel within a GuildText channel. GuildStageVoice A voice channel for hosting events with an audience. GuildText A text channel within a server. GuildVoice A voice channel within a server."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ClientStatus.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ClientStatus.html",
    "title": "Enum ClientStatus | Remora.Discord",
    "keywords": "Enum ClientStatus Enumerates various presence states for a user. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum ClientStatus Fields Name Description DND The user is not to be disturbed. Idle The user is idle. Invisible The user is invisible. Offline The user is offline. Online The user is online."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ComponentType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ComponentType.html",
    "title": "Enum ComponentType | Remora.Discord",
    "keywords": "Enum ComponentType Enumerates the various message component types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum ComponentType Fields Name Description ActionRow A row of actions. Button A clickable button. SelectMenu A menu of selectable options. TextInput A text field input."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ConnectionVisibility.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ConnectionVisibility.html",
    "title": "Enum ConnectionVisibility | Remora.Discord",
    "keywords": "Enum ConnectionVisibility Enumerates various connection visibility types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum ConnectionVisibility Fields Name Description Everyone Visible to everyone. None Invisible to everyone except the user themselves."
  },
  "api/Remora.Discord.API.Abstractions.Objects.DiscordPermission.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.DiscordPermission.html",
    "title": "Enum DiscordPermission | Remora.Discord",
    "keywords": "Enum DiscordPermission Enumerates the various permissions in Discord. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum DiscordPermission Remarks Note that the values of the enumeration members do not map to the actual values of Discord's permissions - instead, they mark how many bits a value of 1 should be shifted into a BigInteger to get the actual value. Fields Name Description AddReactions Allows for the addition of reactions to messages. Administrator Allows all permissions and bypasses channel permission overwrites. AttachFiles Allows for uploading images and files. BanMembers Allows banning members. ChangeNickname Allows for modification of own nickname. Connect Allows for joining of a voice channel. CreateInstantInvite Allows creation of instant invites. CreatePrivateThreads Allows the user to create private threads. CreatePublicThreads Allows the user to create public threads. DeafenMembers Allows for deafening of members in a voice channel. EmbedLinks Links sent by users with this permission will be auto-embedded. KickMembers Allows kicking members. ManageChannels Allows management and editing of channels. ManageEmojisAndStickers Allows management and editing of emojis and stickers. ManageEvents Allows the user to manage scheduled events. ManageGuild Allows management and editing of the guild. ManageMessages Allows for deletion of other user's messages. ManageNicknames Allows for modification of other user's nicknames. ManageRoles Allows management and editing of roles. This may be displayed as \"Manage Permissions\" in the Discord client. ManageThreads Allows the user to manage threads. ManageWebhooks Allows management and editing of webhooks. MentionEveryone Allows for using the @everyone tag to notify all users in a guild, and the @here tag to notify all online users in a channel. ModerateMembers Allows for timing out users to prevent them from sending or reacting to messages in chat and threads, and from speaking in voice and stage channels. MoveMembers Allows for moving of members between voice channels. MuteMembers Allows for muting members in a voice channel. PrioritySpeaker Allows for using priority speaker in a voice channel. ReadMessageHistory Allows for reading of message history. RequestToSpeak Allows the user to request to speak in a stage channel. SendMessages Allows for sending messages in a channel. SendMessagesInThreads Allows the user to send messages in threads. SendTTSMessages Allows for sending of /tts messages. Speak Allows for speaking in a voice channel. Stream Allows the user to go live. UseApplicationCommands Allows usage of slash commands. UseEmbeddedActivities Allows for launching activities in a voice channel. UseExternalEmojis Allows the usage of custom emojis from other servers. UseExternalStickers Allows the user to use stickers from other servers. UseVoiceActivity Allows for using voice activity detection in a voice channel. ViewAuditLog Allows for viewing of audit logs. ViewChannel Allows guild members to view a channel, which includes reading messages in text channels. This may be referred to as \"Read Messages\" in the Discord client. ViewGuildInsights Allows for viewing guild insights."
  },
  "api/Remora.Discord.API.Abstractions.Objects.DiscordStagePermission.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.DiscordStagePermission.html",
    "title": "Enum DiscordStagePermission | Remora.Discord",
    "keywords": "Enum DiscordStagePermission Enumerates a subset of the full DiscordPermission enumeration, containing only the permissions applicable to stage channels. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum DiscordStagePermission Fields Name Description Connect CreateInstantInvite DeafenMembers ManageChannels ManageEvents ManageRoles MentionEveryone MoveMembers MuteMembers RequestToSpeak ViewChannel"
  },
  "api/Remora.Discord.API.Abstractions.Objects.DiscordTextPermission.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.DiscordTextPermission.html",
    "title": "Enum DiscordTextPermission | Remora.Discord",
    "keywords": "Enum DiscordTextPermission Enumerates a subset of the full DiscordPermission enumeration, containing only the permissions applicable to text channels. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum DiscordTextPermission Fields Name Description AddReactions AttachFiles CreateInstantInvite CreatePrivateThreads CreatePublicThreads EmbedLinks ManageChannels ManageMessages ManageRoles ManageThreads ManageWebhooks MentionEveryone ReadMessageHistory SendMessages SendMessagesInThreads SendTTSMessages UseApplicationCommands UseExternalEmojis UseExternalStickers ViewChannel"
  },
  "api/Remora.Discord.API.Abstractions.Objects.DiscordVoicePermission.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.DiscordVoicePermission.html",
    "title": "Enum DiscordVoicePermission | Remora.Discord",
    "keywords": "Enum DiscordVoicePermission Enumerates a subset of the full DiscordPermission enumeration, containing only the permissions applicable to voice channels. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum DiscordVoicePermission Fields Name Description Connect CreateInstantInvite DeafenMembers ManageChannels ManageEvents ManageRoles MoveMembers MuteMembers RequestToSpeak Speak UseEmbeddedActivities UseVoiceActivity ViewChannel"
  },
  "api/Remora.Discord.API.Abstractions.Objects.EmbedType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.EmbedType.html",
    "title": "Enum EmbedType | Remora.Discord",
    "keywords": "Enum EmbedType Enumerates the various embed types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum EmbedType Fields Name Description Article An article embed. GIFV An animated gif embed. Image An image embed. Link A link embed. Rich A rich embed. Video A video embed."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel.html",
    "title": "Enum ExplicitContentFilterLevel | Remora.Discord",
    "keywords": "Enum ExplicitContentFilterLevel Enumerates various content filter levels. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum ExplicitContentFilterLevel Fields Name Description AllMembers Filtering is applied to all members. Disabled No filtering is applied. MembersWithoutRoles Filtering is applied to members without roles."
  },
  "api/Remora.Discord.API.Abstractions.Objects.GuildFeature.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.GuildFeature.html",
    "title": "Enum GuildFeature | Remora.Discord",
    "keywords": "Enum GuildFeature Enumerates various guild features. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum GuildFeature Fields Name Description AnimatedBanner The guild has access to set an animated guild banner image. AnimatedIcon The guild has access to set an animated icon. Banner The guild has access to set a guild banner image. Commerce The guild has access to use commerce features (i.e, create store channels). Community The guild has community features enabled. Discoverable The guild is able to be discovered in the guild directory. Featurable The guild is able to be featured in the guild directory. InviteSplash The guild has access to set an invite splash background. MemberVerificationGateEnabled The guild has enabled membership screening. MonetizationEnabled The guild has enabled monetization. MoreStickers The guild has increased custom sticker slots. News The guild has access to creating news channels. Partnered The guild is partnered. PreviewEnabled The guild can be previewed before joining. PrivateThreads Private threads may be created in the guild. RoleIcons The guild is able to set role icons. SevenDayThreadArchive The guild has access to the seven-day archival time for threads. ThreeDayThreadArchive The guild has access to the three-day archival time for threads. TicketedEventsEnabled The guild has enabled ticketed events. VanityURL The server has access to set a vanity URL. Verified The guild is verified. VIPRegions The guild has access to set 384kbps bitrate in voice (previously VIP voice servers). WelcomeScreenEnabled The guild has enabled a welcome screen."
  },
  "api/Remora.Discord.API.Abstractions.Objects.GuildNSFWLevel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.GuildNSFWLevel.html",
    "title": "Enum GuildNSFWLevel | Remora.Discord",
    "keywords": "Enum GuildNSFWLevel Enumerates various NSFW levels. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum GuildNSFWLevel Fields Name Description AgeRestricted The guild is age-restricted. Default The guild uses the default NSFW level. Explicit The guild is an explicit guild. Safe The guild is marked as safe."
  },
  "api/Remora.Discord.API.Abstractions.Objects.GuildScheduledEventEntityType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.GuildScheduledEventEntityType.html",
    "title": "Enum GuildScheduledEventEntityType | Remora.Discord",
    "keywords": "Enum GuildScheduledEventEntityType Enumerates various scheduled event entity types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum GuildScheduledEventEntityType Fields Name Description External The event has an associated external entity. StageInstance The event has an associated stage instance. Voice The event has an associated voice channel."
  },
  "api/Remora.Discord.API.Abstractions.Objects.GuildScheduledEventPrivacyLevel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.GuildScheduledEventPrivacyLevel.html",
    "title": "Enum GuildScheduledEventPrivacyLevel | Remora.Discord",
    "keywords": "Enum GuildScheduledEventPrivacyLevel Enumerates various privacy levels for a scheduled event. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum GuildScheduledEventPrivacyLevel Fields Name Description GuildOnly The event is only open to the guild it is in."
  },
  "api/Remora.Discord.API.Abstractions.Objects.GuildScheduledEventStatus.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.GuildScheduledEventStatus.html",
    "title": "Enum GuildScheduledEventStatus | Remora.Discord",
    "keywords": "Enum GuildScheduledEventStatus Enumerates various states a scheduled event can be in. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum GuildScheduledEventStatus Fields Name Description Active The event is currently ongoing. Canceled The event has been canceled. Completed The event has completed. Scheduled The event is scheduled, but hasn't begun yet."
  },
  "api/Remora.Discord.API.Abstractions.Objects.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.html",
    "title": "Namespace Remora.Discord.API.Abstractions.Objects | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions.Objects Interfaces IAccount Represents an integration account. IActionRowComponent Represents a row of interactive components. IActivity Represents information about an activity Discord is aware of. IActivityAssets Represents a set of descriptive assets related to an activity. IActivityButton Represents a custom activity button. IActivityEmoji Represents an emoji displayed in an activity. IActivityParty Represents a party of people in an activity. IActivitySecrets Represents a set of secrets used for interacting with the activity. IActivityTimestamps Represents a set of activity timestamps - that is, when the activity started and/or stopped. IAllowedMentions Represents a set of allowed mentions. IApplication Represents information about an OAuth2 application. IApplicationCommand Represents an application command. IApplicationCommandInteractionDataOption Represents a named option and its value. IApplicationCommandInteractionDataResolved Represents data that was resolved during serverside execution of the command. IApplicationCommandOption Represents an option in an application command. IApplicationCommandOptionChoice Represents a choice available to a user. IApplicationCommandPermissions Represents a single permission for a command. IApplicationInstallParameters Represents a set of parameters applied to custom application installation. IAttachment Represents an attachment in a message. IAuditLog Represents an audit log page. IAuditLogChange Represents a change to an audit log value. IAuditLogEntry Represents an entry in the audit log. IAuthorizationInformation Represents information about OAuth2 authorizations. IBan Represents a ban in a guild. IBulkApplicationCommandData Represents a request to create or update an application command. IButtonComponent Represents a button component. IChannel Represents a channel. IChannelMention Represents a mentioned channel. IChannelTemplate Represents a channel. IClientStatuses Represents a collection of platform statues. IConnection Represents a connection between a user account and an external service. IDiscordPermissionSet Represents a Discord permission set. IEmbed Represents an embed. IEmbedAuthor Represents information about an embed author. IEmbedField Represents a field in an embed. IEmbedFooter Represents a footer in an embed. IEmbedImage Represents information about an image in an embed. IEmbedProvider Represents information about an embed provider. IEmbedThumbnail Represents information about a thumbnail in an embed. IEmbedVideo Represents information about a video in an embed. IEmoji Represents an emoji. IErrorDetails Represents information about a single error. IFollowedChannel Represents a followed news channel. IGatewayEndpoint Represents a gateway endpoint. IGuild Represents a Discord Guild. IGuildApplicationCommandPermissions Represents a set of permissions for a command in a guild. IGuildMember Represents information about a guild member. IGuildPreview Represents a preview of a public guild. IGuildScheduledEvent Represents a scheduled event in a guild. IGuildScheduledEventEntityMetadata Represents metadata related to an event entity. IGuildScheduledEventUser Represents a user subscribed to a guild event. IGuildTemplate Represents a Discord Guild. IGuildThreadQueryResponse Represents a response object from the REST API regarding a thread query. IGuildWidget Represents the status and invite widget for a guild. IGuildWidgetSettings Represents settings related to the status and invite widget for a guild. IImageHash Represents a Discord image hash. IIntegration Represents an integration object. IIntegrationApplication Represents application information for a Discord integration. IInteraction Represents a user interaction. IInteractionAutocompleteCallbackData Represents return payload data for an autocomplete interaction response. IInteractionData Represents payload data for a command. IInteractionMessageCallbackData Represents return payload data for an interaction response. IInteractionModalCallbackData Represents return payload data for an interaction response. IInteractionResponse Represents a response to an interaction. IInvite Represents an invite. IMessage Represents a message. IMessageActivity Represents an activity reference. IMessageComponent Represents the base type for all components. This is a marker interface with no real functionality. IMessageInteraction Represents additional data sent on a message that is a response to an interaction. IMessageReference Represents a message reference. INitroStickerPacks Represents a set of sticker packs available to Nitro subscribers. IOptionalAuditEntryInfo Represents optional audit log information. IPartialActionRowComponent Represents a partial row of interactive components. IPartialApplication Represents information about an OAuth2 application. IPartialAttachment IPartialButtonComponent Represents a partial button component. IPartialChannel Represents a partial channel. IPartialEmoji Represents a partial emoji. IPartialGuild Represents a partial Discord Guild. IPartialGuildApplicationCommandPermissions Represents a set of permissions for a command in a guild. IPartialGuildMember Represents partial information about a guild member. IPartialIntegration Represents a partial integration object. IPartialInvite Represents a partial invite. IPartialMessage Represents a message. IPartialMessageComponent Represents the base type for all partial components. This is a marker interface with no real functionality. IPartialPermissionOverwrite IPartialPresence Represents a user's presence. IPartialRole Represents a partial Discord role. IPartialSelectMenuComponent Represents a partial dropdown of selectable values. IPartialSelectOption Represents a single partial selectable option. IPartialTextInputComponent Represents a partial text-based input component. IPartialUser Represents a partial Discord user. IPartialVoiceState Represents a user's partial voice connection status. IPartySize Represents a party size object. IPermissionOverwrite Represents a channel- or category-specific permission overwrite. IPermissionOverwriteTemplate Represents a channel- or category-specific permission overwrite. IPresence Represents a user's presence. IPropertyErrorDetails Represents detailed information about errors in a property from Discord. IPruneCount Represents a count of members that would be pruned in a prune operation. IReaction Represents a reaction to a message. IRestError Represents an error reported by the REST API. IRole Represents a Discord role. IRoleTags Represents a set of role tags. IRoleTemplate Represents a Discord role. ISelectMenuComponent Represents a dropdown of selectable values. ISelectOption Represents a single selectable option. ISessionStartLimit Represents information about session start limits. IStageInstance Represents information about a live stage. ISticker Represents a sticker. IStickerItem Represents a sticker in a message. IStickerPack Represents a pack of stickers. ITeam Represents a developer team on Discord. ITeamMember Represents a Discord developer team member. ITemplate Represents a guild template. ITextInputComponent Represents a text-based input component. IThreadMember Represents a thread member. IThreadMetadata Represents metadata information for a thread channel. IUnavailableGuild Represents an unavailable guild. IUser Represents a Discord user. IUserMention Represents a user mention. IVoiceRegion Represents a voice region. IVoiceState Represents a user's voice connection status. IWebhook Represents a webhook object. IWelcomeScreen Represents the welcome screen in a community-enabled server. IWelcomeScreenChannel Represents a channel in a welcome screen. Enums ActivityFlags Enumerates the flags an activity can have. ActivityType Enumerates the activity types supported by Discord. ApplicationCommandOptionType Enumerates various option types. ApplicationCommandPermissionType Enumerates application permission types. ApplicationCommandType Enumerates various application command types. ApplicationFlags Enumerates various application flags. AuditLogEvent Enumerates various possible audit log events. AutoArchiveDuration Enumerates various recognized auto-archival durations. ButtonComponentStyle Enumerates various button styles. ChannelFlags Enumerates various channel flags. ChannelType Enumerates various channel types. ClientStatus Enumerates various presence states for a user. ComponentType Enumerates the various message component types. ConnectionVisibility Enumerates various connection visibility types. DiscordPermission Enumerates the various permissions in Discord. DiscordStagePermission Enumerates a subset of the full DiscordPermission enumeration, containing only the permissions applicable to stage channels. DiscordTextPermission Enumerates a subset of the full DiscordPermission enumeration, containing only the permissions applicable to text channels. DiscordVoicePermission Enumerates a subset of the full DiscordPermission enumeration, containing only the permissions applicable to voice channels. EmbedType Enumerates the various embed types. ExplicitContentFilterLevel Enumerates various content filter levels. GuildFeature Enumerates various guild features. GuildNSFWLevel Enumerates various NSFW levels. GuildScheduledEventEntityType Enumerates various scheduled event entity types. GuildScheduledEventPrivacyLevel Enumerates various privacy levels for a scheduled event. GuildScheduledEventStatus Enumerates various states a scheduled event can be in. IntegrationExpireBehaviour Enumerates various expiration behaviours. InteractionCallbackType Enumerates various response types. InteractionType Enumerates various interaction types. InviteTarget Enumerates various target user types. MembershipState Enumerates various membership states. MentionType Enumerates various mention types. MessageActivityType Enumerates various activity types. MessageFlags Enumerates various message flags. MessageNotificationLevel Enumerates various notification levels. MessageType Enumerates message types. MultiFactorAuthenticationLevel Enumerates various multi-factor authentication levels. PermissionOverwriteType Enumerates permission overwrite types. PremiumTier Enumerates various premium tiers of a guild. PremiumType Enumerates the various premium levels. StagePrivacyLevel Enumerates various privacy levels for stage instances. StickerFormatType Enumerates sticker format types. StickerType Enumerates various types of stickers. SystemChannelFlags Represents various flags for system channels. TextInputStyle Represents the style of a ITextInputComponent . ThreadMemberFlags Enumerates various thread member flags. UserFlags Enumerates various user account flags. VerificationLevel Enumerates the various verification levels. VideoQualityMode Enumerates various video quality modes. WebhookType Enumerates various types of webhooks. WidgetImageStyle Enumerates various widget image styles."
  },
  "api/Remora.Discord.API.Abstractions.Objects.IAccount.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IAccount.html",
    "title": "Interface IAccount | Remora.Discord",
    "keywords": "Interface IAccount Represents an integration account. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IAccount Properties | Improve this Doc View Source ID Gets the ID of the account. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Gets the name of the account. Declaration string Name { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IActionRowComponent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IActionRowComponent.html",
    "title": "Interface IActionRowComponent | Remora.Discord",
    "keywords": "Interface IActionRowComponent Represents a row of interactive components. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IActionRowComponent : IMessageComponent, IPartialActionRowComponent, IPartialMessageComponent Properties | Improve this Doc View Source Components Gets the components nested under this component. Declaration IReadOnlyList<IMessageComponent> Components { get; } Property Value Type Description IReadOnlyList < IMessageComponent > | Improve this Doc View Source Type Gets the type of the component. Declaration ComponentType Type { get; } Property Value Type Description ComponentType Explicit Interface Implementations | Improve this Doc View Source IPartialActionRowComponent.Components Gets the components nested under this component. Declaration Optional<IReadOnlyList<IPartialMessageComponent>> IPartialActionRowComponent.Components { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialMessageComponent >> | Improve this Doc View Source IPartialActionRowComponent.Type Gets the type of the component. Declaration Optional<ComponentType> IPartialActionRowComponent.Type { get; } Returns Type Description Remora.Rest.Core.Optional < ComponentType >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IActivity.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IActivity.html",
    "title": "Interface IActivity | Remora.Discord",
    "keywords": "Interface IActivity Represents information about an activity Discord is aware of. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IActivity Properties | Improve this Doc View Source ApplicationID Gets the ID of the application the activity is associated with. Declaration Optional<Snowflake> ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Assets Gets information about the assets associated with the user's current activity. Declaration Optional<IActivityAssets> Assets { get; } Property Value Type Description Remora.Rest.Core.Optional < IActivityAssets > | Improve this Doc View Source Buttons Gets the custom buttons show in Rich Presence. Declaration Optional<OneOf<IReadOnlyList<string>, IReadOnlyList<IActivityButton>>> Buttons { get; } Property Value Type Description Remora.Rest.Core.Optional < OneOf.OneOf < IReadOnlyList < String >, IReadOnlyList < IActivityButton >>> | Improve this Doc View Source CreatedAt Gets the time when the activity was added to the user's session. Declaration Optional<DateTimeOffset> CreatedAt { get; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > Remarks This field is always present on activities received from Discord; it is optional because it should never be sent by a bot. Discord's documentation is somewhat vague at first glance, but because of the above it's implemented as an optional field. | Improve this Doc View Source Details Gets a detail string about what the user is currently doing. Declaration Optional<string> Details { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Emoji Gets the emoji used for a custom status. Declaration Optional<IActivityEmoji> Emoji { get; } Property Value Type Description Remora.Rest.Core.Optional < IActivityEmoji > | Improve this Doc View Source Flags Gets a set of descriptive flags that detail what the payload includes. Declaration Optional<ActivityFlags> Flags { get; } Property Value Type Description Remora.Rest.Core.Optional < ActivityFlags > | Improve this Doc View Source Instance Gets a value indicating whether the activity is in an instanced session. Declaration Optional<bool> Instance { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Gets the name of the activity. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Party Gets information about the user's current party. Declaration Optional<IActivityParty> Party { get; } Property Value Type Description Remora.Rest.Core.Optional < IActivityParty > | Improve this Doc View Source Secrets Gets the secrets associated with the user's current activity. Declaration Optional<IActivitySecrets> Secrets { get; } Property Value Type Description Remora.Rest.Core.Optional < IActivitySecrets > | Improve this Doc View Source State Gets the user's current party status. Declaration Optional<string> State { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Timestamps Gets the time at which the activity started and/or ended. Declaration Optional<IActivityTimestamps> Timestamps { get; } Property Value Type Description Remora.Rest.Core.Optional < IActivityTimestamps > | Improve this Doc View Source Type Gets the type of the activity. Declaration ActivityType Type { get; } Property Value Type Description ActivityType | Improve this Doc View Source Url Gets the stream URL. Used when Type is Streaming . Declaration Optional<Uri> Url { get; } Property Value Type Description Remora.Rest.Core.Optional < Uri >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IActivityAssets.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IActivityAssets.html",
    "title": "Interface IActivityAssets | Remora.Discord",
    "keywords": "Interface IActivityAssets Represents a set of descriptive assets related to an activity. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IActivityAssets Properties | Improve this Doc View Source LargeImage Gets the ID for a large image related to the activity. Usually, this is a snowflake. Declaration Optional<string> LargeImage { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source LargeText Gets the text displayed when hovering over the large image. Declaration Optional<string> LargeText { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source SmallImage Gets the ID for a small image related to the activity. Usually, this is a snowflake. Declaration Optional<string> SmallImage { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source SmallText Gets the text displayed when hovering over the small image. Declaration Optional<string> SmallText { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IActivityButton.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IActivityButton.html",
    "title": "Interface IActivityButton | Remora.Discord",
    "keywords": "Interface IActivityButton Represents a custom activity button. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IActivityButton Properties | Improve this Doc View Source Label Gets the text shown on the button (1-32 characters). Declaration string Label { get; } Property Value Type Description String | Improve this Doc View Source URL Gets the URL opened when clicking the button (1-512 characters). Declaration string URL { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IActivityEmoji.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IActivityEmoji.html",
    "title": "Interface IActivityEmoji | Remora.Discord",
    "keywords": "Interface IActivityEmoji Represents an emoji displayed in an activity. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IActivityEmoji Properties | Improve this Doc View Source Animated Gets a value indicating whether the emoji is animated. Declaration Optional<bool> Animated { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source ID Gets the ID of the emoji. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Name Gets the name of the emoji. Declaration string Name { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IActivityParty.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IActivityParty.html",
    "title": "Interface IActivityParty | Remora.Discord",
    "keywords": "Interface IActivityParty Represents a party of people in an activity. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IActivityParty Properties | Improve this Doc View Source ID Gets the ID of the party. Declaration Optional<string> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Size Gets the size of the party. Declaration Optional<IPartySize> Size { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartySize >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IActivitySecrets.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IActivitySecrets.html",
    "title": "Interface IActivitySecrets | Remora.Discord",
    "keywords": "Interface IActivitySecrets Represents a set of secrets used for interacting with the activity. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IActivitySecrets Properties | Improve this Doc View Source Join Gets the secret used for joining the party. Declaration Optional<string> Join { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Match Gets the secret used for joining a specific instanced match. Declaration Optional<string> Match { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Spectate Gets the secret used for spectating the party. Declaration Optional<string> Spectate { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IActivityTimestamps.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IActivityTimestamps.html",
    "title": "Interface IActivityTimestamps | Remora.Discord",
    "keywords": "Interface IActivityTimestamps Represents a set of activity timestamps - that is, when the activity started and/or stopped. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IActivityTimestamps Properties | Improve this Doc View Source End Gets the end timestamp. Declaration Optional<DateTimeOffset> End { get; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Start Gets the start timestamp. Declaration Optional<DateTimeOffset> Start { get; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IAllowedMentions.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IAllowedMentions.html",
    "title": "Interface IAllowedMentions | Remora.Discord",
    "keywords": "Interface IAllowedMentions Represents a set of allowed mentions. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IAllowedMentions Properties | Improve this Doc View Source MentionRepliedUser Gets a value indicating whether the replied-to user should be mentioned. Declaration Optional<bool> MentionRepliedUser { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Parse Gets a list of mention types to parse. The contents of this field has a mutually exclusive relationship with the Roles and Users fields - that is, if that type is contained in this field, the corresponding field in the type may not appear. Declaration Optional<IReadOnlyList<MentionType>> Parse { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < MentionType >> | Improve this Doc View Source Roles Gets a list of allowed roles to mention. Declaration Optional<IReadOnlyList<Snowflake>> Roles { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Users Gets a list of allowed users to mention. Declaration Optional<IReadOnlyList<Snowflake>> Users { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >>"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IApplication.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IApplication.html",
    "title": "Interface IApplication | Remora.Discord",
    "keywords": "Interface IApplication Represents information about an OAuth2 application. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IApplication : IPartialApplication Properties | Improve this Doc View Source CoverImage Gets the cover image, if the application is a game sold on the Discord storefront. Declaration Optional<IImageHash> CoverImage { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source CustomInstallUrl Gets the application's default custom authorization link. Declaration Optional<Uri> CustomInstallUrl { get; } Property Value Type Description Remora.Rest.Core.Optional < Uri > | Improve this Doc View Source Description Gets the description of the application. Declaration string Description { get; } Property Value Type Description String | Improve this Doc View Source DoesBotRequireCodeGrant Gets a value indicating whether the bot will only join upon completion of a full OAuth2 flow. Declaration bool DoesBotRequireCodeGrant { get; } Property Value Type Description Boolean | Improve this Doc View Source Flags Gets the application's public flags. Declaration Optional<ApplicationFlags> Flags { get; } Property Value Type Description Remora.Rest.Core.Optional < ApplicationFlags > | Improve this Doc View Source GuildID Gets the guild the game is linked to, if the application is a game sold on the Discord storefront. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Icon Gets the icon hash of the application. Declaration IImageHash Icon { get; } Property Value Type Description IImageHash | Improve this Doc View Source ID Gets the application ID. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source InstallParams Gets the settings for the application's default in-app authorization link. Declaration Optional<IApplicationInstallParameters> InstallParams { get; } Property Value Type Description Remora.Rest.Core.Optional < IApplicationInstallParameters > | Improve this Doc View Source IsBotPublic Gets a value indicating whether the bot is a public bot. Declaration bool IsBotPublic { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the name of the application. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Owner Gets the user information of the application owner. Declaration IPartialUser Owner { get; } Property Value Type Description IPartialUser | Improve this Doc View Source PrimarySKUID Gets the primary SKU ID of the game, if the application is a game sold on the Discord storefront. Declaration Optional<Snowflake> PrimarySKUID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source PrivacyPolicyURL Gets the URL to the application's privacy policy. Declaration Optional<string> PrivacyPolicyURL { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source RPCOrigins Gets a list of RPC origin URLs. Declaration Optional<IReadOnlyList<string>> RPCOrigins { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> | Improve this Doc View Source Slug Gets the URL slug that links to the store page, if the application is a game sold on the Discord storefront. Declaration Optional<string> Slug { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Tags Gets up to 5 tags describing the content and functionality of the application. Declaration Optional<IReadOnlyList<string>> Tags { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> | Improve this Doc View Source Team Gets the team the application belongs to, if any. Declaration ITeam Team { get; } Property Value Type Description ITeam | Improve this Doc View Source TermsOfServiceURL Gets the URL to the application's terms of service. Declaration Optional<string> TermsOfServiceURL { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source VerifyKey Gets the hex-encoded key for GameSDK's GetTicket function. Declaration string VerifyKey { get; } Property Value Type Description String Explicit Interface Implementations | Improve this Doc View Source IPartialApplication.CoverImage Gets the cover image, if the application is a game sold on the Discord storefront. Declaration Optional<IImageHash> IPartialApplication.CoverImage { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialApplication.CustomInstallUrl Gets the application's default custom authorization link. Declaration Optional<Uri> IPartialApplication.CustomInstallUrl { get; } Returns Type Description Remora.Rest.Core.Optional < Uri > | Improve this Doc View Source IPartialApplication.Description Gets the description of the application. Declaration Optional<string> IPartialApplication.Description { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialApplication.DoesBotRequireCodeGrant Gets a value indicating whether the bot will only join upon completion of a full OAuth2 flow. Declaration Optional<bool> IPartialApplication.DoesBotRequireCodeGrant { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialApplication.Flags Gets the application's public flags. Declaration Optional<ApplicationFlags> IPartialApplication.Flags { get; } Returns Type Description Remora.Rest.Core.Optional < ApplicationFlags > | Improve this Doc View Source IPartialApplication.GuildID Gets the guild the game is linked to, if the application is a game sold on the Discord storefront. Declaration Optional<Snowflake> IPartialApplication.GuildID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialApplication.Icon Gets the icon hash of the application. Declaration Optional<IImageHash> IPartialApplication.Icon { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialApplication.ID Gets the application ID. Declaration Optional<Snowflake> IPartialApplication.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialApplication.InstallParams Gets the settings for the application's default in-app authorization link. Declaration Optional<IApplicationInstallParameters> IPartialApplication.InstallParams { get; } Returns Type Description Remora.Rest.Core.Optional < IApplicationInstallParameters > | Improve this Doc View Source IPartialApplication.IsBotPublic Gets a value indicating whether the bot is a public bot. Declaration Optional<bool> IPartialApplication.IsBotPublic { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialApplication.Name Gets the name of the application. Declaration Optional<string> IPartialApplication.Name { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialApplication.Owner Gets the user information of the application owner. Declaration Optional<IPartialUser> IPartialApplication.Owner { get; } Returns Type Description Remora.Rest.Core.Optional < IPartialUser > | Improve this Doc View Source IPartialApplication.PrimarySKUID Gets the primary SKU ID of the game, if the application is a game sold on the Discord storefront. Declaration Optional<Snowflake> IPartialApplication.PrimarySKUID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialApplication.PrivacyPolicyURL Gets the URL to the application's privacy policy. Declaration Optional<string> IPartialApplication.PrivacyPolicyURL { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialApplication.RPCOrigins Gets a list of RPC origin URLs. Declaration Optional<IReadOnlyList<string>> IPartialApplication.RPCOrigins { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> | Improve this Doc View Source IPartialApplication.Slug Gets the URL slug that links to the store page, if the application is a game sold on the Discord storefront. Declaration Optional<string> IPartialApplication.Slug { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialApplication.Tags Gets up to 5 tags describing the content and functionality of the application. Declaration Optional<IReadOnlyList<string>> IPartialApplication.Tags { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> | Improve this Doc View Source IPartialApplication.Team Gets the team the application belongs to, if any. Declaration Optional<ITeam> IPartialApplication.Team { get; } Returns Type Description Remora.Rest.Core.Optional < ITeam > | Improve this Doc View Source IPartialApplication.TermsOfServiceURL Gets the URL to the application's terms of service. Declaration Optional<string> IPartialApplication.TermsOfServiceURL { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialApplication.VerifyKey Gets the hex-encoded key for GameSDK's GetTicket function. Declaration Optional<string> IPartialApplication.VerifyKey { get; } Returns Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommand.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommand.html",
    "title": "Interface IApplicationCommand | Remora.Discord",
    "keywords": "Interface IApplicationCommand Represents an application command. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IApplicationCommand Properties | Improve this Doc View Source ApplicationID Gets the ID of the application. Declaration Snowflake ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source DefaultMemberPermissions Gets a value that indicates the requisite permissions to execute the command. Declaration IDiscordPermissionSet DefaultMemberPermissions { get; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Description Gets the description of the command. Declaration string Description { get; } Property Value Type Description String Remarks The length of the description must be between 1 and 100 characters. | Improve this Doc View Source DescriptionLocalizations Gets the localized descriptions of the command. Declaration Optional<IReadOnlyDictionary<string, string>> DescriptionLocalizations { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source DescriptionLocalized Gets the localized description of the command. Declaration Optional<string> DescriptionLocalized { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Remarks This field is only supplied by Discord as a response, and is not used to set the actual localized string. | Improve this Doc View Source DMPermission Gets a value that indicates whether this command can be executed in DMs. Declaration Optional<bool> DMPermission { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source GuildID Gets the ID of the guild the command belongs to. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Gets the ID of the command. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Gets the name of the command. Declaration string Name { get; } Property Value Type Description String Remarks The length of the name must be between 3 and 32 characters. | Improve this Doc View Source NameLocalizations Gets the localized names of the command. Declaration Optional<IReadOnlyDictionary<string, string>> NameLocalizations { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source NameLocalized Gets the localized name of the command. Declaration Optional<string> NameLocalized { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Remarks This field is only supplied by Discord as a response, and is not used to set the actual localized string. | Improve this Doc View Source Options Gets the parameters of the command. Declaration Optional<IReadOnlyList<IApplicationCommandOption>> Options { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> | Improve this Doc View Source Type Gets the type of the command. Declaration Optional<ApplicationCommandType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ApplicationCommandType > | Improve this Doc View Source Version Gets a value that increments on substantial changes. Declaration Snowflake Version { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommandInteractionDataOption.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommandInteractionDataOption.html",
    "title": "Interface IApplicationCommandInteractionDataOption | Remora.Discord",
    "keywords": "Interface IApplicationCommandInteractionDataOption Represents a named option and its value. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IApplicationCommandInteractionDataOption Properties | Improve this Doc View Source IsFocused Gets a value indicating whether the option is currently focused. Declaration Optional<bool> IsFocused { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Gets the name of the parameter. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Options Gets the options supplied to the subcommand or subgroup. Declaration Optional<IReadOnlyList<IApplicationCommandInteractionDataOption>> Options { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandInteractionDataOption >> | Improve this Doc View Source Type Gets the parameter's type. Declaration ApplicationCommandOptionType Type { get; } Property Value Type Description ApplicationCommandOptionType | Improve this Doc View Source Value Gets the value of the pair. Declaration Optional<OneOf<string, long, bool, Snowflake, double>> Value { get; } Property Value Type Description Remora.Rest.Core.Optional < OneOf.OneOf < String , Int64 , Boolean , Remora.Rest.Core.Snowflake , Double >>"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommandInteractionDataResolved.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommandInteractionDataResolved.html",
    "title": "Interface IApplicationCommandInteractionDataResolved | Remora.Discord",
    "keywords": "Interface IApplicationCommandInteractionDataResolved Represents data that was resolved during serverside execution of the command. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IApplicationCommandInteractionDataResolved Properties | Improve this Doc View Source Attachments Gets the resolved attachments, if any. Declaration Optional<IReadOnlyDictionary<Snowflake, IAttachment>> Attachments { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IAttachment >> | Improve this Doc View Source Channels Gets the resolved channels, if any. Declaration Optional<IReadOnlyDictionary<Snowflake, IPartialChannel>> Channels { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IPartialChannel >> | Improve this Doc View Source Members Gets the resolved guild members, if any. Declaration Optional<IReadOnlyDictionary<Snowflake, IPartialGuildMember>> Members { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IPartialGuildMember >> | Improve this Doc View Source Messages Gets the resolved messages, if any. Declaration Optional<IReadOnlyDictionary<Snowflake, IPartialMessage>> Messages { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IPartialMessage >> | Improve this Doc View Source Roles Gets the resolved roles, if any. Declaration Optional<IReadOnlyDictionary<Snowflake, IRole>> Roles { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IRole >> | Improve this Doc View Source Users Gets the resolved users, if any. Declaration Optional<IReadOnlyDictionary<Snowflake, IUser>> Users { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IUser >>"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommandOption.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommandOption.html",
    "title": "Interface IApplicationCommandOption | Remora.Discord",
    "keywords": "Interface IApplicationCommandOption Represents an option in an application command. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IApplicationCommandOption Properties | Improve this Doc View Source ChannelTypes Gets the channel types allowed for options. Declaration Optional<IReadOnlyList<ChannelType>> ChannelTypes { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < ChannelType >> | Improve this Doc View Source Choices Gets the available options the user can pick from. Declaration Optional<IReadOnlyList<IApplicationCommandOptionChoice>> Choices { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOptionChoice >> | Improve this Doc View Source Description Gets the description of the option. Declaration string Description { get; } Property Value Type Description String Remarks The length of the description must be between 1 and 100 characters. | Improve this Doc View Source DescriptionLocalizations Gets the localized descriptions of the option. Declaration Optional<IReadOnlyDictionary<string, string>> DescriptionLocalizations { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source DescriptionLocalized Gets the localized description of the option. Declaration Optional<string> DescriptionLocalized { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Remarks This field is only supplied by Discord as a response, and is not used to set the actual localized string. | Improve this Doc View Source EnableAutocomplete Gets a value indicating whether autocompletion should be enabled for this option. Declaration Optional<bool> EnableAutocomplete { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsDefault Gets a value indicating whether this is the first required option that the user completes. Declaration Optional<bool> IsDefault { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > Remarks Only one option can be default. | Improve this Doc View Source IsRequired Gets a value indicating whether the option is required. Declaration Optional<bool> IsRequired { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MaxValue Gets the minimum value permitted. Declaration Optional<OneOf<ulong, long, float, double>> MaxValue { get; } Property Value Type Description Remora.Rest.Core.Optional < OneOf.OneOf < UInt64 , Int64 , Single , Double >> Remarks Only relevant for Integer or Number options. | Improve this Doc View Source MinValue Gets the minimum value permitted. Declaration Optional<OneOf<ulong, long, float, double>> MinValue { get; } Property Value Type Description Remora.Rest.Core.Optional < OneOf.OneOf < UInt64 , Int64 , Single , Double >> Remarks Only relevant for Integer or Number options. | Improve this Doc View Source Name Gets the name of the option. Declaration string Name { get; } Property Value Type Description String Remarks The length of the name must be between 3 and 32 characters. | Improve this Doc View Source NameLocalizations Gets the localized names of the option. Declaration Optional<IReadOnlyDictionary<string, string>> NameLocalizations { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source NameLocalized Gets the localized name of the option. Declaration Optional<string> NameLocalized { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Remarks This field is only supplied by Discord as a response, and is not used to set the actual localized string. | Improve this Doc View Source Options Gets the options of the nested command or group. Declaration Optional<IReadOnlyList<IApplicationCommandOption>> Options { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> | Improve this Doc View Source Type Gets the option type. Declaration ApplicationCommandOptionType Type { get; } Property Value Type Description ApplicationCommandOptionType"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommandOptionChoice.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommandOptionChoice.html",
    "title": "Interface IApplicationCommandOptionChoice | Remora.Discord",
    "keywords": "Interface IApplicationCommandOptionChoice Represents a choice available to a user. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IApplicationCommandOptionChoice Properties | Improve this Doc View Source Name Gets the name of the choice. Declaration string Name { get; } Property Value Type Description String Remarks This can be up to 100 characters. | Improve this Doc View Source NameLocalizations Gets the localized names of the option. Declaration Optional<IReadOnlyDictionary<string, string>> NameLocalizations { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source NameLocalized Gets the localized name of the option. Declaration Optional<string> NameLocalized { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Remarks This field is only supplied by Discord as a response, and is not used to set the actual localized string. | Improve this Doc View Source Value Gets the value of the choice. Declaration OneOf<string, int, double> Value { get; } Property Value Type Description OneOf.OneOf < String , Int32 , Double >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommandPermissions.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IApplicationCommandPermissions.html",
    "title": "Interface IApplicationCommandPermissions | Remora.Discord",
    "keywords": "Interface IApplicationCommandPermissions Represents a single permission for a command. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IApplicationCommandPermissions Properties | Improve this Doc View Source HasPermission Gets a value indicating whether the referenced entity has permission to use the command. Declaration bool HasPermission { get; } Property Value Type Description Boolean | Improve this Doc View Source ID Gets the ID of the role or user that has been assigned an explicit permission. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Type Gets the type of the entity that has been assigned an explicit permission. Declaration ApplicationCommandPermissionType Type { get; } Property Value Type Description ApplicationCommandPermissionType"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IApplicationInstallParameters.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IApplicationInstallParameters.html",
    "title": "Interface IApplicationInstallParameters | Remora.Discord",
    "keywords": "Interface IApplicationInstallParameters Represents a set of parameters applied to custom application installation. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IApplicationInstallParameters Properties | Improve this Doc View Source Permissions Gets the permissions to request for the created bot role. Declaration IDiscordPermissionSet Permissions { get; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Scopes Gets the OAuth2 scopes to add the application to the server with. Declaration IReadOnlyList<string> Scopes { get; } Property Value Type Description IReadOnlyList < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IAttachment.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IAttachment.html",
    "title": "Interface IAttachment | Remora.Discord",
    "keywords": "Interface IAttachment Represents an attachment in a message. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IAttachment : IPartialAttachment Properties | Improve this Doc View Source ContentType Gets the attachment's media type (e.g, \"application/text\" or similar). Declaration Optional<string> ContentType { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Description Gets the description of the attachment. Declaration Optional<string> Description { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Filename Gets the filename of the attachment. Declaration string Filename { get; } Property Value Type Description String | Improve this Doc View Source Height Gets the height of the file (if image). Declaration Optional<int?> Height { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> | Improve this Doc View Source ID Gets the ID of the attachment. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsEphemeral Gets a value indicating whether the attachment is ephemeral. Declaration Optional<bool> IsEphemeral { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source ProxyUrl Gets the proxied URL of the file. Declaration string ProxyUrl { get; } Property Value Type Description String | Improve this Doc View Source Size Gets the size of the file in bytes. Declaration int Size { get; } Property Value Type Description Int32 | Improve this Doc View Source Url Gets the source URL of the file. Declaration string Url { get; } Property Value Type Description String | Improve this Doc View Source Width Gets the width of the file (if image). Declaration Optional<int?> Width { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> Explicit Interface Implementations | Improve this Doc View Source IPartialAttachment.ContentType Gets the attachment's media type (e.g, \"application/text\" or similar). Declaration Optional<string> IPartialAttachment.ContentType { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialAttachment.Description Gets the description of the attachment. Declaration Optional<string> IPartialAttachment.Description { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialAttachment.Filename Gets the filename of the attachment. Declaration Optional<string> IPartialAttachment.Filename { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialAttachment.Height Gets the height of the file (if image). Declaration Optional<int?> IPartialAttachment.Height { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> | Improve this Doc View Source IPartialAttachment.ID Gets the ID of the attachment. Declaration Optional<Snowflake> IPartialAttachment.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialAttachment.IsEphemeral Gets a value indicating whether the attachment is ephemeral. Declaration Optional<bool> IPartialAttachment.IsEphemeral { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialAttachment.ProxyUrl Gets the proxied URL of the file. Declaration Optional<string> IPartialAttachment.ProxyUrl { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialAttachment.Size Gets the size of the file in bytes. Declaration Optional<int> IPartialAttachment.Size { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialAttachment.Url Gets the source URL of the file. Declaration Optional<string> IPartialAttachment.Url { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialAttachment.Width Gets the width of the file (if image). Declaration Optional<int?> IPartialAttachment.Width { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Int32 >>"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IAuditLog.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IAuditLog.html",
    "title": "Interface IAuditLog | Remora.Discord",
    "keywords": "Interface IAuditLog Represents an audit log page. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IAuditLog Properties | Improve this Doc View Source AuditLogEntries Gets a list of audit log entries. Declaration IReadOnlyList<IAuditLogEntry> AuditLogEntries { get; } Property Value Type Description IReadOnlyList < IAuditLogEntry > | Improve this Doc View Source GuildScheduledEvents Gets a list of scheduled events found in the audit log. Declaration IReadOnlyList<IGuildScheduledEvent> GuildScheduledEvents { get; } Property Value Type Description IReadOnlyList < IGuildScheduledEvent > | Improve this Doc View Source Integrations Gets a list of partial integration objects found in the audit log. Declaration IReadOnlyList<IPartialIntegration> Integrations { get; } Property Value Type Description IReadOnlyList < IPartialIntegration > | Improve this Doc View Source Threads Gets a list of threads found in the audit log. Declaration IReadOnlyList<IChannel> Threads { get; } Property Value Type Description IReadOnlyList < IChannel > | Improve this Doc View Source Users Gets a list of users found in the audit log. Declaration IReadOnlyList<IUser> Users { get; } Property Value Type Description IReadOnlyList < IUser > | Improve this Doc View Source Webhooks Gets a list of webhooks found in the audit log. Declaration IReadOnlyList<IWebhook> Webhooks { get; } Property Value Type Description IReadOnlyList < IWebhook >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IAuditLogChange.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IAuditLogChange.html",
    "title": "Interface IAuditLogChange | Remora.Discord",
    "keywords": "Interface IAuditLogChange Represents a change to an audit log value. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IAuditLogChange Properties | Improve this Doc View Source Key Gets the name of the audit log change key. Declaration string Key { get; } Property Value Type Description String | Improve this Doc View Source NewValue Gets the new value of the key. Declaration Optional<string> NewValue { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Remarks This is the raw unparsed value from Discord's payload. Use the additional information available in the audit log entry to determine an appropriate type to parse it into. | Improve this Doc View Source OldValue Gets the old value of the key. Declaration Optional<string> OldValue { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Remarks This is the raw unparsed value from Discord's payload. Use the additional information available in the audit log entry to determine an appropriate type to parse it into."
  },
  "api/Remora.Discord.API.Abstractions.Objects.IAuditLogEntry.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IAuditLogEntry.html",
    "title": "Interface IAuditLogEntry | Remora.Discord",
    "keywords": "Interface IAuditLogEntry Represents an entry in the audit log. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IAuditLogEntry Properties | Improve this Doc View Source ActionType Gets the type of action that occurred. Declaration AuditLogEvent ActionType { get; } Property Value Type Description AuditLogEvent | Improve this Doc View Source Changes Gets a list of audit log changes. Declaration Optional<IReadOnlyList<IAuditLogChange>> Changes { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IAuditLogChange >> | Improve this Doc View Source ID Gets the ID of the entry. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Options Gets additional info for certain action types. Declaration Optional<IOptionalAuditEntryInfo> Options { get; } Property Value Type Description Remora.Rest.Core.Optional < IOptionalAuditEntryInfo > | Improve this Doc View Source Reason Gets the reason for the change (0-512 characters). Declaration Optional<string> Reason { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source TargetID Gets the ID of the log entry target. Typically, this is a snowflake. Declaration string TargetID { get; } Property Value Type Description String | Improve this Doc View Source UserID Gets the user who made the changes. Declaration Snowflake? UserID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IAuthorizationInformation.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IAuthorizationInformation.html",
    "title": "Interface IAuthorizationInformation | Remora.Discord",
    "keywords": "Interface IAuthorizationInformation Represents information about OAuth2 authorizations. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IAuthorizationInformation Properties | Improve this Doc View Source Application Gets the current application. Declaration IPartialApplication Application { get; } Property Value Type Description IPartialApplication | Improve this Doc View Source Expires Gets the time when the access token expires. Declaration DateTimeOffset Expires { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Scopes Gets the scopes the user has authorized the application for. Declaration IReadOnlyList<string> Scopes { get; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source User Gets the user who has authorized the application, if the user has authorized with the \"identity\" scope. Declaration Optional<IUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IBan.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IBan.html",
    "title": "Interface IBan | Remora.Discord",
    "keywords": "Interface IBan Represents a ban in a guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IBan Properties | Improve this Doc View Source Reason Gets the reason for the ban. Declaration string Reason { get; } Property Value Type Description String | Improve this Doc View Source User Gets the banned user. Declaration IUser User { get; } Property Value Type Description IUser"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IBulkApplicationCommandData.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IBulkApplicationCommandData.html",
    "title": "Interface IBulkApplicationCommandData | Remora.Discord",
    "keywords": "Interface IBulkApplicationCommandData Represents a request to create or update an application command. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IBulkApplicationCommandData Properties | Improve this Doc View Source DefaultMemberPermissions Gets a value that indicates the requisite permissions to execute the command. Declaration IDiscordPermissionSet DefaultMemberPermissions { get; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Description Gets the description of the command. Declaration Optional<string> Description { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Remarks The length of the description must be between 1 and 100 characters. | Improve this Doc View Source DescriptionLocalizations Gets the localized descriptions of the command. Declaration Optional<IReadOnlyDictionary<string, string>> DescriptionLocalizations { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source DMPermission Gets a value that indicates whether this command can be executed in DMs. Declaration Optional<bool> DMPermission { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Gets the name of the command. Declaration string Name { get; } Property Value Type Description String Remarks The length of the name must be between 3 and 32 characters. | Improve this Doc View Source NameLocalizations Gets the localized names of the command. Declaration Optional<IReadOnlyDictionary<string, string>> NameLocalizations { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source Options Gets the parameters of the command. Declaration Optional<IReadOnlyList<IApplicationCommandOption>> Options { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> | Improve this Doc View Source Type Gets the type of the command. Declaration Optional<ApplicationCommandType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ApplicationCommandType >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IButtonComponent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IButtonComponent.html",
    "title": "Interface IButtonComponent | Remora.Discord",
    "keywords": "Interface IButtonComponent Represents a button component. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IButtonComponent : IMessageComponent, IPartialButtonComponent, IPartialMessageComponent Properties | Improve this Doc View Source CustomID Gets a custom ID for the component, defined by the developer. Declaration Optional<string> CustomID { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Emoji Gets the emoji displayed in the button. Declaration Optional<IPartialEmoji> Emoji { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialEmoji > | Improve this Doc View Source IsDisabled Gets a value indicating whether the component is disabled. Declaration Optional<bool> IsDisabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Gets the label on the button. Declaration Optional<string> Label { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Style Gets the button's style. Declaration ButtonComponentStyle Style { get; } Property Value Type Description ButtonComponentStyle | Improve this Doc View Source Type Gets the type of the component. Declaration ComponentType Type { get; } Property Value Type Description ComponentType | Improve this Doc View Source URL Gets the URL used for link-style buttons. Declaration Optional<string> URL { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Explicit Interface Implementations | Improve this Doc View Source IPartialButtonComponent.CustomID Gets a custom ID for the component, defined by the developer. Declaration Optional<string> IPartialButtonComponent.CustomID { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialButtonComponent.Emoji Gets the emoji displayed in the button. Declaration Optional<IPartialEmoji> IPartialButtonComponent.Emoji { get; } Returns Type Description Remora.Rest.Core.Optional < IPartialEmoji > | Improve this Doc View Source IPartialButtonComponent.IsDisabled Gets a value indicating whether the component is disabled. Declaration Optional<bool> IPartialButtonComponent.IsDisabled { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialButtonComponent.Label Gets the label on the button. Declaration Optional<string> IPartialButtonComponent.Label { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialButtonComponent.Style Gets the button's style. Declaration Optional<ButtonComponentStyle> IPartialButtonComponent.Style { get; } Returns Type Description Remora.Rest.Core.Optional < ButtonComponentStyle > | Improve this Doc View Source IPartialButtonComponent.Type Gets the type of the component. Declaration Optional<ComponentType> IPartialButtonComponent.Type { get; } Returns Type Description Remora.Rest.Core.Optional < ComponentType > | Improve this Doc View Source IPartialButtonComponent.URL Gets the URL used for link-style buttons. Declaration Optional<string> IPartialButtonComponent.URL { get; } Returns Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IChannel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IChannel.html",
    "title": "Interface IChannel | Remora.Discord",
    "keywords": "Interface IChannel Represents a channel. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IChannel : IPartialChannel Properties | Improve this Doc View Source ApplicationID Gets the application ID of the group DM creator, if it is bot-created. Declaration Optional<Snowflake> ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Bitrate Gets the bitrate (in bits) of the channel. Minimum 8000. Declaration Optional<int> Bitrate { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source DefaultAutoArchiveDuration Gets the default duration for newly created threads in this channel. Declaration Optional<AutoArchiveDuration> DefaultAutoArchiveDuration { get; } Property Value Type Description Remora.Rest.Core.Optional < AutoArchiveDuration > | Improve this Doc View Source GuildID Gets the ID of the guild the channel is in. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Icon Gets the icon of the group DM. Declaration Optional<IImageHash> Icon { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Gets the ID of the channel. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsNsfw Gets a value indicating whether the channel is NSFW. Declaration Optional<bool> IsNsfw { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source LastMessageID Gets the ID of the last message sent in the channel. Declaration Optional<Snowflake?> LastMessageID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source LastPinTimestamp Gets the time when the last pinned message was pinned. Declaration Optional<DateTimeOffset?> LastPinTimestamp { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Member Gets the thread member object for the current user, if they have joined the thread. Declaration Optional<IThreadMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IThreadMember > | Improve this Doc View Source MemberCount Gets an approximate count of the messages in the channel. Stops counting at 50. Declaration Optional<int> MemberCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MessageCount Gets an approximate count of the messages in the channel. Stops counting at 50. Declaration Optional<int> MessageCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Name Gets the name of the channel. Declaration Optional<string> Name { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source OwnerID Gets the ID of the DM creator. Declaration Optional<Snowflake> OwnerID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ParentID Gets the ID of the parent category for a channel. Each category can contain up to 50 channels. Declaration Optional<Snowflake?> ParentID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source PermissionOverwrites Gets a list of explicit permission overwrites for members and roles. Declaration Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> | Improve this Doc View Source Permissions Gets the computed permission set for the invoking user in the channel. Typically present when the channel is resolved via a slash command interaction. Declaration Optional<IDiscordPermissionSet> Permissions { get; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source Position Gets the sorting position of the channel. Declaration Optional<int> Position { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source RateLimitPerUser Gets the number of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission ManageMessages or ManageChannels are unaffected. This is colloquially known as \"slow mode\". Declaration Optional<TimeSpan> RateLimitPerUser { get; } Property Value Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source Recipients Gets the recipients of the DM. Declaration Optional<IReadOnlyList<IUser>> Recipients { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IUser >> | Improve this Doc View Source RTCRegion Gets the ID of the voice channel region. Declaration Optional<string> RTCRegion { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ThreadMetadata Gets a set of thread-specific fields. Declaration Optional<IThreadMetadata> ThreadMetadata { get; } Property Value Type Description Remora.Rest.Core.Optional < IThreadMetadata > | Improve this Doc View Source Topic Gets the topic of the channel. Declaration Optional<string> Topic { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Gets the type of the channel. Declaration ChannelType Type { get; } Property Value Type Description ChannelType | Improve this Doc View Source UserLimit Gets the user limit of the voice channel. Declaration Optional<int> UserLimit { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source VideoQualityMode Gets the video quality mode of the channel. Declaration Optional<VideoQualityMode> VideoQualityMode { get; } Property Value Type Description Remora.Rest.Core.Optional < VideoQualityMode > Explicit Interface Implementations | Improve this Doc View Source IPartialChannel.ApplicationID Gets the application ID of the group DM creator, if it is bot-created. Declaration Optional<Snowflake> IPartialChannel.ApplicationID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialChannel.Bitrate Gets the bitrate (in bits) of the channel. Minimum 8000. Declaration Optional<int> IPartialChannel.Bitrate { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialChannel.DefaultAutoArchiveDuration Gets the default duration for newly created threads in this channel. Declaration Optional<AutoArchiveDuration> IPartialChannel.DefaultAutoArchiveDuration { get; } Returns Type Description Remora.Rest.Core.Optional < AutoArchiveDuration > | Improve this Doc View Source IPartialChannel.GuildID Gets the ID of the guild the channel is in. Declaration Optional<Snowflake> IPartialChannel.GuildID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialChannel.Icon Gets the icon of the group DM. Declaration Optional<IImageHash> IPartialChannel.Icon { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialChannel.ID Gets the ID of the channel. Declaration Optional<Snowflake> IPartialChannel.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialChannel.IsNsfw Gets a value indicating whether the channel is NSFW. Declaration Optional<bool> IPartialChannel.IsNsfw { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialChannel.LastMessageID Gets the ID of the last message sent in the channel. Declaration Optional<Snowflake?> IPartialChannel.LastMessageID { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialChannel.LastPinTimestamp Gets the time when the last pinned message was pinned. Declaration Optional<DateTimeOffset?> IPartialChannel.LastPinTimestamp { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IPartialChannel.Member Gets the thread member object for the current user, if they have joined the thread. Declaration Optional<IThreadMember> IPartialChannel.Member { get; } Returns Type Description Remora.Rest.Core.Optional < IThreadMember > | Improve this Doc View Source IPartialChannel.MemberCount Gets an approximate count of the messages in the channel. Stops counting at 50. Declaration Optional<int> IPartialChannel.MemberCount { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialChannel.MessageCount Gets an approximate count of the messages in the channel. Stops counting at 50. Declaration Optional<int> IPartialChannel.MessageCount { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialChannel.Name Gets the name of the channel. Declaration Optional<string> IPartialChannel.Name { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialChannel.OwnerID Gets the ID of the DM creator. Declaration Optional<Snowflake> IPartialChannel.OwnerID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialChannel.ParentID Gets the ID of the parent category for a channel. Each category can contain up to 50 channels. Declaration Optional<Snowflake?> IPartialChannel.ParentID { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialChannel.PermissionOverwrites Gets a list of explicit permission overwrites for members and roles. Declaration Optional<IReadOnlyList<IPermissionOverwrite>> IPartialChannel.PermissionOverwrites { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> | Improve this Doc View Source IPartialChannel.Permissions Gets the computed permission set for the invoking user in the channel. Typically present when the channel is resolved via a slash command interaction. Declaration Optional<IDiscordPermissionSet> IPartialChannel.Permissions { get; } Returns Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source IPartialChannel.Position Gets the sorting position of the channel. Declaration Optional<int> IPartialChannel.Position { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialChannel.RateLimitPerUser Gets the number of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission ManageMessages or ManageChannels are unaffected. This is colloquially known as \"slow mode\". Declaration Optional<TimeSpan> IPartialChannel.RateLimitPerUser { get; } Returns Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source IPartialChannel.Recipients Gets the recipients of the DM. Declaration Optional<IReadOnlyList<IUser>> IPartialChannel.Recipients { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IUser >> | Improve this Doc View Source IPartialChannel.RTCRegion Gets the ID of the voice channel region. Declaration Optional<string> IPartialChannel.RTCRegion { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialChannel.ThreadMetadata Gets a set of thread-specific fields. Declaration Optional<IThreadMetadata> IPartialChannel.ThreadMetadata { get; } Returns Type Description Remora.Rest.Core.Optional < IThreadMetadata > | Improve this Doc View Source IPartialChannel.Topic Gets the topic of the channel. Declaration Optional<string> IPartialChannel.Topic { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialChannel.Type Gets the type of the channel. Declaration Optional<ChannelType> IPartialChannel.Type { get; } Returns Type Description Remora.Rest.Core.Optional < ChannelType > | Improve this Doc View Source IPartialChannel.UserLimit Gets the user limit of the voice channel. Declaration Optional<int> IPartialChannel.UserLimit { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialChannel.VideoQualityMode Gets the video quality mode of the channel. Declaration Optional<VideoQualityMode> IPartialChannel.VideoQualityMode { get; } Returns Type Description Remora.Rest.Core.Optional < VideoQualityMode >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IChannelMention.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IChannelMention.html",
    "title": "Interface IChannelMention | Remora.Discord",
    "keywords": "Interface IChannelMention Represents a mentioned channel. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IChannelMention Properties | Improve this Doc View Source GuildID Gets the ID of the guild the channel is in. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ID Gets the ID of the channel. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Gets the name of the channel. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Type Gets the channel type. Declaration ChannelType Type { get; } Property Value Type Description ChannelType"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IChannelTemplate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IChannelTemplate.html",
    "title": "Interface IChannelTemplate | Remora.Discord",
    "keywords": "Interface IChannelTemplate Represents a channel. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IChannelTemplate Properties | Improve this Doc View Source Bitrate Gets the bitrate (in bits) of the channel. Declaration int Bitrate { get; } Property Value Type Description Int32 | Improve this Doc View Source ID Gets the relative ID of the channel. Declaration int ID { get; } Property Value Type Description Int32 | Improve this Doc View Source IsNsfw Gets a value indicating whether the channel is NSFW. Declaration bool IsNsfw { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the name of the channel. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source ParentID Gets the relative ID of the parent category for a channel. Each category can contain up to 50 channels. Declaration int? ParentID { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source PermissionOverwrites Gets a list of explicit permission overwrites for members and roles. Declaration IReadOnlyList<IPermissionOverwriteTemplate> PermissionOverwrites { get; } Property Value Type Description IReadOnlyList < IPermissionOverwriteTemplate > | Improve this Doc View Source Position Gets the sorting position of the channel. Declaration int Position { get; } Property Value Type Description Int32 | Improve this Doc View Source RateLimitPerUser Gets the number of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission ManageMessages or ManageChannels are unaffected. This is colloquially known as \"slow mode\". Declaration int RateLimitPerUser { get; } Property Value Type Description Int32 | Improve this Doc View Source Topic Gets the topic of the channel. Declaration string Topic { get; } Property Value Type Description String | Improve this Doc View Source Type Gets the type of the channel. Declaration ChannelType Type { get; } Property Value Type Description ChannelType | Improve this Doc View Source UserLimit Gets the user limit of the voice channel. Declaration int UserLimit { get; } Property Value Type Description Int32"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IClientStatuses.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IClientStatuses.html",
    "title": "Interface IClientStatuses | Remora.Discord",
    "keywords": "Interface IClientStatuses Represents a collection of platform statues. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IClientStatuses Properties | Improve this Doc View Source Desktop Gets the status of the user on desktop. Declaration Optional<ClientStatus> Desktop { get; } Property Value Type Description Remora.Rest.Core.Optional < ClientStatus > | Improve this Doc View Source Mobile Gets the status of the user on mobile. Declaration Optional<ClientStatus> Mobile { get; } Property Value Type Description Remora.Rest.Core.Optional < ClientStatus > | Improve this Doc View Source Web Gets the status of the user in the browser. Declaration Optional<ClientStatus> Web { get; } Property Value Type Description Remora.Rest.Core.Optional < ClientStatus >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IConnection.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IConnection.html",
    "title": "Interface IConnection | Remora.Discord",
    "keywords": "Interface IConnection Represents a connection between a user account and an external service. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IConnection Properties | Improve this Doc View Source ID Gets the ID of the connection account. Declaration string ID { get; } Property Value Type Description String | Improve this Doc View Source Integrations Gets a list of server integrations. Declaration Optional<IReadOnlyList<IPartialIntegration>> Integrations { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialIntegration >> | Improve this Doc View Source IsFriendSyncEnabled Gets a value indicating whether friend synchronization is enabled. Declaration bool IsFriendSyncEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRevoked Gets a value indicating whether the connection has been revoked. Declaration Optional<bool> IsRevoked { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsVerified Gets a value indicating whether the connection is verified. Declaration bool IsVerified { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the username of the connection account. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source ShouldShowActivity Gets a value indicating whether activities related to this connection are shown in presence updates. Declaration bool ShouldShowActivity { get; } Property Value Type Description Boolean | Improve this Doc View Source Type Gets the type of connection. Declaration string Type { get; } Property Value Type Description String | Improve this Doc View Source Visibility Gets the visibility of this connection. Declaration ConnectionVisibility Visibility { get; } Property Value Type Description ConnectionVisibility"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet.html",
    "title": "Interface IDiscordPermissionSet | Remora.Discord",
    "keywords": "Interface IDiscordPermissionSet Represents a Discord permission set. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordPermissionSet Properties | Improve this Doc View Source Value Gets the raw value of the permission set. Declaration BigInteger Value { get; } Property Value Type Description BigInteger Methods | Improve this Doc View Source GetPermissions() Gets a list of the DiscordPermission values contained within the set. Declaration IReadOnlyList<DiscordPermission> GetPermissions() Returns Type Description IReadOnlyList < DiscordPermission > A list of DiscordPermission value. | Improve this Doc View Source HasPermission(DiscordPermission) Determines whether the set allows the given permission. Declaration bool HasPermission(DiscordPermission permission) Parameters Type Name Description DiscordPermission permission The permission. Returns Type Description Boolean true if the given permission is in the set; otherwise, false. | Improve this Doc View Source HasPermission(DiscordTextPermission) Determines whether the set allows the given permission. Declaration bool HasPermission(DiscordTextPermission permission) Parameters Type Name Description DiscordTextPermission permission The permission. Returns Type Description Boolean true if the given permission is in the set; otherwise, false. | Improve this Doc View Source HasPermission(DiscordVoicePermission) Determines whether the set allows the given permission. Declaration bool HasPermission(DiscordVoicePermission permission) Parameters Type Name Description DiscordVoicePermission permission The permission. Returns Type Description Boolean true if the given permission is in the set; otherwise, false."
  },
  "api/Remora.Discord.API.Abstractions.Objects.IEmbed.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IEmbed.html",
    "title": "Interface IEmbed | Remora.Discord",
    "keywords": "Interface IEmbed Represents an embed. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IEmbed Properties | Improve this Doc View Source Author Gets the author information. Declaration Optional<IEmbedAuthor> Author { get; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedAuthor > | Improve this Doc View Source Colour Gets the colour code of the embed. Declaration Optional<Color> Colour { get; } Property Value Type Description Remora.Rest.Core.Optional < Color > | Improve this Doc View Source Description Gets the description of the embed. Declaration Optional<string> Description { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Fields Gets the embed fields. Declaration Optional<IReadOnlyList<IEmbedField>> Fields { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IEmbedField >> | Improve this Doc View Source Footer Gets the footer information. Declaration Optional<IEmbedFooter> Footer { get; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedFooter > | Improve this Doc View Source Image Gets the image information. Declaration Optional<IEmbedImage> Image { get; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedImage > | Improve this Doc View Source Provider Gets the provider information. Declaration Optional<IEmbedProvider> Provider { get; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedProvider > | Improve this Doc View Source Thumbnail Gets the thumbnail information. Declaration Optional<IEmbedThumbnail> Thumbnail { get; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedThumbnail > | Improve this Doc View Source Timestamp Gets the timestamp of the embed content. Declaration Optional<DateTimeOffset> Timestamp { get; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Title Gets the title of the embed. Declaration Optional<string> Title { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Gets the type of the embed. Declaration Optional<EmbedType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < EmbedType > | Improve this Doc View Source Url Gets the URL of the embed. Declaration Optional<string> Url { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Video Gets the video information. Declaration Optional<IEmbedVideo> Video { get; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedVideo >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IEmbedAuthor.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IEmbedAuthor.html",
    "title": "Interface IEmbedAuthor | Remora.Discord",
    "keywords": "Interface IEmbedAuthor Represents information about an embed author. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IEmbedAuthor Properties | Improve this Doc View Source IconUrl Gets the icon URL of the author. Declaration Optional<string> IconUrl { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Name Gets the name of the author. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source ProxyIconUrl Gets the proxied icon URL of the thumbnail. Declaration Optional<string> ProxyIconUrl { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Url Gets the Url of the author. Declaration Optional<string> Url { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IEmbedField.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IEmbedField.html",
    "title": "Interface IEmbedField | Remora.Discord",
    "keywords": "Interface IEmbedField Represents a field in an embed. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IEmbedField Properties | Improve this Doc View Source IsInline Gets a value indicating whether the field should display inline. Declaration Optional<bool> IsInline { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Gets the name of the field. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Value Gets the value of the field. Declaration string Value { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IEmbedFooter.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IEmbedFooter.html",
    "title": "Interface IEmbedFooter | Remora.Discord",
    "keywords": "Interface IEmbedFooter Represents a footer in an embed. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IEmbedFooter Properties | Improve this Doc View Source IconUrl Gets the URL of the footer icon. Only supports http(s) and attachments. Declaration Optional<string> IconUrl { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ProxyIconUrl Gets the proxied icon URL. Declaration Optional<string> ProxyIconUrl { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Text Gets the text of the footer. Declaration string Text { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IEmbedImage.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IEmbedImage.html",
    "title": "Interface IEmbedImage | Remora.Discord",
    "keywords": "Interface IEmbedImage Represents information about an image in an embed. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IEmbedImage Properties | Improve this Doc View Source Height Gets the height of the thumbnail. Declaration Optional<int> Height { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ProxyUrl Gets the proxied URL of the thumbnail. Declaration Optional<string> ProxyUrl { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Url Gets the source URL of the thumbnail. Only supports http(s) and attachments. Declaration string Url { get; } Property Value Type Description String | Improve this Doc View Source Width Gets the width of the thumbnail. Declaration Optional<int> Width { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IEmbedProvider.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IEmbedProvider.html",
    "title": "Interface IEmbedProvider | Remora.Discord",
    "keywords": "Interface IEmbedProvider Represents information about an embed provider. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IEmbedProvider Properties | Improve this Doc View Source Name Gets the name of the provider. Declaration Optional<string> Name { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Url Gets the URL of the provider. Declaration Optional<string> Url { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IEmbedThumbnail.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IEmbedThumbnail.html",
    "title": "Interface IEmbedThumbnail | Remora.Discord",
    "keywords": "Interface IEmbedThumbnail Represents information about a thumbnail in an embed. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IEmbedThumbnail Properties | Improve this Doc View Source Height Gets the height of the thumbnail. Declaration Optional<int> Height { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ProxyUrl Gets the proxied URL of the thumbnail. Declaration Optional<string> ProxyUrl { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Url Gets the source URL of the thumbnail. Only supports http(s) and attachments. Declaration string Url { get; } Property Value Type Description String | Improve this Doc View Source Width Gets the width of the thumbnail. Declaration Optional<int> Width { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IEmbedVideo.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IEmbedVideo.html",
    "title": "Interface IEmbedVideo | Remora.Discord",
    "keywords": "Interface IEmbedVideo Represents information about a video in an embed. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IEmbedVideo Properties | Improve this Doc View Source Height Gets the height of the video. Declaration Optional<int> Height { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ProxyUrl Gets the proxied URL of the video. Declaration Optional<string> ProxyUrl { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Url Gets the source URL of the video. Declaration Optional<string> Url { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Width Gets the width of the video. Declaration Optional<int> Width { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IEmoji.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IEmoji.html",
    "title": "Interface IEmoji | Remora.Discord",
    "keywords": "Interface IEmoji Represents an emoji. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IEmoji : IPartialEmoji Properties | Improve this Doc View Source ID Gets the ID of the emoji. Declaration Snowflake? ID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsAnimated Gets a value indicating whether this emoji is animated. Declaration Optional<bool> IsAnimated { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsAvailable Gets a value indicating whether this emoji is available. May be false due to a loss of server boosts. Declaration Optional<bool> IsAvailable { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsManaged Gets a value indicating whether this emoji is managed. Declaration Optional<bool> IsManaged { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Gets the name of the emoji. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source RequireColons Gets a value indicating whether this emoji must be wrapped in colons. Declaration Optional<bool> RequireColons { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Roles Gets a list of roles this emoji is whitelisted to. Declaration Optional<IReadOnlyList<Snowflake>> Roles { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source User Gets the user that created this emoji. Declaration Optional<IUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Explicit Interface Implementations | Improve this Doc View Source IPartialEmoji.ID Gets the ID of the emoji. Declaration Optional<Snowflake?> IPartialEmoji.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialEmoji.IsAnimated Gets a value indicating whether this emoji is animated. Declaration Optional<bool> IPartialEmoji.IsAnimated { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialEmoji.IsAvailable Gets a value indicating whether this emoji is available. May be false due to a loss of server boosts. Declaration Optional<bool> IPartialEmoji.IsAvailable { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialEmoji.IsManaged Gets a value indicating whether this emoji is managed. Declaration Optional<bool> IPartialEmoji.IsManaged { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialEmoji.Name Gets the name of the emoji. Declaration Optional<string> IPartialEmoji.Name { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialEmoji.RequireColons Gets a value indicating whether this emoji must be wrapped in colons. Declaration Optional<bool> IPartialEmoji.RequireColons { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialEmoji.Roles Gets a list of roles this emoji is whitelisted to. Declaration Optional<IReadOnlyList<Snowflake>> IPartialEmoji.Roles { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialEmoji.User Gets the user that created this emoji. Declaration Optional<IUser> IPartialEmoji.User { get; } Returns Type Description Remora.Rest.Core.Optional < IUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IErrorDetails.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IErrorDetails.html",
    "title": "Interface IErrorDetails | Remora.Discord",
    "keywords": "Interface IErrorDetails Represents information about a single error. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IErrorDetails Properties | Improve this Doc View Source Code Gets the detailed error code. This is the name of an error enumeration member. Declaration string Code { get; } Property Value Type Description String | Improve this Doc View Source Message Gets the detailed error message. Declaration string Message { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IFollowedChannel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IFollowedChannel.html",
    "title": "Interface IFollowedChannel | Remora.Discord",
    "keywords": "Interface IFollowedChannel Represents a followed news channel. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IFollowedChannel Properties | Improve this Doc View Source ChannelID Gets the ID of the followed channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source WebhookID Gets the ID of the channel where updates are posted. Declaration Snowflake WebhookID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGatewayEndpoint.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGatewayEndpoint.html",
    "title": "Interface IGatewayEndpoint | Remora.Discord",
    "keywords": "Interface IGatewayEndpoint Represents a gateway endpoint. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGatewayEndpoint Properties | Improve this Doc View Source SessionStartLimit Gets information about the current session start limit. Declaration Optional<ISessionStartLimit> SessionStartLimit { get; } Property Value Type Description Remora.Rest.Core.Optional < ISessionStartLimit > | Improve this Doc View Source Shards Gets the recommended number of shards to use when connecting. Declaration Optional<int> Shards { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Url Gets the gateway endpoint. Declaration string Url { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuild.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuild.html",
    "title": "Interface IGuild | Remora.Discord",
    "keywords": "Interface IGuild Represents a Discord Guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuild : IPartialGuild Properties | Improve this Doc View Source AFKChannelID Gets the ID of the AFK channel. Declaration Snowflake? AFKChannelID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source AFKTimeout Gets the AFK timeout (in seconds). Declaration TimeSpan AFKTimeout { get; } Property Value Type Description TimeSpan | Improve this Doc View Source ApplicationID Gets the application ID of the guild creator if it is bot-created. Declaration Snowflake? ApplicationID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ApproximateMemberCount Gets the approximate number of members in the guild. Declaration Optional<int> ApproximateMemberCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ApproximatePresenceCount Gets the approximate number of non-offline members in the guild. Declaration Optional<int> ApproximatePresenceCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Banner Gets the hash of the guild banner. Declaration IImageHash Banner { get; } Property Value Type Description IImageHash | Improve this Doc View Source DefaultMessageNotifications Gets the default notification level for the guild. Declaration MessageNotificationLevel DefaultMessageNotifications { get; } Property Value Type Description MessageNotificationLevel | Improve this Doc View Source Description Gets the description of the guild. Declaration string Description { get; } Property Value Type Description String | Improve this Doc View Source DiscoverySplash Gets the guild's Discovery splash banner. Declaration IImageHash DiscoverySplash { get; } Property Value Type Description IImageHash | Improve this Doc View Source Emojis Gets a list of emojis in the server. Declaration IReadOnlyList<IEmoji> Emojis { get; } Property Value Type Description IReadOnlyList < IEmoji > | Improve this Doc View Source ExplicitContentFilter Gets the explicit content level. Declaration ExplicitContentFilterLevel ExplicitContentFilter { get; } Property Value Type Description ExplicitContentFilterLevel | Improve this Doc View Source GuildFeatures Gets a list of guild features. Declaration IReadOnlyList<GuildFeature> GuildFeatures { get; } Property Value Type Description IReadOnlyList < GuildFeature > | Improve this Doc View Source Icon Gets the guild's icon. Declaration IImageHash Icon { get; } Property Value Type Description IImageHash | Improve this Doc View Source ID Gets the ID of the guild. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsOwner Gets a value indicating whether the current user is the guild's owner. Declaration Optional<bool> IsOwner { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsPremiumProgressBarEnabled Gets a value indicating whether the guild has the boost progress bar enabled. Declaration bool IsPremiumProgressBarEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source IsWidgetEnabled Gets a value indicating whether the server widget is enabled. Declaration Optional<bool> IsWidgetEnabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MaxMembers Gets the maximum number of members for the guild. Declaration Optional<int> MaxMembers { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MaxPresences Gets the maximum number of presences for the guild. This is null for all but the largest of guilds. Declaration Optional<int?> MaxPresences { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> | Improve this Doc View Source MaxVideoChannelUsers Gets the maximum number of users in a video channel. Declaration Optional<int> MaxVideoChannelUsers { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MFALevel Gets the required MFA level for the guild. Declaration MultiFactorAuthenticationLevel MFALevel { get; } Property Value Type Description MultiFactorAuthenticationLevel | Improve this Doc View Source Name Gets the name of the guild. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source NSFWLevel Gets the guild's NSFW level. Declaration GuildNSFWLevel NSFWLevel { get; } Property Value Type Description GuildNSFWLevel | Improve this Doc View Source OwnerID Gets the ID of the owner. Declaration Snowflake OwnerID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Permissions Gets the permissions for the current user in the guild. Declaration Optional<IDiscordPermissionSet> Permissions { get; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source PreferredLocale Gets the preferred locale of a public-enabled guild. Declaration string PreferredLocale { get; } Property Value Type Description String | Improve this Doc View Source PremiumSubscriptionCount Gets the number of boosts the guild currently has. Declaration Optional<int> PremiumSubscriptionCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source PremiumTier Gets the boost level of the guild. Declaration PremiumTier PremiumTier { get; } Property Value Type Description PremiumTier | Improve this Doc View Source PublicUpdatesChannelID Gets the ID of the channel where admins and moderators of community-enabled guilds receive notices from Discord. Declaration Snowflake? PublicUpdatesChannelID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Roles Gets a list of the roles in the server. Declaration IReadOnlyList<IRole> Roles { get; } Property Value Type Description IReadOnlyList < IRole > | Improve this Doc View Source RulesChannelID Gets the ID of the rules channel, if any. This is the channel where community-enabled guilds can display rules and/or guidelines. Declaration Snowflake? RulesChannelID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Splash Gets the guild's splash banner. Declaration IImageHash Splash { get; } Property Value Type Description IImageHash | Improve this Doc View Source Stickers Gets the stickers in the guild. Declaration Optional<IReadOnlyList<ISticker>> Stickers { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < ISticker >> | Improve this Doc View Source SystemChannelFlags Gets the flags on the system channel. Declaration SystemChannelFlags SystemChannelFlags { get; } Property Value Type Description SystemChannelFlags | Improve this Doc View Source SystemChannelID Gets the ID of the channel that system messages are sent to. Declaration Snowflake? SystemChannelID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source VanityUrlCode Gets the vanity url code for the guild. Declaration string VanityUrlCode { get; } Property Value Type Description String | Improve this Doc View Source VerificationLevel Gets the verification level required for the guild. Declaration VerificationLevel VerificationLevel { get; } Property Value Type Description VerificationLevel | Improve this Doc View Source WelcomeScreen Gets the welcome screen shown to new members. Declaration Optional<IWelcomeScreen> WelcomeScreen { get; } Property Value Type Description Remora.Rest.Core.Optional < IWelcomeScreen > | Improve this Doc View Source WidgetChannelID Gets the ID of the channel the widget generates invites to. Declaration Optional<Snowflake?> WidgetChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> Explicit Interface Implementations | Improve this Doc View Source IPartialGuild.AFKChannelID Gets the ID of the AFK channel. Declaration Optional<Snowflake?> IPartialGuild.AFKChannelID { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialGuild.AFKTimeout Gets the AFK timeout (in seconds). Declaration Optional<TimeSpan> IPartialGuild.AFKTimeout { get; } Returns Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source IPartialGuild.ApplicationID Gets the application ID of the guild creator if it is bot-created. Declaration Optional<Snowflake?> IPartialGuild.ApplicationID { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialGuild.ApproximateMemberCount Gets the approximate number of members in the guild. Declaration Optional<int> IPartialGuild.ApproximateMemberCount { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialGuild.ApproximatePresenceCount Gets the approximate number of non-offline members in the guild. Declaration Optional<int> IPartialGuild.ApproximatePresenceCount { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialGuild.Banner Gets the hash of the guild banner. Declaration Optional<IImageHash> IPartialGuild.Banner { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialGuild.DefaultMessageNotifications Gets the default notification level for the guild. Declaration Optional<MessageNotificationLevel> IPartialGuild.DefaultMessageNotifications { get; } Returns Type Description Remora.Rest.Core.Optional < MessageNotificationLevel > | Improve this Doc View Source IPartialGuild.Description Gets the description of the guild. Declaration Optional<string> IPartialGuild.Description { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialGuild.DiscoverySplash Gets the guild's Discovery splash banner. Declaration Optional<IImageHash> IPartialGuild.DiscoverySplash { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialGuild.Emojis Gets a list of emojis in the server. Declaration Optional<IReadOnlyList<IEmoji>> IPartialGuild.Emojis { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IEmoji >> | Improve this Doc View Source IPartialGuild.ExplicitContentFilter Gets the explicit content level. Declaration Optional<ExplicitContentFilterLevel> IPartialGuild.ExplicitContentFilter { get; } Returns Type Description Remora.Rest.Core.Optional < ExplicitContentFilterLevel > | Improve this Doc View Source IPartialGuild.GuildFeatures Gets a list of guild features. Declaration Optional<IReadOnlyList<GuildFeature>> IPartialGuild.GuildFeatures { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < GuildFeature >> | Improve this Doc View Source IPartialGuild.Icon Gets the guild's icon. Declaration Optional<IImageHash> IPartialGuild.Icon { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialGuild.ID Gets the ID of the guild. Declaration Optional<Snowflake> IPartialGuild.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialGuild.IsOwner Gets a value indicating whether the current user is the guild's owner. Declaration Optional<bool> IPartialGuild.IsOwner { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialGuild.IsPremiumProgressBarEnabled Gets a value indicating whether the guild has the boost progress bar enabled. Declaration Optional<bool> IPartialGuild.IsPremiumProgressBarEnabled { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialGuild.IsWidgetEnabled Gets a value indicating whether the server widget is enabled. Declaration Optional<bool> IPartialGuild.IsWidgetEnabled { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialGuild.MaxMembers Gets the maximum number of members for the guild. Declaration Optional<int> IPartialGuild.MaxMembers { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialGuild.MaxPresences Gets the maximum number of presences for the guild. This is null for all but the largest of guilds. Declaration Optional<int?> IPartialGuild.MaxPresences { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> | Improve this Doc View Source IPartialGuild.MaxVideoChannelUsers Gets the maximum number of users in a video channel. Declaration Optional<int> IPartialGuild.MaxVideoChannelUsers { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialGuild.MFALevel Gets the required MFA level for the guild. Declaration Optional<MultiFactorAuthenticationLevel> IPartialGuild.MFALevel { get; } Returns Type Description Remora.Rest.Core.Optional < MultiFactorAuthenticationLevel > | Improve this Doc View Source IPartialGuild.Name Gets the name of the guild. Declaration Optional<string> IPartialGuild.Name { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialGuild.NSFWLevel Gets the guild's NSFW level. Declaration Optional<GuildNSFWLevel> IPartialGuild.NSFWLevel { get; } Returns Type Description Remora.Rest.Core.Optional < GuildNSFWLevel > | Improve this Doc View Source IPartialGuild.OwnerID Gets the ID of the owner. Declaration Optional<Snowflake> IPartialGuild.OwnerID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialGuild.Permissions Gets the permissions for the current user in the guild. Declaration Optional<IDiscordPermissionSet> IPartialGuild.Permissions { get; } Returns Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source IPartialGuild.PreferredLocale Gets the preferred locale of a public-enabled guild. Declaration Optional<string> IPartialGuild.PreferredLocale { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialGuild.PremiumSubscriptionCount Gets the number of boosts the guild currently has. Declaration Optional<int> IPartialGuild.PremiumSubscriptionCount { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialGuild.PremiumTier Gets the boost level of the guild. Declaration Optional<PremiumTier> IPartialGuild.PremiumTier { get; } Returns Type Description Remora.Rest.Core.Optional < PremiumTier > | Improve this Doc View Source IPartialGuild.PublicUpdatesChannelID Gets the ID of the channel where admins and moderators of community-enabled guilds receive notices from Discord. Declaration Optional<Snowflake?> IPartialGuild.PublicUpdatesChannelID { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialGuild.Roles Gets a list of the roles in the server. Declaration Optional<IReadOnlyList<IRole>> IPartialGuild.Roles { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IRole >> | Improve this Doc View Source IPartialGuild.RulesChannelID Gets the ID of the rules channel, if any. This is the channel where community-enabled guilds can display rules and/or guidelines. Declaration Optional<Snowflake?> IPartialGuild.RulesChannelID { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialGuild.Splash Gets the guild's splash banner. Declaration Optional<IImageHash> IPartialGuild.Splash { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialGuild.Stickers Gets the stickers in the guild. Declaration Optional<IReadOnlyList<ISticker>> IPartialGuild.Stickers { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < ISticker >> | Improve this Doc View Source IPartialGuild.SystemChannelFlags Gets the flags on the system channel. Declaration Optional<SystemChannelFlags> IPartialGuild.SystemChannelFlags { get; } Returns Type Description Remora.Rest.Core.Optional < SystemChannelFlags > | Improve this Doc View Source IPartialGuild.SystemChannelID Gets the ID of the channel that system messages are sent to. Declaration Optional<Snowflake?> IPartialGuild.SystemChannelID { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialGuild.VanityUrlCode Gets the vanity url code for the guild. Declaration Optional<string> IPartialGuild.VanityUrlCode { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialGuild.VerificationLevel Gets the verification level required for the guild. Declaration Optional<VerificationLevel> IPartialGuild.VerificationLevel { get; } Returns Type Description Remora.Rest.Core.Optional < VerificationLevel > | Improve this Doc View Source IPartialGuild.WelcomeScreen Gets the welcome screen shown to new members. Declaration Optional<IWelcomeScreen> IPartialGuild.WelcomeScreen { get; } Returns Type Description Remora.Rest.Core.Optional < IWelcomeScreen > | Improve this Doc View Source IPartialGuild.WidgetChannelID Gets the ID of the channel the widget generates invites to. Declaration Optional<Snowflake?> IPartialGuild.WidgetChannelID { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >>"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuildApplicationCommandPermissions.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuildApplicationCommandPermissions.html",
    "title": "Interface IGuildApplicationCommandPermissions | Remora.Discord",
    "keywords": "Interface IGuildApplicationCommandPermissions Represents a set of permissions for a command in a guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildApplicationCommandPermissions : IPartialGuildApplicationCommandPermissions Properties | Improve this Doc View Source ApplicationID Gets the ID of the application the command belongs to. Declaration Snowflake ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ID Gets the ID of the command or the application the permission applies to. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake Remarks If this ID is that of an application, its permissions apply to all commands that do not have an explicit permission set. | Improve this Doc View Source Permissions Gets the permissions for the command in the guild. Declaration IReadOnlyList<IApplicationCommandPermissions> Permissions { get; } Property Value Type Description IReadOnlyList < IApplicationCommandPermissions > Explicit Interface Implementations | Improve this Doc View Source IPartialGuildApplicationCommandPermissions.ApplicationID Gets the ID of the application the command belongs to. Declaration Optional<Snowflake> IPartialGuildApplicationCommandPermissions.ApplicationID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialGuildApplicationCommandPermissions.GuildID Gets the ID of the guild. Declaration Optional<Snowflake> IPartialGuildApplicationCommandPermissions.GuildID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialGuildApplicationCommandPermissions.ID Gets the ID of the command or the application the permission applies to. Declaration Optional<Snowflake> IPartialGuildApplicationCommandPermissions.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > Remarks If this ID is that of an application, its permissions apply to all commands that do not have an explicit permission set. | Improve this Doc View Source IPartialGuildApplicationCommandPermissions.Permissions Gets the permissions for the command in the guild. Declaration Optional<IReadOnlyList<IApplicationCommandPermissions>> IPartialGuildApplicationCommandPermissions.Permissions { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandPermissions >>"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuildMember.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuildMember.html",
    "title": "Interface IGuildMember | Remora.Discord",
    "keywords": "Interface IGuildMember Represents information about a guild member. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildMember : IPartialGuildMember Properties | Improve this Doc View Source Avatar Gets the member's guild avatar hash. Declaration Optional<IImageHash> Avatar { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source CommunicationDisabledUntil Gets the DateTimeOffset until the user has communication disabled. Declaration Optional<DateTimeOffset?> CommunicationDisabledUntil { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IsDeafened Gets a value indicating whether the user is deafened in voice channels. Declaration bool IsDeafened { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMuted Gets a value indicating whether the user is muted in voice channels. Declaration bool IsMuted { get; } Property Value Type Description Boolean | Improve this Doc View Source IsPending Gets a value indicating whether the user has passed the guild membership screening requirements. Declaration Optional<bool?> IsPending { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Boolean >> | Improve this Doc View Source JoinedAt Gets when the user joined the guild. Declaration DateTimeOffset JoinedAt { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Nickname Gets the user's guild nickname. Declaration Optional<string> Nickname { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Permissions Gets the total permissions of the member in a channel, including overrides. Declaration Optional<IDiscordPermissionSet> Permissions { get; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source PremiumSince Gets when the user started boosting the guild. Declaration Optional<DateTimeOffset?> PremiumSince { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Roles Gets the roles the user has. Declaration IReadOnlyList<Snowflake> Roles { get; } Property Value Type Description IReadOnlyList < Remora.Rest.Core.Snowflake > | Improve this Doc View Source User Gets the user this guild member represents. Declaration Optional<IUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Explicit Interface Implementations | Improve this Doc View Source IPartialGuildMember.Avatar Gets the member's guild avatar hash. Declaration Optional<IImageHash> IPartialGuildMember.Avatar { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialGuildMember.CommunicationDisabledUntil Gets the DateTimeOffset until the user has communication disabled. Declaration Optional<DateTimeOffset?> IPartialGuildMember.CommunicationDisabledUntil { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IPartialGuildMember.IsDeafened Gets a value indicating whether the user is deafened in voice channels. Declaration Optional<bool> IPartialGuildMember.IsDeafened { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialGuildMember.IsMuted Gets a value indicating whether the user is muted in voice channels. Declaration Optional<bool> IPartialGuildMember.IsMuted { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialGuildMember.IsPending Gets a value indicating whether the user has passed the guild membership screening requirements. Declaration Optional<bool?> IPartialGuildMember.IsPending { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Boolean >> | Improve this Doc View Source IPartialGuildMember.JoinedAt Gets when the user joined the guild. Declaration Optional<DateTimeOffset> IPartialGuildMember.JoinedAt { get; } Returns Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source IPartialGuildMember.Nickname Gets the user's guild nickname. Declaration Optional<string> IPartialGuildMember.Nickname { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialGuildMember.Permissions Gets the total permissions of the member in a channel, including overrides. Declaration Optional<IDiscordPermissionSet> IPartialGuildMember.Permissions { get; } Returns Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source IPartialGuildMember.PremiumSince Gets when the user started boosting the guild. Declaration Optional<DateTimeOffset?> IPartialGuildMember.PremiumSince { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IPartialGuildMember.Roles Gets the roles the user has. Declaration Optional<IReadOnlyList<Snowflake>> IPartialGuildMember.Roles { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialGuildMember.User Gets the user this guild member represents. Declaration Optional<IUser> IPartialGuildMember.User { get; } Returns Type Description Remora.Rest.Core.Optional < IUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuildPreview.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuildPreview.html",
    "title": "Interface IGuildPreview | Remora.Discord",
    "keywords": "Interface IGuildPreview Represents a preview of a public guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildPreview Properties | Improve this Doc View Source ApproximateMemberCount Gets the approximate count of total members. Declaration Optional<int> ApproximateMemberCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ApproximatePresenceCount Gets the approximate count of online members. Declaration Optional<int> ApproximatePresenceCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Description Gets the description of the guild, if the guild is discoverable. Declaration string Description { get; } Property Value Type Description String | Improve this Doc View Source DiscoverySplash Gets the guild's Discovery splash banner. Declaration IImageHash DiscoverySplash { get; } Property Value Type Description IImageHash | Improve this Doc View Source Emojis Gets a list of emojis in the server. Declaration IReadOnlyList<IEmoji> Emojis { get; } Property Value Type Description IReadOnlyList < IEmoji > | Improve this Doc View Source Features Gets a list of guild features. Declaration IReadOnlyList<GuildFeature> Features { get; } Property Value Type Description IReadOnlyList < GuildFeature > | Improve this Doc View Source Icon Gets the guild's icon. Declaration IImageHash Icon { get; } Property Value Type Description IImageHash | Improve this Doc View Source ID Gets the ID of the guild. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Gets the name of the guild. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Splash Gets the guild's splash banner. Declaration IImageHash Splash { get; } Property Value Type Description IImageHash | Improve this Doc View Source Stickers Gets the custom stickers the guild has. Declaration IReadOnlyList<ISticker> Stickers { get; } Property Value Type Description IReadOnlyList < ISticker >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuildScheduledEvent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuildScheduledEvent.html",
    "title": "Interface IGuildScheduledEvent | Remora.Discord",
    "keywords": "Interface IGuildScheduledEvent Represents a scheduled event in a guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildScheduledEvent Properties | Improve this Doc View Source ChannelID Gets the ID of the channel the event will be hosted in, or null if the event is an external event. Declaration Snowflake? ChannelID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Creator Gets the user that created the event, if any. Declaration Optional<IUser> Creator { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source CreatorID Gets the ID of the user that created the scheduled event. Declaration Optional<Snowflake?> CreatorID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Description Gets the description of the scheduled event, if any. Declaration Optional<string> Description { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source EntityID Gets any additional ID associated with the hosting entity. Declaration Snowflake? EntityID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source EntityMetadata Gets the entity metadata, if any. Declaration IGuildScheduledEventEntityMetadata EntityMetadata { get; } Property Value Type Description IGuildScheduledEventEntityMetadata | Improve this Doc View Source EntityType Gets the type of the hosting entity associated with a scheduled event, e.g. voice channel or stage channel. Declaration GuildScheduledEventEntityType EntityType { get; } Property Value Type Description GuildScheduledEventEntityType | Improve this Doc View Source GuildID Gets the ID of the guild the event belongs to. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ID Gets the ID of the scheduled event. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Image Gets the cover image of the scheduled event. Declaration IImageHash Image { get; } Property Value Type Description IImageHash | Improve this Doc View Source Name Gets the name of the scheduled event. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source PrivacyLevel Gets the privacy level of the scheduled event. Declaration GuildScheduledEventPrivacyLevel PrivacyLevel { get; } Property Value Type Description GuildScheduledEventPrivacyLevel | Improve this Doc View Source ScheduledEndTime Gets the time the scheduled event will end, or null if the event does not have a scheduled end time. Declaration DateTimeOffset? ScheduledEndTime { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source ScheduledStartTime Gets the time the scheduled event will start. Declaration DateTimeOffset ScheduledStartTime { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Status Gets the status of the scheduled event. Declaration GuildScheduledEventStatus Status { get; } Property Value Type Description GuildScheduledEventStatus | Improve this Doc View Source UserCount Gets the number of users subscribed to the scheduled event. Declaration Optional<int> UserCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuildScheduledEventEntityMetadata.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuildScheduledEventEntityMetadata.html",
    "title": "Interface IGuildScheduledEventEntityMetadata | Remora.Discord",
    "keywords": "Interface IGuildScheduledEventEntityMetadata Represents metadata related to an event entity. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax public interface IGuildScheduledEventEntityMetadata Properties | Improve this Doc View Source Location Gets the location of the event (1-100 characters). Declaration Optional<string> Location { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuildScheduledEventUser.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuildScheduledEventUser.html",
    "title": "Interface IGuildScheduledEventUser | Remora.Discord",
    "keywords": "Interface IGuildScheduledEventUser Represents a user subscribed to a guild event. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildScheduledEventUser Properties | Improve this Doc View Source GuildMember Gets the member information associated with the user. Declaration Optional<IGuildMember> GuildMember { get; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source GuildScheduledEventID Gets the ID of the event the user subscribed to. Declaration Snowflake GuildScheduledEventID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source User Gets the user which subscribed to the event. Declaration IUser User { get; } Property Value Type Description IUser"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuildTemplate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuildTemplate.html",
    "title": "Interface IGuildTemplate | Remora.Discord",
    "keywords": "Interface IGuildTemplate Represents a Discord Guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildTemplate Properties | Improve this Doc View Source AFKChannelID Gets the ID of the AFK channel. Declaration int? AFKChannelID { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source AFKTimeout Gets the AFK timeout (in seconds). Declaration int AFKTimeout { get; } Property Value Type Description Int32 | Improve this Doc View Source Channels Gets the channel templates in the guild. Declaration IReadOnlyList<IChannelTemplate> Channels { get; } Property Value Type Description IReadOnlyList < IChannelTemplate > | Improve this Doc View Source DefaultMessageNotifications Gets the default notification level for the guild. Declaration MessageNotificationLevel DefaultMessageNotifications { get; } Property Value Type Description MessageNotificationLevel | Improve this Doc View Source Description Gets the description of the guild. Declaration string Description { get; } Property Value Type Description String | Improve this Doc View Source ExplicitContentFilter Gets the explicit content level. Declaration ExplicitContentFilterLevel ExplicitContentFilter { get; } Property Value Type Description ExplicitContentFilterLevel | Improve this Doc View Source IconHash Gets the guild's icon hash. Declaration IImageHash IconHash { get; } Property Value Type Description IImageHash | Improve this Doc View Source Name Gets the name of the guild. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source PreferredLocale Gets the preferred locale of a community-enabled guild. Declaration string PreferredLocale { get; } Property Value Type Description String | Improve this Doc View Source Roles Gets a list of the role templates in the server. Declaration IReadOnlyList<IRoleTemplate> Roles { get; } Property Value Type Description IReadOnlyList < IRoleTemplate > | Improve this Doc View Source SystemChannelFlags Gets the flags on the system channel. Declaration SystemChannelFlags SystemChannelFlags { get; } Property Value Type Description SystemChannelFlags | Improve this Doc View Source SystemChannelID Gets the ID of the channel that system messages are sent to. Declaration int? SystemChannelID { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source VerificationLevel Gets the verification level required for the guild. Declaration VerificationLevel VerificationLevel { get; } Property Value Type Description VerificationLevel"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse.html",
    "title": "Interface IGuildThreadQueryResponse | Remora.Discord",
    "keywords": "Interface IGuildThreadQueryResponse Represents a response object from the REST API regarding a thread query. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildThreadQueryResponse Properties | Improve this Doc View Source Members Gets a set of member objects that map to the returned threads the current user has joined. Declaration IReadOnlyList<IThreadMember> Members { get; } Property Value Type Description IReadOnlyList < IThreadMember > | Improve this Doc View Source Threads Gets the threads returned by the query. Declaration IReadOnlyList<IChannel> Threads { get; } Property Value Type Description IReadOnlyList < IChannel >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuildWidget.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuildWidget.html",
    "title": "Interface IGuildWidget | Remora.Discord",
    "keywords": "Interface IGuildWidget Represents the status and invite widget for a guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildWidget Properties | Improve this Doc View Source Channels Gets the voice and stage channels accessible by @everyone. Declaration IReadOnlyList<IPartialChannel> Channels { get; } Property Value Type Description IReadOnlyList < IPartialChannel > | Improve this Doc View Source ID Gets the ID of the guild. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source InstantInvite Gets the instant invite link or code for the guild. Declaration string InstantInvite { get; } Property Value Type Description String | Improve this Doc View Source Members Gets \"special\" widget user objects with presence information (max 100). Declaration IReadOnlyList<IPartialUser> Members { get; } Property Value Type Description IReadOnlyList < IPartialUser > Remarks The Discord docs are extremely vague about what \"special\" means here. Your mileage may vary. | Improve this Doc View Source Name Gets the name of the guild (2-100 characters). Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source PresenceCount Gets the number of online members in this guild. Declaration int PresenceCount { get; } Property Value Type Description Int32"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings.html",
    "title": "Interface IGuildWidgetSettings | Remora.Discord",
    "keywords": "Interface IGuildWidgetSettings Represents settings related to the status and invite widget for a guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IGuildWidgetSettings Properties | Improve this Doc View Source ChannelID Gets the ID of the channel invites are generated for. Declaration Snowflake? ChannelID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsEnabled Gets a value indicating whether the widget is enabled. Declaration bool IsEnabled { get; } Property Value Type Description Boolean"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IImageHash.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IImageHash.html",
    "title": "Interface IImageHash | Remora.Discord",
    "keywords": "Interface IImageHash Represents a Discord image hash. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IImageHash Properties | Improve this Doc View Source HasGif Gets a value indicating whether the hash has a gif alternative. Declaration bool HasGif { get; } Property Value Type Description Boolean | Improve this Doc View Source Value Gets the raw value. Declaration string Value { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IIntegration.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IIntegration.html",
    "title": "Interface IIntegration | Remora.Discord",
    "keywords": "Interface IIntegration Represents an integration object. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IIntegration : IPartialIntegration Properties | Improve this Doc View Source Account Gets the integration's account information. Declaration IAccount Account { get; } Property Value Type Description IAccount | Improve this Doc View Source Application Gets the bot/OAuth2 application for Discord integrations. Declaration Optional<IIntegrationApplication> Application { get; } Property Value Type Description Remora.Rest.Core.Optional < IIntegrationApplication > | Improve this Doc View Source EnableEmoticons Gets a value indicating whether emoticons should be synced for this integration (twitch only, currently). Declaration Optional<bool> EnableEmoticons { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source ExpireBehaviour Gets the behaviour of expiring subscribers. Declaration IntegrationExpireBehaviour ExpireBehaviour { get; } Property Value Type Description IntegrationExpireBehaviour | Improve this Doc View Source ExpireGracePeriod Gets the grace period (in days) before expiring subscribers. Declaration TimeSpan ExpireGracePeriod { get; } Property Value Type Description TimeSpan | Improve this Doc View Source ID Gets the ID of the integration. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsEnabled Gets a value indicating whether the integration is enabled. Declaration Optional<bool> IsEnabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsRevoked Gets a value indicating whether this integration has been revoked. Declaration bool IsRevoked { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSyncing Gets a value indicating whether the integration is syncing. Declaration bool IsSyncing { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the name of the integration. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source RoleID Gets the ID of the role that this integration uses for subscribers. Declaration Snowflake RoleID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source SubscriberCount Gets the number of subscribers this integration has. Declaration int SubscriberCount { get; } Property Value Type Description Int32 | Improve this Doc View Source SyncedAt Gets the time when the integration was last synced. Declaration DateTimeOffset SyncedAt { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Type Gets the type of integration. Declaration string Type { get; } Property Value Type Description String | Improve this Doc View Source User Gets the user for this integration. Declaration Optional<IUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Explicit Interface Implementations | Improve this Doc View Source IPartialIntegration.Account Gets the integration's account information. Declaration Optional<IAccount> IPartialIntegration.Account { get; } Returns Type Description Remora.Rest.Core.Optional < IAccount > | Improve this Doc View Source IPartialIntegration.Application Gets the bot/OAuth2 application for Discord integrations. Declaration Optional<IIntegrationApplication> IPartialIntegration.Application { get; } Returns Type Description Remora.Rest.Core.Optional < IIntegrationApplication > | Improve this Doc View Source IPartialIntegration.EnableEmoticons Gets a value indicating whether emoticons should be synced for this integration (twitch only, currently). Declaration Optional<bool> IPartialIntegration.EnableEmoticons { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialIntegration.ExpireBehaviour Gets the behaviour of expiring subscribers. Declaration Optional<IntegrationExpireBehaviour> IPartialIntegration.ExpireBehaviour { get; } Returns Type Description Remora.Rest.Core.Optional < IntegrationExpireBehaviour > | Improve this Doc View Source IPartialIntegration.ExpireGracePeriod Gets the grace period (in days) before expiring subscribers. Declaration Optional<TimeSpan> IPartialIntegration.ExpireGracePeriod { get; } Returns Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source IPartialIntegration.ID Gets the ID of the integration. Declaration Optional<Snowflake> IPartialIntegration.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialIntegration.IsEnabled Gets a value indicating whether the integration is enabled. Declaration Optional<bool> IPartialIntegration.IsEnabled { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialIntegration.IsRevoked Gets a value indicating whether this integration has been revoked. Declaration Optional<bool> IPartialIntegration.IsRevoked { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialIntegration.IsSyncing Gets a value indicating whether the integration is syncing. Declaration Optional<bool> IPartialIntegration.IsSyncing { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialIntegration.Name Gets the name of the integration. Declaration Optional<string> IPartialIntegration.Name { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialIntegration.RoleID Gets the ID of the role that this integration uses for subscribers. Declaration Optional<Snowflake> IPartialIntegration.RoleID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialIntegration.SubscriberCount Gets the number of subscribers this integration has. Declaration Optional<int> IPartialIntegration.SubscriberCount { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialIntegration.SyncedAt Gets the time when the integration was last synced. Declaration Optional<DateTimeOffset> IPartialIntegration.SyncedAt { get; } Returns Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source IPartialIntegration.Type Gets the type of integration. Declaration Optional<string> IPartialIntegration.Type { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialIntegration.User Gets the user for this integration. Declaration Optional<IUser> IPartialIntegration.User { get; } Returns Type Description Remora.Rest.Core.Optional < IUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IIntegrationApplication.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IIntegrationApplication.html",
    "title": "Interface IIntegrationApplication | Remora.Discord",
    "keywords": "Interface IIntegrationApplication Represents application information for a Discord integration. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IIntegrationApplication Properties | Improve this Doc View Source Bot Gets the bot associated with this application. Declaration Optional<IUser> Bot { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source Description Gets the description of the application. Declaration string Description { get; } Property Value Type Description String | Improve this Doc View Source Icon Gets the application's icon. Declaration IImageHash Icon { get; } Property Value Type Description IImageHash | Improve this Doc View Source ID Gets the ID of the application. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Gets the name of the application. Declaration string Name { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IInteraction.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IInteraction.html",
    "title": "Interface IInteraction | Remora.Discord",
    "keywords": "Interface IInteraction Represents a user interaction. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInteraction Properties | Improve this Doc View Source ApplicationID Gets the application ID that the interaction is for. Declaration Snowflake ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ChannelID Gets the ID of the channel the interaction was sent from. Declaration Optional<Snowflake> ChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Data Gets the command data payload. Declaration Optional<IInteractionData> Data { get; } Property Value Type Description Remora.Rest.Core.Optional < IInteractionData > | Improve this Doc View Source GuildID Gets the ID of the guild the interaction was sent from. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildLocale Gets the locale of the guild the interaction was sent from. Declaration Optional<string> GuildLocale { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ID Gets the interaction ID. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Locale Gets the locale of the invoking user. Declaration Optional<string> Locale { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Remarks This is sent for all interaction types, except Ping . | Improve this Doc View Source Member Gets the guild member that invoked the command. Declaration Optional<IGuildMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source Message Gets the message the component was attached to. Declaration Optional<IMessage> Message { get; } Property Value Type Description Remora.Rest.Core.Optional < IMessage > | Improve this Doc View Source Token Gets a continuation token for responding to the interaction. Declaration string Token { get; } Property Value Type Description String Remarks This token is valid for 15 minutes. | Improve this Doc View Source Type Gets the type of the interaction. Declaration InteractionType Type { get; } Property Value Type Description InteractionType | Improve this Doc View Source User Gets the user that invoked the command. Declaration Optional<IUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source Version Gets the version of the interaction API in use. Currently 1. Declaration int Version { get; } Property Value Type Description Int32"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IInteractionAutocompleteCallbackData.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IInteractionAutocompleteCallbackData.html",
    "title": "Interface IInteractionAutocompleteCallbackData | Remora.Discord",
    "keywords": "Interface IInteractionAutocompleteCallbackData Represents return payload data for an autocomplete interaction response. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInteractionAutocompleteCallbackData Properties | Improve this Doc View Source Choices Gets the autocomplete choices. Declaration IReadOnlyList<IApplicationCommandOptionChoice> Choices { get; } Property Value Type Description IReadOnlyList < IApplicationCommandOptionChoice > Remarks Only relevant for autocomplete interactions."
  },
  "api/Remora.Discord.API.Abstractions.Objects.IInteractionData.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IInteractionData.html",
    "title": "Interface IInteractionData | Remora.Discord",
    "keywords": "Interface IInteractionData Represents payload data for a command. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInteractionData Properties | Improve this Doc View Source Components Gets the components for this interaction. Declaration Optional<IReadOnlyList<IPartialMessageComponent>> Components { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialMessageComponent >> | Improve this Doc View Source ComponentType Gets the type of component that the data originated from. Declaration Optional<ComponentType> ComponentType { get; } Property Value Type Description Remora.Rest.Core.Optional < ComponentType > | Improve this Doc View Source CustomID Gets the custom ID associated with this interaction. Declaration Optional<string> CustomID { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source GuildID Gets the ID of the guild the command is registered to. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Gets the ID of the invoked command. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Name Gets the name of the invoked command. Declaration Optional<string> Name { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Options Gets the parameters and values supplied by the user. Declaration Optional<IReadOnlyList<IApplicationCommandInteractionDataOption>> Options { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandInteractionDataOption >> | Improve this Doc View Source Resolved Gets any entities that were resolved while executing the command serverside. Declaration Optional<IApplicationCommandInteractionDataResolved> Resolved { get; } Property Value Type Description Remora.Rest.Core.Optional < IApplicationCommandInteractionDataResolved > | Improve this Doc View Source TargetID Gets the ID of the user or message targeted by an interaction. Declaration Optional<Snowflake> TargetID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Values Gets the values selected by the user. Declaration Optional<IReadOnlyList<string>> Values { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> Extension Methods InteractionDataExtensions.UnpackInteraction(IInteractionData, out IReadOnlyList<String>, out IReadOnlyDictionary<String, IReadOnlyList<String>>)"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IInteractionMessageCallbackData.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IInteractionMessageCallbackData.html",
    "title": "Interface IInteractionMessageCallbackData | Remora.Discord",
    "keywords": "Interface IInteractionMessageCallbackData Represents return payload data for an interaction response. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInteractionMessageCallbackData Properties | Improve this Doc View Source AllowedMentions Gets the allowed mentions in the message. Declaration Optional<IAllowedMentions> AllowedMentions { get; } Property Value Type Description Remora.Rest.Core.Optional < IAllowedMentions > Remarks Only relevant for message interactions. | Improve this Doc View Source Attachments Gets the attachments attached to the message. Declaration Optional<IReadOnlyList<IPartialAttachment>> Attachments { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialAttachment >> Remarks Only relevant for message interactions. | Improve this Doc View Source Components Gets the components attached to the message. Declaration Optional<IReadOnlyList<IMessageComponent>> Components { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> Remarks Only relevant for message interactions. | Improve this Doc View Source Content Gets the content of the message. Declaration Optional<string> Content { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Remarks Only relevant for message interactions. | Improve this Doc View Source Embeds Gets the embeds of the message. Declaration Optional<IReadOnlyList<IEmbed>> Embeds { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> Remarks Only relevant for message interactions. | Improve this Doc View Source Flags Gets the callback flags. Declaration Optional<MessageFlags> Flags { get; } Property Value Type Description Remora.Rest.Core.Optional < MessageFlags > Remarks Only relevant for message interactions. | Improve this Doc View Source IsTTS Gets a value indicating whether the message is a TTS message. Declaration Optional<bool> IsTTS { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > Remarks Only relevant for message interactions."
  },
  "api/Remora.Discord.API.Abstractions.Objects.IInteractionModalCallbackData.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IInteractionModalCallbackData.html",
    "title": "Interface IInteractionModalCallbackData | Remora.Discord",
    "keywords": "Interface IInteractionModalCallbackData Represents return payload data for an interaction response. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInteractionModalCallbackData Properties | Improve this Doc View Source Components Gets the components for the modal. Declaration IReadOnlyList<IMessageComponent> Components { get; } Property Value Type Description IReadOnlyList < IMessageComponent > | Improve this Doc View Source CustomID Gets the custom ID for the modal. Declaration string CustomID { get; } Property Value Type Description String | Improve this Doc View Source Title Gets the title for the modal. Max 45 characters. Declaration string Title { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IInteractionResponse.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IInteractionResponse.html",
    "title": "Interface IInteractionResponse | Remora.Discord",
    "keywords": "Interface IInteractionResponse Represents a response to an interaction. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInteractionResponse Properties | Improve this Doc View Source Data Gets the response payload. Declaration Optional<OneOf<IInteractionMessageCallbackData, IInteractionAutocompleteCallbackData, IInteractionModalCallbackData>> Data { get; } Property Value Type Description Remora.Rest.Core.Optional < OneOf.OneOf < IInteractionMessageCallbackData , IInteractionAutocompleteCallbackData , IInteractionModalCallbackData >> | Improve this Doc View Source Type Gets the response type. Declaration InteractionCallbackType Type { get; } Property Value Type Description InteractionCallbackType"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IInvite.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IInvite.html",
    "title": "Interface IInvite | Remora.Discord",
    "keywords": "Interface IInvite Represents an invite. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IInvite : IPartialInvite Properties | Improve this Doc View Source ApproximateMemberCount Gets the approximate count of total members. Declaration Optional<int> ApproximateMemberCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ApproximatePresenceCount Gets the approximate count of online members. Only present when TargetUser is set. Declaration Optional<int> ApproximatePresenceCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Channel Gets the channel this invite is for. Declaration IPartialChannel Channel { get; } Property Value Type Description IPartialChannel | Improve this Doc View Source Code Gets the unique invite code. Declaration string Code { get; } Property Value Type Description String | Improve this Doc View Source ExpiresAt Gets the expiration date of this invite. Declaration Optional<DateTimeOffset?> ExpiresAt { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Guild Gets the guild this invite is for. Declaration Optional<IPartialGuild> Guild { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuild > | Improve this Doc View Source GuildScheduledEvent Gets metadata about the scheduled event the invite points to. Declaration Optional<IGuildScheduledEvent> GuildScheduledEvent { get; } Property Value Type Description Remora.Rest.Core.Optional < IGuildScheduledEvent > | Improve this Doc View Source Inviter Gets the user who created the invite. Declaration Optional<IUser> Inviter { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source TargetApplication Gets the embedded application this invite is for. Declaration Optional<IPartialApplication> TargetApplication { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source TargetType Gets the type of target for this invite. Declaration Optional<InviteTarget> TargetType { get; } Property Value Type Description Remora.Rest.Core.Optional < InviteTarget > | Improve this Doc View Source TargetUser Gets the target user for this invite. Declaration Optional<IPartialUser> TargetUser { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialUser > Explicit Interface Implementations | Improve this Doc View Source IPartialInvite.ApproximateMemberCount Gets the approximate count of total members. Declaration Optional<int> IPartialInvite.ApproximateMemberCount { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialInvite.ApproximatePresenceCount Gets the approximate count of online members. Only present when TargetUser is set. Declaration Optional<int> IPartialInvite.ApproximatePresenceCount { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialInvite.Channel Gets the channel this invite is for. Declaration Optional<IPartialChannel> IPartialInvite.Channel { get; } Returns Type Description Remora.Rest.Core.Optional < IPartialChannel > | Improve this Doc View Source IPartialInvite.Code Gets the unique invite code. Declaration Optional<string> IPartialInvite.Code { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialInvite.ExpiresAt Gets the expiration date of this invite. Declaration Optional<DateTimeOffset?> IPartialInvite.ExpiresAt { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IPartialInvite.Guild Gets the guild this invite is for. Declaration Optional<IPartialGuild> IPartialInvite.Guild { get; } Returns Type Description Remora.Rest.Core.Optional < IPartialGuild > | Improve this Doc View Source IPartialInvite.GuildScheduledEvent Gets metadata about the scheduled event the invite points to. Declaration Optional<IGuildScheduledEvent> IPartialInvite.GuildScheduledEvent { get; } Returns Type Description Remora.Rest.Core.Optional < IGuildScheduledEvent > | Improve this Doc View Source IPartialInvite.Inviter Gets the user who created the invite. Declaration Optional<IUser> IPartialInvite.Inviter { get; } Returns Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source IPartialInvite.TargetApplication Gets the embedded application this invite is for. Declaration Optional<IPartialApplication> IPartialInvite.TargetApplication { get; } Returns Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source IPartialInvite.TargetType Gets the type of target for this invite. Declaration Optional<InviteTarget> IPartialInvite.TargetType { get; } Returns Type Description Remora.Rest.Core.Optional < InviteTarget > | Improve this Doc View Source IPartialInvite.TargetUser Gets the target user for this invite. Declaration Optional<IPartialUser> IPartialInvite.TargetUser { get; } Returns Type Description Remora.Rest.Core.Optional < IPartialUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IMessage.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IMessage.html",
    "title": "Interface IMessage | Remora.Discord",
    "keywords": "Interface IMessage Represents a message. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessage : IPartialMessage Properties | Improve this Doc View Source Activity Gets the activity the message belongs to. Sent with rich presence-related chat embeds. Declaration Optional<IMessageActivity> Activity { get; } Property Value Type Description Remora.Rest.Core.Optional < IMessageActivity > | Improve this Doc View Source Application Gets the application the message belongs to. Sent with rich presence-related chat embeds. Declaration Optional<IPartialApplication> Application { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source ApplicationID Gets the ID of the application the message's interaction belongs to. Sent with interactions or application-owned webhooks. Declaration Optional<Snowflake> ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Attachments Gets a list of attached files. Declaration IReadOnlyList<IAttachment> Attachments { get; } Property Value Type Description IReadOnlyList < IAttachment > | Improve this Doc View Source Author Gets the author of the message. This author is not guaranteed to be a valid user; in the case of a webhook message, the object corresponds to the webhook's ID, username, and avatar - this is the case when WebhookID contains a valid value. Declaration IUser Author { get; } Property Value Type Description IUser | Improve this Doc View Source ChannelID Gets the ID of the channel the message was sent in. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Components Gets the components in the message. Declaration Optional<IReadOnlyList<IMessageComponent>> Components { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> | Improve this Doc View Source Content Gets the contents of the message. Declaration string Content { get; } Property Value Type Description String | Improve this Doc View Source EditedTimestamp Gets the time when the message was last edited. Declaration DateTimeOffset? EditedTimestamp { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Embeds Gets a list of embeds. Declaration IReadOnlyList<IEmbed> Embeds { get; } Property Value Type Description IReadOnlyList < IEmbed > | Improve this Doc View Source Flags Gets a set of bitwise flags describing extra features of the message. Declaration Optional<MessageFlags> Flags { get; } Property Value Type Description Remora.Rest.Core.Optional < MessageFlags > | Improve this Doc View Source GuildID Gets the ID of the guild the message was sent in. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Gets the message ID. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Interaction Gets the interaction associated with this message, if any. Declaration Optional<IMessageInteraction> Interaction { get; } Property Value Type Description Remora.Rest.Core.Optional < IMessageInteraction > | Improve this Doc View Source IsPinned Gets a value indicating whether the messages is pinned. Declaration bool IsPinned { get; } Property Value Type Description Boolean | Improve this Doc View Source IsTTS Gets a value indicating whether this was a TTS message. Declaration bool IsTTS { get; } Property Value Type Description Boolean | Improve this Doc View Source Member Gets the member properties for the author. The member object exists in MESSAGE_CREATE and MESSAGE_UPDATE events from text-based guild channels. This allows bots to obtain real-time member data without requiring bots to keep member state in memory. Declaration Optional<IPartialGuildMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuildMember > | Improve this Doc View Source MentionedChannels Gets a list of channel mentions. Not all channel mentions in a message will appear in mention_channels. Only textual channels that are visible to everyone in a lurkable guild will ever be included. Only crossposted messages (via Channel Following) currently include mention_channels at all. If no mentions in the message meet these requirements, this field will not be sent. Declaration Optional<IReadOnlyList<IChannelMention>> MentionedChannels { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IChannelMention >> | Improve this Doc View Source MentionedRoles Gets a list of mentioned roles. Declaration IReadOnlyList<Snowflake> MentionedRoles { get; } Property Value Type Description IReadOnlyList < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Mentions Gets a list of users mentioned in the message. Declaration IReadOnlyList<IUserMention> Mentions { get; } Property Value Type Description IReadOnlyList < IUserMention > | Improve this Doc View Source MentionsEveryone Gets a value indicating whether this message mentions everyone. Declaration bool MentionsEveryone { get; } Property Value Type Description Boolean | Improve this Doc View Source MessageReference Gets the message reference. Sent with cross-posted messages. Declaration Optional<IMessageReference> MessageReference { get; } Property Value Type Description Remora.Rest.Core.Optional < IMessageReference > | Improve this Doc View Source Nonce Gets a nonce, used for validating a message was sent. Technically, this can be either an integer or a string. Declaration Optional<string> Nonce { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Reactions Gets an array of reaction objects. Declaration Optional<IReadOnlyList<IReaction>> Reactions { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IReaction >> | Improve this Doc View Source ReferencedMessage Gets the referenced message, if any. A null value in this context refers to a deleted message. Declaration Optional<IMessage> ReferencedMessage { get; } Property Value Type Description Remora.Rest.Core.Optional < IMessage > | Improve this Doc View Source StickerItems Gets the stickers sent with the message. Declaration Optional<IReadOnlyList<IStickerItem>> StickerItems { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IStickerItem >> | Improve this Doc View Source Thread Gets the thread that was started from this message, if any. Declaration Optional<IChannel> Thread { get; } Property Value Type Description Remora.Rest.Core.Optional < IChannel > | Improve this Doc View Source Timestamp Gets the time when the messages was sent. Declaration DateTimeOffset Timestamp { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Type Gets the message type. Declaration MessageType Type { get; } Property Value Type Description MessageType | Improve this Doc View Source WebhookID Gets the ID of the webhook that sent this message. Declaration Optional<Snowflake> WebhookID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > Explicit Interface Implementations | Improve this Doc View Source IPartialMessage.Activity Gets the activity the message belongs to. Sent with rich presence-related chat embeds. Declaration Optional<IMessageActivity> IPartialMessage.Activity { get; } Returns Type Description Remora.Rest.Core.Optional < IMessageActivity > | Improve this Doc View Source IPartialMessage.Application Gets the application the message belongs to. Sent with rich presence-related chat embeds. Declaration Optional<IPartialApplication> IPartialMessage.Application { get; } Returns Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source IPartialMessage.ApplicationID Gets the ID of the application the message's interaction belongs to. Sent with interactions or application-owned webhooks. Declaration Optional<Snowflake> IPartialMessage.ApplicationID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialMessage.Attachments Gets a list of attached files. Declaration Optional<IReadOnlyList<IAttachment>> IPartialMessage.Attachments { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IAttachment >> | Improve this Doc View Source IPartialMessage.Author Gets the author of the message. This author is not guaranteed to be a valid user; in the case of a webhook message, the object corresponds to the webhook's ID, username, and avatar - this is the case when WebhookID contains a valid value. Declaration Optional<IUser> IPartialMessage.Author { get; } Returns Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source IPartialMessage.ChannelID Gets the ID of the channel the message was sent in. Declaration Optional<Snowflake> IPartialMessage.ChannelID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialMessage.Components Gets the components in the message. Declaration Optional<IReadOnlyList<IMessageComponent>> IPartialMessage.Components { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> | Improve this Doc View Source IPartialMessage.Content Gets the contents of the message. Declaration Optional<string> IPartialMessage.Content { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialMessage.EditedTimestamp Gets the time when the message was last edited. Declaration Optional<DateTimeOffset?> IPartialMessage.EditedTimestamp { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IPartialMessage.Embeds Gets a list of embeds. Declaration Optional<IReadOnlyList<IEmbed>> IPartialMessage.Embeds { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> | Improve this Doc View Source IPartialMessage.Flags Gets a set of bitwise flags describing extra features of the message. Declaration Optional<MessageFlags> IPartialMessage.Flags { get; } Returns Type Description Remora.Rest.Core.Optional < MessageFlags > | Improve this Doc View Source IPartialMessage.GuildID Gets the ID of the guild the message was sent in. Declaration Optional<Snowflake> IPartialMessage.GuildID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialMessage.ID Gets the message ID. Declaration Optional<Snowflake> IPartialMessage.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialMessage.Interaction Gets the interaction associated with this message, if any. Declaration Optional<IMessageInteraction> IPartialMessage.Interaction { get; } Returns Type Description Remora.Rest.Core.Optional < IMessageInteraction > | Improve this Doc View Source IPartialMessage.IsPinned Gets a value indicating whether the messages is pinned. Declaration Optional<bool> IPartialMessage.IsPinned { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialMessage.IsTTS Gets a value indicating whether this was a TTS message. Declaration Optional<bool> IPartialMessage.IsTTS { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialMessage.Member Gets the member properties for the author. The member object exists in MESSAGE_CREATE and MESSAGE_UPDATE events from text-based guild channels. This allows bots to obtain real-time member data without requiring bots to keep member state in memory. Declaration Optional<IPartialGuildMember> IPartialMessage.Member { get; } Returns Type Description Remora.Rest.Core.Optional < IPartialGuildMember > | Improve this Doc View Source IPartialMessage.MentionedChannels Gets a list of channel mentions. Not all channel mentions in a message will appear in mention_channels. Only textual channels that are visible to everyone in a lurkable guild will ever be included. Only crossposted messages (via Channel Following) currently include mention_channels at all. If no mentions in the message meet these requirements, this field will not be sent. Declaration Optional<IReadOnlyList<IChannelMention>> IPartialMessage.MentionedChannels { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IChannelMention >> | Improve this Doc View Source IPartialMessage.MentionedRoles Gets a list of mentioned roles. Declaration Optional<IReadOnlyList<Snowflake>> IPartialMessage.MentionedRoles { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialMessage.Mentions Gets a list of users mentioned in the message. Declaration Optional<IReadOnlyList<IUserMention>> IPartialMessage.Mentions { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IUserMention >> | Improve this Doc View Source IPartialMessage.MentionsEveryone Gets a value indicating whether this message mentions everyone. Declaration Optional<bool> IPartialMessage.MentionsEveryone { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialMessage.MessageReference Gets the message reference. Sent with cross-posted messages. Declaration Optional<IMessageReference> IPartialMessage.MessageReference { get; } Returns Type Description Remora.Rest.Core.Optional < IMessageReference > | Improve this Doc View Source IPartialMessage.Nonce Gets a nonce, used for validating a message was sent. Technically, this can be either an integer or a string. Declaration Optional<string> IPartialMessage.Nonce { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialMessage.Reactions Gets an array of reaction objects. Declaration Optional<IReadOnlyList<IReaction>> IPartialMessage.Reactions { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IReaction >> | Improve this Doc View Source IPartialMessage.ReferencedMessage Gets the referenced message, if any. A null value in this context refers to a deleted message. Declaration Optional<IMessage> IPartialMessage.ReferencedMessage { get; } Returns Type Description Remora.Rest.Core.Optional < IMessage > | Improve this Doc View Source IPartialMessage.StickerItems Gets the stickers sent with the message. Declaration Optional<IReadOnlyList<IStickerItem>> IPartialMessage.StickerItems { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IStickerItem >> | Improve this Doc View Source IPartialMessage.Thread Gets the thread that was started from this message, if any. Declaration Optional<IChannel> IPartialMessage.Thread { get; } Returns Type Description Remora.Rest.Core.Optional < IChannel > | Improve this Doc View Source IPartialMessage.Timestamp Gets the time when the messages was sent. Declaration Optional<DateTimeOffset> IPartialMessage.Timestamp { get; } Returns Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source IPartialMessage.Type Gets the message type. Declaration Optional<MessageType> IPartialMessage.Type { get; } Returns Type Description Remora.Rest.Core.Optional < MessageType > | Improve this Doc View Source IPartialMessage.WebhookID Gets the ID of the webhook that sent this message. Declaration Optional<Snowflake> IPartialMessage.WebhookID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IMessageActivity.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IMessageActivity.html",
    "title": "Interface IMessageActivity | Remora.Discord",
    "keywords": "Interface IMessageActivity Represents an activity reference. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageActivity Properties | Improve this Doc View Source PartyID Gets the party id of the activity. These can be acquired from rich presence events. Declaration Optional<string> PartyID { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Gets the type of the activity. Declaration MessageActivityType Type { get; } Property Value Type Description MessageActivityType"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IMessageComponent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IMessageComponent.html",
    "title": "Interface IMessageComponent | Remora.Discord",
    "keywords": "Interface IMessageComponent Represents the base type for all components. This is a marker interface with no real functionality. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageComponent : IPartialMessageComponent"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IMessageInteraction.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IMessageInteraction.html",
    "title": "Interface IMessageInteraction | Remora.Discord",
    "keywords": "Interface IMessageInteraction Represents additional data sent on a message that is a response to an interaction. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageInteraction Properties | Improve this Doc View Source ID Gets the ID of the interaction. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Gets the name of the application command. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Type Gets the interaction type. Declaration InteractionType Type { get; } Property Value Type Description InteractionType | Improve this Doc View Source User Gets the user who invoked the interaction. Declaration IUser User { get; } Property Value Type Description IUser"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IMessageReference.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IMessageReference.html",
    "title": "Interface IMessageReference | Remora.Discord",
    "keywords": "Interface IMessageReference Represents a message reference. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IMessageReference Properties | Improve this Doc View Source ChannelID Gets the ID of the originating message's channel. Declaration Optional<Snowflake> ChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source FailIfNotExists Gets a value that indicates whether sending should fail if the referenced message doesn't exist (the default), or if it should be sent as a normal message. Declaration Optional<bool> FailIfNotExists { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source GuildID Gets the ID of the originating message's guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source MessageID Gets the ID of the originating message. Declaration Optional<Snowflake> MessageID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.INitroStickerPacks.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.INitroStickerPacks.html",
    "title": "Interface INitroStickerPacks | Remora.Discord",
    "keywords": "Interface INitroStickerPacks Represents a set of sticker packs available to Nitro subscribers. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface INitroStickerPacks Properties | Improve this Doc View Source StickerPacks Gets the sticker packs. Declaration IReadOnlyList<IStickerPack> StickerPacks { get; } Property Value Type Description IReadOnlyList < IStickerPack >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IntegrationExpireBehaviour.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IntegrationExpireBehaviour.html",
    "title": "Enum IntegrationExpireBehaviour | Remora.Discord",
    "keywords": "Enum IntegrationExpireBehaviour Enumerates various expiration behaviours. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum IntegrationExpireBehaviour Fields Name Description Kick The user is kicked. RemoveRole A role is removed."
  },
  "api/Remora.Discord.API.Abstractions.Objects.InteractionCallbackType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.InteractionCallbackType.html",
    "title": "Enum InteractionCallbackType | Remora.Discord",
    "keywords": "Enum InteractionCallbackType Enumerates various response types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum InteractionCallbackType Fields Name Description ApplicationCommandAutocompleteResult Respond to an autocomplete request with suggested choices. ChannelMessageWithSource Respond with a message, showing the user input. DeferredChannelMessageWithSource Acknowledge a command without sending a message, showing the user input. DeferredUpdateMessage Acknowledge an interaction and edit the message later; the user does not see a loading state. Modal Respond to an interaction with a modal. Pong Acknowledge a Ping . UpdateMessage Respond by editing the message."
  },
  "api/Remora.Discord.API.Abstractions.Objects.InteractionType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.InteractionType.html",
    "title": "Enum InteractionType | Remora.Discord",
    "keywords": "Enum InteractionType Enumerates various interaction types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum InteractionType Fields Name Description ApplicationCommand A user-invoked slash command. ApplicationCommandAutocomplete An autocomplete request. MessageComponent A user-initiated interaction with a message component. ModalSubmit A modal submission interaction. Ping A Discord-initiated ping to check for connectivity."
  },
  "api/Remora.Discord.API.Abstractions.Objects.InviteTarget.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.InviteTarget.html",
    "title": "Enum InviteTarget | Remora.Discord",
    "keywords": "Enum InviteTarget Enumerates various target user types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum InviteTarget Fields Name Description EmbeddedApplication The user is invited to use an embedded application. Stream The user is invited to a stream."
  },
  "api/Remora.Discord.API.Abstractions.Objects.IOptionalAuditEntryInfo.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IOptionalAuditEntryInfo.html",
    "title": "Interface IOptionalAuditEntryInfo | Remora.Discord",
    "keywords": "Interface IOptionalAuditEntryInfo Represents optional audit log information. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IOptionalAuditEntryInfo Properties | Improve this Doc View Source ApplicationID Gets the application for which entities were targeted. Declaration Optional<Snowflake> ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > Remarks Relevant for ApplicationCommandPermissionUpdate . | Improve this Doc View Source ChannelID Gets the channel in which the entities were targeted. Relevant for MemberMove , MessagePin , MessageUnpin , MessageDelete , StageInstanceCreate , StageInstanceUpdate , and StageInstanceDelete . Declaration Optional<Snowflake> ChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Count Gets the number of entities that were targeted. Relevant for MessageDelete , MessageBulkDelete , MemberDisconnect , and MemberMove . Declaration Optional<string> Count { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source DeleteMemberDays Gets the number of days after which inactive members were kicked. Relevant for MemberPrune . Declaration Optional<string> DeleteMemberDays { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ID Gets the ID of the overwritten entity. Relevant for ChannelOverwriteCreate , ChannelOverwriteUpdate , and ChannelOverwriteDelete . Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source MembersRemoved Gets the number of members removed by the prune. Relevant for MemberPrune . Declaration Optional<string> MembersRemoved { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source MessageID Gets the ID of the message that was targeted. Relevant for MessagePin and MessageUnpin . Declaration Optional<Snowflake> MessageID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source RoleName Gets the name of the overwritten role, if Type is \"role\". Relevant for ChannelOverwriteCreate , ChannelOverwriteUpdate , and ChannelOverwriteDelete . Declaration Optional<string> RoleName { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Gets the type of the overwritten entity. This can be either \"0\" for roles, or \"1\" for members. Relevant for ChannelOverwriteCreate , ChannelOverwriteUpdate , and ChannelOverwriteDelete . Declaration Optional<PermissionOverwriteType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < PermissionOverwriteType >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialActionRowComponent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialActionRowComponent.html",
    "title": "Interface IPartialActionRowComponent | Remora.Discord",
    "keywords": "Interface IPartialActionRowComponent Represents a partial row of interactive components. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialActionRowComponent : IPartialMessageComponent Properties | Improve this Doc View Source Components Gets the components nested under this component. Declaration Optional<IReadOnlyList<IPartialMessageComponent>> Components { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialMessageComponent >> | Improve this Doc View Source Type Gets the type of the component. Declaration Optional<ComponentType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ComponentType >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialApplication.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialApplication.html",
    "title": "Interface IPartialApplication | Remora.Discord",
    "keywords": "Interface IPartialApplication Represents information about an OAuth2 application. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialApplication Properties | Improve this Doc View Source CoverImage Gets the cover image, if the application is a game sold on the Discord storefront. Declaration Optional<IImageHash> CoverImage { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source CustomInstallUrl Gets the application's default custom authorization link. Declaration Optional<Uri> CustomInstallUrl { get; } Property Value Type Description Remora.Rest.Core.Optional < Uri > | Improve this Doc View Source Description Gets the description of the application. Declaration Optional<string> Description { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source DoesBotRequireCodeGrant Gets a value indicating whether the bot will only join upon completion of a full OAuth2 flow. Declaration Optional<bool> DoesBotRequireCodeGrant { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Flags Gets the application's public flags. Declaration Optional<ApplicationFlags> Flags { get; } Property Value Type Description Remora.Rest.Core.Optional < ApplicationFlags > | Improve this Doc View Source GuildID Gets the guild the game is linked to, if the application is a game sold on the Discord storefront. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Icon Gets the icon hash of the application. Declaration Optional<IImageHash> Icon { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Gets the application ID. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source InstallParams Gets the settings for the application's default in-app authorization link. Declaration Optional<IApplicationInstallParameters> InstallParams { get; } Property Value Type Description Remora.Rest.Core.Optional < IApplicationInstallParameters > | Improve this Doc View Source IsBotPublic Gets a value indicating whether the bot is a public bot. Declaration Optional<bool> IsBotPublic { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Gets the name of the application. Declaration Optional<string> Name { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Owner Gets the user information of the application owner. Declaration Optional<IPartialUser> Owner { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialUser > | Improve this Doc View Source PrimarySKUID Gets the primary SKU ID of the game, if the application is a game sold on the Discord storefront. Declaration Optional<Snowflake> PrimarySKUID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source PrivacyPolicyURL Gets the URL to the application's privacy policy. Declaration Optional<string> PrivacyPolicyURL { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source RPCOrigins Gets a list of RPC origin URLs. Declaration Optional<IReadOnlyList<string>> RPCOrigins { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> | Improve this Doc View Source Slug Gets the URL slug that links to the store page, if the application is a game sold on the Discord storefront. Declaration Optional<string> Slug { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Tags Gets up to 5 tags describing the content and functionality of the application. Declaration Optional<IReadOnlyList<string>> Tags { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> | Improve this Doc View Source Team Gets the team the application belongs to, if any. Declaration Optional<ITeam> Team { get; } Property Value Type Description Remora.Rest.Core.Optional < ITeam > | Improve this Doc View Source TermsOfServiceURL Gets the URL to the application's terms of service. Declaration Optional<string> TermsOfServiceURL { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source VerifyKey Gets the hex-encoded key for GameSDK's GetTicket function. Declaration Optional<string> VerifyKey { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialAttachment.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialAttachment.html",
    "title": "Interface IPartialAttachment | Remora.Discord",
    "keywords": "Interface IPartialAttachment Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialAttachment Properties | Improve this Doc View Source ContentType Gets the attachment's media type (e.g, \"application/text\" or similar). Declaration Optional<string> ContentType { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Description Gets the description of the attachment. Declaration Optional<string> Description { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Filename Gets the filename of the attachment. Declaration Optional<string> Filename { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Height Gets the height of the file (if image). Declaration Optional<int?> Height { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> | Improve this Doc View Source ID Gets the ID of the attachment. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsEphemeral Gets a value indicating whether the attachment is ephemeral. Declaration Optional<bool> IsEphemeral { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source ProxyUrl Gets the proxied URL of the file. Declaration Optional<string> ProxyUrl { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Size Gets the size of the file in bytes. Declaration Optional<int> Size { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Url Gets the source URL of the file. Declaration Optional<string> Url { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Width Gets the width of the file (if image). Declaration Optional<int?> Width { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >>"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialButtonComponent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialButtonComponent.html",
    "title": "Interface IPartialButtonComponent | Remora.Discord",
    "keywords": "Interface IPartialButtonComponent Represents a partial button component. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialButtonComponent : IPartialMessageComponent Properties | Improve this Doc View Source CustomID Gets a custom ID for the component, defined by the developer. Declaration Optional<string> CustomID { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Emoji Gets the emoji displayed in the button. Declaration Optional<IPartialEmoji> Emoji { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialEmoji > | Improve this Doc View Source IsDisabled Gets a value indicating whether the component is disabled. Declaration Optional<bool> IsDisabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Gets the label on the button. Declaration Optional<string> Label { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Style Gets the button's style. Declaration Optional<ButtonComponentStyle> Style { get; } Property Value Type Description Remora.Rest.Core.Optional < ButtonComponentStyle > | Improve this Doc View Source Type Gets the type of the component. Declaration Optional<ComponentType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ComponentType > | Improve this Doc View Source URL Gets the URL used for link-style buttons. Declaration Optional<string> URL { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialChannel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialChannel.html",
    "title": "Interface IPartialChannel | Remora.Discord",
    "keywords": "Interface IPartialChannel Represents a partial channel. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialChannel Properties | Improve this Doc View Source ApplicationID Gets the application ID of the group DM creator, if it is bot-created. Declaration Optional<Snowflake> ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Bitrate Gets the bitrate (in bits) of the channel. Minimum 8000. Declaration Optional<int> Bitrate { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source DefaultAutoArchiveDuration Gets the default duration for newly created threads in this channel. Declaration Optional<AutoArchiveDuration> DefaultAutoArchiveDuration { get; } Property Value Type Description Remora.Rest.Core.Optional < AutoArchiveDuration > | Improve this Doc View Source GuildID Gets the ID of the guild the channel is in. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Icon Gets the icon of the group DM. Declaration Optional<IImageHash> Icon { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Gets the ID of the channel. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsNsfw Gets a value indicating whether the channel is NSFW. Declaration Optional<bool> IsNsfw { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source LastMessageID Gets the ID of the last message sent in the channel. Declaration Optional<Snowflake?> LastMessageID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source LastPinTimestamp Gets the time when the last pinned message was pinned. Declaration Optional<DateTimeOffset?> LastPinTimestamp { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Member Gets the thread member object for the current user, if they have joined the thread. Declaration Optional<IThreadMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IThreadMember > | Improve this Doc View Source MemberCount Gets an approximate count of the messages in the channel. Stops counting at 50. Declaration Optional<int> MemberCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MessageCount Gets an approximate count of the messages in the channel. Stops counting at 50. Declaration Optional<int> MessageCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Name Gets the name of the channel. Declaration Optional<string> Name { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source OwnerID Gets the ID of the DM creator. Declaration Optional<Snowflake> OwnerID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ParentID Gets the ID of the parent category for a channel. Each category can contain up to 50 channels. Declaration Optional<Snowflake?> ParentID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source PermissionOverwrites Gets a list of explicit permission overwrites for members and roles. Declaration Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> | Improve this Doc View Source Permissions Gets the computed permission set for the invoking user in the channel. Typically present when the channel is resolved via a slash command interaction. Declaration Optional<IDiscordPermissionSet> Permissions { get; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source Position Gets the sorting position of the channel. Declaration Optional<int> Position { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source RateLimitPerUser Gets the number of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission ManageMessages or ManageChannels are unaffected. This is colloquially known as \"slow mode\". Declaration Optional<TimeSpan> RateLimitPerUser { get; } Property Value Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source Recipients Gets the recipients of the DM. Declaration Optional<IReadOnlyList<IUser>> Recipients { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IUser >> | Improve this Doc View Source RTCRegion Gets the ID of the voice channel region. Declaration Optional<string> RTCRegion { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ThreadMetadata Gets a set of thread-specific fields. Declaration Optional<IThreadMetadata> ThreadMetadata { get; } Property Value Type Description Remora.Rest.Core.Optional < IThreadMetadata > | Improve this Doc View Source Topic Gets the topic of the channel. Declaration Optional<string> Topic { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Gets the type of the channel. Declaration Optional<ChannelType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ChannelType > | Improve this Doc View Source UserLimit Gets the user limit of the voice channel. Declaration Optional<int> UserLimit { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source VideoQualityMode Gets the video quality mode of the channel. Declaration Optional<VideoQualityMode> VideoQualityMode { get; } Property Value Type Description Remora.Rest.Core.Optional < VideoQualityMode >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialEmoji.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialEmoji.html",
    "title": "Interface IPartialEmoji | Remora.Discord",
    "keywords": "Interface IPartialEmoji Represents a partial emoji. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialEmoji Properties | Improve this Doc View Source ID Gets the ID of the emoji. Declaration Optional<Snowflake?> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IsAnimated Gets a value indicating whether this emoji is animated. Declaration Optional<bool> IsAnimated { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsAvailable Gets a value indicating whether this emoji is available. May be false due to a loss of server boosts. Declaration Optional<bool> IsAvailable { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsManaged Gets a value indicating whether this emoji is managed. Declaration Optional<bool> IsManaged { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Gets the name of the emoji. Declaration Optional<string> Name { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source RequireColons Gets a value indicating whether this emoji must be wrapped in colons. Declaration Optional<bool> RequireColons { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Roles Gets a list of roles this emoji is whitelisted to. Declaration Optional<IReadOnlyList<Snowflake>> Roles { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source User Gets the user that created this emoji. Declaration Optional<IUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialGuild.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialGuild.html",
    "title": "Interface IPartialGuild | Remora.Discord",
    "keywords": "Interface IPartialGuild Represents a partial Discord Guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialGuild Properties | Improve this Doc View Source AFKChannelID Gets the ID of the AFK channel. Declaration Optional<Snowflake?> AFKChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source AFKTimeout Gets the AFK timeout (in seconds). Declaration Optional<TimeSpan> AFKTimeout { get; } Property Value Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source ApplicationID Gets the application ID of the guild creator if it is bot-created. Declaration Optional<Snowflake?> ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source ApproximateMemberCount Gets the approximate number of members in the guild. Declaration Optional<int> ApproximateMemberCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ApproximatePresenceCount Gets the approximate number of non-offline members in the guild. Declaration Optional<int> ApproximatePresenceCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Banner Gets the hash of the guild banner. Declaration Optional<IImageHash> Banner { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source DefaultMessageNotifications Gets the default notification level for the guild. Declaration Optional<MessageNotificationLevel> DefaultMessageNotifications { get; } Property Value Type Description Remora.Rest.Core.Optional < MessageNotificationLevel > | Improve this Doc View Source Description Gets the description of the guild. Declaration Optional<string> Description { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source DiscoverySplash Gets the guild's Discovery splash banner. Declaration Optional<IImageHash> DiscoverySplash { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source Emojis Gets a list of emojis in the server. Declaration Optional<IReadOnlyList<IEmoji>> Emojis { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IEmoji >> | Improve this Doc View Source ExplicitContentFilter Gets the explicit content level. Declaration Optional<ExplicitContentFilterLevel> ExplicitContentFilter { get; } Property Value Type Description Remora.Rest.Core.Optional < ExplicitContentFilterLevel > | Improve this Doc View Source GuildFeatures Gets a list of guild features. Declaration Optional<IReadOnlyList<GuildFeature>> GuildFeatures { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < GuildFeature >> | Improve this Doc View Source Icon Gets the guild's icon. Declaration Optional<IImageHash> Icon { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Gets the ID of the guild. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsOwner Gets a value indicating whether the current user is the guild's owner. Declaration Optional<bool> IsOwner { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsPremiumProgressBarEnabled Gets a value indicating whether the guild has the boost progress bar enabled. Declaration Optional<bool> IsPremiumProgressBarEnabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsWidgetEnabled Gets a value indicating whether the server widget is enabled. Declaration Optional<bool> IsWidgetEnabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MaxMembers Gets the maximum number of members for the guild. Declaration Optional<int> MaxMembers { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MaxPresences Gets the maximum number of presences for the guild. This is null for all but the largest of guilds. Declaration Optional<int?> MaxPresences { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> | Improve this Doc View Source MaxVideoChannelUsers Gets the maximum number of users in a video channel. Declaration Optional<int> MaxVideoChannelUsers { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MFALevel Gets the required MFA level for the guild. Declaration Optional<MultiFactorAuthenticationLevel> MFALevel { get; } Property Value Type Description Remora.Rest.Core.Optional < MultiFactorAuthenticationLevel > | Improve this Doc View Source Name Gets the name of the guild. Declaration Optional<string> Name { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source NSFWLevel Gets the guild's NSFW level. Declaration Optional<GuildNSFWLevel> NSFWLevel { get; } Property Value Type Description Remora.Rest.Core.Optional < GuildNSFWLevel > | Improve this Doc View Source OwnerID Gets the ID of the owner. Declaration Optional<Snowflake> OwnerID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Permissions Gets the permissions for the current user in the guild. Declaration Optional<IDiscordPermissionSet> Permissions { get; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source PreferredLocale Gets the preferred locale of a public-enabled guild. Declaration Optional<string> PreferredLocale { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source PremiumSubscriptionCount Gets the number of boosts the guild currently has. Declaration Optional<int> PremiumSubscriptionCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source PremiumTier Gets the boost level of the guild. Declaration Optional<PremiumTier> PremiumTier { get; } Property Value Type Description Remora.Rest.Core.Optional < PremiumTier > | Improve this Doc View Source PublicUpdatesChannelID Gets the ID of the channel where admins and moderators of community-enabled guilds receive notices from Discord. Declaration Optional<Snowflake?> PublicUpdatesChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Roles Gets a list of the roles in the server. Declaration Optional<IReadOnlyList<IRole>> Roles { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IRole >> | Improve this Doc View Source RulesChannelID Gets the ID of the rules channel, if any. This is the channel where community-enabled guilds can display rules and/or guidelines. Declaration Optional<Snowflake?> RulesChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Splash Gets the guild's splash banner. Declaration Optional<IImageHash> Splash { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source Stickers Gets the stickers in the guild. Declaration Optional<IReadOnlyList<ISticker>> Stickers { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < ISticker >> | Improve this Doc View Source SystemChannelFlags Gets the flags on the system channel. Declaration Optional<SystemChannelFlags> SystemChannelFlags { get; } Property Value Type Description Remora.Rest.Core.Optional < SystemChannelFlags > | Improve this Doc View Source SystemChannelID Gets the ID of the channel that system messages are sent to. Declaration Optional<Snowflake?> SystemChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source VanityUrlCode Gets the vanity url code for the guild. Declaration Optional<string> VanityUrlCode { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source VerificationLevel Gets the verification level required for the guild. Declaration Optional<VerificationLevel> VerificationLevel { get; } Property Value Type Description Remora.Rest.Core.Optional < VerificationLevel > | Improve this Doc View Source WelcomeScreen Gets the welcome screen shown to new members. Declaration Optional<IWelcomeScreen> WelcomeScreen { get; } Property Value Type Description Remora.Rest.Core.Optional < IWelcomeScreen > | Improve this Doc View Source WidgetChannelID Gets the ID of the channel the widget generates invites to. Declaration Optional<Snowflake?> WidgetChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >>"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialGuildApplicationCommandPermissions.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialGuildApplicationCommandPermissions.html",
    "title": "Interface IPartialGuildApplicationCommandPermissions | Remora.Discord",
    "keywords": "Interface IPartialGuildApplicationCommandPermissions Represents a set of permissions for a command in a guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialGuildApplicationCommandPermissions Properties | Improve this Doc View Source ApplicationID Gets the ID of the application the command belongs to. Declaration Optional<Snowflake> ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Gets the ID of the command or the application the permission applies to. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > Remarks If this ID is that of an application, its permissions apply to all commands that do not have an explicit permission set. | Improve this Doc View Source Permissions Gets the permissions for the command in the guild. Declaration Optional<IReadOnlyList<IApplicationCommandPermissions>> Permissions { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandPermissions >>"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialGuildMember.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialGuildMember.html",
    "title": "Interface IPartialGuildMember | Remora.Discord",
    "keywords": "Interface IPartialGuildMember Represents partial information about a guild member. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialGuildMember Properties | Improve this Doc View Source Avatar Gets the member's guild avatar hash. Declaration Optional<IImageHash> Avatar { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source CommunicationDisabledUntil Gets the DateTimeOffset until the user has communication disabled. Declaration Optional<DateTimeOffset?> CommunicationDisabledUntil { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IsDeafened Gets a value indicating whether the user is deafened in voice channels. Declaration Optional<bool> IsDeafened { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMuted Gets a value indicating whether the user is muted in voice channels. Declaration Optional<bool> IsMuted { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsPending Gets a value indicating whether the user has passed the guild membership screening requirements. Declaration Optional<bool?> IsPending { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Boolean >> | Improve this Doc View Source JoinedAt Gets when the user joined the guild. Declaration Optional<DateTimeOffset> JoinedAt { get; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Nickname Gets the user's guild nickname. Declaration Optional<string> Nickname { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Permissions Gets the total permissions of the member in a channel, including overrides. Declaration Optional<IDiscordPermissionSet> Permissions { get; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source PremiumSince Gets when the user started boosting the guild. Declaration Optional<DateTimeOffset?> PremiumSince { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Roles Gets the roles the user has. Declaration Optional<IReadOnlyList<Snowflake>> Roles { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source User Gets the user this guild member represents. Declaration Optional<IUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialIntegration.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialIntegration.html",
    "title": "Interface IPartialIntegration | Remora.Discord",
    "keywords": "Interface IPartialIntegration Represents a partial integration object. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialIntegration Properties | Improve this Doc View Source Account Gets the integration's account information. Declaration Optional<IAccount> Account { get; } Property Value Type Description Remora.Rest.Core.Optional < IAccount > | Improve this Doc View Source Application Gets the bot/OAuth2 application for Discord integrations. Declaration Optional<IIntegrationApplication> Application { get; } Property Value Type Description Remora.Rest.Core.Optional < IIntegrationApplication > | Improve this Doc View Source EnableEmoticons Gets a value indicating whether emoticons should be synced for this integration (twitch only, currently). Declaration Optional<bool> EnableEmoticons { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source ExpireBehaviour Gets the behaviour of expiring subscribers. Declaration Optional<IntegrationExpireBehaviour> ExpireBehaviour { get; } Property Value Type Description Remora.Rest.Core.Optional < IntegrationExpireBehaviour > | Improve this Doc View Source ExpireGracePeriod Gets the grace period (in days) before expiring subscribers. Declaration Optional<TimeSpan> ExpireGracePeriod { get; } Property Value Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source ID Gets the ID of the integration. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsEnabled Gets a value indicating whether the integration is enabled. Declaration Optional<bool> IsEnabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsRevoked Gets a value indicating whether this integration has been revoked. Declaration Optional<bool> IsRevoked { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSyncing Gets a value indicating whether the integration is syncing. Declaration Optional<bool> IsSyncing { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Gets the name of the integration. Declaration Optional<string> Name { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source RoleID Gets the ID of the role that this integration uses for subscribers. Declaration Optional<Snowflake> RoleID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source SubscriberCount Gets the number of subscribers this integration has. Declaration Optional<int> SubscriberCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source SyncedAt Gets the time when the integration was last synced. Declaration Optional<DateTimeOffset> SyncedAt { get; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Type Gets the type of integration. Declaration Optional<string> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source User Gets the user for this integration. Declaration Optional<IUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialInvite.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialInvite.html",
    "title": "Interface IPartialInvite | Remora.Discord",
    "keywords": "Interface IPartialInvite Represents a partial invite. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialInvite Properties | Improve this Doc View Source ApproximateMemberCount Gets the approximate count of total members. Declaration Optional<int> ApproximateMemberCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ApproximatePresenceCount Gets the approximate count of online members. Only present when TargetUser is set. Declaration Optional<int> ApproximatePresenceCount { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Channel Gets the channel this invite is for. Declaration Optional<IPartialChannel> Channel { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialChannel > | Improve this Doc View Source Code Gets the unique invite code. Declaration Optional<string> Code { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ExpiresAt Gets the expiration date of this invite. Declaration Optional<DateTimeOffset?> ExpiresAt { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Guild Gets the guild this invite is for. Declaration Optional<IPartialGuild> Guild { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuild > | Improve this Doc View Source GuildScheduledEvent Gets metadata about the scheduled event the invite points to. Declaration Optional<IGuildScheduledEvent> GuildScheduledEvent { get; } Property Value Type Description Remora.Rest.Core.Optional < IGuildScheduledEvent > | Improve this Doc View Source Inviter Gets the user who created the invite. Declaration Optional<IUser> Inviter { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source TargetApplication Gets the embedded application this invite is for. Declaration Optional<IPartialApplication> TargetApplication { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source TargetType Gets the type of target for this invite. Declaration Optional<InviteTarget> TargetType { get; } Property Value Type Description Remora.Rest.Core.Optional < InviteTarget > | Improve this Doc View Source TargetUser Gets the target user for this invite. Declaration Optional<IPartialUser> TargetUser { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialMessage.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialMessage.html",
    "title": "Interface IPartialMessage | Remora.Discord",
    "keywords": "Interface IPartialMessage Represents a message. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialMessage Properties | Improve this Doc View Source Activity Gets the activity the message belongs to. Sent with rich presence-related chat embeds. Declaration Optional<IMessageActivity> Activity { get; } Property Value Type Description Remora.Rest.Core.Optional < IMessageActivity > | Improve this Doc View Source Application Gets the application the message belongs to. Sent with rich presence-related chat embeds. Declaration Optional<IPartialApplication> Application { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source ApplicationID Gets the ID of the application the message's interaction belongs to. Sent with interactions or application-owned webhooks. Declaration Optional<Snowflake> ApplicationID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Attachments Gets a list of attached files. Declaration Optional<IReadOnlyList<IAttachment>> Attachments { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IAttachment >> | Improve this Doc View Source Author Gets the author of the message. This author is not guaranteed to be a valid user; in the case of a webhook message, the object corresponds to the webhook's ID, username, and avatar - this is the case when WebhookID contains a valid value. Declaration Optional<IUser> Author { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source ChannelID Gets the ID of the channel the message was sent in. Declaration Optional<Snowflake> ChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Components Gets the components in the message. Declaration Optional<IReadOnlyList<IMessageComponent>> Components { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> | Improve this Doc View Source Content Gets the contents of the message. Declaration Optional<string> Content { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source EditedTimestamp Gets the time when the message was last edited. Declaration Optional<DateTimeOffset?> EditedTimestamp { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Embeds Gets a list of embeds. Declaration Optional<IReadOnlyList<IEmbed>> Embeds { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> | Improve this Doc View Source Flags Gets a set of bitwise flags describing extra features of the message. Declaration Optional<MessageFlags> Flags { get; } Property Value Type Description Remora.Rest.Core.Optional < MessageFlags > | Improve this Doc View Source GuildID Gets the ID of the guild the message was sent in. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Gets the message ID. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Interaction Gets the interaction associated with this message, if any. Declaration Optional<IMessageInteraction> Interaction { get; } Property Value Type Description Remora.Rest.Core.Optional < IMessageInteraction > | Improve this Doc View Source IsPinned Gets a value indicating whether the messages is pinned. Declaration Optional<bool> IsPinned { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsTTS Gets a value indicating whether this was a TTS message. Declaration Optional<bool> IsTTS { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Member Gets the member properties for the author. The member object exists in MESSAGE_CREATE and MESSAGE_UPDATE events from text-based guild channels. This allows bots to obtain real-time member data without requiring bots to keep member state in memory. Declaration Optional<IPartialGuildMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuildMember > | Improve this Doc View Source MentionedChannels Gets a list of channel mentions. Not all channel mentions in a message will appear in mention_channels. Only textual channels that are visible to everyone in a lurkable guild will ever be included. Only crossposted messages (via Channel Following) currently include mention_channels at all. If no mentions in the message meet these requirements, this field will not be sent. Declaration Optional<IReadOnlyList<IChannelMention>> MentionedChannels { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IChannelMention >> | Improve this Doc View Source MentionedRoles Gets a list of mentioned roles. Declaration Optional<IReadOnlyList<Snowflake>> MentionedRoles { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Mentions Gets a list of users mentioned in the message. Declaration Optional<IReadOnlyList<IUserMention>> Mentions { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IUserMention >> | Improve this Doc View Source MentionsEveryone Gets a value indicating whether this message mentions everyone. Declaration Optional<bool> MentionsEveryone { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MessageReference Gets the message reference. Sent with cross-posted messages. Declaration Optional<IMessageReference> MessageReference { get; } Property Value Type Description Remora.Rest.Core.Optional < IMessageReference > | Improve this Doc View Source Nonce Gets a nonce, used for validating a message was sent. Technically, this can be either an integer or a string. Declaration Optional<string> Nonce { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Reactions Gets an array of reaction objects. Declaration Optional<IReadOnlyList<IReaction>> Reactions { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IReaction >> | Improve this Doc View Source ReferencedMessage Gets the referenced message, if any. A null value in this context refers to a deleted message. Declaration Optional<IMessage> ReferencedMessage { get; } Property Value Type Description Remora.Rest.Core.Optional < IMessage > | Improve this Doc View Source StickerItems Gets the stickers sent with the message. Declaration Optional<IReadOnlyList<IStickerItem>> StickerItems { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IStickerItem >> | Improve this Doc View Source Thread Gets the thread that was started from this message, if any. Declaration Optional<IChannel> Thread { get; } Property Value Type Description Remora.Rest.Core.Optional < IChannel > | Improve this Doc View Source Timestamp Gets the time when the messages was sent. Declaration Optional<DateTimeOffset> Timestamp { get; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Type Gets the message type. Declaration Optional<MessageType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < MessageType > | Improve this Doc View Source WebhookID Gets the ID of the webhook that sent this message. Declaration Optional<Snowflake> WebhookID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialMessageComponent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialMessageComponent.html",
    "title": "Interface IPartialMessageComponent | Remora.Discord",
    "keywords": "Interface IPartialMessageComponent Represents the base type for all partial components. This is a marker interface with no real functionality. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialMessageComponent"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite.html",
    "title": "Interface IPartialPermissionOverwrite | Remora.Discord",
    "keywords": "Interface IPartialPermissionOverwrite Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialPermissionOverwrite Properties | Improve this Doc View Source Allow Gets the set of permissions that are explicitly allowed. Declaration Optional<IDiscordPermissionSet> Allow { get; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source Deny Gets the set of permissions that are explicitly denied. Declaration Optional<IDiscordPermissionSet> Deny { get; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source ID Gets the ID of the role or user ID that the overwrite affects. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Type Gets the type of the overwrite. Declaration Optional<PermissionOverwriteType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < PermissionOverwriteType >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialPresence.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialPresence.html",
    "title": "Interface IPartialPresence | Remora.Discord",
    "keywords": "Interface IPartialPresence Represents a user's presence. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialPresence Properties | Improve this Doc View Source Activities Gets the user's current activities. Declaration Optional<IReadOnlyList<IActivity>> Activities { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IActivity >> | Improve this Doc View Source ClientStatus Gets the user's platform-dependent status. Declaration Optional<IClientStatuses> ClientStatus { get; } Property Value Type Description Remora.Rest.Core.Optional < IClientStatuses > | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Status Gets the current status of the user. Declaration Optional<ClientStatus> Status { get; } Property Value Type Description Remora.Rest.Core.Optional < ClientStatus > | Improve this Doc View Source User Gets the user the presence is being updated for. Declaration Optional<IPartialUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialRole.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialRole.html",
    "title": "Interface IPartialRole | Remora.Discord",
    "keywords": "Interface IPartialRole Represents a partial Discord role. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialRole Properties | Improve this Doc View Source Colour Gets the colour of the role. Declaration Optional<Color> Colour { get; } Property Value Type Description Remora.Rest.Core.Optional < Color > | Improve this Doc View Source Icon Gets the role's icon, if any. Declaration Optional<IImageHash> Icon { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Gets the ID of the role. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsHoisted Gets a value indicating whether the role is displayed separately in the sidebar. Declaration Optional<bool> IsHoisted { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsManaged Gets a value indicating whether this role is managed by an integration. Declaration Optional<bool> IsManaged { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMentionable Gets a value indicating whether this role is mentionable. Declaration Optional<bool> IsMentionable { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Gets the name of the role. Declaration Optional<string> Name { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Permissions Gets the permission set for this role. Declaration Optional<IDiscordPermissionSet> Permissions { get; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source Position Gets the position of the role. Declaration Optional<int> Position { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Tags Gets the tags the role has. Declaration Optional<IRoleTags> Tags { get; } Property Value Type Description Remora.Rest.Core.Optional < IRoleTags > | Improve this Doc View Source UnicodeEmoji Gets the role's unicode emoji icon, if any. Declaration Optional<string> UnicodeEmoji { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialSelectMenuComponent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialSelectMenuComponent.html",
    "title": "Interface IPartialSelectMenuComponent | Remora.Discord",
    "keywords": "Interface IPartialSelectMenuComponent Represents a partial dropdown of selectable values. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialSelectMenuComponent : IPartialMessageComponent Properties | Improve this Doc View Source CustomID Gets a custom ID for the component, defined by the developer. Declaration Optional<string> CustomID { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IsDisabled Gets a value indicating whether the component is disabled. Declaration Optional<bool> IsDisabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MaxValues Gets the maximum number of options that may be selected. Declaration Optional<int> MaxValues { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MinValues Gets the minimum number of options that must be selected. Declaration Optional<int> MinValues { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Options Gets the options in the select menu. Declaration Optional<IReadOnlyList<IPartialSelectOption>> Options { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialSelectOption >> | Improve this Doc View Source Placeholder Gets the placeholder text for the menu. Max 150 characters. Declaration Optional<string> Placeholder { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Gets the type of the component. Declaration Optional<ComponentType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ComponentType >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialSelectOption.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialSelectOption.html",
    "title": "Interface IPartialSelectOption | Remora.Discord",
    "keywords": "Interface IPartialSelectOption Represents a single partial selectable option. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialSelectOption Properties | Improve this Doc View Source Description Gets an additional description of the option. Max 100 characters. Declaration Optional<string> Description { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Emoji Gets an emoji that will render along with the option. Declaration Optional<IPartialEmoji> Emoji { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialEmoji > | Improve this Doc View Source IsDefault Gets a value indicating whether this option will be selected by default. May be true for more than one option in a multi-select menu. Declaration Optional<bool> IsDefault { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Gets the user-facing name of the option. Max 100 characters. Declaration Optional<string> Label { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Value Gets the developer-defined value of the option. Max 100 characters. Declaration Optional<string> Value { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialTextInputComponent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialTextInputComponent.html",
    "title": "Interface IPartialTextInputComponent | Remora.Discord",
    "keywords": "Interface IPartialTextInputComponent Represents a partial text-based input component. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialTextInputComponent : IPartialMessageComponent Properties | Improve this Doc View Source CustomID Gets a custom ID for the component, defined by the developer. Declaration Optional<string> CustomID { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IsRequired Gets whether this field must be filled out. Defaults to true. Declaration Optional<bool> IsRequired { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Gets the label on the text input. Max 45 characters. Declaration Optional<string> Label { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source MaxLength Gets the maximum length of the input, maximum of 4000. Declaration Optional<int> MaxLength { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > Remarks Must be greater than zero and greater than or equal to MinLength if specified. The global maximum is 4000 characters, regardless of what MaxLength is set to. | Improve this Doc View Source MinLength Gets the minimum length of the input, maximum of 4000. Declaration Optional<int> MinLength { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > Remarks Must be greater than zero and less than or equal to MaxLength if specified. The global maximum is 4000 characters, regardless of what MaxLength is set to. | Improve this Doc View Source Placeholder Gets the placeholder text displayed if the input field is empty. Declaration Optional<string> Placeholder { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Style Gets the text input's style. Declaration Optional<TextInputStyle> Style { get; } Property Value Type Description Remora.Rest.Core.Optional < TextInputStyle > | Improve this Doc View Source Type Gets the type of the component. Declaration Optional<ComponentType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ComponentType > | Improve this Doc View Source Value Gets the pre-filled value for the text field. Maximum 4000 characters. Declaration Optional<string> Value { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialUser.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialUser.html",
    "title": "Interface IPartialUser | Remora.Discord",
    "keywords": "Interface IPartialUser Represents a partial Discord user. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialUser Properties | Improve this Doc View Source AccentColour Gets the user's banner colour. Declaration Optional<Color?> AccentColour { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Color >> | Improve this Doc View Source Avatar Gets the user's avatar hash. Declaration Optional<IImageHash> Avatar { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source Banner Gets the user's banner. Declaration Optional<IImageHash> Banner { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source Discriminator Gets the user's 4-digit discord tag. Declaration Optional<ushort> Discriminator { get; } Property Value Type Description Remora.Rest.Core.Optional < UInt16 > | Improve this Doc View Source Email Gets the user's email address. Declaration Optional<string> Email { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Flags Gets the flags on the user's account. Declaration Optional<UserFlags> Flags { get; } Property Value Type Description Remora.Rest.Core.Optional < UserFlags > | Improve this Doc View Source ID Gets the ID of the user. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsBot Gets a value indicating whether the user is a bot, belonging to an OAuth2 application. Declaration Optional<bool> IsBot { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMFAEnabled Gets a value indicating whether the user has multi-factor authentication enabled on their account. Declaration Optional<bool> IsMFAEnabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSystem Gets a value indicating whether the user is an official Discord system user (part of the urgent message system). Declaration Optional<bool> IsSystem { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsVerified Gets a value indicating whether the email on the account has been verified. Declaration Optional<bool> IsVerified { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Locale Gets the user's chosen language option. Declaration Optional<string> Locale { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source PremiumType Gets the user's premium status. Declaration Optional<PremiumType> PremiumType { get; } Property Value Type Description Remora.Rest.Core.Optional < PremiumType > | Improve this Doc View Source PublicFlags Gets the flags on a user's account. Declaration Optional<UserFlags> PublicFlags { get; } Property Value Type Description Remora.Rest.Core.Optional < UserFlags > | Improve this Doc View Source Username Gets the username of the user. This is not a unique value. Declaration Optional<string> Username { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartialVoiceState.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartialVoiceState.html",
    "title": "Interface IPartialVoiceState | Remora.Discord",
    "keywords": "Interface IPartialVoiceState Represents a user's partial voice connection status. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartialVoiceState Properties | Improve this Doc View Source ChannelID Gets the channel ID this user is connected to. Declaration Optional<Snowflake?> ChannelID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source GuildID Gets the guild ID this voice state is for. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsDeafened Gets a value indicating whether the user is deafened by the server. Declaration Optional<bool> IsDeafened { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMuted Gets a value indicating whether the user is muted by the server. Declaration Optional<bool> IsMuted { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSelfDeafened Gets a value indicating whether the user is locally deafened. Declaration Optional<bool> IsSelfDeafened { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSelfMuted Gets a value indicating whether the user is locally muted. Declaration Optional<bool> IsSelfMuted { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsStreaming Gets a value indicating whether the user is currently streaming using \"Go Live\". Declaration Optional<bool> IsStreaming { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSuppressed Gets a value indicating whether the user is muted by the current user. Declaration Optional<bool> IsSuppressed { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsVideoEnabled Gets a value indicating whether the user's camera is enabled. Declaration Optional<bool> IsVideoEnabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Member Gets the guild member this voice state is for. Declaration Optional<IGuildMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source RequestToSpeakTimestamp Gets the time at which the user requested to speak. Declaration Optional<DateTimeOffset?> RequestToSpeakTimestamp { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source SessionID Gets the session ID for this voice state. Declaration Optional<string> SessionID { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source UserID Gets the user ID this voice state is for. Declaration Optional<Snowflake> UserID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPartySize.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPartySize.html",
    "title": "Interface IPartySize | Remora.Discord",
    "keywords": "Interface IPartySize Represents a party size object. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPartySize Properties | Improve this Doc View Source CurrentSize Gets the current number of people in the party. Declaration int CurrentSize { get; } Property Value Type Description Int32 | Improve this Doc View Source MaxSize Gets the maximum size of the party. Declaration int MaxSize { get; } Property Value Type Description Int32"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPermissionOverwrite.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPermissionOverwrite.html",
    "title": "Interface IPermissionOverwrite | Remora.Discord",
    "keywords": "Interface IPermissionOverwrite Represents a channel- or category-specific permission overwrite. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPermissionOverwrite : IPartialPermissionOverwrite Properties | Improve this Doc View Source Allow Gets the set of permissions that are explicitly allowed. Declaration IDiscordPermissionSet Allow { get; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Deny Gets the set of permissions that are explicitly denied. Declaration IDiscordPermissionSet Deny { get; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source ID Gets the ID of the role or user ID that the overwrite affects. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Type Gets the type of the overwrite. Declaration PermissionOverwriteType Type { get; } Property Value Type Description PermissionOverwriteType Explicit Interface Implementations | Improve this Doc View Source IPartialPermissionOverwrite.Allow Gets the set of permissions that are explicitly allowed. Declaration Optional<IDiscordPermissionSet> IPartialPermissionOverwrite.Allow { get; } Returns Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source IPartialPermissionOverwrite.Deny Gets the set of permissions that are explicitly denied. Declaration Optional<IDiscordPermissionSet> IPartialPermissionOverwrite.Deny { get; } Returns Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source IPartialPermissionOverwrite.ID Gets the ID of the role or user ID that the overwrite affects. Declaration Optional<Snowflake> IPartialPermissionOverwrite.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialPermissionOverwrite.Type Gets the type of the overwrite. Declaration Optional<PermissionOverwriteType> IPartialPermissionOverwrite.Type { get; } Returns Type Description Remora.Rest.Core.Optional < PermissionOverwriteType >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPermissionOverwriteTemplate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPermissionOverwriteTemplate.html",
    "title": "Interface IPermissionOverwriteTemplate | Remora.Discord",
    "keywords": "Interface IPermissionOverwriteTemplate Represents a channel- or category-specific permission overwrite. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPermissionOverwriteTemplate Properties | Improve this Doc View Source Allow Gets the set of permissions that are explicitly allowed. Declaration IDiscordPermissionSet Allow { get; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Deny Gets the set of permissions that are explicitly denied. Declaration IDiscordPermissionSet Deny { get; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source ID Gets the ID of the role or user ID that the overwrite affects. Declaration int ID { get; } Property Value Type Description Int32 | Improve this Doc View Source Type Gets the type of the overwrite. Declaration PermissionOverwriteType Type { get; } Property Value Type Description PermissionOverwriteType"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPresence.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPresence.html",
    "title": "Interface IPresence | Remora.Discord",
    "keywords": "Interface IPresence Represents a user's presence. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPresence : IPartialPresence Properties | Improve this Doc View Source Activities Gets the user's current activities. Declaration IReadOnlyList<IActivity> Activities { get; } Property Value Type Description IReadOnlyList < IActivity > | Improve this Doc View Source ClientStatus Gets the user's platform-dependent status. Declaration IClientStatuses ClientStatus { get; } Property Value Type Description IClientStatuses | Improve this Doc View Source GuildID Gets the ID of the guild. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Status Gets the current status of the user. Declaration ClientStatus Status { get; } Property Value Type Description ClientStatus | Improve this Doc View Source User Gets the user the presence is being updated for. Declaration IPartialUser User { get; } Property Value Type Description IPartialUser Explicit Interface Implementations | Improve this Doc View Source IPartialPresence.Activities Gets the user's current activities. Declaration Optional<IReadOnlyList<IActivity>> IPartialPresence.Activities { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IActivity >> | Improve this Doc View Source IPartialPresence.ClientStatus Gets the user's platform-dependent status. Declaration Optional<IClientStatuses> IPartialPresence.ClientStatus { get; } Returns Type Description Remora.Rest.Core.Optional < IClientStatuses > | Improve this Doc View Source IPartialPresence.GuildID Gets the ID of the guild. Declaration Optional<Snowflake> IPartialPresence.GuildID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialPresence.Status Gets the current status of the user. Declaration Optional<ClientStatus> IPartialPresence.Status { get; } Returns Type Description Remora.Rest.Core.Optional < ClientStatus > | Improve this Doc View Source IPartialPresence.User Gets the user the presence is being updated for. Declaration Optional<IPartialUser> IPartialPresence.User { get; } Returns Type Description Remora.Rest.Core.Optional < IPartialUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPropertyErrorDetails.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPropertyErrorDetails.html",
    "title": "Interface IPropertyErrorDetails | Remora.Discord",
    "keywords": "Interface IPropertyErrorDetails Represents detailed information about errors in a property from Discord. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPropertyErrorDetails Properties | Improve this Doc View Source Errors Gets a list of error details regarding this property, if any. Declaration IReadOnlyList<IErrorDetails> Errors { get; } Property Value Type Description IReadOnlyList < IErrorDetails > | Improve this Doc View Source MemberErrors Gets a set of error details regarding inner properties, if any. If the property is an array, the key corresponds to the index in the array. Declaration IReadOnlyDictionary<string, IPropertyErrorDetails> MemberErrors { get; } Property Value Type Description IReadOnlyDictionary < String , IPropertyErrorDetails >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IPruneCount.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IPruneCount.html",
    "title": "Interface IPruneCount | Remora.Discord",
    "keywords": "Interface IPruneCount Represents a count of members that would be pruned in a prune operation. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IPruneCount Properties | Improve this Doc View Source Pruned Gets the number of members that would be pruned. Declaration int? Pruned { get; } Property Value Type Description Nullable < Int32 >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IReaction.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IReaction.html",
    "title": "Interface IReaction | Remora.Discord",
    "keywords": "Interface IReaction Represents a reaction to a message. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IReaction Properties | Improve this Doc View Source Count Gets the number of times this emoji has been used to react. Declaration int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Emoji Gets the partial emoji information. Declaration IPartialEmoji Emoji { get; } Property Value Type Description IPartialEmoji | Improve this Doc View Source HasCurrentUserReacted Gets a value indicating whether the current user has reacted using this emoji. Declaration bool HasCurrentUserReacted { get; } Property Value Type Description Boolean"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IRestError.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IRestError.html",
    "title": "Interface IRestError | Remora.Discord",
    "keywords": "Interface IRestError Represents an error reported by the REST API. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IRestError Properties | Improve this Doc View Source Code Gets the error code. Declaration DiscordError Code { get; } Property Value Type Description DiscordError | Improve this Doc View Source Errors Gets the per-property error details. Declaration Optional<IReadOnlyDictionary<string, OneOf<IPropertyErrorDetails, IReadOnlyList<IErrorDetails>>>> Errors { get; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , OneOf.OneOf < IPropertyErrorDetails , IReadOnlyList < IErrorDetails >>>> | Improve this Doc View Source Message Gets a descriptive error message. Declaration string Message { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IRole.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IRole.html",
    "title": "Interface IRole | Remora.Discord",
    "keywords": "Interface IRole Represents a Discord role. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IRole : IPartialRole Properties | Improve this Doc View Source Colour Gets the colour of the role. Declaration Color Colour { get; } Property Value Type Description Color | Improve this Doc View Source Icon Gets the role's icon, if any. Declaration Optional<IImageHash> Icon { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Gets the ID of the role. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsHoisted Gets a value indicating whether the role is displayed separately in the sidebar. Declaration bool IsHoisted { get; } Property Value Type Description Boolean | Improve this Doc View Source IsManaged Gets a value indicating whether this role is managed by an integration. Declaration bool IsManaged { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMentionable Gets a value indicating whether this role is mentionable. Declaration bool IsMentionable { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the name of the role. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Permissions Gets the permission set for this role. Declaration IDiscordPermissionSet Permissions { get; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Position Gets the position of the role. Declaration int Position { get; } Property Value Type Description Int32 | Improve this Doc View Source Tags Gets the tags the role has. Declaration Optional<IRoleTags> Tags { get; } Property Value Type Description Remora.Rest.Core.Optional < IRoleTags > | Improve this Doc View Source UnicodeEmoji Gets the role's unicode emoji icon, if any. Declaration Optional<string> UnicodeEmoji { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Explicit Interface Implementations | Improve this Doc View Source IPartialRole.Colour Gets the colour of the role. Declaration Optional<Color> IPartialRole.Colour { get; } Returns Type Description Remora.Rest.Core.Optional < Color > | Improve this Doc View Source IPartialRole.Icon Gets the role's icon, if any. Declaration Optional<IImageHash> IPartialRole.Icon { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialRole.ID Gets the ID of the role. Declaration Optional<Snowflake> IPartialRole.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialRole.IsHoisted Gets a value indicating whether the role is displayed separately in the sidebar. Declaration Optional<bool> IPartialRole.IsHoisted { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialRole.IsManaged Gets a value indicating whether this role is managed by an integration. Declaration Optional<bool> IPartialRole.IsManaged { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialRole.IsMentionable Gets a value indicating whether this role is mentionable. Declaration Optional<bool> IPartialRole.IsMentionable { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialRole.Name Gets the name of the role. Declaration Optional<string> IPartialRole.Name { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialRole.Permissions Gets the permission set for this role. Declaration Optional<IDiscordPermissionSet> IPartialRole.Permissions { get; } Returns Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source IPartialRole.Position Gets the position of the role. Declaration Optional<int> IPartialRole.Position { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialRole.Tags Gets the tags the role has. Declaration Optional<IRoleTags> IPartialRole.Tags { get; } Returns Type Description Remora.Rest.Core.Optional < IRoleTags > | Improve this Doc View Source IPartialRole.UnicodeEmoji Gets the role's unicode emoji icon, if any. Declaration Optional<string> IPartialRole.UnicodeEmoji { get; } Returns Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IRoleTags.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IRoleTags.html",
    "title": "Interface IRoleTags | Remora.Discord",
    "keywords": "Interface IRoleTags Represents a set of role tags. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IRoleTags Properties | Improve this Doc View Source BotID Gets the ID of the bot the role belongs to. Declaration Optional<Snowflake> BotID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IntegrationID Gets the ID of the integration the role belongs to. Declaration Optional<Snowflake> IntegrationID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsPremiumSubscriberRole Gets a value indicating whether this role is the premium subscriber role. Declaration Optional<bool?> IsPremiumSubscriberRole { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Boolean >> Remarks This value is strangely documented in Discord. It appears that a null value may correspond to \"true\", and nonpresence may correspond to \"false\"."
  },
  "api/Remora.Discord.API.Abstractions.Objects.IRoleTemplate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IRoleTemplate.html",
    "title": "Interface IRoleTemplate | Remora.Discord",
    "keywords": "Interface IRoleTemplate Represents a Discord role. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IRoleTemplate Properties | Improve this Doc View Source Colour Gets the colour of the role. Declaration Color Colour { get; } Property Value Type Description Color | Improve this Doc View Source Icon Gets the role's icon, if any. Declaration Optional<IImageHash> Icon { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Gets the relative ID of the role. Declaration int ID { get; } Property Value Type Description Int32 | Improve this Doc View Source IsHoisted Gets a value indicating whether the role is displayed separately in the sidebar. Declaration bool IsHoisted { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMentionable Gets a value indicating whether this role is mentionable. Declaration bool IsMentionable { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the name of the role. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Permissions Gets the permission set for this role. Declaration IDiscordPermissionSet Permissions { get; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Position Gets the position of the role. Declaration int Position { get; } Property Value Type Description Int32 | Improve this Doc View Source Tags Gets the name of the role. Declaration Optional<IRoleTags> Tags { get; } Property Value Type Description Remora.Rest.Core.Optional < IRoleTags > | Improve this Doc View Source UnicodeEmoji Gets the role's unicode emoji icon, if any. Declaration Optional<string> UnicodeEmoji { get; } Property Value Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.ISelectMenuComponent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ISelectMenuComponent.html",
    "title": "Interface ISelectMenuComponent | Remora.Discord",
    "keywords": "Interface ISelectMenuComponent Represents a dropdown of selectable values. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface ISelectMenuComponent : IMessageComponent, IPartialSelectMenuComponent, IPartialMessageComponent Properties | Improve this Doc View Source CustomID Gets a custom ID for the component, defined by the developer. Declaration string CustomID { get; } Property Value Type Description String | Improve this Doc View Source IsDisabled Gets a value indicating whether the component is disabled. Declaration Optional<bool> IsDisabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MaxValues Gets the maximum number of options that may be selected. Declaration Optional<int> MaxValues { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MinValues Gets the minimum number of options that must be selected. Declaration Optional<int> MinValues { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Options Gets the options in the select menu. Declaration IReadOnlyList<ISelectOption> Options { get; } Property Value Type Description IReadOnlyList < ISelectOption > | Improve this Doc View Source Placeholder Gets the placeholder text for the menu. Max 150 characters. Declaration Optional<string> Placeholder { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Gets the type of the component. Declaration ComponentType Type { get; } Property Value Type Description ComponentType Explicit Interface Implementations | Improve this Doc View Source IPartialSelectMenuComponent.CustomID Gets a custom ID for the component, defined by the developer. Declaration Optional<string> IPartialSelectMenuComponent.CustomID { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialSelectMenuComponent.IsDisabled Gets a value indicating whether the component is disabled. Declaration Optional<bool> IPartialSelectMenuComponent.IsDisabled { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialSelectMenuComponent.MaxValues Gets the maximum number of options that may be selected. Declaration Optional<int> IPartialSelectMenuComponent.MaxValues { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialSelectMenuComponent.MinValues Gets the minimum number of options that must be selected. Declaration Optional<int> IPartialSelectMenuComponent.MinValues { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source IPartialSelectMenuComponent.Options Gets the options in the select menu. Declaration Optional<IReadOnlyList<IPartialSelectOption>> IPartialSelectMenuComponent.Options { get; } Returns Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialSelectOption >> | Improve this Doc View Source IPartialSelectMenuComponent.Placeholder Gets the placeholder text for the menu. Max 150 characters. Declaration Optional<string> IPartialSelectMenuComponent.Placeholder { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialSelectMenuComponent.Type Gets the type of the component. Declaration Optional<ComponentType> IPartialSelectMenuComponent.Type { get; } Returns Type Description Remora.Rest.Core.Optional < ComponentType >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.ISelectOption.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ISelectOption.html",
    "title": "Interface ISelectOption | Remora.Discord",
    "keywords": "Interface ISelectOption Represents a single selectable option. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface ISelectOption : IPartialSelectOption Properties | Improve this Doc View Source Description Gets an additional description of the option. Max 100 characters. Declaration Optional<string> Description { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Emoji Gets an emoji that will render along with the option. Declaration Optional<IPartialEmoji> Emoji { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialEmoji > | Improve this Doc View Source IsDefault Gets a value indicating whether this option will be selected by default. May be true for more than one option in a multi-select menu. Declaration Optional<bool> IsDefault { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Gets the user-facing name of the option. Max 100 characters. Declaration string Label { get; } Property Value Type Description String | Improve this Doc View Source Value Gets the developer-defined value of the option. Max 100 characters. Declaration string Value { get; } Property Value Type Description String Explicit Interface Implementations | Improve this Doc View Source IPartialSelectOption.Description Gets an additional description of the option. Max 100 characters. Declaration Optional<string> IPartialSelectOption.Description { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialSelectOption.Emoji Gets an emoji that will render along with the option. Declaration Optional<IPartialEmoji> IPartialSelectOption.Emoji { get; } Returns Type Description Remora.Rest.Core.Optional < IPartialEmoji > | Improve this Doc View Source IPartialSelectOption.IsDefault Gets a value indicating whether this option will be selected by default. May be true for more than one option in a multi-select menu. Declaration Optional<bool> IPartialSelectOption.IsDefault { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialSelectOption.Label Gets the user-facing name of the option. Max 100 characters. Declaration Optional<string> IPartialSelectOption.Label { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialSelectOption.Value Gets the developer-defined value of the option. Max 100 characters. Declaration Optional<string> IPartialSelectOption.Value { get; } Returns Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.ISessionStartLimit.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ISessionStartLimit.html",
    "title": "Interface ISessionStartLimit | Remora.Discord",
    "keywords": "Interface ISessionStartLimit Represents information about session start limits. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface ISessionStartLimit Properties | Improve this Doc View Source MaxConcurrency Gets the maximum number of concurrent identify messages that may be sent if the bot is sharded. The logic behind this value is slightly complex. Given a maximum concurrency of 16 and 16 shards, all 16 shards may identify concurrently. However, given a maximum concurrency of 16 and 32 shards, the batching properties of this value come into play. Concurrently identifying shards 0 through 15 would be allowed, but not shards 0 through 8 and 16 through 24. Effectively, only shards with different rate limit keys may concurrently identify, where the key is calculated as follows. rate_limit_key = shard_id % max_concurrency Declaration int MaxConcurrency { get; } Property Value Type Description Int32 | Improve this Doc View Source Remaining Gets the remaining number of session starts the user is allowed. Declaration int Remaining { get; } Property Value Type Description Int32 | Improve this Doc View Source ResetAfter Gets the time (in milliseconds) after which the limit resets. Declaration TimeSpan ResetAfter { get; } Property Value Type Description TimeSpan | Improve this Doc View Source Total Gets the total number of session starts the user is allowed. Declaration int Total { get; } Property Value Type Description Int32"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IStageInstance.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IStageInstance.html",
    "title": "Interface IStageInstance | Remora.Discord",
    "keywords": "Interface IStageInstance Represents information about a live stage. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IStageInstance Properties | Improve this Doc View Source ChannelID Gets the ID of the stage channel the instance is associated with. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Gets the ID of the guild the instance is in. Declaration Snowflake GuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildScheduledEventID Gets the ID of the scheduled event for this stage instance. Declaration Snowflake? GuildScheduledEventID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Gets the ID of the stage instance. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsDiscoveryDisabled Gets a value indicating whether stage discovery is disabled for the instance. Declaration [Obsolete] bool IsDiscoveryDisabled { get; } Property Value Type Description Boolean | Improve this Doc View Source PrivacyLevel Gets the privacy level of the instance. Declaration StagePrivacyLevel PrivacyLevel { get; } Property Value Type Description StagePrivacyLevel | Improve this Doc View Source Topic Gets the topic of the instance. Declaration string Topic { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.ISticker.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ISticker.html",
    "title": "Interface ISticker | Remora.Discord",
    "keywords": "Interface ISticker Represents a sticker. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface ISticker Properties | Improve this Doc View Source Description Gets the description of the sticker. Declaration string Description { get; } Property Value Type Description String | Improve this Doc View Source FormatType Gets the format of the sticker. Declaration StickerFormatType FormatType { get; } Property Value Type Description StickerFormatType | Improve this Doc View Source GuildID Gets the ID of the guild the sticker belongs to. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Gets the ID of the sticker. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsAvailable Gets a value indicating whether the sticker is available. Declaration Optional<bool> IsAvailable { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Gets the name of the sticker. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source PackID Gets the ID of the sticker pack. Declaration Optional<Snowflake> PackID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source SortValue Gets the sticker's sorting order within a sticker pack. Declaration Optional<int> SortValue { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Tags Gets the autocomplete/suggestion tags for the sticker. By convention, this tends to be a comma-separated list. Declaration string Tags { get; } Property Value Type Description String | Improve this Doc View Source Type Gets the type of the sticker. Declaration StickerType Type { get; } Property Value Type Description StickerType | Improve this Doc View Source User Gets the user that uploaded the sticker. Declaration Optional<IUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IStickerItem.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IStickerItem.html",
    "title": "Interface IStickerItem | Remora.Discord",
    "keywords": "Interface IStickerItem Represents a sticker in a message. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IStickerItem Properties | Improve this Doc View Source FormatType Gets the format of the sticker. Declaration StickerFormatType FormatType { get; } Property Value Type Description StickerFormatType | Improve this Doc View Source ID Gets the ID of the sticker. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Gets the name of the sticker. Declaration string Name { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IStickerPack.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IStickerPack.html",
    "title": "Interface IStickerPack | Remora.Discord",
    "keywords": "Interface IStickerPack Represents a pack of stickers. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IStickerPack Properties | Improve this Doc View Source BannerAssetID Gets the ID of the sticker pack's banner image. Declaration Optional<Snowflake> BannerAssetID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source CoverStickerID Gets the ID of the sticker in the pack which is shown as the pack's icon. Declaration Optional<Snowflake> CoverStickerID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Description Gets the description of the pack. Declaration string Description { get; } Property Value Type Description String | Improve this Doc View Source ID Gets the ID of the sticker pack. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Gets the name of the sticker pack. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source SKUID Gets the sticker pack's stock keeping unit ID. Declaration Snowflake SKUID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Stickers Gets the stickers in the pack. Declaration IReadOnlyList<ISticker> Stickers { get; } Property Value Type Description IReadOnlyList < ISticker >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.ITeam.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ITeam.html",
    "title": "Interface ITeam | Remora.Discord",
    "keywords": "Interface ITeam Represents a developer team on Discord. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface ITeam Properties | Improve this Doc View Source Icon Gets the team's icon. Declaration IImageHash Icon { get; } Property Value Type Description IImageHash | Improve this Doc View Source ID Gets the ID of the team. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Members Gets the team members. Declaration IReadOnlyList<ITeamMember> Members { get; } Property Value Type Description IReadOnlyList < ITeamMember > | Improve this Doc View Source Name Gets the name of the team. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source OwnerUserID Gets the user ID of the current team owner. Declaration Snowflake OwnerUserID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.Objects.ITeamMember.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ITeamMember.html",
    "title": "Interface ITeamMember | Remora.Discord",
    "keywords": "Interface ITeamMember Represents a Discord developer team member. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface ITeamMember Properties | Improve this Doc View Source MembershipState Gets the user's membership state on the team. Declaration MembershipState MembershipState { get; } Property Value Type Description MembershipState | Improve this Doc View Source Permissions Gets the permissions of the member. Currently, always '[ \"*\" ]'. Declaration IReadOnlyList<string> Permissions { get; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source TeamID Gets the ID of the parent team of which the user is a member. Declaration Snowflake TeamID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source User Gets the user that's part of the team. Declaration IPartialUser User { get; } Property Value Type Description IPartialUser"
  },
  "api/Remora.Discord.API.Abstractions.Objects.ITemplate.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ITemplate.html",
    "title": "Interface ITemplate | Remora.Discord",
    "keywords": "Interface ITemplate Represents a guild template. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface ITemplate Properties | Improve this Doc View Source Code Gets the template code (a unique ID). Declaration string Code { get; } Property Value Type Description String | Improve this Doc View Source CreatedAt Gets the time when the template was created. Declaration DateTimeOffset CreatedAt { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Creator Gets the user who created the template. Declaration IUser Creator { get; } Property Value Type Description IUser | Improve this Doc View Source CreatorID Gets the ID of the user who created the template. Declaration Snowflake CreatorID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Description Gets the description for the template. Declaration string Description { get; } Property Value Type Description String | Improve this Doc View Source IsDirty Gets a value indicating whether the template has unsynchronized changes. Declaration bool? IsDirty { get; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source Name Gets the name of the template. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source SerializedSourceGuild Gets the guild snapshot this template contains. Declaration IGuildTemplate SerializedSourceGuild { get; } Property Value Type Description IGuildTemplate | Improve this Doc View Source SourceGuildID Gets the ID of the guild the template is based on. Declaration Snowflake SourceGuildID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source UpdatedAt Gets the last time the template was updated. Declaration DateTimeOffset UpdatedAt { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source UsageCount Gets the number of times this template has been used. Declaration int UsageCount { get; } Property Value Type Description Int32"
  },
  "api/Remora.Discord.API.Abstractions.Objects.ITextInputComponent.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ITextInputComponent.html",
    "title": "Interface ITextInputComponent | Remora.Discord",
    "keywords": "Interface ITextInputComponent Represents a text-based input component. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface ITextInputComponent : IMessageComponent, IPartialTextInputComponent, IPartialMessageComponent Properties | Improve this Doc View Source CustomID Gets a custom ID for the component, defined by the developer. Declaration string CustomID { get; } Property Value Type Description String | Improve this Doc View Source IsRequired Gets whether this field must be filled out. Defaults to true. Declaration Optional<bool> IsRequired { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Gets the label on the text input. Max 45 characters. Declaration string Label { get; } Property Value Type Description String | Improve this Doc View Source MaxLength Gets the maximum length of the input, maximum of 4000. Declaration Optional<int> MaxLength { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > Remarks Must be greater than zero and greater than or equal to MinLength if specified. The global maximum is 4000 characters, regardless of what MaxLength is set to. | Improve this Doc View Source MinLength Gets the minimum length of the input, maximum of 4000. Declaration Optional<int> MinLength { get; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > Remarks Must be greater than zero and less than or equal to MaxLength if specified. The global maximum is 4000 characters, regardless of what MaxLength is set to. | Improve this Doc View Source Placeholder Gets the placeholder text displayed if the input field is empty. Declaration Optional<string> Placeholder { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Style Gets the text input's style. Declaration TextInputStyle Style { get; } Property Value Type Description TextInputStyle | Improve this Doc View Source Type Gets the type of the component. Declaration ComponentType Type { get; } Property Value Type Description ComponentType | Improve this Doc View Source Value Gets the pre-filled value for the text field. Maximum 4000 characters. Declaration Optional<string> Value { get; } Property Value Type Description Remora.Rest.Core.Optional < String > Explicit Interface Implementations | Improve this Doc View Source IPartialTextInputComponent.CustomID Gets a custom ID for the component, defined by the developer. Declaration Optional<string> IPartialTextInputComponent.CustomID { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialTextInputComponent.IsRequired Gets whether this field must be filled out. Defaults to true. Declaration Optional<bool> IPartialTextInputComponent.IsRequired { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialTextInputComponent.Label Gets the label on the text input. Max 45 characters. Declaration Optional<string> IPartialTextInputComponent.Label { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialTextInputComponent.MaxLength Gets the maximum length of the input, maximum of 4000. Declaration Optional<int> IPartialTextInputComponent.MaxLength { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > Remarks Must be greater than zero and greater than or equal to MinLength if specified. The global maximum is 4000 characters, regardless of what MaxLength is set to. | Improve this Doc View Source IPartialTextInputComponent.MinLength Gets the minimum length of the input, maximum of 4000. Declaration Optional<int> IPartialTextInputComponent.MinLength { get; } Returns Type Description Remora.Rest.Core.Optional < Int32 > Remarks Must be greater than zero and less than or equal to MaxLength if specified. The global maximum is 4000 characters, regardless of what MaxLength is set to. | Improve this Doc View Source IPartialTextInputComponent.Placeholder Gets the placeholder text displayed if the input field is empty. Declaration Optional<string> IPartialTextInputComponent.Placeholder { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialTextInputComponent.Style Gets the text input's style. Declaration Optional<TextInputStyle> IPartialTextInputComponent.Style { get; } Returns Type Description Remora.Rest.Core.Optional < TextInputStyle > | Improve this Doc View Source IPartialTextInputComponent.Type Gets the type of the component. Declaration Optional<ComponentType> IPartialTextInputComponent.Type { get; } Returns Type Description Remora.Rest.Core.Optional < ComponentType > | Improve this Doc View Source IPartialTextInputComponent.Value Gets the pre-filled value for the text field. Maximum 4000 characters. Declaration Optional<string> IPartialTextInputComponent.Value { get; } Returns Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IThreadMember.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IThreadMember.html",
    "title": "Interface IThreadMember | Remora.Discord",
    "keywords": "Interface IThreadMember Represents a thread member. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IThreadMember Properties | Improve this Doc View Source Flags Gets any user-thread settings. Declaration ThreadMemberFlags Flags { get; } Property Value Type Description ThreadMemberFlags | Improve this Doc View Source ID Gets the ID of the thread. Declaration Optional<Snowflake> ID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source JoinTimestamp Gets the time the current user last joined the thread. Declaration DateTimeOffset JoinTimestamp { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Member Gets the guild member object related to the thread member. Declaration Optional<IGuildMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > Remarks This field is typically only set in IThreadMembersUpdate events. | Improve this Doc View Source Presence Gets the presence information related to the thread member. Declaration Optional<IPartialPresence> Presence { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialPresence > Remarks This field is typically only set in IThreadMembersUpdate events. | Improve this Doc View Source UserID Gets the ID of the user. Declaration Optional<Snowflake> UserID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IThreadMetadata.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IThreadMetadata.html",
    "title": "Interface IThreadMetadata | Remora.Discord",
    "keywords": "Interface IThreadMetadata Represents metadata information for a thread channel. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IThreadMetadata Properties | Improve this Doc View Source ArchiveTimestamp Gets a timestamp when the thread's archival status was last changed. Declaration DateTimeOffset ArchiveTimestamp { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source AutoArchiveDuration Gets a time of inactivity after which the thread is automatically archived. Declaration AutoArchiveDuration AutoArchiveDuration { get; } Property Value Type Description AutoArchiveDuration | Improve this Doc View Source CreateTimestamp Gets a value indicating when the thread was created. Only populated for threads created after 2022-01-09 (YYYY-MM-DD). Declaration Optional<DateTimeOffset?> CreateTimestamp { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IsArchived Gets a value indicating whether the thread has been archived. Declaration bool IsArchived { get; } Property Value Type Description Boolean | Improve this Doc View Source IsInvitable Gets a value indicating whether non-moderators can add other non-moderators. Declaration Optional<bool> IsInvitable { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsLocked Gets a value indicating whether the thread has been locked. Declaration bool IsLocked { get; } Property Value Type Description Boolean"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IUnavailableGuild.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IUnavailableGuild.html",
    "title": "Interface IUnavailableGuild | Remora.Discord",
    "keywords": "Interface IUnavailableGuild Represents an unavailable guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IUnavailableGuild Properties | Improve this Doc View Source ID Gets the ID of the guild. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsUnavailable Gets a value indicating whether the guild is unavailable. This field is not set if the user was removed from the guild. Declaration Optional<bool> IsUnavailable { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IUser.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IUser.html",
    "title": "Interface IUser | Remora.Discord",
    "keywords": "Interface IUser Represents a Discord user. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IUser : IPartialUser Properties | Improve this Doc View Source AccentColour Gets the user's banner colour. Declaration Optional<Color?> AccentColour { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Color >> | Improve this Doc View Source Avatar Gets the user's avatar hash. Declaration IImageHash Avatar { get; } Property Value Type Description IImageHash | Improve this Doc View Source Banner Gets the user's banner. Declaration Optional<IImageHash> Banner { get; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source Discriminator Gets the user's 4-digit discord tag. Declaration ushort Discriminator { get; } Property Value Type Description UInt16 | Improve this Doc View Source Email Gets the user's email address. Declaration Optional<string> Email { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Flags Gets the flags on the user's account. Declaration Optional<UserFlags> Flags { get; } Property Value Type Description Remora.Rest.Core.Optional < UserFlags > | Improve this Doc View Source ID Gets the ID of the user. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsBot Gets a value indicating whether the user is a bot, belonging to an OAuth2 application. Declaration Optional<bool> IsBot { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMFAEnabled Gets a value indicating whether the user has multi-factor authentication enabled on their account. Declaration Optional<bool> IsMFAEnabled { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSystem Gets a value indicating whether the user is an official Discord system user (part of the urgent message system). Declaration Optional<bool> IsSystem { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsVerified Gets a value indicating whether the email on the account has been verified. Declaration Optional<bool> IsVerified { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Locale Gets the user's chosen language option. Declaration Optional<string> Locale { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source PremiumType Gets the user's premium status. Declaration Optional<PremiumType> PremiumType { get; } Property Value Type Description Remora.Rest.Core.Optional < PremiumType > | Improve this Doc View Source PublicFlags Gets the flags on a user's account. Declaration Optional<UserFlags> PublicFlags { get; } Property Value Type Description Remora.Rest.Core.Optional < UserFlags > | Improve this Doc View Source Username Gets the username of the user. This is not a unique value. Declaration string Username { get; } Property Value Type Description String Explicit Interface Implementations | Improve this Doc View Source IPartialUser.AccentColour Gets the user's banner colour. Declaration Optional<Color?> IPartialUser.AccentColour { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Color >> | Improve this Doc View Source IPartialUser.Avatar Gets the user's avatar hash. Declaration Optional<IImageHash> IPartialUser.Avatar { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialUser.Banner Gets the user's banner. Declaration Optional<IImageHash> IPartialUser.Banner { get; } Returns Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source IPartialUser.Discriminator Gets the user's 4-digit discord tag. Declaration Optional<ushort> IPartialUser.Discriminator { get; } Returns Type Description Remora.Rest.Core.Optional < UInt16 > | Improve this Doc View Source IPartialUser.Email Gets the user's email address. Declaration Optional<string> IPartialUser.Email { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialUser.Flags Gets the flags on the user's account. Declaration Optional<UserFlags> IPartialUser.Flags { get; } Returns Type Description Remora.Rest.Core.Optional < UserFlags > | Improve this Doc View Source IPartialUser.ID Gets the ID of the user. Declaration Optional<Snowflake> IPartialUser.ID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialUser.IsBot Gets a value indicating whether the user is a bot, belonging to an OAuth2 application. Declaration Optional<bool> IPartialUser.IsBot { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialUser.IsMFAEnabled Gets a value indicating whether the user has multi-factor authentication enabled on their account. Declaration Optional<bool> IPartialUser.IsMFAEnabled { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialUser.IsSystem Gets a value indicating whether the user is an official Discord system user (part of the urgent message system). Declaration Optional<bool> IPartialUser.IsSystem { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialUser.IsVerified Gets a value indicating whether the email on the account has been verified. Declaration Optional<bool> IPartialUser.IsVerified { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialUser.Locale Gets the user's chosen language option. Declaration Optional<string> IPartialUser.Locale { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialUser.PremiumType Gets the user's premium status. Declaration Optional<PremiumType> IPartialUser.PremiumType { get; } Returns Type Description Remora.Rest.Core.Optional < PremiumType > | Improve this Doc View Source IPartialUser.PublicFlags Gets the flags on a user's account. Declaration Optional<UserFlags> IPartialUser.PublicFlags { get; } Returns Type Description Remora.Rest.Core.Optional < UserFlags > | Improve this Doc View Source IPartialUser.Username Gets the username of the user. This is not a unique value. Declaration Optional<string> IPartialUser.Username { get; } Returns Type Description Remora.Rest.Core.Optional < String >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IUserMention.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IUserMention.html",
    "title": "Interface IUserMention | Remora.Discord",
    "keywords": "Interface IUserMention Represents a user mention. Inherited Members IUser.ID IUser.Username IUser.Discriminator IUser.Avatar IUser.IsBot IUser.IsSystem IUser.IsMFAEnabled IUser.Banner IUser.AccentColour IUser.Locale IUser.IsVerified IUser.Email IUser.Flags IUser.PremiumType IUser.PublicFlags IUser.IPartialUser.ID IUser.IPartialUser.Username IUser.IPartialUser.Discriminator IUser.IPartialUser.Avatar IUser.IPartialUser.IsBot IUser.IPartialUser.IsSystem IUser.IPartialUser.IsMFAEnabled IUser.IPartialUser.Banner IUser.IPartialUser.AccentColour IUser.IPartialUser.Locale IUser.IPartialUser.IsVerified IUser.IPartialUser.Email IUser.IPartialUser.Flags IUser.IPartialUser.PremiumType IUser.IPartialUser.PublicFlags Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IUserMention : IUser, IPartialUser Properties | Improve this Doc View Source Member Gets the guild member information about the user. Declaration Optional<IPartialGuildMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuildMember >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IVoiceRegion.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IVoiceRegion.html",
    "title": "Interface IVoiceRegion | Remora.Discord",
    "keywords": "Interface IVoiceRegion Represents a voice region. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceRegion Properties | Improve this Doc View Source ID Gets a unique ID for the region. Declaration string ID { get; } Property Value Type Description String | Improve this Doc View Source IsCustom Gets a value indicating whether this is a custom region (used for events, etc). Declaration bool IsCustom { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDeprecated Gets a value indicating whether this is a deprecated region. Avoid switching to these. Declaration bool IsDeprecated { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOptimal Gets a value indicating whether this server is the one closest to the current user's client. Declaration bool IsOptimal { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the name of the region. Declaration string Name { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IVoiceState.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IVoiceState.html",
    "title": "Interface IVoiceState | Remora.Discord",
    "keywords": "Interface IVoiceState Represents a user's voice connection status. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceState : IPartialVoiceState Properties | Improve this Doc View Source ChannelID Gets the channel ID this user is connected to. Declaration Snowflake? ChannelID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildID Gets the guild ID this voice state is for. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsDeafened Gets a value indicating whether the user is deafened by the server. Declaration bool IsDeafened { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMuted Gets a value indicating whether the user is muted by the server. Declaration bool IsMuted { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSelfDeafened Gets a value indicating whether the user is locally deafened. Declaration bool IsSelfDeafened { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSelfMuted Gets a value indicating whether the user is locally muted. Declaration bool IsSelfMuted { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStreaming Gets a value indicating whether the user is currently streaming using \"Go Live\". Declaration Optional<bool> IsStreaming { get; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSuppressed Gets a value indicating whether the user is muted by the current user. Declaration bool IsSuppressed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVideoEnabled Gets a value indicating whether the user's camera is enabled. Declaration bool IsVideoEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source Member Gets the guild member this voice state is for. Declaration Optional<IGuildMember> Member { get; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source RequestToSpeakTimestamp Gets the time at which the user requested to speak. Declaration DateTimeOffset? RequestToSpeakTimestamp { get; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source SessionID Gets the session ID for this voice state. Declaration string SessionID { get; } Property Value Type Description String | Improve this Doc View Source UserID Gets the user ID this voice state is for. Declaration Snowflake UserID { get; } Property Value Type Description Remora.Rest.Core.Snowflake Explicit Interface Implementations | Improve this Doc View Source IPartialVoiceState.ChannelID Gets the channel ID this user is connected to. Declaration Optional<Snowflake?> IPartialVoiceState.ChannelID { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IPartialVoiceState.GuildID Gets the guild ID this voice state is for. Declaration Optional<Snowflake> IPartialVoiceState.GuildID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IPartialVoiceState.IsDeafened Gets a value indicating whether the user is deafened by the server. Declaration Optional<bool> IPartialVoiceState.IsDeafened { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialVoiceState.IsMuted Gets a value indicating whether the user is muted by the server. Declaration Optional<bool> IPartialVoiceState.IsMuted { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialVoiceState.IsSelfDeafened Gets a value indicating whether the user is locally deafened. Declaration Optional<bool> IPartialVoiceState.IsSelfDeafened { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialVoiceState.IsSelfMuted Gets a value indicating whether the user is locally muted. Declaration Optional<bool> IPartialVoiceState.IsSelfMuted { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialVoiceState.IsStreaming Gets a value indicating whether the user is currently streaming using \"Go Live\". Declaration Optional<bool> IPartialVoiceState.IsStreaming { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialVoiceState.IsSuppressed Gets a value indicating whether the user is muted by the current user. Declaration Optional<bool> IPartialVoiceState.IsSuppressed { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialVoiceState.IsVideoEnabled Gets a value indicating whether the user's camera is enabled. Declaration Optional<bool> IPartialVoiceState.IsVideoEnabled { get; } Returns Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IPartialVoiceState.Member Gets the guild member this voice state is for. Declaration Optional<IGuildMember> IPartialVoiceState.Member { get; } Returns Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source IPartialVoiceState.RequestToSpeakTimestamp Gets the time at which the user requested to speak. Declaration Optional<DateTimeOffset?> IPartialVoiceState.RequestToSpeakTimestamp { get; } Returns Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IPartialVoiceState.SessionID Gets the session ID for this voice state. Declaration Optional<string> IPartialVoiceState.SessionID { get; } Returns Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IPartialVoiceState.UserID Gets the user ID this voice state is for. Declaration Optional<Snowflake> IPartialVoiceState.UserID { get; } Returns Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IWebhook.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IWebhook.html",
    "title": "Interface IWebhook | Remora.Discord",
    "keywords": "Interface IWebhook Represents a webhook object. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IWebhook Properties | Improve this Doc View Source ApplicationID Gets the bot or OAuth2 application that created this webhook. Declaration Snowflake? ApplicationID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Avatar Gets the default avatar of the webhook. Declaration string Avatar { get; } Property Value Type Description String | Improve this Doc View Source ChannelID Gets the ID of the channel that the webhook belongs to. Declaration Snowflake? ChannelID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildID Gets the ID of the guild that the webhook belongs to. Declaration Optional<Snowflake?> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source ID Gets the ID of the webhook. Declaration Snowflake ID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Gets the default name of the webhook. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source SourceChannel Gets the channel that the webhook is following. Declaration Optional<IPartialChannel> SourceChannel { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialChannel > | Improve this Doc View Source SourceGuild Gets the guild of the channel that the webhook is following. Declaration Optional<IPartialGuild> SourceGuild { get; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuild > | Improve this Doc View Source Token Gets the secure token of the webhook. Returned for webhooks with type Incoming . Declaration Optional<string> Token { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Gets the type of the webhook. Declaration WebhookType Type { get; } Property Value Type Description WebhookType | Improve this Doc View Source URL Gets the URL used for executing the webhook. Declaration Optional<string> URL { get; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source User Gets the user this webhook was created by. This is not returned when getting a webhook by its token. Declaration Optional<IUser> User { get; } Property Value Type Description Remora.Rest.Core.Optional < IUser >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IWelcomeScreen.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IWelcomeScreen.html",
    "title": "Interface IWelcomeScreen | Remora.Discord",
    "keywords": "Interface IWelcomeScreen Represents the welcome screen in a community-enabled server. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IWelcomeScreen Properties | Improve this Doc View Source Description Gets the description shown in the welcome screen. Declaration string Description { get; } Property Value Type Description String | Improve this Doc View Source WelcomeChannels Gets the channels shown in the welcome screen. May contain up to five channels at the time of implementation. Declaration IReadOnlyList<IWelcomeScreenChannel> WelcomeChannels { get; } Property Value Type Description IReadOnlyList < IWelcomeScreenChannel >"
  },
  "api/Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel.html",
    "title": "Interface IWelcomeScreenChannel | Remora.Discord",
    "keywords": "Interface IWelcomeScreenChannel Represents a channel in a welcome screen. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IWelcomeScreenChannel Properties | Improve this Doc View Source ChannelID Gets the ID of the channel. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Description Gets the description shown for the channel. Declaration string Description { get; } Property Value Type Description String | Improve this Doc View Source EmojiID Gets the ID of the guild emoji used for the channel. Declaration Snowflake? EmojiID { get; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source EmojiName Gets the name or unicode string of the emoji used for the channel. Declaration string EmojiName { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.Objects.MembershipState.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.MembershipState.html",
    "title": "Enum MembershipState | Remora.Discord",
    "keywords": "Enum MembershipState Enumerates various membership states. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum MembershipState Fields Name Description Accepted The user is a part of the team. Invited The user has been invited to, but is not yet part of, the team."
  },
  "api/Remora.Discord.API.Abstractions.Objects.MentionType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.MentionType.html",
    "title": "Enum MentionType | Remora.Discord",
    "keywords": "Enum MentionType Enumerates various mention types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum MentionType Fields Name Description Everyone An everyone mention. Roles A role mention. Users A user mention."
  },
  "api/Remora.Discord.API.Abstractions.Objects.MessageActivityType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.MessageActivityType.html",
    "title": "Enum MessageActivityType | Remora.Discord",
    "keywords": "Enum MessageActivityType Enumerates various activity types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum MessageActivityType Fields Name Description Join An invitation to join the activity. JoinRequest A request to join the activity. Listen An invitation to listen to the activity. Spectate An invitation to spectate the activity."
  },
  "api/Remora.Discord.API.Abstractions.Objects.MessageFlags.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.MessageFlags.html",
    "title": "Enum MessageFlags | Remora.Discord",
    "keywords": "Enum MessageFlags Enumerates various message flags. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] [Flags] public enum MessageFlags Fields Name Description Crossposted The message has been published to subscribed channels. Ephemeral The message will only be visible to the executing user. FailedToMentionSomeRolesInThread The message failed to mention some roles and add their members to the thread. This is a status flag and is not settable in user code. HasThread The message has an associated thread with the same ID as the message. IsCrosspost The message originated from a message in another channel. Loading The message is a loading message, created by an interaction response (typically, this shows that the bot is \"thinking\".) SourceMessageDeleted The source message for this crosspost has been deleted. SuppressEmbeds No embeds should be included when serializing the message. Urgent This message came from the urgent message system."
  },
  "api/Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel.html",
    "title": "Enum MessageNotificationLevel | Remora.Discord",
    "keywords": "Enum MessageNotificationLevel Enumerates various notification levels. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum MessageNotificationLevel Fields Name Description AllMessages The user will be notified of all messages. OnlyMentions The user will only be notified of direct mentions."
  },
  "api/Remora.Discord.API.Abstractions.Objects.MessageType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.MessageType.html",
    "title": "Enum MessageType | Remora.Discord",
    "keywords": "Enum MessageType Enumerates message types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum MessageType Fields Name Description Call Someone is calling. ChannelFollowAdd Someone followed the channel. ChannelIconChange The channel's icon changed. ChannelNameChange The name of the channel changed. ChannelPinnedMessage A message was pinned. ChatInputCommand An application command. ContextMenuCommand A context menu command. Default A normal message. GuildDiscoveryDisqualified The server has been disqualified for inclusion into guild discovery. GuildDiscoveryGracePeriodFinalWarning The server is going to disqualify from guild discovery very soon. GuildDiscoveryGracePeriodInitialWarning The server is going to disqualify from guild discovery soon. GuildDiscoveryQualified The server has qualified for inclusion into guild discovery. GuildInviteReminder A reminder message about a guild invite. GuildMemberJoin A guild member joined. InlineReply A reply to another message. RecipientAdd A member has joined the group DM. RecipientRemove A member has left the group DM. ThreadCreated A message that indicates a thread was created. ThreadStarterMessage A message that starts a thread. UserPremiumGuildSubscription A user boosted the server. UserPremiumGuildSubscriptionTier1 A user boosted the server to tier 1. UserPremiumGuildSubscriptionTier2 A user boosted the server to tier 2. UserPremiumGuildSubscriptionTier3 A user boosted the server to tier 3."
  },
  "api/Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel.html",
    "title": "Enum MultiFactorAuthenticationLevel | Remora.Discord",
    "keywords": "Enum MultiFactorAuthenticationLevel Enumerates various multi-factor authentication levels. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum MultiFactorAuthenticationLevel Fields Name Description Elevated Certain members must have MFA enabled. None No requirements."
  },
  "api/Remora.Discord.API.Abstractions.Objects.PermissionOverwriteType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.PermissionOverwriteType.html",
    "title": "Enum PermissionOverwriteType | Remora.Discord",
    "keywords": "Enum PermissionOverwriteType Enumerates permission overwrite types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum PermissionOverwriteType Fields Name Description Member This overwrite is for a specific member. Role This overwrite is for a specific role."
  },
  "api/Remora.Discord.API.Abstractions.Objects.PremiumTier.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.PremiumTier.html",
    "title": "Enum PremiumTier | Remora.Discord",
    "keywords": "Enum PremiumTier Enumerates various premium tiers of a guild. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum PremiumTier Fields Name Description None The guild hasn't been boosted. Tier1 The guild is boosted to tier 1. Tier2 The guild is boosted to tier 2. Tier3 The guild is boosted to tier 3. Tier4 The guild is boosted to tier 4."
  },
  "api/Remora.Discord.API.Abstractions.Objects.PremiumType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.PremiumType.html",
    "title": "Enum PremiumType | Remora.Discord",
    "keywords": "Enum PremiumType Enumerates the various premium levels. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum PremiumType Fields Name Description Nitro The user has a Nitro subscription. NitroClassic The user has a Nitro Classic subscription. None The user has no premium status."
  },
  "api/Remora.Discord.API.Abstractions.Objects.StagePrivacyLevel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.StagePrivacyLevel.html",
    "title": "Enum StagePrivacyLevel | Remora.Discord",
    "keywords": "Enum StagePrivacyLevel Enumerates various privacy levels for stage instances. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum StagePrivacyLevel Fields Name Description GuildOnly The stage instance is only visible to guild members. Public The stage instance is visible publicly, such as in stage discovery."
  },
  "api/Remora.Discord.API.Abstractions.Objects.StickerFormatType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.StickerFormatType.html",
    "title": "Enum StickerFormatType | Remora.Discord",
    "keywords": "Enum StickerFormatType Enumerates sticker format types. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum StickerFormatType Fields Name Description APNG The sticker is an APNG image. Lottie The sticker is a Discord \"Lottie\" sticker. PNG The sticker is a PNG image."
  },
  "api/Remora.Discord.API.Abstractions.Objects.StickerType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.StickerType.html",
    "title": "Enum StickerType | Remora.Discord",
    "keywords": "Enum StickerType Enumerates various types of stickers. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum StickerType Fields Name Description Guild A sticker uploaded to a boosted guild for the guild's members. Standard An official sticker in a pack, part of Nitro or in a removed purchasable pack."
  },
  "api/Remora.Discord.API.Abstractions.Objects.SystemChannelFlags.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.SystemChannelFlags.html",
    "title": "Enum SystemChannelFlags | Remora.Discord",
    "keywords": "Enum SystemChannelFlags Represents various flags for system channels. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] [Flags] public enum SystemChannelFlags Fields Name Description SuppressGuildReminderNotifications Suppresses server setup tips. SuppressJoinNotificationReplies Suppresses the reply sticker button for new joins. SuppressJoinNotifications Suppress member join notifications. SuppressPremiumSubscriptions Suppress server boost notifications."
  },
  "api/Remora.Discord.API.Abstractions.Objects.TextInputStyle.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.TextInputStyle.html",
    "title": "Enum TextInputStyle | Remora.Discord",
    "keywords": "Enum TextInputStyle Represents the style of a ITextInputComponent . Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum TextInputStyle Fields Name Description Paragraph Represents that this input is a long, multi-line input. Short Represents that this input is a short, single-line input."
  },
  "api/Remora.Discord.API.Abstractions.Objects.ThreadMemberFlags.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.ThreadMemberFlags.html",
    "title": "Enum ThreadMemberFlags | Remora.Discord",
    "keywords": "Enum ThreadMemberFlags Enumerates various thread member flags. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] [Flags] public enum ThreadMemberFlags"
  },
  "api/Remora.Discord.API.Abstractions.Objects.UserFlags.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.UserFlags.html",
    "title": "Enum UserFlags | Remora.Discord",
    "keywords": "Enum UserFlags Enumerates various user account flags. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] [Flags] public enum UserFlags Fields Name Description BotHttpInteractions The user is a bot that only uses outgoing webhook interactions, and should always be shown as online. BugHunterLevel1 The user is a hunter (level 1). BugHunterLevel2 The user is a hunter (level 2). DiscordCertifiedModerator The user is a Discord-certified moderator. DiscordEmployee The user is a Discord employee. EarlySupporter The user is an early supporter. EarlyVerifiedBotDeveloper The user is a verified bot developer. HouseBalance The user is part of House Balance. HouseBravery The user is part of House Bravery. HouseBrilliance The user is part of House Brilliance. HypeSquad The user is a member of a HypeSquad event. PartneredServerOwner The user owns a a Discord-partnered server. TeamUser The user is a team user. VerifiedBot The user is a verified bot."
  },
  "api/Remora.Discord.API.Abstractions.Objects.VerificationLevel.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.VerificationLevel.html",
    "title": "Enum VerificationLevel | Remora.Discord",
    "keywords": "Enum VerificationLevel Enumerates the various verification levels. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum VerificationLevel Fields Name Description High Users must be a member of the server for longer than 10 minutes. Low Users must have a verified email. Medium Users must have been registered longer than 5 minutes. None No restrictions. VeryHigh Users must have a verified phone number."
  },
  "api/Remora.Discord.API.Abstractions.Objects.VideoQualityMode.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.VideoQualityMode.html",
    "title": "Enum VideoQualityMode | Remora.Discord",
    "keywords": "Enum VideoQualityMode Enumerates various video quality modes. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum VideoQualityMode Fields Name Description Auto Discord chooses the best performing quality. Full Discord chooses the best available quality."
  },
  "api/Remora.Discord.API.Abstractions.Objects.WebhookType.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.WebhookType.html",
    "title": "Enum WebhookType | Remora.Discord",
    "keywords": "Enum WebhookType Enumerates various types of webhooks. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum WebhookType Fields Name Description Application Application webhooks are used with interactions. ChannelFollower Channel follower webhooks are internal webhooks used with channel following to post new messages into channels. Incoming Incoming webhooks can post messages to channels with a generated token."
  },
  "api/Remora.Discord.API.Abstractions.Objects.WidgetImageStyle.html": {
    "href": "api/Remora.Discord.API.Abstractions.Objects.WidgetImageStyle.html",
    "title": "Enum WidgetImageStyle | Remora.Discord",
    "keywords": "Enum WidgetImageStyle Enumerates various widget image styles. Namespace : Remora.Discord.API.Abstractions.Objects Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum WidgetImageStyle Fields Name Description Banner1 A large image with the guild icon, name, and online member count. \"POWERED BY DISCORD\" as the footer of the widget. Banner2 A smaller widget style with the guild icon, name, and online member count. Split on the right with the Discord logo. Banner3 A large image with the guild icon, name, and online member count. In the footer, the Discord logo s on the left, and \"Chat Now\" on the right. Banner4 A large Discord logo at the top of the widget with the guild icon, name, and online member count in the middle portion of the widget, and a \"JOIN MY SERVER\" button at the bottom. Shield A small shield-style (GitHub shields) with the Discord icon and a member count."
  },
  "api/Remora.Discord.API.Abstractions.Rest.FileData.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.FileData.html",
    "title": "Class FileData | Remora.Discord",
    "keywords": "Class FileData Represents a file with its associated information. Inheritance Object FileData Implements IEquatable < FileData > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public class FileData : IEquatable<FileData> Constructors | Improve this Doc View Source FileData(String, Stream, String) Represents a file with its associated information. Declaration public FileData(string Name, Stream Content, string Description = \"No description set.\") Parameters Type Name Description String Name The name of the file. Stream Content The contents of the file. String Description The file description. Properties | Improve this Doc View Source Content Declaration public Stream Content { get; set; } Property Value Type Description Stream | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String Implements System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Abstractions.Rest.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.html",
    "title": "Namespace Remora.Discord.API.Abstractions.Rest | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions.Rest Classes FileData Represents a file with its associated information. Interfaces IDiscordRestApplicationAPI Represents the Discord application API. IDiscordRestAuditLogAPI Represents the Discord Audit Log API. IDiscordRestChannelAPI Represents the Discord Channel API. IDiscordRestEmojiAPI Represents the Discord Emoji API. IDiscordRestGatewayAPI Represents the Discord Gateway REST API. IDiscordRestGuildAPI Represents the Discord Guild API. IDiscordRestGuildScheduledEventAPI Represents the Discord Guild Scheduled Event API. IDiscordRestInteractionAPI Represents the Discord interaction API. IDiscordRestInviteAPI Represents the Discord Invite API. IDiscordRestOAuth2API Represents the Discord Emoji API. IDiscordRestStageInstanceAPI Represents the Discord Stage Instance REST API. IDiscordRestStickerAPI Represents the Discord Sticker API. IDiscordRestTemplateAPI Represents the Discord REST template API. IDiscordRestUserAPI Represents the Discord User API. IDiscordRestVoiceAPI Represents the Discord Voice API. IDiscordRestWebhookAPI Represents the Discord Webhook API."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestApplicationAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestApplicationAPI.html",
    "title": "Interface IDiscordRestApplicationAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestApplicationAPI Represents the Discord application API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestApplicationAPI Methods | Improve this Doc View Source BulkOverwriteGlobalApplicationCommandsAsync(Snowflake, IReadOnlyList<IBulkApplicationCommandData>, CancellationToken) Overwrites all global commands with the given command set. Any commands not in the set will be deleted. Declaration Task<Result<IReadOnlyList<IApplicationCommand>>> BulkOverwriteGlobalApplicationCommandsAsync(Snowflake applicationID, IReadOnlyList<IBulkApplicationCommandData> commands, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. IReadOnlyList < IBulkApplicationCommandData > commands The commands. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IApplicationCommand >>> A creation result which may or may not have succeeded. | Improve this Doc View Source BulkOverwriteGuildApplicationCommandsAsync(Snowflake, Snowflake, IReadOnlyList<IBulkApplicationCommandData>, CancellationToken) Overwrites all guild commands with the given command set. Any commands not in the set will be deleted. Declaration Task<Result<IReadOnlyList<IApplicationCommand>>> BulkOverwriteGuildApplicationCommandsAsync(Snowflake applicationID, Snowflake guildID, IReadOnlyList<IBulkApplicationCommandData> commands, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. IReadOnlyList < IBulkApplicationCommandData > commands The commands. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IApplicationCommand >>> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateGlobalApplicationCommandAsync(Snowflake, String, String, Optional<IReadOnlyList<IApplicationCommandOption>>, Optional<ApplicationCommandType>, Optional<IReadOnlyDictionary<String, String>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IDiscordPermissionSet>, Optional<Nullable<Boolean>>, CancellationToken) Creates a new global command. Declaration Task<Result<IApplicationCommand>> CreateGlobalApplicationCommandAsync(Snowflake applicationID, string name, string description, Optional<IReadOnlyList<IApplicationCommandOption>> options = default(Optional<IReadOnlyList<IApplicationCommandOption>>), Optional<ApplicationCommandType> type = default(Optional<ApplicationCommandType>), Optional<IReadOnlyDictionary<string, string>> nameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IReadOnlyDictionary<string, string>> descriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IDiscordPermissionSet> defaultMemberPermissions = default(Optional<IDiscordPermissionSet>), Optional<bool?> dmPermission = default(Optional<bool?>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String name The name of the command. 3-32 characters. String description The description of the command. 1-100 characters. Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> options The parameters for the command. Remora.Rest.Core.Optional < ApplicationCommandType > type The type of the application command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> nameLocalizations The localized names of the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> descriptionLocalizations The localized descriptions of the command. Remora.Rest.Core.Optional < IDiscordPermissionSet > defaultMemberPermissions The permissions required to execute the command. Remora.Rest.Core.Optional < Nullable < Boolean >> dmPermission Whether this command is executable in DMs. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A creation result which may or may not have succeeded. Remarks Creating a new command with the same name as an existing command will overwrite the old command. | Improve this Doc View Source CreateGuildApplicationCommandAsync(Snowflake, Snowflake, String, String, Optional<IReadOnlyList<IApplicationCommandOption>>, Optional<ApplicationCommandType>, Optional<IReadOnlyDictionary<String, String>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IDiscordPermissionSet>, CancellationToken) Creates a new guild command. Declaration Task<Result<IApplicationCommand>> CreateGuildApplicationCommandAsync(Snowflake applicationID, Snowflake guildID, string name, string description, Optional<IReadOnlyList<IApplicationCommandOption>> options = default(Optional<IReadOnlyList<IApplicationCommandOption>>), Optional<ApplicationCommandType> type = default(Optional<ApplicationCommandType>), Optional<IReadOnlyDictionary<string, string>> nameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IReadOnlyDictionary<string, string>> descriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IDiscordPermissionSet> defaultMemberPermissions = default(Optional<IDiscordPermissionSet>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the command. 3-32 characters. String description The description of the command. 1-100 characters. Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> options The parameters for the command. Remora.Rest.Core.Optional < ApplicationCommandType > type The type of the application command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> nameLocalizations The localized names of the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> descriptionLocalizations The localized descriptions of the command. Remora.Rest.Core.Optional < IDiscordPermissionSet > defaultMemberPermissions The permissions required to execute the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A creation result which may or may not have succeeded. Remarks Creating a new command with the same name as an existing command will overwrite the old command. | Improve this Doc View Source DeleteGlobalApplicationCommandAsync(Snowflake, Snowflake, CancellationToken) Deletes the given global command. Declaration Task<Result> DeleteGlobalApplicationCommandAsync(Snowflake applicationID, Snowflake commandID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake commandID The ID of the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteGuildApplicationCommandAsync(Snowflake, Snowflake, Snowflake, CancellationToken) Deletes the given guild command. Declaration Task<Result> DeleteGuildApplicationCommandAsync(Snowflake applicationID, Snowflake guildID, Snowflake commandID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake commandID The ID of the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditApplicationCommandPermissionsAsync(Snowflake, Snowflake, Snowflake, IReadOnlyList<IApplicationCommandPermissions>, CancellationToken) Edits command permissions for a specific command in a guild. Declaration Task<Result<IGuildApplicationCommandPermissions>> EditApplicationCommandPermissionsAsync(Snowflake applicationID, Snowflake guildID, Snowflake commandID, IReadOnlyList<IApplicationCommandPermissions> permissions, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake commandID The ID of the command. IReadOnlyList < IApplicationCommandPermissions > permissions The permissions to overwrite the existing ones with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildApplicationCommandPermissions >> An edit result which may or may not have succeeded. Remarks This method requires a bearer token authorized with the applications.commands.permissions.update scope. | Improve this Doc View Source EditGlobalApplicationCommandAsync(Snowflake, Snowflake, Optional<String>, Optional<String>, Optional<IReadOnlyList<IApplicationCommandOption>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IDiscordPermissionSet>, Optional<Nullable<Boolean>>, CancellationToken) Edits a new global command. Declaration Task<Result<IApplicationCommand>> EditGlobalApplicationCommandAsync(Snowflake applicationID, Snowflake commandID, Optional<string> name = default(Optional<string>), Optional<string> description = default(Optional<string>), Optional<IReadOnlyList<IApplicationCommandOption>> options = default(Optional<IReadOnlyList<IApplicationCommandOption>>), Optional<IReadOnlyDictionary<string, string>> nameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IReadOnlyDictionary<string, string>> descriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IDiscordPermissionSet> defaultMemberPermissions = default(Optional<IDiscordPermissionSet>), Optional<bool?> dmPermission = default(Optional<bool?>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake commandID The ID of the command. Remora.Rest.Core.Optional < String > name The name of the command. 3-32 characters. Remora.Rest.Core.Optional < String > description The description of the command. 1-100 characters. Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> options The parameters for the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> nameLocalizations The localized names of the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> descriptionLocalizations The localized descriptions of the command. Remora.Rest.Core.Optional < IDiscordPermissionSet > defaultMemberPermissions The permissions required to execute the command. Remora.Rest.Core.Optional < Nullable < Boolean >> dmPermission Whether this command is executable in DMs. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A creation result which may or may not have succeeded. | Improve this Doc View Source EditGuildApplicationCommandAsync(Snowflake, Snowflake, Snowflake, Optional<String>, Optional<String>, Optional<IReadOnlyList<IApplicationCommandOption>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IDiscordPermissionSet>, CancellationToken) Edits a new guild command. Declaration Task<Result<IApplicationCommand>> EditGuildApplicationCommandAsync(Snowflake applicationID, Snowflake guildID, Snowflake commandID, Optional<string> name = default(Optional<string>), Optional<string> description = default(Optional<string>), Optional<IReadOnlyList<IApplicationCommandOption>> options = default(Optional<IReadOnlyList<IApplicationCommandOption>>), Optional<IReadOnlyDictionary<string, string>> nameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IReadOnlyDictionary<string, string>> descriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IDiscordPermissionSet> defaultMemberPermissions = default(Optional<IDiscordPermissionSet>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake commandID The ID of the command. Remora.Rest.Core.Optional < String > name The name of the command. 3-32 characters. Remora.Rest.Core.Optional < String > description The description of the command. 1-100 characters. Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> options The parameters for the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> nameLocalizations The localized names of the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> descriptionLocalizations The localized descriptions of the command. Remora.Rest.Core.Optional < IDiscordPermissionSet > defaultMemberPermissions The permissions required to execute the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A creation result which may or may not have succeeded. Remarks This method requires a bearer token authorized with the applications.commands.permissions.update scope. | Improve this Doc View Source GetApplicationCommandPermissionsAsync(Snowflake, Snowflake, Snowflake, CancellationToken) Gets the permissions for a specific command in a guild. Declaration Task<Result<IGuildApplicationCommandPermissions>> GetApplicationCommandPermissionsAsync(Snowflake applicationID, Snowflake guildID, Snowflake commandID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake commandID The ID of the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildApplicationCommandPermissions >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGlobalApplicationCommandAsync(Snowflake, Snowflake, CancellationToken) Gets a global command. Declaration Task<Result<IApplicationCommand>> GetGlobalApplicationCommandAsync(Snowflake applicationID, Snowflake commandID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake commandID The ID of the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGlobalApplicationCommandsAsync(Snowflake, Optional<Boolean>, Optional<String>, CancellationToken) Gets the global commands for the application. Declaration Task<Result<IReadOnlyList<IApplicationCommand>>> GetGlobalApplicationCommandsAsync(Snowflake applicationID, Optional<bool> withLocalizations = default(Optional<bool>), Optional<string> locale = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Optional < Boolean > withLocalizations Indicates whether the full localization dictionaries should be returned, instead of just the requested locale. Remora.Rest.Core.Optional < String > locale The locale to request the response in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IApplicationCommand >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildApplicationCommandAsync(Snowflake, Snowflake, Snowflake, CancellationToken) Gets a guild command. Declaration Task<Result<IApplicationCommand>> GetGuildApplicationCommandAsync(Snowflake applicationID, Snowflake guildID, Snowflake commandID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake commandID The ID of the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildApplicationCommandPermissionsAsync(Snowflake, Snowflake, CancellationToken) Gets the permissions for all of the application's commands in a guild. Declaration Task<Result<IReadOnlyList<IGuildApplicationCommandPermissions>>> GetGuildApplicationCommandPermissionsAsync(Snowflake applicationID, Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildApplicationCommandPermissions >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildApplicationCommandsAsync(Snowflake, Snowflake, Optional<Boolean>, Optional<String>, CancellationToken) Gets the guild commands for the application. Declaration Task<Result<IReadOnlyList<IApplicationCommand>>> GetGuildApplicationCommandsAsync(Snowflake applicationID, Snowflake guildID, Optional<bool> withLocalizations = default(Optional<bool>), Optional<string> locale = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > withLocalizations Indicates whether the full localization dictionaries should be returned, instead of just the requested locale. Remora.Rest.Core.Optional < String > locale The locale to request the response in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IApplicationCommand >>> A retrieval result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.html",
    "title": "Interface IDiscordRestAuditLogAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestAuditLogAPI Represents the Discord Audit Log API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestAuditLogAPI Methods | Improve this Doc View Source GetAuditLogAsync(Snowflake, Optional<Snowflake>, Optional<AuditLogEvent>, Optional<Snowflake>, Optional<Byte>, CancellationToken) Gets an audit log page for the given guild. Declaration Task<Result<IAuditLog>> GetAuditLogAsync(Snowflake guildID, Optional<Snowflake> userID = default(Optional<Snowflake>), Optional<AuditLogEvent> actionType = default(Optional<AuditLogEvent>), Optional<Snowflake> before = default(Optional<Snowflake>), Optional<byte> limit = default(Optional<byte>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > userID The ID of the user to filter on. Remora.Rest.Core.Optional < AuditLogEvent > actionType The action type to filter on. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before The ID of the audit log entry to limit searches before. Remora.Rest.Core.Optional < Byte > limit The number of log entries to limit the request to. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IAuditLog >> A retrieval result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI.html",
    "title": "Interface IDiscordRestChannelAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestChannelAPI Represents the Discord Channel API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestChannelAPI Methods | Improve this Doc View Source AddThreadMemberAsync(Snowflake, Snowflake, CancellationToken) Adds the given user to the given thread. Declaration Task<Result> AddThreadMemberAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to add the user to. Remora.Rest.Core.Snowflake userID The user to add to the thread. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source BulkDeleteMessagesAsync(Snowflake, IReadOnlyList<Snowflake>, Optional<String>, CancellationToken) Bulk deletes a set of messages. Declaration Task<Result> BulkDeleteMessagesAsync(Snowflake channelID, IReadOnlyList<Snowflake> messageIDs, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel to delete messages in. IReadOnlyList < Remora.Rest.Core.Snowflake > messageIDs The IDs of the messages to delete. Messages older than 2 weeks may not be deleted in this manner. Any invalid message IDs will count towards the minimum and maximum number of messages to deleted (currently 2 and 100, respectively). Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source CreateChannelInviteAsync(Snowflake, Optional<TimeSpan>, Optional<Int32>, Optional<Boolean>, Optional<Boolean>, Optional<InviteTarget>, Optional<Snowflake>, Optional<Snowflake>, Optional<String>, CancellationToken) Creates an invite to the given channel. Declaration Task<Result<IInvite>> CreateChannelInviteAsync(Snowflake channelID, Optional<TimeSpan> maxAge = default(Optional<TimeSpan>), Optional<int> maxUses = default(Optional<int>), Optional<bool> isTemporary = default(Optional<bool>), Optional<bool> isUnique = default(Optional<bool>), Optional<InviteTarget> targetType = default(Optional<InviteTarget>), Optional<Snowflake> targetUserID = default(Optional<Snowflake>), Optional<Snowflake> targetApplicationID = default(Optional<Snowflake>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < TimeSpan > maxAge The duration of the invite before expiry, or 0 for never. Remora.Rest.Core.Optional < Int32 > maxUses The max number of uses, or 0 for unlimited. Remora.Rest.Core.Optional < Boolean > isTemporary Whether this invite grants temporary membership. Remora.Rest.Core.Optional < Boolean > isUnique If true, don't try to reuse an existing invite with the same settings. Remora.Rest.Core.Optional < InviteTarget > targetType The target type for this invite. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > targetUserID The target user ID for this invite. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > targetApplicationID The ID of the application to open for this invite. Required if targetType is EmbeddedApplication . Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IInvite >> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateMessageAsync(Snowflake, Optional<String>, Optional<String>, Optional<Boolean>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IMessageReference>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<Snowflake>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<MessageFlags>, CancellationToken) Posts a message to the given channel. At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. Declaration Task<Result<IMessage>> CreateMessageAsync(Snowflake channelID, Optional<string> content = default(Optional<string>), Optional<string> nonce = default(Optional<string>), Optional<bool> isTTS = default(Optional<bool>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IMessageReference> messageReference = default(Optional<IMessageReference>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<Snowflake>> stickerIds = default(Optional<IReadOnlyList<Snowflake>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<MessageFlags> flags = default(Optional<MessageFlags>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < String > nonce A nonce that can be used for optimistic message sending. Remora.Rest.Core.Optional < Boolean > isTTS Whether the message is a TTS message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The rich embeds in the message. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions An object describing the allowed mention types. Remora.Rest.Core.Optional < IMessageReference > messageReference A reference to another message. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components of the message. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> stickerIds The stickers to send with the message (max 3). Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < MessageFlags > flags The message flags. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateReactionAsync(Snowflake, Snowflake, String, CancellationToken) Adds a reaction to the given message. Declaration Task<Result> CreateReactionAsync(Snowflake channelID, Snowflake messageID, string emoji, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to react with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A creation result which may or may not have succeeded. | Improve this Doc View Source CrosspostMessageAsync(Snowflake, Snowflake, CancellationToken) Crosspost a message otherwise known as \"publishing\" a message from a announcement channel that other guilds can follow. Declaration Task<Result<IMessage>> CrosspostMessageAsync(Snowflake channelID, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. | Improve this Doc View Source DeleteAllReactionsAsync(Snowflake, Snowflake, CancellationToken) Deletes all reactions from the given message. Declaration Task<Result> DeleteAllReactionsAsync(Snowflake channelID, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteAllReactionsForEmojiAsync(Snowflake, Snowflake, String, CancellationToken) Deletes all reactions from the given message. Declaration Task<Result> DeleteAllReactionsForEmojiAsync(Snowflake channelID, Snowflake messageID, string emoji, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to delete. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteChannelAsync(Snowflake, Optional<String>, CancellationToken) Deletes a channel by its ID. Declaration Task<Result> DeleteChannelAsync(Snowflake channelID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A retrieval result which may or may not have succeeded. | Improve this Doc View Source DeleteChannelPermissionAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given permission overwrite from the given channel. Declaration Task<Result> DeleteChannelPermissionAsync(Snowflake channelID, Snowflake overwriteID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake overwriteID The ID of the permission overwrite. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteMessageAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given message. Declaration Task<Result> DeleteMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteOwnReactionAsync(Snowflake, Snowflake, String, CancellationToken) Deletes a reaction from the given message. Declaration Task<Result> DeleteOwnReactionAsync(Snowflake channelID, Snowflake messageID, string emoji, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to remove. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteUserReactionAsync(Snowflake, Snowflake, String, Snowflake, CancellationToken) Deletes a reaction from the given message. Declaration Task<Result> DeleteUserReactionAsync(Snowflake channelID, Snowflake messageID, string emoji, Snowflake user, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to remove. Remora.Rest.Core.Snowflake user The user that has reacted with the emoji. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditChannelPermissionsAsync(Snowflake, Snowflake, Optional<IDiscordPermissionSet>, Optional<IDiscordPermissionSet>, Optional<PermissionOverwriteType>, Optional<String>, CancellationToken) Edits a permission overwrite on the given channel. Declaration Task<Result> EditChannelPermissionsAsync(Snowflake channelID, Snowflake overwriteID, Optional<IDiscordPermissionSet> allow = default(Optional<IDiscordPermissionSet>), Optional<IDiscordPermissionSet> deny = default(Optional<IDiscordPermissionSet>), Optional<PermissionOverwriteType> type = default(Optional<PermissionOverwriteType>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake overwriteID The ID of the overwrite. Remora.Rest.Core.Optional < IDiscordPermissionSet > allow The permissions to allow. Remora.Rest.Core.Optional < IDiscordPermissionSet > deny The permissions to deny. Remora.Rest.Core.Optional < PermissionOverwriteType > type The new type of the overwrite. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A modification result which may or may not have succeeded. | Improve this Doc View Source EditMessageAsync(Snowflake, Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<Nullable<MessageFlags>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Edits a previously sent message. Declaration Task<Result<IMessage>> EditMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<MessageFlags?> flags = default(Optional<MessageFlags?>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > content The new content of the message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds associated with the message. Remora.Rest.Core.Optional < Nullable < MessageFlags >> flags The new message flags. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The allowed mentions for the message. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components of the message. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A modification result which may or may not have succeeded. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source FollowNewsChannelAsync(Snowflake, Snowflake, CancellationToken) Follows a news channel to send messages to a target channel. Declaration Task<Result<IFollowedChannel>> FollowNewsChannelAsync(Snowflake channelID, Snowflake webhookChannelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the news channel. Remora.Rest.Core.Snowflake webhookChannelID The ID of the channel to send news to. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IFollowedChannel >> A creation result which may or may not have succeeded. | Improve this Doc View Source GetChannelAsync(Snowflake, CancellationToken) Gets a channel by its ID. Declaration Task<Result<IChannel>> GetChannelAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetChannelInvitesAsync(Snowflake, CancellationToken) Gets the invites for a given channel. Declaration Task<Result<IReadOnlyList<IInvite>>> GetChannelInvitesAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IInvite >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetChannelMessageAsync(Snowflake, Snowflake, CancellationToken) Gets a message from a channel by its ID. Declaration Task<Result<IMessage>> GetChannelMessageAsync(Snowflake channelID, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The channel ID. Remora.Rest.Core.Snowflake messageID The message ID. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetChannelMessagesAsync(Snowflake, Optional<Snowflake>, Optional<Snowflake>, Optional<Snowflake>, Optional<Int32>, CancellationToken) Gets the messages for a channel. Declaration Task<Result<IReadOnlyList<IMessage>>> GetChannelMessagesAsync(Snowflake channelID, Optional<Snowflake> around = default(Optional<Snowflake>), Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > around The ID of the message to get messages around. This is a mutually exclusive option with before and after . Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before The ID of the message to get messages before. This is a mutually exclusive option with around and after . Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The ID of the message to get messages after. This is a mutually exclusive option with before and around . Remora.Rest.Core.Optional < Int32 > limit The maximum number of messages to retrieve. Ranges between 1 and 100. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetPinnedMessagesAsync(Snowflake, CancellationToken) Gets the pinned messages in the given channel. Declaration Task<Result<IReadOnlyList<IMessage>>> GetPinnedMessagesAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetReactionsAsync(Snowflake, Snowflake, String, Optional<Snowflake>, Optional<Int32>, CancellationToken) Gets a list of users that have reacted with the given emoji. Declaration Task<Result<IReadOnlyList<IUser>>> GetReactionsAsync(Snowflake channelID, Snowflake messageID, string emoji, Optional<Snowflake> after = default(Optional<Snowflake>), Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to filter on. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The users to get after this user ID. Remora.Rest.Core.Optional < Int32 > limit The maximum page size. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IUser >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetThreadMemberAsync(Snowflake, Snowflake, CancellationToken) Gets a thread member object for the specified user if they're a member of the thread. Declaration Task<Result<IThreadMember>> GetThreadMemberAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the thread. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IThreadMember >> A result which may or may not have succeeded. | Improve this Doc View Source GroupDMAddRecipientAsync(Snowflake, Snowflake, String, Optional<String>, CancellationToken) Adds a recipient to a group DM using their access token. Declaration Task<Result> GroupDMAddRecipientAsync(Snowflake channelID, Snowflake userID, string accessToken, Optional<string> nickname = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake userID The ID of the user. String accessToken The access token. Remora.Rest.Core.Optional < String > nickname The nickname of the user to use in the group DM. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source GroupDMRemoveRecipientAsync(Snowflake, Snowflake, CancellationToken) Removes a recipient from a group DM. Declaration Task<Result> GroupDMRemoveRecipientAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source JoinThreadAsync(Snowflake, CancellationToken) Joins the given thread. Declaration Task<Result> JoinThreadAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to join. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source LeaveThreadAsync(Snowflake, CancellationToken) Leaves the given thread. Declaration Task<Result> LeaveThreadAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to leave. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source ListThreadMembersAsync(Snowflake, CancellationToken) Lists the members of the given thread. Restricted to bots with with GuildMembers intent. Declaration Task<Result<IReadOnlyList<IThreadMember>>> ListThreadMembersAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to list the members of. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IThreadMember >>> A result which may or may not have succeeded. | Improve this Doc View Source ModifyChannelAsync(Snowflake, Optional<String>, Optional<Stream>, Optional<ChannelType>, Optional<Nullable<Int32>>, Optional<String>, Optional<Nullable<Boolean>>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<Nullable<VideoQualityMode>>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<String>, Optional<ChannelFlags>, Optional<String>, CancellationToken) Modifies the given channel. Declaration Task<Result<IChannel>> ModifyChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<Stream> icon = default(Optional<Stream>), Optional<ChannelType> type = default(Optional<ChannelType>), Optional<int?> position = default(Optional<int?>), Optional<string> topic = default(Optional<string>), Optional<bool?> isNsfw = default(Optional<bool?>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<int?> bitrate = default(Optional<int?>), Optional<int?> userLimit = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<VideoQualityMode?> videoQualityMode = default(Optional<VideoQualityMode?>), Optional<bool> isArchived = default(Optional<bool>), Optional<AutoArchiveDuration> autoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<bool> isLocked = default(Optional<bool>), Optional<AutoArchiveDuration> defaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<string> rtcRegion = default(Optional<string>), Optional<ChannelFlags> flags = default(Optional<ChannelFlags>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Stream > icon The new icon. Remora.Rest.Core.Optional < ChannelType > type The new type of the channel. Only conversions between GuildText and GuildNews are supported. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < String > topic The new topic of the channel. Remora.Rest.Core.Optional < Nullable < Boolean >> isNsfw The new NSFW status of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The new rate limit per user. Remora.Rest.Core.Optional < Nullable < Int32 >> bitrate The new bitrate. Remora.Rest.Core.Optional < Nullable < Int32 >> userLimit The new user limit. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < Nullable < VideoQualityMode >> videoQualityMode The new video quality mode. Remora.Rest.Core.Optional < Boolean > isArchived Whether the thread is archived. Remora.Rest.Core.Optional < AutoArchiveDuration > autoArchiveDuration The time of inactivity after which the thread is archived. Remora.Rest.Core.Optional < Boolean > isLocked Whether the thread is locked. Remora.Rest.Core.Optional < AutoArchiveDuration > defaultAutoArchiveDuration The default time of inactivity after which threads in the channel are archived. Remora.Rest.Core.Optional < String > rtcRegion The channel's voice region. Automatic when null. Remora.Rest.Core.Optional < ChannelFlags > flags The channel flags to use. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGroupDMChannelAsync(Snowflake, Optional<String>, Optional<Stream>, CancellationToken) Modifies the given group DM channel. Declaration Task<Result<IChannel>> ModifyGroupDMChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<Stream> icon = default(Optional<Stream>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Stream > icon The new icon. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGuildNewsChannelAsync(Snowflake, Optional<String>, Optional<ChannelType>, Optional<Nullable<Int32>>, Optional<String>, Optional<Nullable<Boolean>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<String>, CancellationToken) Modifies the given guild news channel. Declaration Task<Result<IChannel>> ModifyGuildNewsChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<ChannelType> type = default(Optional<ChannelType>), Optional<int?> position = default(Optional<int?>), Optional<string> topic = default(Optional<string>), Optional<bool?> isNsfw = default(Optional<bool?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < ChannelType > type The new type of the channel. Only conversions between GuildText and GuildNews are supported. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < String > topic The new topic of the channel. Remora.Rest.Core.Optional < Nullable < Boolean >> isNsfw The new NSFW status of the channel. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildStageChannelAsync(Snowflake, Optional<String>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<String>, Optional<String>, CancellationToken) Modifies the given guild stage channel. Declaration Task<Result<IChannel>> ModifyGuildStageChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<int?> position = default(Optional<int?>), Optional<int?> bitrate = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<string> rtcRegion = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < Nullable < Int32 >> bitrate The new bitrate. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < String > rtcRegion The channel's voice region. Automatic when null. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildTextChannelAsync(Snowflake, Optional<String>, Optional<ChannelType>, Optional<Nullable<Int32>>, Optional<String>, Optional<Nullable<Boolean>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<AutoArchiveDuration>, Optional<String>, CancellationToken) Modifies the given guild text channel. Declaration Task<Result<IChannel>> ModifyGuildTextChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<ChannelType> type = default(Optional<ChannelType>), Optional<int?> position = default(Optional<int?>), Optional<string> topic = default(Optional<string>), Optional<bool?> isNsfw = default(Optional<bool?>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<AutoArchiveDuration> defaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < ChannelType > type The new type of the channel. Only conversions between GuildText and GuildNews are supported. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < String > topic The new topic of the channel. Remora.Rest.Core.Optional < Nullable < Boolean >> isNsfw The new NSFW status of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The new rate limit per user. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < AutoArchiveDuration > defaultAutoArchiveDuration The default time of inactivity after which threads in the channel are archived. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildVoiceChannelAsync(Snowflake, Optional<String>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<String>, Optional<Nullable<VideoQualityMode>>, Optional<String>, CancellationToken) Modifies the given guild voice channel. Declaration Task<Result<IChannel>> ModifyGuildVoiceChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<int?> position = default(Optional<int?>), Optional<int?> bitrate = default(Optional<int?>), Optional<int?> userLimit = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<string> rtcRegion = default(Optional<string>), Optional<VideoQualityMode?> videoQualityMode = default(Optional<VideoQualityMode?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < Nullable < Int32 >> bitrate The new bitrate. Remora.Rest.Core.Optional < Nullable < Int32 >> userLimit The new user limit. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < String > rtcRegion The channel's voice region. Automatic when null. Remora.Rest.Core.Optional < Nullable < VideoQualityMode >> videoQualityMode The new video quality mode. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyThreadChannelAsync(Snowflake, Optional<String>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<Boolean>, Optional<Nullable<Int32>>, Optional<ChannelFlags>, Optional<String>, CancellationToken) Modifies the given channel. Declaration Task<Result<IChannel>> ModifyThreadChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<bool> isArchived = default(Optional<bool>), Optional<AutoArchiveDuration> autoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<bool> isLocked = default(Optional<bool>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<ChannelFlags> flags = default(Optional<ChannelFlags>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Boolean > isArchived Whether the thread is archived. Remora.Rest.Core.Optional < AutoArchiveDuration > autoArchiveDuration The time of inactivity after which the thread is archived. Remora.Rest.Core.Optional < Boolean > isLocked Whether the thread is locked. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The new rate limit per user. Remora.Rest.Core.Optional < ChannelFlags > flags The channel flags to use. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source PinMessageAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Pins the given message in the channel. Declaration Task<Result> PinMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source RemoveThreadMemberAsync(Snowflake, Snowflake, CancellationToken) Removes the given user from the given thread. Declaration Task<Result> RemoveThreadMemberAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to remove the user from. Remora.Rest.Core.Snowflake userID The user to remove from the thread. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source StartThreadWithMessageAsync(Snowflake, Snowflake, String, Optional<AutoArchiveDuration>, Optional<Nullable<Int32>>, Optional<String>, CancellationToken) Starts a new public thread from an existing message. Declaration Task<Result<IChannel>> StartThreadWithMessageAsync(Snowflake channelID, Snowflake messageID, string name, Optional<AutoArchiveDuration> autoArchiveDuration, Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The channel to start the thread in. Remora.Rest.Core.Snowflake messageID The message to start the thread from. String name The name of the thread. Remora.Rest.Core.Optional < AutoArchiveDuration > autoArchiveDuration The time of inactivity after which to archive the thread. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The message rate limit per user, that is, the number of seconds they have to wait between sending messages. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A result which may or may not have succeeded. | Improve this Doc View Source StartThreadWithoutMessageAsync(Snowflake, String, AutoArchiveDuration, ChannelType, Optional<Boolean>, Optional<Nullable<Int32>>, Optional<String>, CancellationToken) Starts a new private thread. Declaration Task<Result<IChannel>> StartThreadWithoutMessageAsync(Snowflake channelID, string name, AutoArchiveDuration autoArchiveDuration, ChannelType type, Optional<bool> isInvitable = default(Optional<bool>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The channel to start the thread in. String name The name of the thread. AutoArchiveDuration autoArchiveDuration The time of inactivity after which to archive the thread. ChannelType type The thread type to create. Discord defaults to creating a GuildPrivateThread , but this is likely to change in a future API version. Prefer always setting this explicitly. Remora.Rest.Core.Optional < Boolean > isInvitable The value indicating whether non-moderators can add other non-moderators to the thread. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The message rate limit per user, that is, the number of seconds they have to wait between sending messages. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A result which may or may not have succeeded. | Improve this Doc View Source TriggerTypingIndicatorAsync(Snowflake, CancellationToken) Triggers the typing indicator for the current user in the given channel. Declaration Task<Result> TriggerTypingIndicatorAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source UnpinMessageAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Unpins the given message in the channel. Declaration Task<Result> UnpinMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestEmojiAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestEmojiAPI.html",
    "title": "Interface IDiscordRestEmojiAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestEmojiAPI Represents the Discord Emoji API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestEmojiAPI Methods | Improve this Doc View Source CreateGuildEmojiAsync(Snowflake, String, Stream, IReadOnlyList<Snowflake>, Optional<String>, CancellationToken) Creates a new emoji for the given guild with the given parameters. Declaration Task<Result<IEmoji>> CreateGuildEmojiAsync(Snowflake guildID, string name, Stream image, IReadOnlyList<Snowflake> roles, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the new emoji. Stream image The image data. IReadOnlyList < Remora.Rest.Core.Snowflake > roles The roles that the emoji will be restricted to. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IEmoji >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteGuildEmojiAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given emoji. Declaration Task<Result> DeleteGuildEmojiAsync(Snowflake guildID, Snowflake emojiID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake emojiID The ID of the emoji. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source GetGuildEmojiAsync(Snowflake, Snowflake, CancellationToken) Gets the emoji on the given guild with the given ID. Declaration Task<Result<IEmoji>> GetGuildEmojiAsync(Snowflake guildID, Snowflake emojiID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake emojiID The ID of the emoji. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IEmoji >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListGuildEmojisAsync(Snowflake, CancellationToken) Gets a list of emojis for the given guild. Declaration Task<Result<IReadOnlyList<IEmoji>>> ListGuildEmojisAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IEmoji >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildEmojiAsync(Snowflake, Snowflake, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<String>, CancellationToken) Modifies the given emoji. Declaration Task<Result<IEmoji>> ModifyGuildEmojiAsync(Snowflake guildID, Snowflake emojiID, Optional<string> name = default(Optional<string>), Optional<IReadOnlyList<Snowflake>> roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake emojiID The ID of the emoji. Remora.Rest.Core.Optional < String > name The new name of the emoji. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> roles The new restricted roles. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IEmoji >> A modification result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestGatewayAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestGatewayAPI.html",
    "title": "Interface IDiscordRestGatewayAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestGatewayAPI Represents the Discord Gateway REST API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestGatewayAPI Methods | Improve this Doc View Source GetGatewayAsync(CancellationToken) Gets a gateway endpoint. Declaration Task<Result<IGatewayEndpoint>> GetGatewayAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGatewayEndpoint >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGatewayBotAsync(CancellationToken) Gets a gateway endpoint for bots. Declaration Task<Result<IGatewayEndpoint>> GetGatewayBotAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGatewayEndpoint >> A retrieval result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html",
    "title": "Interface IDiscordRestGuildAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestGuildAPI Represents the Discord Guild API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestGuildAPI Methods | Improve this Doc View Source AddGuildMemberAsync(Snowflake, Snowflake, String, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<Boolean>, Optional<Boolean>, CancellationToken) Adds a user to the guild using their OAuth2 access token. Declaration Task<Result<IGuildMember>> AddGuildMemberAsync(Snowflake guildID, Snowflake userID, string accessToken, Optional<string> nickname = default(Optional<string>), Optional<IReadOnlyList<Snowflake>> roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<bool> isMuted = default(Optional<bool>), Optional<bool> isDeafened = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user to add. String accessToken The OAuth2 access token. Remora.Rest.Core.Optional < String > nickname The user's new nickname. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> roles The roles the user should have. Remora.Rest.Core.Optional < Boolean > isMuted Whether the user should be muted in voice channels. Remora.Rest.Core.Optional < Boolean > isDeafened Whether the user should be deafened in voice channels. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A creation result that may or may not have succeeded. Remarks The returned value will be null if the user is already in the guild. | Improve this Doc View Source AddGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional<String>, CancellationToken) Adds a role to a guild member. Declaration Task<Result> AddGuildMemberRoleAsync(Snowflake guildID, Snowflake userID, Snowflake roleID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source BeginGuildPruneAsync(Snowflake, Optional<Int32>, Optional<Boolean>, Optional<IReadOnlyList<Snowflake>>, Optional<String>, CancellationToken) Initiates a prune of the guild members. Declaration Task<Result<IPruneCount>> BeginGuildPruneAsync(Snowflake guildID, Optional<int> days = default(Optional<int>), Optional<bool> computePruneCount = default(Optional<bool>), Optional<IReadOnlyList<Snowflake>> includeRoles = default(Optional<IReadOnlyList<Snowflake>>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > days The days a user needs to have been inactive for them to be pruned. Remora.Rest.Core.Optional < Boolean > computePruneCount Whether the number of pruned users should be computed and returned. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> includeRoles The roles that should be included in a prune operation. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPruneCount >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source CreateGuildAsync(String, Optional<Stream>, Optional<VerificationLevel>, Optional<MessageNotificationLevel>, Optional<ExplicitContentFilterLevel>, Optional<IReadOnlyList<IRole>>, Optional<IReadOnlyList<IPartialChannel>>, Optional<Snowflake>, Optional<TimeSpan>, Optional<Snowflake>, Optional<SystemChannelFlags>, CancellationToken) Creates a new guild. This can only by used by bots in less than 10 guilds. Declaration Task<Result<IGuild>> CreateGuildAsync(string name, Optional<Stream> icon = default(Optional<Stream>), Optional<VerificationLevel> verificationLevel = default(Optional<VerificationLevel>), Optional<MessageNotificationLevel> defaultMessageNotifications = default(Optional<MessageNotificationLevel>), Optional<ExplicitContentFilterLevel> explicitContentFilter = default(Optional<ExplicitContentFilterLevel>), Optional<IReadOnlyList<IRole>> roles = default(Optional<IReadOnlyList<IRole>>), Optional<IReadOnlyList<IPartialChannel>> channels = default(Optional<IReadOnlyList<IPartialChannel>>), Optional<Snowflake> afkChannelID = default(Optional<Snowflake>), Optional<TimeSpan> afkTimeout = default(Optional<TimeSpan>), Optional<Snowflake> systemChannelID = default(Optional<Snowflake>), Optional<SystemChannelFlags> systemChannelFlags = default(Optional<SystemChannelFlags>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String name The name of the guild (2-100 characters). Remora.Rest.Core.Optional < Stream > icon The icon. Remora.Rest.Core.Optional < VerificationLevel > verificationLevel The verification level. Remora.Rest.Core.Optional < MessageNotificationLevel > defaultMessageNotifications The default message notification level. Remora.Rest.Core.Optional < ExplicitContentFilterLevel > explicitContentFilter The explicit content filter level. Remora.Rest.Core.Optional < IReadOnlyList < IRole >> roles The new guild roles. Remora.Rest.Core.Optional < IReadOnlyList < IPartialChannel >> channels The new guild channels. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > afkChannelID The ID of the AFK channel. Remora.Rest.Core.Optional < TimeSpan > afkTimeout The number of seconds until AFK timeout. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > systemChannelID The ID of the system message channel. Remora.Rest.Core.Optional < SystemChannelFlags > systemChannelFlags The channel flags to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source CreateGuildBanAsync(Snowflake, Snowflake, Optional<Int32>, Optional<String>, CancellationToken) Bans the given user. Declaration Task<Result> CreateGuildBanAsync(Snowflake guildID, Snowflake userID, Optional<int> deleteMessageDays = default(Optional<int>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < Int32 > deleteMessageDays The number of days to delete messages for (0-7). Defaults to 0. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source CreateGuildChannelAsync(Snowflake, String, Optional<ChannelType>, Optional<String>, Optional<Int32>, Optional<Int32>, Optional<Int32>, Optional<Int32>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Snowflake>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<String>, CancellationToken) Creates a new channel for the guild. Declaration Task<Result<IChannel>> CreateGuildChannelAsync(Snowflake guildID, string name, Optional<ChannelType> type = default(Optional<ChannelType>), Optional<string> topic = default(Optional<string>), Optional<int> bitrate = default(Optional<int>), Optional<int> userLimit = default(Optional<int>), Optional<int> rateLimitPerUser = default(Optional<int>), Optional<int> position = default(Optional<int>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake> parentID = default(Optional<Snowflake>), Optional<bool> isNsfw = default(Optional<bool>), Optional<AutoArchiveDuration> defaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the new channel. Remora.Rest.Core.Optional < ChannelType > type The type of the new channel. Remora.Rest.Core.Optional < String > topic The topic of the new channel. Remora.Rest.Core.Optional < Int32 > bitrate The bitrate of the new channel, if it is a voice channel. Remora.Rest.Core.Optional < Int32 > userLimit The maximum number of users in the channel, if it is a voice channel. Remora.Rest.Core.Optional < Int32 > rateLimitPerUser The number of seconds a user has to wait between messages. Remora.Rest.Core.Optional < Int32 > position The sorting position of the new channel. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The permission overwrites of the new channel. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > parentID The ID of the parent category of the new channel. Remora.Rest.Core.Optional < Boolean > isNsfw Whether the new channel is NSFW. Remora.Rest.Core.Optional < AutoArchiveDuration > defaultAutoArchiveDuration The default auto archival duration for threads. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateGuildRoleAsync(Snowflake, Optional<String>, Optional<IDiscordPermissionSet>, Optional<Color>, Optional<Boolean>, Optional<Stream>, Optional<String>, Optional<Boolean>, Optional<String>, CancellationToken) Creates a new guild role. Declaration Task<Result<IRole>> CreateGuildRoleAsync(Snowflake guildID, Optional<string> name = default(Optional<string>), Optional<IDiscordPermissionSet> permissions = default(Optional<IDiscordPermissionSet>), Optional<Color> colour = default(Optional<Color>), Optional<bool> isHoisted = default(Optional<bool>), Optional<Stream> icon = default(Optional<Stream>), Optional<string> unicodeEmoji = default(Optional<string>), Optional<bool> isMentionable = default(Optional<bool>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < String > name The name of the new role. Remora.Rest.Core.Optional < IDiscordPermissionSet > permissions The permissions of the new role. Remora.Rest.Core.Optional < Color > colour The colour of the new role. Remora.Rest.Core.Optional < Boolean > isHoisted Whether the new role is displayed separately in the sidebar. Remora.Rest.Core.Optional < Stream > icon The role's icon image. Remora.Rest.Core.Optional < String > unicodeEmoji The role's unicode emoji icon. Remora.Rest.Core.Optional < Boolean > isMentionable Whether the new role is mentionable. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IRole >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteGuildAsync(Snowflake, CancellationToken) Deletes the guild with the given ID. Declaration Task<Result> DeleteGuildAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteGuildRoleAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given role. Declaration Task<Result> DeleteGuildRoleAsync(Snowflake guildId, Snowflake roleID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source GetGuildAsync(Snowflake, Optional<Boolean>, CancellationToken) Gets the guild with the given ID. Declaration Task<Result<IGuild>> GetGuildAsync(Snowflake guildID, Optional<bool> withCounts = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > withCounts Whether member and presence counts should be included. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildBanAsync(Snowflake, Snowflake, CancellationToken) Gets a ban object for the given user. Declaration Task<Result<IBan>> GetGuildBanAsync(Snowflake guildID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IBan >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildBansAsync(Snowflake, Optional<Int32>, Optional<Snowflake>, Optional<Snowflake>, CancellationToken) Gets a list of bans. Declaration Task<Result<IReadOnlyList<IBan>>> GetGuildBansAsync(Snowflake guildID, Optional<int> limit = default(Optional<int>), Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > limit The maximum number of bans to return (max 1000). Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before The ID of the ban to get bans before. This is a mutually exclusive option with after , though Discord accepts both at the same time. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The ID of the ban to get bans after. This is a mutually exclusive option with before , though Discord accepts both at the same time. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IBan >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildChannelsAsync(Snowflake, CancellationToken) Gets the channels of the given guild. Declaration Task<Result<IReadOnlyList<IChannel>>> GetGuildChannelsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IChannel >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildIntegrationsAsync(Snowflake, Optional<Boolean>, CancellationToken) Gets the integrations for the guild. Declaration Task<Result<IReadOnlyList<IIntegration>>> GetGuildIntegrationsAsync(Snowflake guildID, Optional<bool> includeApplications = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > includeApplications Whether bot and OAuth2 webhook integrations should be included. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IIntegration >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildInvitesAsync(Snowflake, CancellationToken) Gets the invites for the guild. Declaration Task<Result<IReadOnlyList<IInvite>>> GetGuildInvitesAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IInvite >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildMemberAsync(Snowflake, Snowflake, CancellationToken) Gets member information about the given user. Declaration Task<Result<IGuildMember>> GetGuildMemberAsync(Snowflake guildID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildPreviewAsync(Snowflake, CancellationToken) Gets a preview of the guild with the given ID. This is only for public guilds. Declaration Task<Result<IGuildPreview>> GetGuildPreviewAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildPreview >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildPruneCountAsync(Snowflake, Optional<Int32>, Optional<IReadOnlyList<Snowflake>>, CancellationToken) Gets the number of users that would br pruned in a prune operation. Declaration Task<Result<IPruneCount>> GetGuildPruneCountAsync(Snowflake guildID, Optional<int> days = default(Optional<int>), Optional<IReadOnlyList<Snowflake>> includeRoles = default(Optional<IReadOnlyList<Snowflake>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > days The days a user needs to have been inactive for them to be pruned. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> includeRoles The roles that should be included in a prune operation. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPruneCount >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildRolesAsync(Snowflake, CancellationToken) Gets the roles in the guild. Declaration Task<Result<IReadOnlyList<IRole>>> GetGuildRolesAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IRole >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildVanityUrlAsync(Snowflake, CancellationToken) Gets the vanity invite for the given guild. Declaration Task<Result<IPartialInvite>> GetGuildVanityUrlAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPartialInvite >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildVoiceRegionsAsync(Snowflake, CancellationToken) Gets the voice regions for the guild. Declaration Task<Result<IReadOnlyList<IVoiceRegion>>> GetGuildVoiceRegionsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IVoiceRegion >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWelcomeScreenAsync(Snowflake, CancellationToken) Gets the guild's welcome screen. Declaration Task<Result<IWelcomeScreen>> GetGuildWelcomeScreenAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWelcomeScreen >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWidgetAsync(Snowflake, CancellationToken) Gets the status and invite widget for the guild. Declaration Task<Result<IGuildWidget>> GetGuildWidgetAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildWidget >> A result which may or may not have succeeded. | Improve this Doc View Source GetGuildWidgetImageAsync(Snowflake, Optional<WidgetImageStyle>, CancellationToken) Gets the image for the guild widget. Declaration Task<Result<Stream>> GetGuildWidgetImageAsync(Snowflake guildID, Optional<WidgetImageStyle> style = default(Optional<WidgetImageStyle>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < WidgetImageStyle > style The image style. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < Stream >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWidgetSettingsAsync(Snowflake, CancellationToken) Gets the guild widget. Declaration Task<Result<IGuildWidgetSettings>> GetGuildWidgetSettingsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildWidgetSettings >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListActiveGuildThreadsAsync(Snowflake, CancellationToken) Lists the active threads in the given guild. Declaration Task<Result<IGuildThreadQueryResponse>> ListActiveGuildThreadsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildThreadQueryResponse >> A result which may or may not have succeeded. | Improve this Doc View Source ListGuildMembersAsync(Snowflake, Optional<Int32>, Optional<Snowflake>, CancellationToken) Gets a list of guild members. Declaration Task<Result<IReadOnlyList<IGuildMember>>> ListGuildMembersAsync(Snowflake guildID, Optional<int> limit = default(Optional<int>), Optional<Snowflake> after = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > limit The maximum number of guild members to return (1-1000). Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The highest user ID in the previously retrieved page. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildMember >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyCurrentMemberAsync(Snowflake, Optional<String>, Optional<String>, CancellationToken) Modifies the current member. Declaration Task<Result<IGuildMember>> ModifyCurrentMemberAsync(Snowflake guildID, Optional<string> nickname = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < String > nickname The new nickname. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A modification result which may or may not have succeeded, containing the updated member. | Improve this Doc View Source ModifyCurrentUserVoiceStateAsync(Snowflake, Snowflake, Optional<Boolean>, Optional<Nullable<DateTimeOffset>>, CancellationToken) Modifies the voice state of the current user. Declaration Task<Result> ModifyCurrentUserVoiceStateAsync(Snowflake guildID, Snowflake channelID, Optional<bool> suppress = default(Optional<bool>), Optional<DateTimeOffset?> requestToSpeakTimestamp = default(Optional<DateTimeOffset?>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake channelID The ID of the voice channel the user is currently in. Remora.Rest.Core.Optional < Boolean > suppress Whether to toggle the user's suppression state. Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> requestToSpeakTimestamp The time when the user requested to speak. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildAsync(Snowflake, Optional<String>, Optional<Nullable<VerificationLevel>>, Optional<Nullable<MessageNotificationLevel>>, Optional<Nullable<ExplicitContentFilterLevel>>, Optional<Nullable<Snowflake>>, Optional<TimeSpan>, Optional<Stream>, Optional<Snowflake>, Optional<Stream>, Optional<Stream>, Optional<Stream>, Optional<Nullable<Snowflake>>, Optional<SystemChannelFlags>, Optional<Nullable<Snowflake>>, Optional<Nullable<Snowflake>>, Optional<String>, Optional<IReadOnlyList<GuildFeature>>, Optional<String>, Optional<Boolean>, Optional<String>, CancellationToken) Modifies the guild with the given ID. Declaration Task<Result<IGuild>> ModifyGuildAsync(Snowflake guildID, Optional<string> name = default(Optional<string>), Optional<VerificationLevel?> verificationLevel = default(Optional<VerificationLevel?>), Optional<MessageNotificationLevel?> defaultMessageNotifications = default(Optional<MessageNotificationLevel?>), Optional<ExplicitContentFilterLevel?> explicitContentFilter = default(Optional<ExplicitContentFilterLevel?>), Optional<Snowflake?> afkChannelID = default(Optional<Snowflake?>), Optional<TimeSpan> afkTimeout = default(Optional<TimeSpan>), Optional<Stream> icon = default(Optional<Stream>), Optional<Snowflake> ownerID = default(Optional<Snowflake>), Optional<Stream> splash = default(Optional<Stream>), Optional<Stream> discoverySplash = default(Optional<Stream>), Optional<Stream> banner = default(Optional<Stream>), Optional<Snowflake?> systemChannelID = default(Optional<Snowflake?>), Optional<SystemChannelFlags> systemChannelFlags = default(Optional<SystemChannelFlags>), Optional<Snowflake?> rulesChannelID = default(Optional<Snowflake?>), Optional<Snowflake?> publicUpdatesChannelID = default(Optional<Snowflake?>), Optional<string> preferredLocale = default(Optional<string>), Optional<IReadOnlyList<GuildFeature>> features = default(Optional<IReadOnlyList<GuildFeature>>), Optional<string> description = default(Optional<string>), Optional<bool> isPremiumProgressBarEnabled = default(Optional<bool>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < String > name The new name of the guild. Remora.Rest.Core.Optional < Nullable < VerificationLevel >> verificationLevel The new verification level of the guild. Remora.Rest.Core.Optional < Nullable < MessageNotificationLevel >> defaultMessageNotifications The new default notification level of the guild. Remora.Rest.Core.Optional < Nullable < ExplicitContentFilterLevel >> explicitContentFilter The new explicit filter level of the guild. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> afkChannelID The ID of the new AFK channel. Remora.Rest.Core.Optional < TimeSpan > afkTimeout The new AFK timeout. Remora.Rest.Core.Optional < Stream > icon The new icon. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ownerID The ID of the new owner. Remora.Rest.Core.Optional < Stream > splash The new splash. Remora.Rest.Core.Optional < Stream > discoverySplash The new discovery splash. Remora.Rest.Core.Optional < Stream > banner The new banner. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> systemChannelID The ID of the new channel for system messages. Remora.Rest.Core.Optional < SystemChannelFlags > systemChannelFlags The new system channel flags. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> rulesChannelID The ID of the new channel for rules. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> publicUpdatesChannelID The ID of the new channel for public updates. Remora.Rest.Core.Optional < String > preferredLocale The new preferred locale. Remora.Rest.Core.Optional < IReadOnlyList < GuildFeature >> features The new guild features. Remora.Rest.Core.Optional < String > description The new description. Remora.Rest.Core.Optional < Boolean > isPremiumProgressBarEnabled Whether the guild has the boost progress bar enabled. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGuildChannelPositionsAsync(Snowflake, IReadOnlyList<(Snowflake ChannelID, Nullable<Int32> Position, Nullable<Boolean> LockPermissions, Nullable<Snowflake> ParentID)>, Optional<String>, CancellationToken) Modifies the positions of a set of channels in the guild. Declaration Task<Result> ModifyGuildChannelPositionsAsync(Snowflake guildID, IReadOnlyList<(Snowflake ChannelID, int? Position, bool? LockPermissions, Snowflake? ParentID)> positionModifications, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. IReadOnlyList < (T1, T2, T3, T4) < Remora.Rest.Core.Snowflake , Nullable < Int32 >, Nullable < Boolean >, Nullable < Remora.Rest.Core.Snowflake >>> positionModifications The new positions of the modified channels. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildMemberAsync(Snowflake, Snowflake, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<Nullable<Boolean>>, Optional<Nullable<Boolean>>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, CancellationToken) Modifies attributes of a guild member. Declaration Task<Result> ModifyGuildMemberAsync(Snowflake guildID, Snowflake userID, Optional<string> nickname = default(Optional<string>), Optional<IReadOnlyList<Snowflake>> roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<bool?> isMuted = default(Optional<bool?>), Optional<bool?> isDeafened = default(Optional<bool?>), Optional<Snowflake?> channelID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> communicationDisabledUntil = default(Optional<DateTimeOffset?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < String > nickname The new nickname of the user. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> roles The new roles of the user. Remora.Rest.Core.Optional < Nullable < Boolean >> isMuted The new mute state of the user. Remora.Rest.Core.Optional < Nullable < Boolean >> isDeafened The new deaf state of the user. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> channelID The new voice channel of the user. Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> communicationDisabledUntil The DateTime until the user has communication disabled. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A rest result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildRoleAsync(Snowflake, Snowflake, Optional<String>, Optional<IDiscordPermissionSet>, Optional<Nullable<Color>>, Optional<Nullable<Boolean>>, Optional<Stream>, Optional<String>, Optional<Nullable<Boolean>>, Optional<String>, CancellationToken) Modifies the given role. Declaration Task<Result<IRole>> ModifyGuildRoleAsync(Snowflake guildID, Snowflake roleID, Optional<string> name = default(Optional<string>), Optional<IDiscordPermissionSet> permissions = default(Optional<IDiscordPermissionSet>), Optional<Color?> color = default(Optional<Color?>), Optional<bool?> isHoisted = default(Optional<bool?>), Optional<Stream> icon = default(Optional<Stream>), Optional<string> unicodeEmoji = default(Optional<string>), Optional<bool?> isMentionable = default(Optional<bool?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > name The new name of the role. Remora.Rest.Core.Optional < IDiscordPermissionSet > permissions The new permissions of the role. Remora.Rest.Core.Optional < Nullable < Color >> color The new color of the role. Remora.Rest.Core.Optional < Nullable < Boolean >> isHoisted Whether the role is displayed separately in the sidebar. Remora.Rest.Core.Optional < Stream > icon The role's icon image. Remora.Rest.Core.Optional < String > unicodeEmoji The role's unicode emoji icon. Remora.Rest.Core.Optional < Nullable < Boolean >> isMentionable Whether the role is mentionable. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IRole >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGuildRolePositionsAsync(Snowflake, IReadOnlyList<(Snowflake RoleID, Optional<Nullable<Int32>> Position)>, Optional<String>, CancellationToken) Modifies the positions of a set of roles in the guild. Declaration Task<Result<IReadOnlyList<IRole>>> ModifyGuildRolePositionsAsync(Snowflake guildID, IReadOnlyList<(Snowflake RoleID, Optional<int?> Position)> modifiedPositions, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. IReadOnlyList < (T1, T2) < Remora.Rest.Core.Snowflake , Remora.Rest.Core.Optional < Nullable < Int32 >>>> modifiedPositions The modified role positions. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IRole >>> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildWelcomeScreenAsync(Snowflake, Optional<Nullable<Boolean>>, Optional<IReadOnlyList<IWelcomeScreenChannel>>, Optional<String>, Optional<String>, CancellationToken) Modifies the guild's welcome screen. Declaration Task<Result<IWelcomeScreen>> ModifyGuildWelcomeScreenAsync(Snowflake guildID, Optional<bool?> isEnabled = default(Optional<bool?>), Optional<IReadOnlyList<IWelcomeScreenChannel>> welcomeChannels = default(Optional<IReadOnlyList<IWelcomeScreenChannel>>), Optional<string> description = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Nullable < Boolean >> isEnabled Whether the welcome screen is enabled. Remora.Rest.Core.Optional < IReadOnlyList < IWelcomeScreenChannel >> welcomeChannels The channels displayed. Remora.Rest.Core.Optional < String > description The guild's description. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWelcomeScreen >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildWidgetAsync(Snowflake, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<String>, CancellationToken) Modifies the guild widget for the guild. Declaration Task<Result<IGuildWidgetSettings>> ModifyGuildWidgetAsync(Snowflake guildID, Optional<bool> isEnabled = default(Optional<bool>), Optional<Snowflake?> channelID = default(Optional<Snowflake?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > isEnabled Whether the widget is enabled. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> channelID The ID of the channel invites will be generated for. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildWidgetSettings >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyUserVoiceStateAsync(Snowflake, Snowflake, Snowflake, Optional<Boolean>, CancellationToken) Modifies the voice state of another user. Declaration Task<Result<IVoiceState>> ModifyUserVoiceStateAsync(Snowflake guildID, Snowflake userID, Snowflake channelID, Optional<bool> suppress = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Snowflake channelID The ID of the voice channel the user is currently in. Remora.Rest.Core.Optional < Boolean > suppress Whether to toggle the user's suppression state. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IVoiceState >> A modification result which may or may not have succeeded. | Improve this Doc View Source RemoveGuildBanAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Unbans the given user. Declaration Task<Result> RemoveGuildBanAsync(Snowflake guildID, Snowflake userID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source RemoveGuildMemberAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Removes a member from the guild. Declaration Task<Result> RemoveGuildMemberAsync(Snowflake guildID, Snowflake userID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source RemoveGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional<String>, CancellationToken) Removes a role from a guild member. Declaration Task<Result> RemoveGuildMemberRoleAsync(Snowflake guildID, Snowflake userID, Snowflake roleID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source SearchGuildMembersAsync(Snowflake, String, Optional<Int32>, CancellationToken) Gets a list of guild members whose username or nickname start with the query string. Declaration Task<Result<IReadOnlyList<IGuildMember>>> SearchGuildMembersAsync(Snowflake guildID, string query, Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String query The query string. Remora.Rest.Core.Optional < Int32 > limit The maximum number of members to return (1-1000). CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildMember >>> A retrieval result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildScheduledEventAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildScheduledEventAPI.html",
    "title": "Interface IDiscordRestGuildScheduledEventAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestGuildScheduledEventAPI Represents the Discord Guild Scheduled Event API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestGuildScheduledEventAPI Methods | Improve this Doc View Source CreateGuildScheduledEventAsync(Snowflake, Optional<Snowflake>, Optional<IGuildScheduledEventEntityMetadata>, String, GuildScheduledEventPrivacyLevel, DateTimeOffset, Optional<DateTimeOffset>, Optional<String>, GuildScheduledEventEntityType, Optional<Stream>, Optional<String>, CancellationToken) Creates a new scheduled event in the guild. Declaration Task<Result<IGuildScheduledEvent>> CreateGuildScheduledEventAsync(Snowflake guildID, Optional<Snowflake> channelID, Optional<IGuildScheduledEventEntityMetadata> entityMetadata, string name, GuildScheduledEventPrivacyLevel privacyLevel, DateTimeOffset scheduledStartTime, Optional<DateTimeOffset> scheduledEndTime, Optional<string> description, GuildScheduledEventEntityType entityType, Optional<Stream> image = default(Optional<Stream>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild to create the event in. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > channelID The channel ID of the scheduled event, if it is for a stage instance or voice channel. Remora.Rest.Core.Optional < IGuildScheduledEventEntityMetadata > entityMetadata The entity metadata, if any. String name The name of the event (1-100 characters). GuildScheduledEventPrivacyLevel privacyLevel The privacy level of the event. DateTimeOffset scheduledStartTime The time at which the event is scheduled to start. Remora.Rest.Core.Optional < DateTimeOffset > scheduledEndTime The time at which the event is scheduled to end, if any. Remora.Rest.Core.Optional < String > description The description of the event, if any (1-100 characters). GuildScheduledEventEntityType entityType The entity type of the event. Remora.Rest.Core.Optional < Stream > image The image of the event, displayed above the information. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildScheduledEvent >> A creation result which may or may not have succeeded. | Improve this Doc View Source DeleteGuildScheduledEventAsync(Snowflake, Snowflake, CancellationToken) Deletes the given event. Declaration Task<Result> DeleteGuildScheduledEventAsync(Snowflake guildID, Snowflake eventID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake eventID The ID of the event. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source GetGuildScheduledEventAsync(Snowflake, Snowflake, Optional<Boolean>, CancellationToken) Gets a specific scheduled event in the given guild. Declaration Task<Result<IGuildScheduledEvent>> GetGuildScheduledEventAsync(Snowflake guildID, Snowflake eventID, Optional<bool> withUserCount = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake eventID The ID of the event. Remora.Rest.Core.Optional < Boolean > withUserCount Whether to include user counts. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildScheduledEvent >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildScheduledEventUsersAsync(Snowflake, Snowflake, Optional<Int32>, Optional<Boolean>, Optional<Snowflake>, Optional<Snowflake>, CancellationToken) Gets a list of users subscribed to an event. Declaration Task<Result<IReadOnlyList<IGuildScheduledEventUser>>> GetGuildScheduledEventUsersAsync(Snowflake guildID, Snowflake eventID, Optional<int> limit = default(Optional<int>), Optional<bool> withMember = default(Optional<bool>), Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake eventID The ID of the event. Remora.Rest.Core.Optional < Int32 > limit The maximum number of users to return (max 100). Remora.Rest.Core.Optional < Boolean > withMember Whether member information should be included. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before Restrict the returned users to ones before this ID. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after Restrict the returned users to ones after this ID. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildScheduledEventUser >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListScheduledEventsForGuildAsync(Snowflake, Optional<Boolean>, CancellationToken) Gets a list of scheduled events for the given guild. Declaration Task<Result<IReadOnlyList<IGuildScheduledEvent>>> ListScheduledEventsForGuildAsync(Snowflake guildID, Optional<bool> withUserCount = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > withUserCount Whether subscribed user counts should be included. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildScheduledEvent >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildScheduledEventAsync(Snowflake, Snowflake, Optional<Snowflake>, Optional<IGuildScheduledEventEntityMetadata>, Optional<String>, Optional<GuildScheduledEventPrivacyLevel>, Optional<DateTimeOffset>, Optional<DateTimeOffset>, Optional<String>, Optional<GuildScheduledEventEntityType>, Optional<GuildScheduledEventStatus>, Optional<Stream>, Optional<String>, CancellationToken) Modifies the given scheduled event. Declaration Task<Result<IGuildScheduledEvent>> ModifyGuildScheduledEventAsync(Snowflake guildID, Snowflake eventID, Optional<Snowflake> channelID = default(Optional<Snowflake>), Optional<IGuildScheduledEventEntityMetadata> entityMetadata = default(Optional<IGuildScheduledEventEntityMetadata>), Optional<string> name = default(Optional<string>), Optional<GuildScheduledEventPrivacyLevel> privacyLevel = default(Optional<GuildScheduledEventPrivacyLevel>), Optional<DateTimeOffset> scheduledStartTime = default(Optional<DateTimeOffset>), Optional<DateTimeOffset> scheduledEndTime = default(Optional<DateTimeOffset>), Optional<string> description = default(Optional<string>), Optional<GuildScheduledEventEntityType> entityType = default(Optional<GuildScheduledEventEntityType>), Optional<GuildScheduledEventStatus> status = default(Optional<GuildScheduledEventStatus>), Optional<Stream> image = default(Optional<Stream>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake eventID The ID of the event. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > channelID The new channel ID associated with the event. Remora.Rest.Core.Optional < IGuildScheduledEventEntityMetadata > entityMetadata The new entity metadata. Remora.Rest.Core.Optional < String > name The new name of the event (1-100 characters). Remora.Rest.Core.Optional < GuildScheduledEventPrivacyLevel > privacyLevel The new privacy level of the event. Remora.Rest.Core.Optional < DateTimeOffset > scheduledStartTime The new start time of the event. Remora.Rest.Core.Optional < DateTimeOffset > scheduledEndTime The new end time of the event. Remora.Rest.Core.Optional < String > description The new description of the event (1-100 characters). Remora.Rest.Core.Optional < GuildScheduledEventEntityType > entityType The new entity type associated with the event. Remora.Rest.Core.Optional < GuildScheduledEventStatus > status The new status of the event. Remora.Rest.Core.Optional < Stream > image The new image of the event, displayed above the information. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildScheduledEvent >> A modification result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI.html",
    "title": "Interface IDiscordRestInteractionAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestInteractionAPI Represents the Discord interaction API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestInteractionAPI Methods | Improve this Doc View Source CreateFollowupMessageAsync(Snowflake, String, Optional<String>, Optional<Boolean>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<MessageFlags>, CancellationToken) Creates a followup message. Declaration Task<Result<IMessage>> CreateFollowupMessageAsync(Snowflake applicationID, string token, Optional<string> content = default(Optional<string>), Optional<bool> isTTS = default(Optional<bool>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<MessageFlags> flags = default(Optional<MessageFlags>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < Boolean > isTTS Whether this message is a TTS message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The embeds in the message. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The set of allowed mentions of the message. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components that should be included with the message. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < MessageFlags > flags The message flags to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source CreateInteractionResponseAsync(Snowflake, String, IInteractionResponse, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Creates a response to an interaction from the gateway. Declaration Task<Result> CreateInteractionResponseAsync(Snowflake interactionID, string interactionToken, IInteractionResponse response, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake interactionID The ID of the interaction. String interactionToken The interaction token. IInteractionResponse response The response. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteFollowupMessageAsync(Snowflake, String, Snowflake, CancellationToken) Deletes an interaction followup message. Declaration Task<Result> DeleteFollowupMessageAsync(Snowflake applicationID, string token, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A modification result which may or may not have succeeded. | Improve this Doc View Source DeleteOriginalInteractionResponseAsync(Snowflake, String, CancellationToken) Deletes the original interaction response. Declaration Task<Result> DeleteOriginalInteractionResponseAsync(Snowflake applicationID, string token, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditFollowupMessageAsync(Snowflake, String, Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Edits an interaction followup message. Declaration Task<Result<IMessage>> EditFollowupMessageAsync(Snowflake applicationID, string token, Snowflake messageID, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > content The new content, if any. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds, if any. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The new allowed mentions, if any. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components, if any. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source EditOriginalInteractionResponseAsync(Snowflake, String, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Edits the initial interaction response. Declaration Task<Result<IMessage>> EditOriginalInteractionResponseAsync(Snowflake applicationID, string token, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Optional < String > content The new content, if any. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds, if any. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The new allowed mentions, if any. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components, if any. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source GetFollowupMessageAsync(Snowflake, String, Snowflake, CancellationToken) Gets a followup message associated with the given interaction. Declaration Task<Result<IMessage>> GetFollowupMessageAsync(Snowflake applicationID, string token, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. | Improve this Doc View Source GetOriginalInteractionResponseAsync(Snowflake, String, CancellationToken) Gets the message object of the original interaction response. Declaration Task<Result<IMessage>> GetOriginalInteractionResponseAsync(Snowflake applicationID, string interactionToken, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. String interactionToken The interaction token. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestInviteAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestInviteAPI.html",
    "title": "Interface IDiscordRestInviteAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestInviteAPI Represents the Discord Invite API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestInviteAPI Methods | Improve this Doc View Source DeleteInviteAsync(String, Optional<String>, CancellationToken) Deletes the given invite code. Declaration Task<Result<IInvite>> DeleteInviteAsync(string inviteCode, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String inviteCode The invite code. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IInvite >> A deletion result which may or may not have succeeded. | Improve this Doc View Source GetInviteAsync(String, Optional<Boolean>, Optional<Boolean>, Optional<Snowflake>, CancellationToken) Gets an invite object for the given code. Declaration Task<Result<IInvite>> GetInviteAsync(string inviteCode, Optional<bool> withCounts = default(Optional<bool>), Optional<bool> withExpiration = default(Optional<bool>), Optional<Snowflake> guildScheduledEventID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String inviteCode The invite code. Remora.Rest.Core.Optional < Boolean > withCounts Whether the invite should contain approximate member counts. Remora.Rest.Core.Optional < Boolean > withExpiration Whether the invite should contain the expiration date. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > guildScheduledEventID The scheduled event to include with the invite. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IInvite >> A retrieval result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestOAuth2API.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestOAuth2API.html",
    "title": "Interface IDiscordRestOAuth2API | Remora.Discord",
    "keywords": "Interface IDiscordRestOAuth2API Represents the Discord Emoji API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestOAuth2API Methods | Improve this Doc View Source GetCurrentAuthorizationInformationAsync(CancellationToken) Gets information about the bot's current authorizations. Declaration Task<Result<IAuthorizationInformation>> GetCurrentAuthorizationInformationAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IAuthorizationInformation >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetCurrentBotApplicationInformationAsync(CancellationToken) Gets the bot's OAuth2 application object. Flags are typically not included. Declaration Task<Result<IApplication>> GetCurrentBotApplicationInformationAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplication >> A retrieval result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestStageInstanceAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestStageInstanceAPI.html",
    "title": "Interface IDiscordRestStageInstanceAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestStageInstanceAPI Represents the Discord Stage Instance REST API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestStageInstanceAPI Methods | Improve this Doc View Source CreateStageInstanceAsync(Snowflake, String, Optional<StagePrivacyLevel>, Optional<Boolean>, Optional<String>, CancellationToken) Creates a new stage instance associated with the given stage channel. Declaration Task<Result<IStageInstance>> CreateStageInstanceAsync(Snowflake channelID, string topic, Optional<StagePrivacyLevel> privacyLevel = default(Optional<StagePrivacyLevel>), Optional<bool> sendStartNotification = default(Optional<bool>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the stage channel. String topic The topic of the stage instance (1-120 characters). Remora.Rest.Core.Optional < StagePrivacyLevel > privacyLevel The privacy level of the stage instance. Remora.Rest.Core.Optional < Boolean > sendStartNotification Indicates whether @everyone should be notified that a stage instance has started. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IStageInstance >> A result which may or may not have succeeded. | Improve this Doc View Source DeleteStageInstance(Snowflake, Optional<String>, CancellationToken) Deletes the stage instance associated with the given stage channel. Declaration Task<Result> DeleteStageInstance(Snowflake channelID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the stage channel. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source GetStageInstanceAsync(Snowflake, CancellationToken) Gets the stage instance associated with the given stage channel. Declaration Task<Result<IStageInstance>> GetStageInstanceAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the stage channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IStageInstance >> A result which may or may not have succeeded. | Improve this Doc View Source ModifyStageInstanceAsync(Snowflake, Optional<String>, Optional<StagePrivacyLevel>, Optional<String>, CancellationToken) Modifies the stage instance of the given stage channel. Declaration Task<Result<IStageInstance>> ModifyStageInstanceAsync(Snowflake channelID, Optional<string> topic = default(Optional<string>), Optional<StagePrivacyLevel> privacyLevel = default(Optional<StagePrivacyLevel>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the stage channel. Remora.Rest.Core.Optional < String > topic The topic of the stage instance (1-120 characters). Remora.Rest.Core.Optional < StagePrivacyLevel > privacyLevel The privacy level of the stage instance. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IStageInstance >> A result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestStickerAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestStickerAPI.html",
    "title": "Interface IDiscordRestStickerAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestStickerAPI Represents the Discord Sticker API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestStickerAPI Methods | Improve this Doc View Source CreateGuildStickerAsync(Snowflake, String, String, String, FileData, Optional<String>, CancellationToken) Creates a new sticker in the given guild. Declaration Task<Result<ISticker>> CreateGuildStickerAsync(Snowflake guildId, string name, string description, string tags, FileData file, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. String name The name of the new sticker. String description The description of the new sticker. String tags The tags related to the expression of the sticker. Typically, one would use a single unicode emoji. FileData file The file contents. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < ISticker >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteGuildStickerAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given sticker in the given guild. Declaration Task<Result> DeleteGuildStickerAsync(Snowflake guildId, Snowflake stickerId, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. Remora.Rest.Core.Snowflake stickerId The ID of the sticker. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source GetGuildStickerAsync(Snowflake, Snowflake, CancellationToken) Gets a specific sticker from a guild. Declaration Task<Result<ISticker>> GetGuildStickerAsync(Snowflake guildId, Snowflake stickerId, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. Remora.Rest.Core.Snowflake stickerId The ID of the sticker. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < ISticker >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetStickerAsync(Snowflake, CancellationToken) Gets the sticker for the given ID. Declaration Task<Result<ISticker>> GetStickerAsync(Snowflake id, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake id The ID of the sticker. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < ISticker >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListGuildStickersAsync(Snowflake, CancellationToken) Gets a list of stickers belonging to the given guild. Declaration Task<Result<IReadOnlyList<ISticker>>> ListGuildStickersAsync(Snowflake guildId, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < ISticker >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListNitroStickerPacksAsync(CancellationToken) Gets a list of sticker packs available to Nitro subscribers. Declaration Task<Result<INitroStickerPacks>> ListNitroStickerPacksAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < INitroStickerPacks >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildStickerAsync(Snowflake, Snowflake, Optional<String>, Optional<String>, Optional<String>, Optional<String>, CancellationToken) Modifies the given sticker in the given guild. Declaration Task<Result<ISticker>> ModifyGuildStickerAsync(Snowflake guildId, Snowflake stickerId, Optional<string> name = default(Optional<string>), Optional<string> description = default(Optional<string>), Optional<string> tags = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. Remora.Rest.Core.Snowflake stickerId The ID of the sticker. Remora.Rest.Core.Optional < String > name The new name, if any. Remora.Rest.Core.Optional < String > description The new description, if any. Remora.Rest.Core.Optional < String > tags The new tags, if any. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < ISticker >> A modification result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.html",
    "title": "Interface IDiscordRestTemplateAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestTemplateAPI Represents the Discord REST template API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestTemplateAPI Methods | Improve this Doc View Source CreateGuildFromTemplateAsync(String, String, Optional<Stream>, CancellationToken) Creates a new guild from the given template. Declaration Task<Result<IGuild>> CreateGuildFromTemplateAsync(string templateCode, string name, Optional<Stream> icon = default(Optional<Stream>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String templateCode The template code. String name The name of the new guild. Remora.Rest.Core.Optional < Stream > icon The icon of the new guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source CreateGuildTemplateAsync(Snowflake, String, Optional<String>, CancellationToken) Creates a new guild template from the given guild. Declaration Task<Result<ITemplate>> CreateGuildTemplateAsync(Snowflake guildID, string name, Optional<string> description = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the template. Remora.Rest.Core.Optional < String > description The description of the template. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A creation result which may or may not have succeeded. | Improve this Doc View Source DeleteGuildTemplateAsync(Snowflake, String, CancellationToken) Deletes the given guild template. Declaration Task<Result<ITemplate>> DeleteGuildTemplateAsync(Snowflake guildID, string templateCode, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String templateCode The template code. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A retrieval result which may or may not have succeeded. This contains the deleted template. | Improve this Doc View Source GetGuildTemplatesAsync(Snowflake, CancellationToken) Gets the template for the given guild. Declaration Task<Result<IReadOnlyList<ITemplate>>> GetGuildTemplatesAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < ITemplate >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetTemplateAsync(String, CancellationToken) Gets the template object for the given code. Declaration Task<Result<ITemplate>> GetTemplateAsync(string templateCode, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String templateCode The template code. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildTemplateAsync(Snowflake, String, String, Optional<String>, CancellationToken) Modifies the template's metadata. Declaration Task<Result<ITemplate>> ModifyGuildTemplateAsync(Snowflake guildID, string templateCode, string name, Optional<string> description, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String templateCode The template code. String name The new name of the template. Remora.Rest.Core.Optional < String > description The new description of the template. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A modification result which may or may not have succeeded. | Improve this Doc View Source SyncGuildTemplateAsync(Snowflake, String, CancellationToken) Synchronized the template to the guild's current state. Declaration Task<Result<ITemplate>> SyncGuildTemplateAsync(Snowflake guildID, string templateCode, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String templateCode The template code. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A retrieval result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI.html",
    "title": "Interface IDiscordRestUserAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestUserAPI Represents the Discord User API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestUserAPI Methods | Improve this Doc View Source CreateDMAsync(Snowflake, CancellationToken) Creates a new DM channel with the given user. Declaration Task<Result<IChannel>> CreateDMAsync(Snowflake recipientID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake recipientID The ID of the recipient. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A creation result which may or may not have succeeded. | Improve this Doc View Source GetCurrentUserAsync(CancellationToken) Gets the user object of the requester's account. Declaration Task<Result<IUser>> GetCurrentUserAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IUser >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetCurrentUserGuildMemberAsync(Snowflake, CancellationToken) Gets a guild member object for the current user. Declaration Task<Result<IGuildMember>> GetCurrentUserGuildMemberAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A retrieval result which may or may not have succeeded. Remarks Requires the \"guild.members.read\" OAuth\" scope. | Improve this Doc View Source GetCurrentUserGuildsAsync(Optional<Snowflake>, Optional<Snowflake>, Optional<Int32>, CancellationToken) Gets the guilds the user is in. Declaration Task<Result<IReadOnlyList<IPartialGuild>>> GetCurrentUserGuildsAsync(Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before Get guilds before this guild ID. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after Get guilds after this guild ID. Remora.Rest.Core.Optional < Int32 > limit The maximum number of guilds to get (1-200). Defaults to 200. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IPartialGuild >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetUserAsync(Snowflake, CancellationToken) Gets the user with the given ID. Declaration Task<Result<IUser>> GetUserAsync(Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IUser >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetUserConnectionsAsync(CancellationToken) Gets a list of connection objects. Declaration Task<Result<IReadOnlyList<IConnection>>> GetUserConnectionsAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IConnection >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetUserDMsAsync(CancellationToken) Gets a list of DM channels the user has. This always returns an empty array for bots. Declaration Task<Result<IReadOnlyList<IChannel>>> GetUserDMsAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IChannel >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source LeaveGuildAsync(Snowflake, CancellationToken) Leaves the given guild. Declaration Task<Result> LeaveGuildAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source ModifyCurrentUserAsync(Optional<String>, Optional<Stream>, CancellationToken) Modifies the current user. Declaration Task<Result<IUser>> ModifyCurrentUserAsync(Optional<string> username, Optional<Stream> avatar = default(Optional<Stream>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Optional < String > username The new username. Remora.Rest.Core.Optional < Stream > avatar The new avatar. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IUser >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestVoiceAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestVoiceAPI.html",
    "title": "Interface IDiscordRestVoiceAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestVoiceAPI Represents the Discord Voice API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestVoiceAPI Methods | Improve this Doc View Source ListVoiceRegionsAsync(CancellationToken) Gets the available voice regions. Declaration Task<Result<IReadOnlyList<IVoiceRegion>>> ListVoiceRegionsAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IVoiceRegion >>> A retrieval result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestWebhookAPI.html": {
    "href": "api/Remora.Discord.API.Abstractions.Rest.IDiscordRestWebhookAPI.html",
    "title": "Interface IDiscordRestWebhookAPI | Remora.Discord",
    "keywords": "Interface IDiscordRestWebhookAPI Represents the Discord Webhook API. Namespace : Remora.Discord.API.Abstractions.Rest Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IDiscordRestWebhookAPI Methods | Improve this Doc View Source CreateWebhookAsync(Snowflake, String, Optional<Stream>, Optional<String>, CancellationToken) Creates a new webhook. Declaration Task<Result<IWebhook>> CreateWebhookAsync(Snowflake channelID, string name, Optional<Stream> avatar, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the webhook is for. String name The name of the webhook. Remora.Rest.Core.Optional < Stream > avatar The avatar of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteWebhookAsync(Snowflake, Optional<String>, CancellationToken) Deletes the given webhook. Declaration Task<Result> DeleteWebhookAsync(Snowflake webhookID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteWebhookMessageAsync(Snowflake, String, Snowflake, Optional<Snowflake>, CancellationToken) Deletes a message posted by a webhook. Declaration Task<Result> DeleteWebhookMessageAsync(Snowflake webhookID, string token, Snowflake messageID, Optional<Snowflake> threadID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID The ID of the thread the message is in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source DeleteWebhookWithTokenAsync(Snowflake, String, Optional<String>, CancellationToken) Deletes the given webhook. Declaration Task<Result> DeleteWebhookWithTokenAsync(Snowflake webhookID, string token, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditWebhookMessageAsync(Snowflake, String, Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<Snowflake>, CancellationToken) Edits a message posted by a webhook. Declaration Task<Result<IMessage>> EditWebhookMessageAsync(Snowflake webhookID, string token, Snowflake messageID, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<Snowflake> threadID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > content The new content, if any. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds, if any. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The new allowed mentions, if any. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components that should be included with the message. The webhook must be application-owned to use this parameter. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID The ID of the thread the message is in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ExecuteWebhookAsync(Snowflake, String, Optional<Boolean>, Optional<String>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<Snowflake>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<MessageFlags>, Optional<String>, CancellationToken) Executes the given webhook. Declaration Task<Result<IMessage>> ExecuteWebhookAsync(Snowflake webhookID, string token, Optional<bool> shouldWait = default(Optional<bool>), Optional<string> content = default(Optional<string>), Optional<string> username = default(Optional<string>), Optional<string> avatarUrl = default(Optional<string>), Optional<bool> isTTS = default(Optional<bool>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<Snowflake> threadID = default(Optional<Snowflake>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<MessageFlags> flags = default(Optional<MessageFlags>), Optional<string> threadName = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Optional < Boolean > shouldWait Whether the call should block until the server has confirmed that the message was sent. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < String > username The username to use for this message. Note that Discord places some restrictions on valid usernames in order to prevent spam and abuse - check the Discord documentation for up-to-date information on allowed usernames. Remora.Rest.Core.Optional < String > avatarUrl The avatar to use for this message. Remora.Rest.Core.Optional < Boolean > isTTS Whether this message is a TTS message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The embeds in the message. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The set of allowed mentions of the message. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID Send a message to the specified thread within a webhook's channel. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components that should be included with the message. The webhook must be application-owned to use this parameter. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < MessageFlags > flags The message flags. Remora.Rest.Core.Optional < String > threadName The name of the forum thread to create. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. The returned message is null if shouldWait is false. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source GetChannelWebhooksAsync(Snowflake, CancellationToken) Gets the webhooks for a channel. Declaration Task<Result<IReadOnlyList<IWebhook>>> GetChannelWebhooksAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IWebhook >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWebhooksAsync(Snowflake, CancellationToken) Gets the webhooks for a guild. Declaration Task<Result<IReadOnlyList<IWebhook>>> GetGuildWebhooksAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IWebhook >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetWebhookAsync(Snowflake, CancellationToken) Gets the webhook with the given ID. Declaration Task<Result<IWebhook>> GetWebhookAsync(Snowflake webhookID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetWebhookMessageAsync(Snowflake, String, Snowflake, Optional<Snowflake>, CancellationToken) Gets a previously-sent webhook message. Declaration Task<Result<IMessage>> GetWebhookMessageAsync(Snowflake webhookID, string webhookToken, Snowflake messageID, Optional<Snowflake> threadID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String webhookToken The webhook token. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID The ID of the thread the message is in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. | Improve this Doc View Source GetWebhookWithTokenAsync(Snowflake, String, CancellationToken) Gets the webhook with the given ID and token. Declaration Task<Result<IWebhook>> GetWebhookWithTokenAsync(Snowflake webhookID, string token, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyWebhookAsync(Snowflake, Optional<String>, Optional<Stream>, Optional<Snowflake>, Optional<String>, CancellationToken) Modifies the given webhook. Declaration Task<Result<IWebhook>> ModifyWebhookAsync(Snowflake webhookID, Optional<string> name = default(Optional<string>), Optional<Stream> avatar = default(Optional<Stream>), Optional<Snowflake> channelID = default(Optional<Snowflake>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. Remora.Rest.Core.Optional < String > name The new name of the webhook. Remora.Rest.Core.Optional < Stream > avatar The new avatar of the webhook. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > channelID The new channel of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyWebhookWithTokenAsync(Snowflake, String, Optional<String>, Optional<Stream>, Optional<String>, CancellationToken) Modifies the given webhook. Declaration Task<Result<IWebhook>> ModifyWebhookWithTokenAsync(Snowflake webhookID, string token, Optional<string> name = default(Optional<string>), Optional<Stream> avatar = default(Optional<Stream>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Optional < String > name The new name of the webhook. Remora.Rest.Core.Optional < Stream > avatar The new avatar of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of."
  },
  "api/Remora.Discord.API.Abstractions.Results.DiscordError.html": {
    "href": "api/Remora.Discord.API.Abstractions.Results.DiscordError.html",
    "title": "Enum DiscordError | Remora.Discord",
    "keywords": "Enum DiscordError Enumerates the various Discord error codes. Namespace : Remora.Discord.API.Abstractions.Results Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum DiscordError Fields Name Description ApplicationActionUnauthorized You are not allowed to perform that operation on this application. ApplicationCommandWithNameExists An application command with that name already exists. BeforeIsEarlierThanThreadCreation The \"before\" value provided was earlier than the thread creation date. BotsOnly Only bots can use this endpoint. CannotDeleteCommunityRequiredChannel A channel required for community guilds cannot be deleted. CannotEditMessageByAnotherUser Cannot edit a message authored by another user. CannotEditStickersInMessage Stickers sent in a message can't be edited. CannotExecuteActionOnChannelType Cannot execute action on this channel type. CannotExecuteActionOnDMChannel Cannot execute action on a DM channel. CannotExecuteActionOnSystemMessage Cannot execute action on a system message. CannotReplyWithoutReadMessageHistory The bot can't reply to a message without the ReadMessageHistory permission. CannotSelfRedeemGift You can't redeem this gift yourself. CannotSendEmptyMessage Cannot send an empty message. CannotSendMessageToNonTextChannel Cannot send messages in a non-text channel. CannotSendMessageToUser Cannot send messages to this user. CannotUpdateFinishedEvent A finished scheduled event cannot be updated. ChannelVerificationLevelTooHighForAccess Channel verification level is too high for you to gain access. CommunityServerChannelMustBeTextChannel Community server channels must be text channels. DisallowedWords Your stage channel topic, server name, description, or channel name contains disallowed words. EditingNotAllowedDueToAnnouncementRateLimits This message cannot be edited due to announcement rate limits. ExplicitContentCannotBeSent Explicit content cannot be sent to the intended recipient(s). FailedToCreatedStageForEvent For whatever reason, the system failed to create a stage for the stage event. FeatureTemporarilyDisabled This feature has been temporarily disabled server-side. FileUploadExceedsMaximumSize The uploaded file is greater than the maximum size allowed. GeneralError A general error (suc as a malformed request body, amongst other things). GuildAlreadyHasATemplate The guild already has a template. GuildPremiumLevelTooLow The guild's premium subscription level is too low for the requested action. GuildWidgetDisabled Guild widget disabled. InteractionHasAlreadyBeenAcknowledged The interaction has already been acknowledged by the application. InvalidAccountType Invalid account type. InvalidAPIVersion Invalid API version provided. InvalidAuthenticationToken Invalid authentication token provided. InvalidFileUploaded The uploaded file is invalid. InvalidFormBody Invalid form body (returned for both application/json and multipart/form-data bodies), or invalid Content-Type provided. InvalidGuild Some guild is invalid. InvalidJsonForUploadedLottieFile The JSON in the uploaded Lottie-format file was invalid. InvalidJSONInRequestBody The request body contains invalid JSON. InvalidMessageType Some message type is invalid. InvalidOAuth2Token Invalid OAuth2 access token provided. InvalidOAuthState Invalid OAuth2 state. InvalidOperationOnArchivedThread You attempted to perform an operation on an archived thread that's not allowed. InvalidOrUsedInviteCode Invite code was either invalid or taken. InvalidRecipients One or more recipients were invalid. InvalidRole Invalid role provided. InvalidSticker Invalid sticker sent. InvalidThreadNotificationSettings Invalid thread notification settings were provided. InvalidWebhookToken Invalid webhook token provided. InviteAcceptedButBotIsNotInGuild An invite was accepted to a guild the application's bot is not in. LottieAnimationDimensionsExceeded The maximum dimensions of an animated Lottie sticker has been exceeded. MaxAnimatedEmojisReached Maximum number of animated emojis reached. MaxAttachmentsInMessageReached Maximum number of attachments in a message reached (10). MaxEmojisReached Maximum number of emojis reached. MaxFriendsReached Maximum number of friends reached (1000). MaxGuildChannelsReached Maximum number of guild channels reached (500). MaxGuildInvitesReached Maximum number of invites reached (1000). MaxGuildRolesReached Maximum number of guild roles reached (250). MaxGuildsReached Maximum number of guilds reached (100). MaxNumberOfAnnouncementThreadsReached The maximum number of announcement threads has been reached. MaxNumberOfBanFetchesReached The maximum number of ban fetches has been exceeded. MaxNumberOfEditsToMessagesOlderThanOneHourReached Maximum number of edits to messages older than 1 hour reached. Try again later. MaxNumberOfGuildWidgetSettingUpdatesReached Maximum number of guild widget setting updates has been reached. Try again later. MaxNumberOfNonMemberBansReached The maximum number of bans for non-guild members has been exceeded. MaxNumberOfPruneRequestsReached Maximum number of prune requests has been reached. Try again later. MaxNumberOfThreadParticipantsReached The maximum number of participants in a thread has been reached (1000). MaxNumberOfThreadsReached The maximum number of threads has been reached. MaxNumberOfUncompletedGuildScheduledEventsReached The maximum number of uncompleted scheduled events has been reached (100). MaxPinsInChannelReached Maximum number of pins reached for the channel (50). MaxReactionsReached Maximum number of reactions reached (20). MaxRecipientsReached Maximum number of recipients reached. MaxServerCategoriesReached Maximum number of server categories reached (5). MaxServerMembersReached Maximum number of server members reached. MaxStickersReached Maximum number of stickers reached. MaxWebhooksReached Maximum number of webhooks reached (10). MessageAlreadyCrossposted This message has already been crossposted. MessageCanOnlyBePinnedInSameChannel A message and only be pinned to the channel it was went in. MessageTooOldToBulkDelete A message provided was too old to bulk delete. MissingAccess Missing access. MissingOAuth2Scope You are missing a required OAuth2 scope. MissingPermission You lack permissions to perform that action. MissingPermissionToSendSticker You do not have permission to send this sticker. NoBotsAllowed Bots cannot use this endpoint. NoteTooLong Note was too long. NoUserWithTag No user with that tag exists. OAuthApplicationDoesNotHaveBot OAuth2 application does not have a bot. OAuthApplicationLimitReached OAuth2 application limit reached. OpeningDMsTooFast You are opening direct messages too fast. OwnerOnly Only the owner of this account can perform that action. PaymentSourceRequiredForRedemption You need a payment source to redeem this gift. ReactionBlocked Reaction was blocked. RequestEntityTooLarge Request entity too large. Try sending something smaller in size. ResourceOverloaded API resource temporarily overloaded. Try again a little later. SendMessagesHasBeenTemporarilyDisabled Your ability to send messages has been temporarily disabled. ServerMonetizationRequired This server must have monetization enabled to perform this action. ServerNeedsMoreBoosts This server needs more boosts to perform this action. ServerUnavailableInYourLocation This server is not available in your location. ServerWriteRateLimitHit The write action you are performing on the server has hit the write rate limit. SlowMode This action cannot be performed due to slow mode. StageAlreadyOpen The stage channel is already open. StickerAnimationDurationTooLong The sticker animation is too long (currently max 5 seconds). StickerFrameCountExceeded The maximum number of frames in a sticker has been exceeded (currently 1000). StickerFramerateExceeded The maximum framerate for a sticker has been exceeded. StickerFramerateTooSmallOrTooLarge The framerate of the sticker is too small or too large. ThreadAlreadyCreated A thread has already been created for this message. ThreadLocked The thread has been locked. TooFewOrTooManyMessagesToDelete Provided too few or too many messages to delete. Must provide at least 2 and fewer than 100 messages to delete. TwoFactorRequired Two factor is required for this operation. Unauthorized Unauthorized. Provide a valid token and try again. Unknown An unknown error code. UnknownAccount Unknown account. UnknownApplication Unknown application. UnknownApplicationCommand Unknown application command. UnknownApplicationCommandPermissions Unknown application command permissions. UnknownBan Unknown ban. UnknownBranch Unknown branch. UnknownBuild Unknown build. UnknownChannel Unknown channel. UnknownDiscoverableServerCategory Unknown discoverable server category. UnknownEmoji Unknown emoji. UnknownEntitlement Unknown entitlement. UnknownGiftCode Unknown gift code. UnknownGuild Unknown guild. UnknownGuildMemberVerificationForm Unknown guild member verification form. UnknownGuildScheduledEvent Unknown guild scheduled event. UnknownGuildScheduledEventUser Unknown guild scheduled event user. UnknownGuildTemplate Unknown guild template. UnknownGuildWelcomeScreen Unknown guild welcome screen. UnknownIntegration Unknown integration. UnknownInteraction Unknown interaction. UnknownInvite Unknown invite. UnknownLobby Unknown lobby. UnknownMember Unknown member. UnknownMessage Unknown message. UnknownPermissionOverwrite Unknown permission overwrite. UnknownPremiumServerSubscriptionCooldown Unknown premium server subscription cooldown. UnknownProvider Unknown provider. UnknownRedistributable Unknown redistributable. UnknownRole Unknown role. UnknownSession Unknown session. UnknownSKU Unknown stock keeping unit. UnknownStageInstance Unknown stage instance. UnknownSticker Unknown sticker. UnknownStoreDirectoryLayout Unknown store directory layout. UnknownStoreListing Unknown store listing. UnknownStream Unknown stream. UnknownToken Unknown token. UnknownUser Unknown user. UnknownVoiceState Unknown voice state. UnknownWebhook Unknown webhook. UnknownWebhookService Unknown webhook service. UnverifiedAccount You need to verify your account in order to perform this action. UploadedLottiesCannotBeRasterized Uploaded Lottie files cannot contain rasterized images such as PNG or JPEG. UserBanned The user is banned from this guild. UserNotInVoice The target user is not connected to voice. WriteRateLimitHit The channel you are writing to has hit the write rate limit."
  },
  "api/Remora.Discord.API.Abstractions.Results.html": {
    "href": "api/Remora.Discord.API.Abstractions.Results.html",
    "title": "Namespace Remora.Discord.API.Abstractions.Results | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions.Results Enums DiscordError Enumerates the various Discord error codes."
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.html",
    "title": "Namespace Remora.Discord.API.Abstractions.VoiceGateway.Commands | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions.VoiceGateway.Commands Interfaces IVoiceGatewayCommand Acts as a marker interface for voice gateway commands. IVoiceHeartbeat Represents a heartbeat command. IVoiceIdentify Represents a request to identify with the voice gateway. IVoiceProtocolData Represents clientside connection information provided to the voice server. IVoiceResume Represents a request to resume an interrupted voice session. IVoiceSelectProtocol Represents a protocol selection request. IVoiceSpeakingCommand Represents a speaking update request."
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceGatewayCommand.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceGatewayCommand.html",
    "title": "Interface IVoiceGatewayCommand | Remora.Discord",
    "keywords": "Interface IVoiceGatewayCommand Acts as a marker interface for voice gateway commands. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceGatewayCommand : IVoiceGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceHeartbeat.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceHeartbeat.html",
    "title": "Interface IVoiceHeartbeat | Remora.Discord",
    "keywords": "Interface IVoiceHeartbeat Represents a heartbeat command. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceHeartbeat : IVoiceGatewayCommand, IVoiceGatewayPayloadData Properties | Improve this Doc View Source Nonce Gets the nonce used for this heartbeat. Declaration long Nonce { get; } Property Value Type Description Int64"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceIdentify.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceIdentify.html",
    "title": "Interface IVoiceIdentify | Remora.Discord",
    "keywords": "Interface IVoiceIdentify Represents a request to identify with the voice gateway. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceIdentify : IVoiceGatewayCommand, IVoiceGatewayPayloadData Properties | Improve this Doc View Source ServerID Gets the ID of the guild to identify with. Declaration Snowflake ServerID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source SessionID Gets the voice session ID to initialize. Declaration string SessionID { get; } Property Value Type Description String | Improve this Doc View Source Token Gets the authentication token of the identifying user. Declaration string Token { get; } Property Value Type Description String | Improve this Doc View Source UserID Gets the ID of the user that's trying to identify themselves. Declaration Snowflake UserID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceProtocolData.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceProtocolData.html",
    "title": "Interface IVoiceProtocolData | Remora.Discord",
    "keywords": "Interface IVoiceProtocolData Represents clientside connection information provided to the voice server. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceProtocolData : IVoiceGatewayCommand, IVoiceGatewayPayloadData Properties | Improve this Doc View Source Address Gets the public address on which we will be receiving voice data. Declaration string Address { get; } Property Value Type Description String | Improve this Doc View Source Mode Gets the requested encryption mode for our connection. Declaration string Mode { get; } Property Value Type Description String | Improve this Doc View Source Port Gets the port on which we will be receiving voice data. Declaration ushort Port { get; } Property Value Type Description UInt16"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceResume.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceResume.html",
    "title": "Interface IVoiceResume | Remora.Discord",
    "keywords": "Interface IVoiceResume Represents a request to resume an interrupted voice session. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceResume : IVoiceGatewayCommand, IVoiceGatewayPayloadData Properties | Improve this Doc View Source ServerID Gets the ID of the server to resume the connection to. Declaration Snowflake ServerID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source SessionID Gets the ID of the session to resume. Declaration string SessionID { get; } Property Value Type Description String | Improve this Doc View Source Token Gets the authentication token of the user that is resuming their session. Declaration string Token { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceSelectProtocol.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceSelectProtocol.html",
    "title": "Interface IVoiceSelectProtocol | Remora.Discord",
    "keywords": "Interface IVoiceSelectProtocol Represents a protocol selection request. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceSelectProtocol : IVoiceGatewayCommand, IVoiceGatewayPayloadData Properties | Improve this Doc View Source Data Gets the connection data of the client. Declaration IVoiceProtocolData Data { get; } Property Value Type Description IVoiceProtocolData | Improve this Doc View Source Protocol Gets the name of the IP protocol the client wishes to communicate with. This should always be \"udp\". Declaration string Protocol { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceSpeakingCommand.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Commands.IVoiceSpeakingCommand.html",
    "title": "Interface IVoiceSpeakingCommand | Remora.Discord",
    "keywords": "Interface IVoiceSpeakingCommand Represents a speaking update request. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Commands Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceSpeakingCommand : IVoiceGatewayCommand, IVoiceGatewayPayloadData Properties | Improve this Doc View Source Delay Gets a defunct, but required field. Set to a value of 0 when sending. Declaration int Delay { get; } Property Value Type Description Int32 | Improve this Doc View Source Speaking Gets the speaker flags. Declaration SpeakingFlags Speaking { get; } Property Value Type Description SpeakingFlags | Improve this Doc View Source SSRC Gets the synchronization source ID that this speech event is associated with. Declaration uint SSRC { get; } Property Value Type Description UInt32"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.html",
    "title": "Namespace Remora.Discord.API.Abstractions.VoiceGateway.Events | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions.VoiceGateway.Events Interfaces IVoiceClientDisconnect Represents data that a client disconnected. IVoiceGatewayEvent Acts as a marker interface for voice gateway events. IVoiceHeartbeatAcknowledge Represents a heartbeat acknowledgement. IVoiceHello Represents the greeting event sent by the voice gateway after connection. IVoiceReady Indicates a successful authentication with the voice gateway, and provides initial connection information. IVoiceResumed Represents an acknowledged session resume. IVoiceSessionDescription Represents a session descriptor with information used to establish an encrypted voice connection. IVoiceSpeakingEvent Represents data that a client is speaking."
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceClientDisconnect.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceClientDisconnect.html",
    "title": "Interface IVoiceClientDisconnect | Remora.Discord",
    "keywords": "Interface IVoiceClientDisconnect Represents data that a client disconnected. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Events Assembly : Remora.Discord.Unstable.dll Syntax [PublicAPI] public interface IVoiceClientDisconnect : IVoiceGatewayEvent, IVoiceGatewayPayloadData Properties | Improve this Doc View Source UserID Gets the ID of the user who disconnected. Declaration Snowflake UserID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceGatewayEvent.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceGatewayEvent.html",
    "title": "Interface IVoiceGatewayEvent | Remora.Discord",
    "keywords": "Interface IVoiceGatewayEvent Acts as a marker interface for voice gateway events. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceGatewayEvent : IVoiceGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceHeartbeatAcknowledge.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceHeartbeatAcknowledge.html",
    "title": "Interface IVoiceHeartbeatAcknowledge | Remora.Discord",
    "keywords": "Interface IVoiceHeartbeatAcknowledge Represents a heartbeat acknowledgement. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceHeartbeatAcknowledge : IVoiceGatewayEvent, IVoiceGatewayPayloadData Properties | Improve this Doc View Source Nonce Gets the nonce used for the received heartbeat. Declaration long Nonce { get; } Property Value Type Description Int64"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceHello.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceHello.html",
    "title": "Interface IVoiceHello | Remora.Discord",
    "keywords": "Interface IVoiceHello Represents the greeting event sent by the voice gateway after connection. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceHello : IVoiceGatewayEvent, IVoiceGatewayPayloadData Properties | Improve this Doc View Source HeartbeatInterval Gets the heartbeat interval (in milliseconds). Declaration TimeSpan HeartbeatInterval { get; } Property Value Type Description TimeSpan"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceReady.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceReady.html",
    "title": "Interface IVoiceReady | Remora.Discord",
    "keywords": "Interface IVoiceReady Indicates a successful authentication with the voice gateway, and provides initial connection information. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceReady : IVoiceGatewayEvent, IVoiceGatewayPayloadData Properties | Improve this Doc View Source IP Gets the IP that the voice server is available on. Declaration IPAddress IP { get; } Property Value Type Description IPAddress | Improve this Doc View Source Modes Gets the encryption modes the server supports. Declaration IReadOnlyList<string> Modes { get; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source Port Gets the UDP port that the voice server is available on. Declaration ushort Port { get; } Property Value Type Description UInt16 | Improve this Doc View Source SSRC Gets the synchronization source ID. This acts as an identifier for this voice connection. Declaration uint SSRC { get; } Property Value Type Description UInt32"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceResumed.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceResumed.html",
    "title": "Interface IVoiceResumed | Remora.Discord",
    "keywords": "Interface IVoiceResumed Represents an acknowledged session resume. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceResumed : IVoiceGatewayEvent, IVoiceGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceSessionDescription.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceSessionDescription.html",
    "title": "Interface IVoiceSessionDescription | Remora.Discord",
    "keywords": "Interface IVoiceSessionDescription Represents a session descriptor with information used to establish an encrypted voice connection. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Events Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceSessionDescription : IVoiceGatewayEvent, IVoiceGatewayPayloadData Properties | Improve this Doc View Source Mode Gets the encryption mode that the server accepted for the session. Declaration string Mode { get; } Property Value Type Description String | Improve this Doc View Source SecretKey Gets the shared secret session key. Declaration IReadOnlyList<byte> SecretKey { get; } Property Value Type Description IReadOnlyList < Byte >"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceSpeakingEvent.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.Events.IVoiceSpeakingEvent.html",
    "title": "Interface IVoiceSpeakingEvent | Remora.Discord",
    "keywords": "Interface IVoiceSpeakingEvent Represents data that a client is speaking. Namespace : Remora.Discord.API.Abstractions.VoiceGateway.Events Assembly : Remora.Discord.Unstable.dll Syntax [PublicAPI] public interface IVoiceSpeakingEvent : IVoiceGatewayEvent, IVoiceGatewayPayloadData Properties | Improve this Doc View Source Speaking Gets the speaker flags. Declaration SpeakingFlags Speaking { get; } Property Value Type Description SpeakingFlags | Improve this Doc View Source SSRC Gets the synchronization source ID that this speech event is associated with. Declaration uint SSRC { get; } Property Value Type Description UInt32 | Improve this Doc View Source UserID Gets the ID of the user who speaking. Declaration Snowflake UserID { get; } Property Value Type Description Remora.Rest.Core.Snowflake"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.html",
    "title": "Namespace Remora.Discord.API.Abstractions.VoiceGateway | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Abstractions.VoiceGateway Interfaces IVoiceGatewayPayloadData Represents a marker interface for voice gateway payload data. IVoicePayload Marker interface for voice payload objects. IVoicePayload<TData> Marker interface for payload classes. Enums SpeakingFlags Enumerates various speaker flags to indicate how voice data is being sent. VoiceGatewayCloseStatus Enumerates various close status codes for the voice gateway. VoiceOperationCode Enumerates operation codes sent to or received by the Discord voice gateway in payloads."
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.IVoiceGatewayPayloadData.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.IVoiceGatewayPayloadData.html",
    "title": "Interface IVoiceGatewayPayloadData | Remora.Discord",
    "keywords": "Interface IVoiceGatewayPayloadData Represents a marker interface for voice gateway payload data. Namespace : Remora.Discord.API.Abstractions.VoiceGateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoiceGatewayPayloadData"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.IVoicePayload.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.IVoicePayload.html",
    "title": "Interface IVoicePayload | Remora.Discord",
    "keywords": "Interface IVoicePayload Marker interface for voice payload objects. Namespace : Remora.Discord.API.Abstractions.VoiceGateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoicePayload Properties | Improve this Doc View Source OperationCode Gets the operation code of the payload. Declaration VoiceOperationCode OperationCode { get; } Property Value Type Description VoiceOperationCode"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.IVoicePayload-1.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.IVoicePayload-1.html",
    "title": "Interface IVoicePayload<TData> | Remora.Discord",
    "keywords": "Interface IVoicePayload<TData> Marker interface for payload classes. Inherited Members IVoicePayload.OperationCode Namespace : Remora.Discord.API.Abstractions.VoiceGateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public interface IVoicePayload<out TData> : IVoicePayload where TData : IVoiceGatewayPayloadData Type Parameters Name Description TData The data contained in the payload. Properties | Improve this Doc View Source Data Gets the data contained in the payload. Declaration TData Data { get; } Property Value Type Description TData"
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.SpeakingFlags.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.SpeakingFlags.html",
    "title": "Enum SpeakingFlags | Remora.Discord",
    "keywords": "Enum SpeakingFlags Enumerates various speaker flags to indicate how voice data is being sent. Namespace : Remora.Discord.API.Abstractions.VoiceGateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] [Flags] public enum SpeakingFlags Fields Name Description Microphone Normal transmission of voice audio. None No transmission of audio. Priority Priority speech. Audio of other speakers will be lowered. SoundShare Transmission of context audio for video. No speaking indicator will be shown."
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.VoiceGatewayCloseStatus.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.VoiceGatewayCloseStatus.html",
    "title": "Enum VoiceGatewayCloseStatus | Remora.Discord",
    "keywords": "Enum VoiceGatewayCloseStatus Enumerates various close status codes for the voice gateway. Namespace : Remora.Discord.API.Abstractions.VoiceGateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum VoiceGatewayCloseStatus Fields Name Description AlreadyAuthenticated You sent more than one identify payload. AuthenticationFailed The token you sent in your identify payload is invalid. Disconnected The channel was deleted, you were kicked, or the main gateway session was dropped. FailedToDecodePayload You sent an invalid payload when identifying. NotAuthenticated You sent a payload before authenticating with the gateway. RateLimited Your session has been rate limited. ServerNotFound We can't find the server you're trying to connect to. SessionNoLongerValid Your session is no longer valid. SessionTimeout Your session timed out. UnknownEncryptionMode We didn't recognize your encryption. UnknownOperationCode You sent an invalid operation code. UnknownProtocol We didn't recognize the protocol you sent. VoiceServerCrash The voice server crashed."
  },
  "api/Remora.Discord.API.Abstractions.VoiceGateway.VoiceOperationCode.html": {
    "href": "api/Remora.Discord.API.Abstractions.VoiceGateway.VoiceOperationCode.html",
    "title": "Enum VoiceOperationCode | Remora.Discord",
    "keywords": "Enum VoiceOperationCode Enumerates operation codes sent to or received by the Discord voice gateway in payloads. Namespace : Remora.Discord.API.Abstractions.VoiceGateway Assembly : Remora.Discord.API.Abstractions.dll Syntax [PublicAPI] public enum VoiceOperationCode Fields Name Description ClientDisconnect A client has disconnected from the voice channel. Heartbeat Keep the websocket connection alive. HeartbeatAcknowledgement Acknowledge a received heartbeat. Hello Provided initial connection information. Identify Begin a voice websocket connection. Ready Complete the websocket handshake. Resume Resume a connection. Resumed Acknowledge a successful session resume. SelectProtocol Select the voice protocol. SessionDescription Describe the session. Speaking Indicate which users are speaking."
  },
  "api/Remora.Discord.API.CDN.html": {
    "href": "api/Remora.Discord.API.CDN.html",
    "title": "Class CDN | Remora.Discord",
    "keywords": "Class CDN Provides various helper methods for accessing Discord's CDN. Inheritance Object CDN Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public static class CDN Methods | Improve this Doc View Source GetAchievementIconUrl(IApplication, Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given achievement's icon. Declaration public static Result<Uri> GetAchievementIconUrl(IApplication application, Snowflake achievementID, IImageHash iconHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IApplication application The application. Remora.Rest.Core.Snowflake achievementID The ID of the achievement. IImageHash iconHash The image hash of the icon. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetAchievementIconUrl(Snowflake, Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given achievement's icon. Declaration public static Result<Uri> GetAchievementIconUrl(Snowflake applicationID, Snowflake achievementID, IImageHash iconHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. Remora.Rest.Core.Snowflake achievementID The ID of the achievement. IImageHash iconHash The image hash of the achievement's icon. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetApplicationAssetUrl(IApplication, String, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given application's given asset. Declaration public static Result<Uri> GetApplicationAssetUrl(IApplication application, string assetID, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IApplication application The application. String assetID The asset ID. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetApplicationAssetUrl(Snowflake, String, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given application's given asset. Declaration public static Result<Uri> GetApplicationAssetUrl(Snowflake applicationID, string assetID, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. String assetID The asset ID. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetApplicationCoverUrl(IApplication, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given application's cover. Declaration public static Result<Uri> GetApplicationCoverUrl(IApplication application, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IApplication application The application. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetApplicationCoverUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given application's cover. Declaration public static Result<Uri> GetApplicationCoverUrl(Snowflake applicationID, IImageHash coverHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. IImageHash coverHash The image hash of the application's cover. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetApplicationIconUrl(IApplication, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given application's icon. Declaration public static Result<Uri> GetApplicationIconUrl(IApplication application, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IApplication application The application. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetApplicationIconUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given application's icon. Declaration public static Result<Uri> GetApplicationIconUrl(Snowflake applicationID, IImageHash iconHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. IImageHash iconHash The image hash of the application's icon. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetDefaultUserAvatarUrl(IUser, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given user's default avatar. Declaration public static Result<Uri> GetDefaultUserAvatarUrl(IUser user, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IUser user The user. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetDefaultUserAvatarUrl(UInt16, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given user's default avatar. Declaration public static Result<Uri> GetDefaultUserAvatarUrl(ushort userDiscriminator, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description UInt16 userDiscriminator The user's discriminator. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetEmojiUrl(IEmoji, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given emoji. Declaration public static Result<Uri> GetEmojiUrl(IEmoji emoji, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IEmoji emoji The emoji. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. Remarks If the emoji is an animated emoji, the GIF variant of the image is preferred. | Improve this Doc View Source GetEmojiUrl(Snowflake, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given emoji. Declaration public static Result<Uri> GetEmojiUrl(Snowflake emojiID, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake emojiID The ID of the emoji. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildBannerUrl(IGuild, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild's banner. Declaration public static Result<Uri> GetGuildBannerUrl(IGuild guild, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IGuild guild The guild. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildBannerUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild's banner. Declaration public static Result<Uri> GetGuildBannerUrl(Snowflake guildID, IImageHash bannerHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. IImageHash bannerHash The image hash of the guild's banner. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildDiscoverySplashUrl(IGuild, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild's discovery splash. Declaration public static Result<Uri> GetGuildDiscoverySplashUrl(IGuild guild, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IGuild guild The guild. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildDiscoverySplashUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild's discovery splash. Declaration public static Result<Uri> GetGuildDiscoverySplashUrl(Snowflake guildID, IImageHash discoverySplashHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. IImageHash discoverySplashHash The image hash of the guild's discovery splash. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildIconUrl(IGuild, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild's icon. Declaration public static Result<Uri> GetGuildIconUrl(IGuild guild, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IGuild guild The guild. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildIconUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild's icon. Declaration public static Result<Uri> GetGuildIconUrl(Snowflake guildID, IImageHash iconHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. IImageHash iconHash The image hash of the guild's icon. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildMemberAvatarUrl(Snowflake, IGuildMember, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild member's avatar. Declaration public static Result<Uri> GetGuildMemberAvatarUrl(Snowflake guildID, IGuildMember member, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The guild to retrieve the member avatar of. IGuildMember member The guild member. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildMemberAvatarUrl(Snowflake, Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild member's avatar. Declaration public static Result<Uri> GetGuildMemberAvatarUrl(Snowflake guildID, Snowflake userID, IImageHash avatarHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The guild to retrieve the member avatar of. Remora.Rest.Core.Snowflake userID The user ID of the guild member. IImageHash avatarHash The image hash of the guild member's avatar. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildMemberBannerUrl(Snowflake, Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild member's banner. Declaration public static Result<Uri> GetGuildMemberBannerUrl(Snowflake guildID, Snowflake userID, IImageHash bannerHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. IImageHash bannerHash The banner hash. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildScheduledEventCoverUrl(IGuildScheduledEvent, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given scheduled event's banner. Declaration public static Result<Uri> GetGuildScheduledEventCoverUrl(IGuildScheduledEvent scheduledEvent, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IGuildScheduledEvent scheduledEvent The role. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildScheduledEventCoverUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given scheduled event's banner. Declaration public static Result<Uri> GetGuildScheduledEventCoverUrl(Snowflake eventID, IImageHash bannerHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake eventID The ID of the event. IImageHash bannerHash The banner hash. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildSplashUrl(IGuild, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild's splash. Declaration public static Result<Uri> GetGuildSplashUrl(IGuild guild, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IGuild guild The guild. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetGuildSplashUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given guild's splash. Declaration public static Result<Uri> GetGuildSplashUrl(Snowflake guildID, IImageHash splashHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. IImageHash splashHash The image hash of the guild's splash. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetRoleIconUrl(IRole, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given role's icon. Declaration public static Result<Uri> GetRoleIconUrl(IRole role, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IRole role The role. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetRoleIconUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given role's icon. Declaration public static Result<Uri> GetRoleIconUrl(Snowflake roleID, IImageHash iconHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake roleID The ID of the role. IImageHash iconHash The image hash. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetStickerPackBannerUrl(IStickerPack, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given sticker pack's banner. Declaration public static Result<Uri> GetStickerPackBannerUrl(IStickerPack stickerPack, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IStickerPack stickerPack The sticker pack. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetStickerPackBannerUrl(Snowflake, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given sticker pack's banner. Declaration public static Result<Uri> GetStickerPackBannerUrl(Snowflake bannerAssetId, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake bannerAssetId The asset ID of the sticker pack. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetStickerUrl(ISticker, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given sticker. Declaration public static Result<Uri> GetStickerUrl(ISticker sticker, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description ISticker sticker The sticker pack. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetStickerUrl(Snowflake, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given sticker. Declaration public static Result<Uri> GetStickerUrl(Snowflake stickerId, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake stickerId The ID of the sticker. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetTeamIconUrl(ITeam, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given team's icon. Declaration public static Result<Uri> GetTeamIconUrl(ITeam team, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description ITeam team The team. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetTeamIconUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given team's icon. Declaration public static Result<Uri> GetTeamIconUrl(Snowflake teamID, IImageHash iconHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake teamID The ID of the team. IImageHash iconHash The image hash of the team's icon. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetUserAvatarUrl(IUser, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given user's avatar. Declaration public static Result<Uri> GetUserAvatarUrl(IUser user, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IUser user The user. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetUserAvatarUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given user's avatar. Declaration public static Result<Uri> GetUserAvatarUrl(Snowflake userID, IImageHash avatarHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake userID The ID of the team. IImageHash avatarHash The image hash of the user's avatar. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetUserBannerUrl(IUser, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given user's banner. Declaration public static Result<Uri> GetUserBannerUrl(IUser user, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description IUser user The user. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded. | Improve this Doc View Source GetUserBannerUrl(Snowflake, IImageHash, Optional<CDNImageFormat>, Optional<UInt16>) Gets the CDN URI of the given user's banner. Declaration public static Result<Uri> GetUserBannerUrl(Snowflake userID, IImageHash bannerHash, Optional<CDNImageFormat> imageFormat = default(Optional<CDNImageFormat>), Optional<ushort> imageSize = default(Optional<ushort>)) Parameters Type Name Description Remora.Rest.Core.Snowflake userID The ID of the user. IImageHash bannerHash The image hash of the user's banner. Remora.Rest.Core.Optional < CDNImageFormat > imageFormat The requested image format. Remora.Rest.Core.Optional < UInt16 > imageSize The requested image size. May be any power of two between 16 and 4096. Returns Type Description Remora.Results.Result < Uri > A result which may or may not have succeeded."
  },
  "api/Remora.Discord.API.CDNImageFormat.html": {
    "href": "api/Remora.Discord.API.CDNImageFormat.html",
    "title": "Enum CDNImageFormat | Remora.Discord",
    "keywords": "Enum CDNImageFormat Enumerates the image formats supported by the CDN. Namespace : Remora.Discord.API Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public enum CDNImageFormat Fields Name Description GIF Requests a GIF image. JPEG Requests a JPEG image. Lottie Requests a JSON-formatted image description. PNG Requests a PNG image. WebP Requests a WebP image. Extension Methods CDNImageFormatExtensions.ToFileExtension()"
  },
  "api/Remora.Discord.API.Constants.html": {
    "href": "api/Remora.Discord.API.Constants.html",
    "title": "Class Constants | Remora.Discord",
    "keywords": "Class Constants Holds various constants. Inheritance Object Constants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public static class Constants Properties | Improve this Doc View Source CDNBaseURL Gets the base CDN URL. Declaration public static Uri CDNBaseURL { get; } Property Value Type Description Uri | Improve this Doc View Source DiscordEpoch Gets the Discord epoch, used for timestamp offsetting. Declaration public static ulong DiscordEpoch { get; } Property Value Type Description UInt64"
  },
  "api/Remora.Discord.API.DiscordSnowflake.html": {
    "href": "api/Remora.Discord.API.DiscordSnowflake.html",
    "title": "Class DiscordSnowflake | Remora.Discord",
    "keywords": "Class DiscordSnowflake Contains methods for initializing a Remora.Rest.Core.Snowflake with the DiscordEpoch . Inheritance Object DiscordSnowflake Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API Assembly : Remora.Discord.API.dll Syntax public static class DiscordSnowflake Methods | Improve this Doc View Source New(UInt64) Initializes a new instance of a Snowflake with the Discord epoch. Declaration public static Snowflake New(ulong value) Parameters Type Name Description UInt64 value The snowflake value. Returns Type Description Remora.Rest.Core.Snowflake A snowflake. | Improve this Doc View Source TryParse(String, out Nullable<Snowflake>) Declaration public static bool TryParse(string value, out Snowflake? result) Parameters Type Name Description String value Nullable < Remora.Rest.Core.Snowflake > result Returns Type Description Boolean"
  },
  "api/Remora.Discord.API.Errors.html": {
    "href": "api/Remora.Discord.API.Errors.html",
    "title": "Namespace Remora.Discord.API.Errors | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Errors Classes ImageNotFoundError Represents an error produced by requesting an image that can't be found. ImageSizeNotPowerOfTwoError Represents an error produced by requesting an image size that's not a power of two. ImageSizeOutOfRangeError Represents an error produced by requesting an image size outside of allowed parameters. UnsupportedArgumentError Represents an error produced by an unsupported argument. UnsupportedImageFormatError Represents an error produced by requesting an unsupported image format."
  },
  "api/Remora.Discord.API.Errors.ImageNotFoundError.html": {
    "href": "api/Remora.Discord.API.Errors.ImageNotFoundError.html",
    "title": "Class ImageNotFoundError | Remora.Discord",
    "keywords": "Class ImageNotFoundError Represents an error produced by requesting an image that can't be found. Inheritance Object Remora.Results.ResultError ImageNotFoundError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < ImageNotFoundError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.API.Errors Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ImageNotFoundError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<ImageNotFoundError> Constructors | Improve this Doc View Source ImageNotFoundError() Represents an error produced by requesting an image that can't be found. Declaration public ImageNotFoundError() Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Errors.ImageSizeNotPowerOfTwoError.html": {
    "href": "api/Remora.Discord.API.Errors.ImageSizeNotPowerOfTwoError.html",
    "title": "Class ImageSizeNotPowerOfTwoError | Remora.Discord",
    "keywords": "Class ImageSizeNotPowerOfTwoError Represents an error produced by requesting an image size that's not a power of two. Inheritance Object Remora.Results.ResultError ImageSizeNotPowerOfTwoError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < ImageSizeNotPowerOfTwoError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.API.Errors Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ImageSizeNotPowerOfTwoError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<ImageSizeNotPowerOfTwoError> Constructors | Improve this Doc View Source ImageSizeNotPowerOfTwoError() Represents an error produced by requesting an image size that's not a power of two. Declaration public ImageSizeNotPowerOfTwoError() Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Errors.ImageSizeOutOfRangeError.html": {
    "href": "api/Remora.Discord.API.Errors.ImageSizeOutOfRangeError.html",
    "title": "Class ImageSizeOutOfRangeError | Remora.Discord",
    "keywords": "Class ImageSizeOutOfRangeError Represents an error produced by requesting an image size outside of allowed parameters. Inheritance Object Remora.Results.ResultError ImageSizeOutOfRangeError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < ImageSizeOutOfRangeError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.API.Errors Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ImageSizeOutOfRangeError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<ImageSizeOutOfRangeError> Constructors | Improve this Doc View Source ImageSizeOutOfRangeError() Represents an error produced by requesting an image size outside of allowed parameters. Declaration public ImageSizeOutOfRangeError() Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Errors.UnsupportedArgumentError.html": {
    "href": "api/Remora.Discord.API.Errors.UnsupportedArgumentError.html",
    "title": "Class UnsupportedArgumentError | Remora.Discord",
    "keywords": "Class UnsupportedArgumentError Represents an error produced by an unsupported argument. Inheritance Object Remora.Results.ResultError UnsupportedArgumentError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < UnsupportedArgumentError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.API.Errors Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class UnsupportedArgumentError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<UnsupportedArgumentError> Constructors | Improve this Doc View Source UnsupportedArgumentError(String) Represents an error produced by an unsupported argument. Declaration public UnsupportedArgumentError(string Message) Parameters Type Name Description String Message Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Errors.UnsupportedImageFormatError.html": {
    "href": "api/Remora.Discord.API.Errors.UnsupportedImageFormatError.html",
    "title": "Class UnsupportedImageFormatError | Remora.Discord",
    "keywords": "Class UnsupportedImageFormatError Represents an error produced by requesting an unsupported image format. Inheritance Object Remora.Results.ResultError UnsupportedImageFormatError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < UnsupportedImageFormatError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.API.Errors Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class UnsupportedImageFormatError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<UnsupportedImageFormatError> Constructors | Improve this Doc View Source UnsupportedImageFormatError(IReadOnlyList<CDNImageFormat>) Represents an error produced by requesting an unsupported image format. Declaration public UnsupportedImageFormatError(IReadOnlyList<CDNImageFormat> SupportedFormats) Parameters Type Name Description IReadOnlyList < CDNImageFormat > SupportedFormats Properties | Improve this Doc View Source SupportedFormats Declaration public IReadOnlyList<CDNImageFormat> SupportedFormats { get; set; } Property Value Type Description IReadOnlyList < CDNImageFormat > Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.API.EventPayload-1.html": {
    "href": "api/Remora.Discord.API.EventPayload-1.html",
    "title": "Class EventPayload<TEventData> | Remora.Discord",
    "keywords": "Class EventPayload<TEventData> Represents a Discord event payload. Inheritance Object Payload <TEventData> EventPayload<TEventData> Implements IPayload <TEventData> IEquatable < Payload <TEventData>> IEventPayload IPayload IEquatable < EventPayload <TEventData>> Inherited Members Payload<TEventData>.Data Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class EventPayload<TEventData> : Payload<TEventData>, IPayload<TEventData>, IEquatable<Payload<TEventData>>, IEventPayload, IPayload, IEquatable<EventPayload<TEventData>> where TEventData : IGatewayEvent Type Parameters Name Description TEventData The event data. Constructors | Improve this Doc View Source EventPayload(String, Int32, OperationCode, TEventData) Initializes a new instance of the EventPayload<TEventData> class. Declaration public EventPayload(string eventName, int sequenceNumber, OperationCode operationCode, TEventData data) Parameters Type Name Description String eventName The name of the event. Int32 sequenceNumber The sequence number. OperationCode operationCode The operation code for the event. TEventData data The event data. Properties | Improve this Doc View Source EventName Gets the name of the event. Declaration public string EventName { get; } Property Value Type Description String | Improve this Doc View Source OperationCode Gets the operation code of the event. Declaration public OperationCode OperationCode { get; } Property Value Type Description OperationCode | Improve this Doc View Source SequenceNumber Gets the sequence number of the event. Declaration public int SequenceNumber { get; } Property Value Type Description Int32 Implements IPayload<TData> System.IEquatable<T> IEventPayload IPayload System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Extensions.AutoArchiveDurationExtensions.html": {
    "href": "api/Remora.Discord.API.Extensions.AutoArchiveDurationExtensions.html",
    "title": "Class AutoArchiveDurationExtensions | Remora.Discord",
    "keywords": "Class AutoArchiveDurationExtensions Defines extension methods for the AutoArchiveDuration enumeration. Inheritance Object AutoArchiveDurationExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Extensions Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public static class AutoArchiveDurationExtensions Methods | Improve this Doc View Source ToTimeSpan(AutoArchiveDuration) Converts the archival duration to a TimeSpan . Declaration public static TimeSpan ToTimeSpan(this AutoArchiveDuration duration) Parameters Type Name Description AutoArchiveDuration duration The archival duration. Returns Type Description TimeSpan The equivalent time span."
  },
  "api/Remora.Discord.API.Extensions.CDNImageFormatExtensions.html": {
    "href": "api/Remora.Discord.API.Extensions.CDNImageFormatExtensions.html",
    "title": "Class CDNImageFormatExtensions | Remora.Discord",
    "keywords": "Class CDNImageFormatExtensions Defines extension methods for the CDNImageFormat enumeration. Inheritance Object CDNImageFormatExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Extensions Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public static class CDNImageFormatExtensions Methods | Improve this Doc View Source ToFileExtension(CDNImageFormat) Maps the image format to a file extension. Declaration public static string ToFileExtension(this CDNImageFormat format) Parameters Type Name Description CDNImageFormat format The format. Returns Type Description String The extension."
  },
  "api/Remora.Discord.API.Extensions.html": {
    "href": "api/Remora.Discord.API.Extensions.html",
    "title": "Namespace Remora.Discord.API.Extensions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Extensions Classes AutoArchiveDurationExtensions Defines extension methods for the AutoArchiveDuration enumeration. CDNImageFormatExtensions Defines extension methods for the CDNImageFormat enumeration. ServiceCollectionExtensions Defines various extension methods to the IServiceCollection class."
  },
  "api/Remora.Discord.API.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Remora.Discord.API.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Remora.Discord",
    "keywords": "Class ServiceCollectionExtensions Defines various extension methods to the IServiceCollection class. Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Extensions Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public static class ServiceCollectionExtensions Methods | Improve this Doc View Source ConfigureDiscordJsonConverters(IServiceCollection, String, Boolean) Configures Discord-specific JSON converters. Declaration public static IServiceCollection ConfigureDiscordJsonConverters(this IServiceCollection serviceCollection, string optionsName = \"Discord\", bool allowUnknownEvents = true) Parameters Type Name Description IServiceCollection serviceCollection The service collection. String optionsName The name of the serializer options, if any. Boolean allowUnknownEvents Whether the API will deserialize unknown events. Returns Type Description IServiceCollection The service collection, with the services."
  },
  "api/Remora.Discord.API.Gateway.Bidirectional.Heartbeat.html": {
    "href": "api/Remora.Discord.API.Gateway.Bidirectional.Heartbeat.html",
    "title": "Class Heartbeat | Remora.Discord",
    "keywords": "Class Heartbeat Represents a heartbeat command to or from Discord. Inheritance Object Heartbeat Implements IHeartbeat IGatewayCommand IGatewayEvent IGatewayPayloadData IEquatable < Heartbeat > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Bidirectional Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Heartbeat : IHeartbeat, IGatewayCommand, IGatewayEvent, IGatewayPayloadData, IEquatable<Heartbeat> Constructors | Improve this Doc View Source Heartbeat(Nullable<Int64>) Represents a heartbeat command to or from Discord. Declaration public Heartbeat(long? LastSequenceNumber) Parameters Type Name Description Nullable < Int64 > LastSequenceNumber Properties | Improve this Doc View Source LastSequenceNumber Declaration public long? LastSequenceNumber { get; set; } Property Value Type Description Nullable < Int64 > Implements IHeartbeat IGatewayCommand IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Bidirectional.HeartbeatAcknowledge.html": {
    "href": "api/Remora.Discord.API.Gateway.Bidirectional.HeartbeatAcknowledge.html",
    "title": "Class HeartbeatAcknowledge | Remora.Discord",
    "keywords": "Class HeartbeatAcknowledge Represents a heartbeat acknowledgement. Inheritance Object HeartbeatAcknowledge Implements IHeartbeatAcknowledge IGatewayEvent IGatewayCommand IGatewayPayloadData IEquatable < HeartbeatAcknowledge > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Bidirectional Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class HeartbeatAcknowledge : IHeartbeatAcknowledge, IGatewayEvent, IGatewayCommand, IGatewayPayloadData, IEquatable<HeartbeatAcknowledge> Implements IHeartbeatAcknowledge IGatewayEvent IGatewayCommand IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Bidirectional.html": {
    "href": "api/Remora.Discord.API.Gateway.Bidirectional.html",
    "title": "Namespace Remora.Discord.API.Gateway.Bidirectional | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Gateway.Bidirectional Classes Heartbeat Represents a heartbeat command to or from Discord. HeartbeatAcknowledge Represents a heartbeat acknowledgement."
  },
  "api/Remora.Discord.API.Gateway.Commands.ConnectionProperties.html": {
    "href": "api/Remora.Discord.API.Gateway.Commands.ConnectionProperties.html",
    "title": "Class ConnectionProperties | Remora.Discord",
    "keywords": "Class ConnectionProperties Represents a set of connection properties sent to the Discord gateway. Inheritance Object ConnectionProperties Implements IConnectionProperties IEquatable < ConnectionProperties > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ConnectionProperties : IConnectionProperties, IEquatable<ConnectionProperties> Constructors | Improve this Doc View Source ConnectionProperties(String) Initializes a new instance of the ConnectionProperties class. Declaration public ConnectionProperties(string libraryName) Parameters Type Name Description String libraryName The name of the library. | Improve this Doc View Source ConnectionProperties(String, String, String) Represents a set of connection properties sent to the Discord gateway. Declaration public ConnectionProperties(string OperatingSystem, string Browser, string Device) Parameters Type Name Description String OperatingSystem String Browser String Device Properties | Improve this Doc View Source Browser Declaration public string Browser { get; set; } Property Value Type Description String | Improve this Doc View Source Device Declaration public string Device { get; set; } Property Value Type Description String | Improve this Doc View Source OperatingSystem Declaration public string OperatingSystem { get; set; } Property Value Type Description String Implements IConnectionProperties System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Commands.html": {
    "href": "api/Remora.Discord.API.Gateway.Commands.html",
    "title": "Namespace Remora.Discord.API.Gateway.Commands | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Gateway.Commands Classes ConnectionProperties Represents a set of connection properties sent to the Discord gateway. Identify Represents an identification command sent to the Discord gateway. RequestGuildMembers Represents a command used to request guild members. Resume Represents a resume command. ShardIdentification Represents an identification set for a sharded connection. UpdatePresence Represents a command to update the presence of a user. UpdateVoiceState Represents a command to update the voice state of the client."
  },
  "api/Remora.Discord.API.Gateway.Commands.Identify.html": {
    "href": "api/Remora.Discord.API.Gateway.Commands.Identify.html",
    "title": "Class Identify | Remora.Discord",
    "keywords": "Class Identify Represents an identification command sent to the Discord gateway. Inheritance Object Identify Implements IIdentify IGatewayCommand IGatewayPayloadData IEquatable < Identify > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Identify : IIdentify, IGatewayCommand, IGatewayPayloadData, IEquatable<Identify> Constructors | Improve this Doc View Source Identify(String, IConnectionProperties, Optional<Boolean>, Optional<Byte>, Optional<IShardIdentification>, Optional<IUpdatePresence>, GatewayIntents) Represents an identification command sent to the Discord gateway. Declaration public Identify(string Token, IConnectionProperties Properties, Optional<bool> Compress = default(Optional<bool>), Optional<byte> LargeThreshold = default(Optional<byte>), Optional<IShardIdentification> Shard = default(Optional<IShardIdentification>), Optional<IUpdatePresence> Presence = default(Optional<IUpdatePresence>), GatewayIntents Intents = (GatewayIntents)0) Parameters Type Name Description String Token IConnectionProperties Properties Remora.Rest.Core.Optional < Boolean > Compress Remora.Rest.Core.Optional < Byte > LargeThreshold Remora.Rest.Core.Optional < IShardIdentification > Shard Remora.Rest.Core.Optional < IUpdatePresence > Presence GatewayIntents Intents Properties | Improve this Doc View Source Compress Declaration public Optional<bool> Compress { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Intents Declaration public GatewayIntents Intents { get; set; } Property Value Type Description GatewayIntents | Improve this Doc View Source LargeThreshold Declaration public Optional<byte> LargeThreshold { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Byte > | Improve this Doc View Source Presence Declaration public Optional<IUpdatePresence> Presence { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUpdatePresence > | Improve this Doc View Source Properties Declaration public IConnectionProperties Properties { get; set; } Property Value Type Description IConnectionProperties | Improve this Doc View Source Shard Declaration public Optional<IShardIdentification> Shard { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IShardIdentification > | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description String Implements IIdentify IGatewayCommand IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Commands.RequestGuildMembers.html": {
    "href": "api/Remora.Discord.API.Gateway.Commands.RequestGuildMembers.html",
    "title": "Class RequestGuildMembers | Remora.Discord",
    "keywords": "Class RequestGuildMembers Represents a command used to request guild members. Inheritance Object RequestGuildMembers Implements IRequestGuildMembers IGatewayCommand IGatewayPayloadData IEquatable < RequestGuildMembers > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class RequestGuildMembers : IRequestGuildMembers, IGatewayCommand, IGatewayPayloadData, IEquatable<RequestGuildMembers> Remarks This command has some special requirements related to the presence or absence of certain members in the data payload. Please read for more information before use, as misuse may cause Discord to terminate the gateway connection. Constructors | Improve this Doc View Source RequestGuildMembers(Snowflake, Optional<Int32>, Optional<Boolean>, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<String>) Represents a command used to request guild members. Declaration public RequestGuildMembers(Snowflake GuildID, Optional<int> Limit, Optional<bool> Presences, Optional<string> Query, Optional<IReadOnlyList<Snowflake>> UserIDs, Optional<string> Nonce) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID Remora.Rest.Core.Optional < Int32 > Limit Remora.Rest.Core.Optional < Boolean > Presences Remora.Rest.Core.Optional < String > Query Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> UserIDs Remora.Rest.Core.Optional < String > Nonce Remarks This command has some special requirements related to the presence or absence of certain members in the data payload. Please read for more information before use, as misuse may cause Discord to terminate the gateway connection. | Improve this Doc View Source RequestGuildMembers(Snowflake, IReadOnlyList<Snowflake>, Optional<Int32>, Optional<Boolean>, Optional<String>) Initializes a new instance of the RequestGuildMembers class. Declaration public RequestGuildMembers(Snowflake guildID, IReadOnlyList<Snowflake> userIDs, Optional<int> limit = default(Optional<int>), Optional<bool> withPresences = default(Optional<bool>), Optional<string> nonce = default(Optional<string>)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild to query. IReadOnlyList < Remora.Rest.Core.Snowflake > userIDs The IDs of the users to retrieve. Remora.Rest.Core.Optional < Int32 > limit The maximum number of members to return. Defaults to 0, which signifies a request for all members. Remora.Rest.Core.Optional < Boolean > withPresences true if member presence data should be included; otherwise, false. Remora.Rest.Core.Optional < String > nonce A nonce to identify response chunks by. | Improve this Doc View Source RequestGuildMembers(Snowflake, String, Int32, Optional<Boolean>, Optional<String>) Initializes a new instance of the RequestGuildMembers class. Declaration public RequestGuildMembers(Snowflake guildID, string query = \"\", int limit = 0, Optional<bool> withPresences = default(Optional<bool>), Optional<string> nonce = default(Optional<string>)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild to query. String query The string to filter usernames on (that is, usernames should start with this string). Defaults to the empty string, which matches all members. Int32 limit The maximum number of members to return. Defaults to 0, which signifies a request for all members. Remora.Rest.Core.Optional < Boolean > withPresences true if member presence data should be included; otherwise, false. Remora.Rest.Core.Optional < String > nonce A nonce to identify response chunks by. Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Limit Declaration public Optional<int> Limit { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Nonce Declaration public Optional<string> Nonce { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Presences Declaration public Optional<bool> Presences { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Query Declaration public Optional<string> Query { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source UserIDs Declaration public Optional<IReadOnlyList<Snowflake>> UserIDs { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> Implements IRequestGuildMembers IGatewayCommand IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Commands.Resume.html": {
    "href": "api/Remora.Discord.API.Gateway.Commands.Resume.html",
    "title": "Class Resume | Remora.Discord",
    "keywords": "Class Resume Represents a resume command. Inheritance Object Resume Implements IResume IGatewayCommand IGatewayPayloadData IEquatable < Resume > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Resume : IResume, IGatewayCommand, IGatewayPayloadData, IEquatable<Resume> Constructors | Improve this Doc View Source Resume(String, String, Int32) Represents a resume command. Declaration public Resume(string Token, string SessionID, int SequenceNumber) Parameters Type Name Description String Token String SessionID Int32 SequenceNumber Properties | Improve this Doc View Source SequenceNumber Declaration public int SequenceNumber { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SessionID Declaration public string SessionID { get; set; } Property Value Type Description String | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description String Implements IResume IGatewayCommand IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Commands.ShardIdentification.html": {
    "href": "api/Remora.Discord.API.Gateway.Commands.ShardIdentification.html",
    "title": "Class ShardIdentification | Remora.Discord",
    "keywords": "Class ShardIdentification Represents an identification set for a sharded connection. Inheritance Object ShardIdentification Implements IShardIdentification IEquatable < ShardIdentification > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ShardIdentification : IShardIdentification, IEquatable<ShardIdentification> Constructors | Improve this Doc View Source ShardIdentification(Int32, Int32) Represents an identification set for a sharded connection. Declaration public ShardIdentification(int ShardID, int ShardCount) Parameters Type Name Description Int32 ShardID Int32 ShardCount Properties | Improve this Doc View Source ShardCount Declaration public int ShardCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ShardID Declaration public int ShardID { get; set; } Property Value Type Description Int32 Implements IShardIdentification System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Commands.UpdatePresence.html": {
    "href": "api/Remora.Discord.API.Gateway.Commands.UpdatePresence.html",
    "title": "Class UpdatePresence | Remora.Discord",
    "keywords": "Class UpdatePresence Represents a command to update the presence of a user. Inheritance Object UpdatePresence Implements IUpdatePresence IGatewayCommand IGatewayPayloadData IEquatable < UpdatePresence > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class UpdatePresence : IUpdatePresence, IGatewayCommand, IGatewayPayloadData, IEquatable<UpdatePresence> Constructors | Improve this Doc View Source UpdatePresence(ClientStatus, Boolean, Nullable<DateTimeOffset>, IReadOnlyList<IActivity>) Represents a command to update the presence of a user. Declaration public UpdatePresence(ClientStatus Status, bool IsAFK, DateTimeOffset? Since, IReadOnlyList<IActivity> Activities) Parameters Type Name Description ClientStatus Status Boolean IsAFK Nullable < DateTimeOffset > Since IReadOnlyList < IActivity > Activities Properties | Improve this Doc View Source Activities Declaration public IReadOnlyList<IActivity> Activities { get; set; } Property Value Type Description IReadOnlyList < IActivity > | Improve this Doc View Source IsAFK Declaration public bool IsAFK { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Since Declaration public DateTimeOffset? Since { get; set; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Status Declaration public ClientStatus Status { get; set; } Property Value Type Description ClientStatus Implements IUpdatePresence IGatewayCommand IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Commands.UpdateVoiceState.html": {
    "href": "api/Remora.Discord.API.Gateway.Commands.UpdateVoiceState.html",
    "title": "Class UpdateVoiceState | Remora.Discord",
    "keywords": "Class UpdateVoiceState Represents a command to update the voice state of the client. Inheritance Object UpdateVoiceState Implements IUpdateVoiceState IGatewayCommand IGatewayPayloadData IEquatable < UpdateVoiceState > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class UpdateVoiceState : IUpdateVoiceState, IGatewayCommand, IGatewayPayloadData, IEquatable<UpdateVoiceState> Constructors | Improve this Doc View Source UpdateVoiceState(Snowflake, Boolean, Boolean, Nullable<Snowflake>) Represents a command to update the voice state of the client. Declaration public UpdateVoiceState(Snowflake GuildID, bool IsSelfMuted, bool IsSelfDeafened, Snowflake? ChannelID = null) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID Boolean IsSelfMuted Boolean IsSelfDeafened Nullable < Remora.Rest.Core.Snowflake > ChannelID Properties | Improve this Doc View Source ChannelID Declaration public Snowflake? ChannelID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsSelfDeafened Declaration public bool IsSelfDeafened { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSelfMuted Declaration public bool IsSelfMuted { get; set; } Property Value Type Description Boolean Implements IUpdateVoiceState IGatewayCommand IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.ApplicationCommandPermissionsUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.ApplicationCommandPermissionsUpdate.html",
    "title": "Class ApplicationCommandPermissionsUpdate | Remora.Discord",
    "keywords": "Class ApplicationCommandPermissionsUpdate Represents an update to the permissions of a command. Inheritance Object GuildApplicationCommandPermissions ApplicationCommandPermissionsUpdate Implements IEquatable < GuildApplicationCommandPermissions > IApplicationCommandPermissionsUpdate IGatewayEvent IGatewayPayloadData IGuildApplicationCommandPermissions IPartialGuildApplicationCommandPermissions IEquatable < ApplicationCommandPermissionsUpdate > Inherited Members GuildApplicationCommandPermissions.ID GuildApplicationCommandPermissions.ApplicationID GuildApplicationCommandPermissions.GuildID GuildApplicationCommandPermissions.Permissions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ApplicationCommandPermissionsUpdate : GuildApplicationCommandPermissions, IEquatable<GuildApplicationCommandPermissions>, IApplicationCommandPermissionsUpdate, IGatewayEvent, IGatewayPayloadData, IGuildApplicationCommandPermissions, IPartialGuildApplicationCommandPermissions, IEquatable<ApplicationCommandPermissionsUpdate> Constructors | Improve this Doc View Source ApplicationCommandPermissionsUpdate(Snowflake, Snowflake, Snowflake, IReadOnlyList<IApplicationCommandPermissions>) Declaration public ApplicationCommandPermissionsUpdate(Snowflake ID, Snowflake ApplicationID, Snowflake GuildID, IReadOnlyList<IApplicationCommandPermissions> Permissions) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake ApplicationID Remora.Rest.Core.Snowflake GuildID IReadOnlyList < IApplicationCommandPermissions > Permissions Implements System.IEquatable<T> IApplicationCommandPermissionsUpdate IGatewayEvent IGatewayPayloadData IGuildApplicationCommandPermissions IPartialGuildApplicationCommandPermissions System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.ChannelCreate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.ChannelCreate.html",
    "title": "Class ChannelCreate | Remora.Discord",
    "keywords": "Class ChannelCreate Represents the creation of a channel. Inheritance Object Channel ChannelCreate Implements IEquatable < Channel > IChannelCreate IGatewayEvent IGatewayPayloadData IChannel IPartialChannel IEquatable < ChannelCreate > Inherited Members Channel.ID Channel.Type Channel.GuildID Channel.Position Channel.PermissionOverwrites Channel.Name Channel.Topic Channel.IsNsfw Channel.LastMessageID Channel.Bitrate Channel.UserLimit Channel.RateLimitPerUser Channel.Recipients Channel.Icon Channel.OwnerID Channel.ApplicationID Channel.ParentID Channel.LastPinTimestamp Channel.RTCRegion Channel.VideoQualityMode Channel.MessageCount Channel.MemberCount Channel.ThreadMetadata Channel.Member Channel.DefaultAutoArchiveDuration Channel.Permissions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ChannelCreate : Channel, IEquatable<Channel>, IChannelCreate, IGatewayEvent, IGatewayPayloadData, IChannel, IPartialChannel, IEquatable<ChannelCreate> Constructors | Improve this Doc View Source ChannelCreate(Snowflake, ChannelType, Optional<Snowflake>, Optional<Int32>, Optional<IReadOnlyList<IPermissionOverwrite>>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<Int32>, Optional<Int32>, Optional<TimeSpan>, Optional<IReadOnlyList<IUser>>, Optional<IImageHash>, Optional<Snowflake>, Optional<Snowflake>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, Optional<VideoQualityMode>, Optional<Int32>, Optional<Int32>, Optional<IThreadMetadata>, Optional<IThreadMember>, Optional<AutoArchiveDuration>, Optional<IDiscordPermissionSet>) Declaration public ChannelCreate(Snowflake ID, ChannelType Type, Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<int> Position = default(Optional<int>), Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites = default(Optional<IReadOnlyList<IPermissionOverwrite>>), Optional<string> Name = default(Optional<string>), Optional<string> Topic = default(Optional<string>), Optional<bool> IsNsfw = default(Optional<bool>), Optional<Snowflake?> LastMessageID = default(Optional<Snowflake?>), Optional<int> Bitrate = default(Optional<int>), Optional<int> UserLimit = default(Optional<int>), Optional<TimeSpan> RateLimitPerUser = default(Optional<TimeSpan>), Optional<IReadOnlyList<IUser>> Recipients = default(Optional<IReadOnlyList<IUser>>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<Snowflake> OwnerID = default(Optional<Snowflake>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<Snowflake?> ParentID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> LastPinTimestamp = default(Optional<DateTimeOffset?>), Optional<string> RTCRegion = default(Optional<string>), Optional<VideoQualityMode> VideoQualityMode = default(Optional<VideoQualityMode>), Optional<int> MessageCount = default(Optional<int>), Optional<int> MemberCount = default(Optional<int>), Optional<IThreadMetadata> ThreadMetadata = default(Optional<IThreadMetadata>), Optional<IThreadMember> Member = default(Optional<IThreadMember>), Optional<AutoArchiveDuration> DefaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID ChannelType Type Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Int32 > Position Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> PermissionOverwrites Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < String > Topic Remora.Rest.Core.Optional < Boolean > IsNsfw Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> LastMessageID Remora.Rest.Core.Optional < Int32 > Bitrate Remora.Rest.Core.Optional < Int32 > UserLimit Remora.Rest.Core.Optional < TimeSpan > RateLimitPerUser Remora.Rest.Core.Optional < IReadOnlyList < IUser >> Recipients Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > OwnerID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ParentID Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> LastPinTimestamp Remora.Rest.Core.Optional < String > RTCRegion Remora.Rest.Core.Optional < VideoQualityMode > VideoQualityMode Remora.Rest.Core.Optional < Int32 > MessageCount Remora.Rest.Core.Optional < Int32 > MemberCount Remora.Rest.Core.Optional < IThreadMetadata > ThreadMetadata Remora.Rest.Core.Optional < IThreadMember > Member Remora.Rest.Core.Optional < AutoArchiveDuration > DefaultAutoArchiveDuration Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Implements System.IEquatable<T> IChannelCreate IGatewayEvent IGatewayPayloadData IChannel IPartialChannel System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.ChannelDelete.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.ChannelDelete.html",
    "title": "Class ChannelDelete | Remora.Discord",
    "keywords": "Class ChannelDelete Represents the deletion of a channel. Inheritance Object Channel ChannelDelete Implements IEquatable < Channel > IChannelDelete IGatewayEvent IGatewayPayloadData IChannel IPartialChannel IEquatable < ChannelDelete > Inherited Members Channel.ID Channel.Type Channel.GuildID Channel.Position Channel.PermissionOverwrites Channel.Name Channel.Topic Channel.IsNsfw Channel.LastMessageID Channel.Bitrate Channel.UserLimit Channel.RateLimitPerUser Channel.Recipients Channel.Icon Channel.OwnerID Channel.ApplicationID Channel.ParentID Channel.LastPinTimestamp Channel.RTCRegion Channel.VideoQualityMode Channel.MessageCount Channel.MemberCount Channel.ThreadMetadata Channel.Member Channel.DefaultAutoArchiveDuration Channel.Permissions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ChannelDelete : Channel, IEquatable<Channel>, IChannelDelete, IGatewayEvent, IGatewayPayloadData, IChannel, IPartialChannel, IEquatable<ChannelDelete> Constructors | Improve this Doc View Source ChannelDelete(Snowflake, ChannelType, Optional<Snowflake>, Optional<Int32>, Optional<IReadOnlyList<IPermissionOverwrite>>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<Int32>, Optional<Int32>, Optional<TimeSpan>, Optional<IReadOnlyList<IUser>>, Optional<IImageHash>, Optional<Snowflake>, Optional<Snowflake>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, Optional<VideoQualityMode>, Optional<Int32>, Optional<Int32>, Optional<IThreadMetadata>, Optional<IThreadMember>, Optional<AutoArchiveDuration>, Optional<IDiscordPermissionSet>) Declaration public ChannelDelete(Snowflake ID, ChannelType Type, Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<int> Position = default(Optional<int>), Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites = default(Optional<IReadOnlyList<IPermissionOverwrite>>), Optional<string> Name = default(Optional<string>), Optional<string> Topic = default(Optional<string>), Optional<bool> IsNsfw = default(Optional<bool>), Optional<Snowflake?> LastMessageID = default(Optional<Snowflake?>), Optional<int> Bitrate = default(Optional<int>), Optional<int> UserLimit = default(Optional<int>), Optional<TimeSpan> RateLimitPerUser = default(Optional<TimeSpan>), Optional<IReadOnlyList<IUser>> Recipients = default(Optional<IReadOnlyList<IUser>>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<Snowflake> OwnerID = default(Optional<Snowflake>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<Snowflake?> ParentID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> LastPinTimestamp = default(Optional<DateTimeOffset?>), Optional<string> RTCRegion = default(Optional<string>), Optional<VideoQualityMode> VideoQualityMode = default(Optional<VideoQualityMode>), Optional<int> MessageCount = default(Optional<int>), Optional<int> MemberCount = default(Optional<int>), Optional<IThreadMetadata> ThreadMetadata = default(Optional<IThreadMetadata>), Optional<IThreadMember> Member = default(Optional<IThreadMember>), Optional<AutoArchiveDuration> DefaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID ChannelType Type Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Int32 > Position Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> PermissionOverwrites Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < String > Topic Remora.Rest.Core.Optional < Boolean > IsNsfw Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> LastMessageID Remora.Rest.Core.Optional < Int32 > Bitrate Remora.Rest.Core.Optional < Int32 > UserLimit Remora.Rest.Core.Optional < TimeSpan > RateLimitPerUser Remora.Rest.Core.Optional < IReadOnlyList < IUser >> Recipients Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > OwnerID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ParentID Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> LastPinTimestamp Remora.Rest.Core.Optional < String > RTCRegion Remora.Rest.Core.Optional < VideoQualityMode > VideoQualityMode Remora.Rest.Core.Optional < Int32 > MessageCount Remora.Rest.Core.Optional < Int32 > MemberCount Remora.Rest.Core.Optional < IThreadMetadata > ThreadMetadata Remora.Rest.Core.Optional < IThreadMember > Member Remora.Rest.Core.Optional < AutoArchiveDuration > DefaultAutoArchiveDuration Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Implements System.IEquatable<T> IChannelDelete IGatewayEvent IGatewayPayloadData IChannel IPartialChannel System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.ChannelPinsUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.ChannelPinsUpdate.html",
    "title": "Class ChannelPinsUpdate | Remora.Discord",
    "keywords": "Class ChannelPinsUpdate Represents a pin or unpin of a message in a channel. This is not sent when a pinned message is deleted. Inheritance Object ChannelPinsUpdate Implements IChannelPinsUpdate IGatewayEvent IGatewayPayloadData IEquatable < ChannelPinsUpdate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ChannelPinsUpdate : IChannelPinsUpdate, IGatewayEvent, IGatewayPayloadData, IEquatable<ChannelPinsUpdate> Constructors | Improve this Doc View Source ChannelPinsUpdate(Optional<Snowflake>, Snowflake, Optional<Nullable<DateTimeOffset>>) Declaration public ChannelPinsUpdate(Optional<Snowflake> GuildID, Snowflake ChannelID, Optional<DateTimeOffset?> LastPinTimestamp = default(Optional<DateTimeOffset?>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> LastPinTimestamp Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source LastPinTimestamp Declaration public Optional<DateTimeOffset?> LastPinTimestamp { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> Implements IChannelPinsUpdate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.ChannelUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.ChannelUpdate.html",
    "title": "Class ChannelUpdate | Remora.Discord",
    "keywords": "Class ChannelUpdate Represents the update of a channel. Inheritance Object Channel ChannelUpdate Implements IEquatable < Channel > IChannelUpdate IGatewayEvent IGatewayPayloadData IChannel IPartialChannel IEquatable < ChannelUpdate > Inherited Members Channel.ID Channel.Type Channel.GuildID Channel.Position Channel.PermissionOverwrites Channel.Name Channel.Topic Channel.IsNsfw Channel.LastMessageID Channel.Bitrate Channel.UserLimit Channel.RateLimitPerUser Channel.Recipients Channel.Icon Channel.OwnerID Channel.ApplicationID Channel.ParentID Channel.LastPinTimestamp Channel.RTCRegion Channel.VideoQualityMode Channel.MessageCount Channel.MemberCount Channel.ThreadMetadata Channel.Member Channel.DefaultAutoArchiveDuration Channel.Permissions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ChannelUpdate : Channel, IEquatable<Channel>, IChannelUpdate, IGatewayEvent, IGatewayPayloadData, IChannel, IPartialChannel, IEquatable<ChannelUpdate> Constructors | Improve this Doc View Source ChannelUpdate(Snowflake, ChannelType, Optional<Snowflake>, Optional<Int32>, Optional<IReadOnlyList<IPermissionOverwrite>>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<Int32>, Optional<Int32>, Optional<TimeSpan>, Optional<IReadOnlyList<IUser>>, Optional<IImageHash>, Optional<Snowflake>, Optional<Snowflake>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, Optional<VideoQualityMode>, Optional<Int32>, Optional<Int32>, Optional<IThreadMetadata>, Optional<IThreadMember>, Optional<AutoArchiveDuration>, Optional<IDiscordPermissionSet>) Declaration public ChannelUpdate(Snowflake ID, ChannelType Type, Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<int> Position = default(Optional<int>), Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites = default(Optional<IReadOnlyList<IPermissionOverwrite>>), Optional<string> Name = default(Optional<string>), Optional<string> Topic = default(Optional<string>), Optional<bool> IsNsfw = default(Optional<bool>), Optional<Snowflake?> LastMessageID = default(Optional<Snowflake?>), Optional<int> Bitrate = default(Optional<int>), Optional<int> UserLimit = default(Optional<int>), Optional<TimeSpan> RateLimitPerUser = default(Optional<TimeSpan>), Optional<IReadOnlyList<IUser>> Recipients = default(Optional<IReadOnlyList<IUser>>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<Snowflake> OwnerID = default(Optional<Snowflake>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<Snowflake?> ParentID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> LastPinTimestamp = default(Optional<DateTimeOffset?>), Optional<string> RTCRegion = default(Optional<string>), Optional<VideoQualityMode> VideoQualityMode = default(Optional<VideoQualityMode>), Optional<int> MessageCount = default(Optional<int>), Optional<int> MemberCount = default(Optional<int>), Optional<IThreadMetadata> ThreadMetadata = default(Optional<IThreadMetadata>), Optional<IThreadMember> Member = default(Optional<IThreadMember>), Optional<AutoArchiveDuration> DefaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID ChannelType Type Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Int32 > Position Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> PermissionOverwrites Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < String > Topic Remora.Rest.Core.Optional < Boolean > IsNsfw Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> LastMessageID Remora.Rest.Core.Optional < Int32 > Bitrate Remora.Rest.Core.Optional < Int32 > UserLimit Remora.Rest.Core.Optional < TimeSpan > RateLimitPerUser Remora.Rest.Core.Optional < IReadOnlyList < IUser >> Recipients Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > OwnerID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ParentID Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> LastPinTimestamp Remora.Rest.Core.Optional < String > RTCRegion Remora.Rest.Core.Optional < VideoQualityMode > VideoQualityMode Remora.Rest.Core.Optional < Int32 > MessageCount Remora.Rest.Core.Optional < Int32 > MemberCount Remora.Rest.Core.Optional < IThreadMetadata > ThreadMetadata Remora.Rest.Core.Optional < IThreadMember > Member Remora.Rest.Core.Optional < AutoArchiveDuration > DefaultAutoArchiveDuration Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Implements System.IEquatable<T> IChannelUpdate IGatewayEvent IGatewayPayloadData IChannel IPartialChannel System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.html",
    "title": "Namespace Remora.Discord.API.Gateway.Events.Channels | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Gateway.Events.Channels Classes ChannelCreate Represents the creation of a channel. ChannelDelete Represents the deletion of a channel. ChannelPinsUpdate Represents a pin or unpin of a message in a channel. This is not sent when a pinned message is deleted. ChannelUpdate Represents the update of a channel. StageInstanceCreate Represents the creation of a stage instance. StageInstanceDelete Represents a deletion of a stage instance. StageInstanceUpdate Represents an update of a stage instance. ThreadCreate Represents the creation of a channel. ThreadDelete Represents the creation of a channel. ThreadListSync Sent when the current user gains access to a thread channel. ThreadMembersUpdate Represents an update to the member list of a thread. ThreadMemberUpdate Represents an update to the current user's thread member object. ThreadUpdate Represents the creation of a channel."
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.StageInstanceCreate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.StageInstanceCreate.html",
    "title": "Class StageInstanceCreate | Remora.Discord",
    "keywords": "Class StageInstanceCreate Represents the creation of a stage instance. Inheritance Object StageInstance StageInstanceCreate Implements IEquatable < StageInstance > IStageInstanceCreate IStageInstance IGatewayEvent IGatewayPayloadData IEquatable < StageInstanceCreate > Inherited Members StageInstance.ID StageInstance.GuildID StageInstance.ChannelID StageInstance.Topic StageInstance.PrivacyLevel StageInstance.IsDiscoveryDisabled StageInstance.GuildScheduledEventID Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class StageInstanceCreate : StageInstance, IEquatable<StageInstance>, IStageInstanceCreate, IStageInstance, IGatewayEvent, IGatewayPayloadData, IEquatable<StageInstanceCreate> Constructors | Improve this Doc View Source StageInstanceCreate(Snowflake, Snowflake, Snowflake, String, StagePrivacyLevel, Boolean, Nullable<Snowflake>) Declaration public StageInstanceCreate(Snowflake ID, Snowflake GuildID, Snowflake ChannelID, string Topic, StagePrivacyLevel PrivacyLevel, bool IsDiscoveryDisabled, Snowflake? GuildScheduledEventID) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID Remora.Rest.Core.Snowflake ChannelID String Topic StagePrivacyLevel PrivacyLevel Boolean IsDiscoveryDisabled Nullable < Remora.Rest.Core.Snowflake > GuildScheduledEventID Implements System.IEquatable<T> IStageInstanceCreate IStageInstance IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.StageInstanceDelete.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.StageInstanceDelete.html",
    "title": "Class StageInstanceDelete | Remora.Discord",
    "keywords": "Class StageInstanceDelete Represents a deletion of a stage instance. Inheritance Object StageInstance StageInstanceDelete Implements IEquatable < StageInstance > IStageInstanceDelete IStageInstance IGatewayEvent IGatewayPayloadData IEquatable < StageInstanceDelete > Inherited Members StageInstance.ID StageInstance.GuildID StageInstance.ChannelID StageInstance.Topic StageInstance.PrivacyLevel StageInstance.IsDiscoveryDisabled StageInstance.GuildScheduledEventID Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class StageInstanceDelete : StageInstance, IEquatable<StageInstance>, IStageInstanceDelete, IStageInstance, IGatewayEvent, IGatewayPayloadData, IEquatable<StageInstanceDelete> Constructors | Improve this Doc View Source StageInstanceDelete(Snowflake, Snowflake, Snowflake, String, StagePrivacyLevel, Boolean, Nullable<Snowflake>) Declaration public StageInstanceDelete(Snowflake ID, Snowflake GuildID, Snowflake ChannelID, string Topic, StagePrivacyLevel PrivacyLevel, bool IsDiscoveryDisabled, Snowflake? GuildScheduledEventID) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID Remora.Rest.Core.Snowflake ChannelID String Topic StagePrivacyLevel PrivacyLevel Boolean IsDiscoveryDisabled Nullable < Remora.Rest.Core.Snowflake > GuildScheduledEventID Implements System.IEquatable<T> IStageInstanceDelete IStageInstance IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.StageInstanceUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.StageInstanceUpdate.html",
    "title": "Class StageInstanceUpdate | Remora.Discord",
    "keywords": "Class StageInstanceUpdate Represents an update of a stage instance. Inheritance Object StageInstance StageInstanceUpdate Implements IEquatable < StageInstance > IStageInstanceUpdate IStageInstance IGatewayEvent IGatewayPayloadData IEquatable < StageInstanceUpdate > Inherited Members StageInstance.ID StageInstance.GuildID StageInstance.ChannelID StageInstance.Topic StageInstance.PrivacyLevel StageInstance.IsDiscoveryDisabled StageInstance.GuildScheduledEventID Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class StageInstanceUpdate : StageInstance, IEquatable<StageInstance>, IStageInstanceUpdate, IStageInstance, IGatewayEvent, IGatewayPayloadData, IEquatable<StageInstanceUpdate> Constructors | Improve this Doc View Source StageInstanceUpdate(Snowflake, Snowflake, Snowflake, String, StagePrivacyLevel, Boolean, Nullable<Snowflake>) Declaration public StageInstanceUpdate(Snowflake ID, Snowflake GuildID, Snowflake ChannelID, string Topic, StagePrivacyLevel PrivacyLevel, bool IsDiscoveryDisabled, Snowflake? GuildScheduledEventID) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID Remora.Rest.Core.Snowflake ChannelID String Topic StagePrivacyLevel PrivacyLevel Boolean IsDiscoveryDisabled Nullable < Remora.Rest.Core.Snowflake > GuildScheduledEventID Implements System.IEquatable<T> IStageInstanceUpdate IStageInstance IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.ThreadCreate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.ThreadCreate.html",
    "title": "Class ThreadCreate | Remora.Discord",
    "keywords": "Class ThreadCreate Represents the creation of a channel. Inheritance Object Channel ThreadCreate Implements IEquatable < Channel > IThreadCreate IGatewayEvent IGatewayPayloadData IChannel IPartialChannel IEquatable < ThreadCreate > Inherited Members Channel.ID Channel.Type Channel.GuildID Channel.Position Channel.PermissionOverwrites Channel.Name Channel.Topic Channel.IsNsfw Channel.LastMessageID Channel.Bitrate Channel.UserLimit Channel.RateLimitPerUser Channel.Recipients Channel.Icon Channel.OwnerID Channel.ApplicationID Channel.ParentID Channel.LastPinTimestamp Channel.RTCRegion Channel.VideoQualityMode Channel.MessageCount Channel.MemberCount Channel.ThreadMetadata Channel.Member Channel.DefaultAutoArchiveDuration Channel.Permissions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ThreadCreate : Channel, IEquatable<Channel>, IThreadCreate, IGatewayEvent, IGatewayPayloadData, IChannel, IPartialChannel, IEquatable<ThreadCreate> Constructors | Improve this Doc View Source ThreadCreate(Boolean, Snowflake, ChannelType, Optional<Snowflake>, Optional<Int32>, Optional<IReadOnlyList<IPermissionOverwrite>>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<Int32>, Optional<Int32>, Optional<TimeSpan>, Optional<IReadOnlyList<IUser>>, Optional<IImageHash>, Optional<Snowflake>, Optional<Snowflake>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, Optional<VideoQualityMode>, Optional<Int32>, Optional<Int32>, Optional<IThreadMetadata>, Optional<IThreadMember>, Optional<AutoArchiveDuration>, Optional<IDiscordPermissionSet>) Declaration public ThreadCreate(bool IsNewlyCreated, Snowflake ID, ChannelType Type, Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<int> Position = default(Optional<int>), Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites = default(Optional<IReadOnlyList<IPermissionOverwrite>>), Optional<string> Name = default(Optional<string>), Optional<string> Topic = default(Optional<string>), Optional<bool> IsNsfw = default(Optional<bool>), Optional<Snowflake?> LastMessageID = default(Optional<Snowflake?>), Optional<int> Bitrate = default(Optional<int>), Optional<int> UserLimit = default(Optional<int>), Optional<TimeSpan> RateLimitPerUser = default(Optional<TimeSpan>), Optional<IReadOnlyList<IUser>> Recipients = default(Optional<IReadOnlyList<IUser>>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<Snowflake> OwnerID = default(Optional<Snowflake>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<Snowflake?> ParentID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> LastPinTimestamp = default(Optional<DateTimeOffset?>), Optional<string> RTCRegion = default(Optional<string>), Optional<VideoQualityMode> VideoQualityMode = default(Optional<VideoQualityMode>), Optional<int> MessageCount = default(Optional<int>), Optional<int> MemberCount = default(Optional<int>), Optional<IThreadMetadata> ThreadMetadata = default(Optional<IThreadMetadata>), Optional<IThreadMember> Member = default(Optional<IThreadMember>), Optional<AutoArchiveDuration> DefaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>)) Parameters Type Name Description Boolean IsNewlyCreated Remora.Rest.Core.Snowflake ID ChannelType Type Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Int32 > Position Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> PermissionOverwrites Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < String > Topic Remora.Rest.Core.Optional < Boolean > IsNsfw Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> LastMessageID Remora.Rest.Core.Optional < Int32 > Bitrate Remora.Rest.Core.Optional < Int32 > UserLimit Remora.Rest.Core.Optional < TimeSpan > RateLimitPerUser Remora.Rest.Core.Optional < IReadOnlyList < IUser >> Recipients Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > OwnerID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ParentID Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> LastPinTimestamp Remora.Rest.Core.Optional < String > RTCRegion Remora.Rest.Core.Optional < VideoQualityMode > VideoQualityMode Remora.Rest.Core.Optional < Int32 > MessageCount Remora.Rest.Core.Optional < Int32 > MemberCount Remora.Rest.Core.Optional < IThreadMetadata > ThreadMetadata Remora.Rest.Core.Optional < IThreadMember > Member Remora.Rest.Core.Optional < AutoArchiveDuration > DefaultAutoArchiveDuration Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Properties | Improve this Doc View Source IsNewlyCreated Declaration public bool IsNewlyCreated { get; set; } Property Value Type Description Boolean Implements System.IEquatable<T> IThreadCreate IGatewayEvent IGatewayPayloadData IChannel IPartialChannel System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.ThreadDelete.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.ThreadDelete.html",
    "title": "Class ThreadDelete | Remora.Discord",
    "keywords": "Class ThreadDelete Represents the creation of a channel. Inheritance Object PartialChannel ThreadDelete Implements IEquatable < PartialChannel > IThreadDelete IGatewayEvent IGatewayPayloadData IPartialChannel IEquatable < ThreadDelete > Inherited Members PartialChannel.ID PartialChannel.Type PartialChannel.GuildID PartialChannel.Position PartialChannel.PermissionOverwrites PartialChannel.Name PartialChannel.Topic PartialChannel.IsNsfw PartialChannel.LastMessageID PartialChannel.Bitrate PartialChannel.UserLimit PartialChannel.RateLimitPerUser PartialChannel.Recipients PartialChannel.Icon PartialChannel.OwnerID PartialChannel.ApplicationID PartialChannel.ParentID PartialChannel.LastPinTimestamp PartialChannel.RTCRegion PartialChannel.VideoQualityMode PartialChannel.MessageCount PartialChannel.MemberCount PartialChannel.ThreadMetadata PartialChannel.Member PartialChannel.DefaultAutoArchiveDuration PartialChannel.Permissions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ThreadDelete : PartialChannel, IEquatable<PartialChannel>, IThreadDelete, IGatewayEvent, IGatewayPayloadData, IPartialChannel, IEquatable<ThreadDelete> Constructors | Improve this Doc View Source ThreadDelete(Optional<Snowflake>, Optional<ChannelType>, Optional<Snowflake>, Optional<Int32>, Optional<IReadOnlyList<IPermissionOverwrite>>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<Int32>, Optional<Int32>, Optional<TimeSpan>, Optional<IReadOnlyList<IUser>>, Optional<IImageHash>, Optional<Snowflake>, Optional<Snowflake>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, Optional<VideoQualityMode>, Optional<Int32>, Optional<Int32>, Optional<IThreadMetadata>, Optional<IThreadMember>, Optional<AutoArchiveDuration>, Optional<IDiscordPermissionSet>) Declaration public ThreadDelete(Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<ChannelType> Type = default(Optional<ChannelType>), Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<int> Position = default(Optional<int>), Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites = default(Optional<IReadOnlyList<IPermissionOverwrite>>), Optional<string> Name = default(Optional<string>), Optional<string> Topic = default(Optional<string>), Optional<bool> IsNsfw = default(Optional<bool>), Optional<Snowflake?> LastMessageID = default(Optional<Snowflake?>), Optional<int> Bitrate = default(Optional<int>), Optional<int> UserLimit = default(Optional<int>), Optional<TimeSpan> RateLimitPerUser = default(Optional<TimeSpan>), Optional<IReadOnlyList<IUser>> Recipients = default(Optional<IReadOnlyList<IUser>>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<Snowflake> OwnerID = default(Optional<Snowflake>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<Snowflake?> ParentID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> LastPinTimestamp = default(Optional<DateTimeOffset?>), Optional<string> RTCRegion = default(Optional<string>), Optional<VideoQualityMode> VideoQualityMode = default(Optional<VideoQualityMode>), Optional<int> MessageCount = default(Optional<int>), Optional<int> MemberCount = default(Optional<int>), Optional<IThreadMetadata> ThreadMetadata = default(Optional<IThreadMetadata>), Optional<IThreadMember> Member = default(Optional<IThreadMember>), Optional<AutoArchiveDuration> DefaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < ChannelType > Type Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Int32 > Position Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> PermissionOverwrites Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < String > Topic Remora.Rest.Core.Optional < Boolean > IsNsfw Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> LastMessageID Remora.Rest.Core.Optional < Int32 > Bitrate Remora.Rest.Core.Optional < Int32 > UserLimit Remora.Rest.Core.Optional < TimeSpan > RateLimitPerUser Remora.Rest.Core.Optional < IReadOnlyList < IUser >> Recipients Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > OwnerID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ParentID Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> LastPinTimestamp Remora.Rest.Core.Optional < String > RTCRegion Remora.Rest.Core.Optional < VideoQualityMode > VideoQualityMode Remora.Rest.Core.Optional < Int32 > MessageCount Remora.Rest.Core.Optional < Int32 > MemberCount Remora.Rest.Core.Optional < IThreadMetadata > ThreadMetadata Remora.Rest.Core.Optional < IThreadMember > Member Remora.Rest.Core.Optional < AutoArchiveDuration > DefaultAutoArchiveDuration Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Implements System.IEquatable<T> IThreadDelete IGatewayEvent IGatewayPayloadData IPartialChannel System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.ThreadListSync.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.ThreadListSync.html",
    "title": "Class ThreadListSync | Remora.Discord",
    "keywords": "Class ThreadListSync Sent when the current user gains access to a thread channel. Inheritance Object ThreadListSync Implements IThreadListSync IGatewayEvent IGatewayPayloadData IEquatable < ThreadListSync > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ThreadListSync : IThreadListSync, IGatewayEvent, IGatewayPayloadData, IEquatable<ThreadListSync> Constructors | Improve this Doc View Source ThreadListSync(Snowflake, Optional<IReadOnlyList<Snowflake>>, IReadOnlyList<IChannel>, IReadOnlyList<IThreadMember>) Declaration public ThreadListSync(Snowflake GuildID, Optional<IReadOnlyList<Snowflake>> ChannelIDs, IReadOnlyList<IChannel> Threads, IReadOnlyList<IThreadMember> Members) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> ChannelIDs IReadOnlyList < IChannel > Threads IReadOnlyList < IThreadMember > Members Properties | Improve this Doc View Source ChannelIDs Declaration public Optional<IReadOnlyList<Snowflake>> ChannelIDs { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Members Declaration public IReadOnlyList<IThreadMember> Members { get; set; } Property Value Type Description IReadOnlyList < IThreadMember > | Improve this Doc View Source Threads Declaration public IReadOnlyList<IChannel> Threads { get; set; } Property Value Type Description IReadOnlyList < IChannel > Implements IThreadListSync IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.ThreadMembersUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.ThreadMembersUpdate.html",
    "title": "Class ThreadMembersUpdate | Remora.Discord",
    "keywords": "Class ThreadMembersUpdate Represents an update to the member list of a thread. Inheritance Object ThreadMembersUpdate Implements IThreadMembersUpdate IGatewayEvent IGatewayPayloadData IEquatable < ThreadMembersUpdate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ThreadMembersUpdate : IThreadMembersUpdate, IGatewayEvent, IGatewayPayloadData, IEquatable<ThreadMembersUpdate> Constructors | Improve this Doc View Source ThreadMembersUpdate(Snowflake, Snowflake, Int32, Optional<IReadOnlyList<IThreadMember>>, Optional<IReadOnlyList<Snowflake>>) Declaration public ThreadMembersUpdate(Snowflake ID, Snowflake GuildID, int MemberCount, Optional<IReadOnlyList<IThreadMember>> AddedMembers, Optional<IReadOnlyList<Snowflake>> RemovedMemberIDs) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID Int32 MemberCount Remora.Rest.Core.Optional < IReadOnlyList < IThreadMember >> AddedMembers Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> RemovedMemberIDs Properties | Improve this Doc View Source AddedMembers Declaration public Optional<IReadOnlyList<IThreadMember>> AddedMembers { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IThreadMember >> | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source MemberCount Declaration public int MemberCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RemovedMemberIDs Declaration public Optional<IReadOnlyList<Snowflake>> RemovedMemberIDs { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> Implements IThreadMembersUpdate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.ThreadMemberUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.ThreadMemberUpdate.html",
    "title": "Class ThreadMemberUpdate | Remora.Discord",
    "keywords": "Class ThreadMemberUpdate Represents an update to the current user's thread member object. Inheritance Object ThreadMember ThreadMemberUpdate Implements IEquatable < ThreadMember > IThreadMemberUpdate IGatewayEvent IGatewayPayloadData IThreadMember IEquatable < ThreadMemberUpdate > Inherited Members ThreadMember.ID ThreadMember.UserID ThreadMember.JoinTimestamp ThreadMember.Flags ThreadMember.Member ThreadMember.Presence Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ThreadMemberUpdate : ThreadMember, IEquatable<ThreadMember>, IThreadMemberUpdate, IGatewayEvent, IGatewayPayloadData, IThreadMember, IEquatable<ThreadMemberUpdate> Constructors | Improve this Doc View Source ThreadMemberUpdate(Optional<Snowflake>, Optional<Snowflake>, DateTimeOffset, ThreadMemberFlags, Optional<IGuildMember>, Optional<IPartialPresence>, Snowflake) Declaration public ThreadMemberUpdate(Optional<Snowflake> ID, Optional<Snowflake> UserID, DateTimeOffset JoinTimestamp, ThreadMemberFlags Flags, Optional<IGuildMember> Member, Optional<IPartialPresence> Presence, Snowflake GuildID) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > UserID DateTimeOffset JoinTimestamp ThreadMemberFlags Flags Remora.Rest.Core.Optional < IGuildMember > Member Remora.Rest.Core.Optional < IPartialPresence > Presence Remora.Rest.Core.Snowflake GuildID Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements System.IEquatable<T> IThreadMemberUpdate IGatewayEvent IGatewayPayloadData IThreadMember System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Channels.ThreadUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Channels.ThreadUpdate.html",
    "title": "Class ThreadUpdate | Remora.Discord",
    "keywords": "Class ThreadUpdate Represents the creation of a channel. Inheritance Object Channel ThreadUpdate Implements IEquatable < Channel > IThreadUpdate IGatewayEvent IGatewayPayloadData IChannel IPartialChannel IEquatable < ThreadUpdate > Inherited Members Channel.ID Channel.Type Channel.GuildID Channel.Position Channel.PermissionOverwrites Channel.Name Channel.Topic Channel.IsNsfw Channel.LastMessageID Channel.Bitrate Channel.UserLimit Channel.RateLimitPerUser Channel.Recipients Channel.Icon Channel.OwnerID Channel.ApplicationID Channel.ParentID Channel.LastPinTimestamp Channel.RTCRegion Channel.VideoQualityMode Channel.MessageCount Channel.MemberCount Channel.ThreadMetadata Channel.Member Channel.DefaultAutoArchiveDuration Channel.Permissions Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events.Channels Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ThreadUpdate : Channel, IEquatable<Channel>, IThreadUpdate, IGatewayEvent, IGatewayPayloadData, IChannel, IPartialChannel, IEquatable<ThreadUpdate> Constructors | Improve this Doc View Source ThreadUpdate(Snowflake, ChannelType, Optional<Snowflake>, Optional<Int32>, Optional<IReadOnlyList<IPermissionOverwrite>>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<Int32>, Optional<Int32>, Optional<TimeSpan>, Optional<IReadOnlyList<IUser>>, Optional<IImageHash>, Optional<Snowflake>, Optional<Snowflake>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, Optional<VideoQualityMode>, Optional<Int32>, Optional<Int32>, Optional<IThreadMetadata>, Optional<IThreadMember>, Optional<AutoArchiveDuration>, Optional<IDiscordPermissionSet>) Declaration public ThreadUpdate(Snowflake ID, ChannelType Type, Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<int> Position = default(Optional<int>), Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites = default(Optional<IReadOnlyList<IPermissionOverwrite>>), Optional<string> Name = default(Optional<string>), Optional<string> Topic = default(Optional<string>), Optional<bool> IsNsfw = default(Optional<bool>), Optional<Snowflake?> LastMessageID = default(Optional<Snowflake?>), Optional<int> Bitrate = default(Optional<int>), Optional<int> UserLimit = default(Optional<int>), Optional<TimeSpan> RateLimitPerUser = default(Optional<TimeSpan>), Optional<IReadOnlyList<IUser>> Recipients = default(Optional<IReadOnlyList<IUser>>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<Snowflake> OwnerID = default(Optional<Snowflake>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<Snowflake?> ParentID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> LastPinTimestamp = default(Optional<DateTimeOffset?>), Optional<string> RTCRegion = default(Optional<string>), Optional<VideoQualityMode> VideoQualityMode = default(Optional<VideoQualityMode>), Optional<int> MessageCount = default(Optional<int>), Optional<int> MemberCount = default(Optional<int>), Optional<IThreadMetadata> ThreadMetadata = default(Optional<IThreadMetadata>), Optional<IThreadMember> Member = default(Optional<IThreadMember>), Optional<AutoArchiveDuration> DefaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID ChannelType Type Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Int32 > Position Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> PermissionOverwrites Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < String > Topic Remora.Rest.Core.Optional < Boolean > IsNsfw Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> LastMessageID Remora.Rest.Core.Optional < Int32 > Bitrate Remora.Rest.Core.Optional < Int32 > UserLimit Remora.Rest.Core.Optional < TimeSpan > RateLimitPerUser Remora.Rest.Core.Optional < IReadOnlyList < IUser >> Recipients Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > OwnerID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ParentID Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> LastPinTimestamp Remora.Rest.Core.Optional < String > RTCRegion Remora.Rest.Core.Optional < VideoQualityMode > VideoQualityMode Remora.Rest.Core.Optional < Int32 > MessageCount Remora.Rest.Core.Optional < Int32 > MemberCount Remora.Rest.Core.Optional < IThreadMetadata > ThreadMetadata Remora.Rest.Core.Optional < IThreadMember > Member Remora.Rest.Core.Optional < AutoArchiveDuration > DefaultAutoArchiveDuration Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Implements System.IEquatable<T> IThreadUpdate IGatewayEvent IGatewayPayloadData IChannel IPartialChannel System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildBanAdd.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildBanAdd.html",
    "title": "Class GuildBanAdd | Remora.Discord",
    "keywords": "Class GuildBanAdd Represents a user being banned. Inheritance Object GuildBanAdd Implements IGuildBanAdd IGatewayEvent IGatewayPayloadData IEquatable < GuildBanAdd > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildBanAdd : IGuildBanAdd, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildBanAdd> Constructors | Improve this Doc View Source GuildBanAdd(Snowflake, IUser) Declaration public GuildBanAdd(Snowflake GuildID, IUser User) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID IUser User Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source User Declaration public IUser User { get; set; } Property Value Type Description IUser Implements IGuildBanAdd IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildBanRemove.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildBanRemove.html",
    "title": "Class GuildBanRemove | Remora.Discord",
    "keywords": "Class GuildBanRemove Represents a user being unbanned. Inheritance Object GuildBanRemove Implements IGuildBanRemove IGatewayEvent IGatewayPayloadData IEquatable < GuildBanRemove > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildBanRemove : IGuildBanRemove, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildBanRemove> Constructors | Improve this Doc View Source GuildBanRemove(Snowflake, IUser) Declaration public GuildBanRemove(Snowflake GuildID, IUser User) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID IUser User Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source User Declaration public IUser User { get; set; } Property Value Type Description IUser Implements IGuildBanRemove IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildCreate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildCreate.html",
    "title": "Class GuildCreate | Remora.Discord",
    "keywords": "Class GuildCreate Represents the creation of a guild. This event is sent in one of three scenarios: When a user is initially connecting to lazily load and backfill information for all unavailable guilds sent in the IReady event. When a guild becomes available again to the client. When the current user joins a guild. Inheritance Object Guild GuildCreate Implements IEquatable < Guild > IGuildCreate IGatewayEvent IGatewayPayloadData IGuild IPartialGuild IEquatable < GuildCreate > Inherited Members Guild.ID Guild.Name Guild.Icon Guild.Splash Guild.DiscoverySplash Guild.IsOwner Guild.OwnerID Guild.Permissions Guild.AFKChannelID Guild.AFKTimeout Guild.VerificationLevel Guild.DefaultMessageNotifications Guild.ExplicitContentFilter Guild.Roles Guild.Emojis Guild.GuildFeatures Guild.MFALevel Guild.ApplicationID Guild.IsWidgetEnabled Guild.WidgetChannelID Guild.SystemChannelID Guild.SystemChannelFlags Guild.RulesChannelID Guild.MaxPresences Guild.MaxMembers Guild.VanityUrlCode Guild.Description Guild.Banner Guild.PremiumTier Guild.PremiumSubscriptionCount Guild.PreferredLocale Guild.PublicUpdatesChannelID Guild.MaxVideoChannelUsers Guild.ApproximateMemberCount Guild.ApproximatePresenceCount Guild.WelcomeScreen Guild.NSFWLevel Guild.Stickers Guild.IsPremiumProgressBarEnabled Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildCreate : Guild, IEquatable<Guild>, IGuildCreate, IGatewayEvent, IGatewayPayloadData, IGuild, IPartialGuild, IEquatable<GuildCreate> Constructors | Improve this Doc View Source GuildCreate(Snowflake, String, IImageHash, IImageHash, IImageHash, Optional<Boolean>, Snowflake, Optional<IDiscordPermissionSet>, Nullable<Snowflake>, TimeSpan, VerificationLevel, MessageNotificationLevel, ExplicitContentFilterLevel, IReadOnlyList<IRole>, IReadOnlyList<IEmoji>, IReadOnlyList<GuildFeature>, MultiFactorAuthenticationLevel, Nullable<Snowflake>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Nullable<Snowflake>, SystemChannelFlags, Nullable<Snowflake>, Optional<Nullable<Int32>>, Optional<Int32>, String, String, IImageHash, PremiumTier, Optional<Int32>, String, Nullable<Snowflake>, Optional<Int32>, Optional<Int32>, Optional<Int32>, Optional<IWelcomeScreen>, GuildNSFWLevel, Optional<IReadOnlyList<ISticker>>, Boolean, Optional<DateTimeOffset>, Optional<Boolean>, Optional<Boolean>, Optional<Int32>, Optional<IReadOnlyList<IPartialVoiceState>>, Optional<IReadOnlyList<IGuildMember>>, Optional<IReadOnlyList<IChannel>>, Optional<IReadOnlyList<IChannel>>, Optional<IReadOnlyList<IPartialPresence>>, Optional<IReadOnlyList<IStageInstance>>, Optional<IReadOnlyList<IGuildScheduledEvent>>) Declaration public GuildCreate(Snowflake ID, string Name, IImageHash Icon, IImageHash Splash, IImageHash DiscoverySplash, Optional<bool> IsOwner, Snowflake OwnerID, Optional<IDiscordPermissionSet> Permissions, Snowflake? AFKChannelID, TimeSpan AFKTimeout, VerificationLevel VerificationLevel, MessageNotificationLevel DefaultMessageNotifications, ExplicitContentFilterLevel ExplicitContentFilter, IReadOnlyList<IRole> Roles, IReadOnlyList<IEmoji> Emojis, IReadOnlyList<GuildFeature> GuildFeatures, MultiFactorAuthenticationLevel MFALevel, Snowflake? ApplicationID, Optional<bool> IsWidgetEnabled, Optional<Snowflake?> WidgetChannelID, Snowflake? SystemChannelID, SystemChannelFlags SystemChannelFlags, Snowflake? RulesChannelID, Optional<int?> MaxPresences, Optional<int> MaxMembers, string VanityUrlCode, string Description, IImageHash Banner, PremiumTier PremiumTier, Optional<int> PremiumSubscriptionCount, string PreferredLocale, Snowflake? PublicUpdatesChannelID, Optional<int> MaxVideoChannelUsers, Optional<int> ApproximateMemberCount, Optional<int> ApproximatePresenceCount, Optional<IWelcomeScreen> WelcomeScreen, GuildNSFWLevel NSFWLevel, Optional<IReadOnlyList<ISticker>> Stickers, bool IsPremiumProgressBarEnabled, Optional<DateTimeOffset> JoinedAt, Optional<bool> IsLarge, Optional<bool> IsUnavailable, Optional<int> MemberCount, Optional<IReadOnlyList<IPartialVoiceState>> VoiceStates, Optional<IReadOnlyList<IGuildMember>> Members, Optional<IReadOnlyList<IChannel>> Channels, Optional<IReadOnlyList<IChannel>> Threads, Optional<IReadOnlyList<IPartialPresence>> Presences, Optional<IReadOnlyList<IStageInstance>> StageInstances, Optional<IReadOnlyList<IGuildScheduledEvent>> GuildScheduledEvents) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name IImageHash Icon IImageHash Splash IImageHash DiscoverySplash Remora.Rest.Core.Optional < Boolean > IsOwner Remora.Rest.Core.Snowflake OwnerID Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Nullable < Remora.Rest.Core.Snowflake > AFKChannelID TimeSpan AFKTimeout VerificationLevel VerificationLevel MessageNotificationLevel DefaultMessageNotifications ExplicitContentFilterLevel ExplicitContentFilter IReadOnlyList < IRole > Roles IReadOnlyList < IEmoji > Emojis IReadOnlyList < GuildFeature > GuildFeatures MultiFactorAuthenticationLevel MFALevel Nullable < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Boolean > IsWidgetEnabled Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> WidgetChannelID Nullable < Remora.Rest.Core.Snowflake > SystemChannelID SystemChannelFlags SystemChannelFlags Nullable < Remora.Rest.Core.Snowflake > RulesChannelID Remora.Rest.Core.Optional < Nullable < Int32 >> MaxPresences Remora.Rest.Core.Optional < Int32 > MaxMembers String VanityUrlCode String Description IImageHash Banner PremiumTier PremiumTier Remora.Rest.Core.Optional < Int32 > PremiumSubscriptionCount String PreferredLocale Nullable < Remora.Rest.Core.Snowflake > PublicUpdatesChannelID Remora.Rest.Core.Optional < Int32 > MaxVideoChannelUsers Remora.Rest.Core.Optional < Int32 > ApproximateMemberCount Remora.Rest.Core.Optional < Int32 > ApproximatePresenceCount Remora.Rest.Core.Optional < IWelcomeScreen > WelcomeScreen GuildNSFWLevel NSFWLevel Remora.Rest.Core.Optional < IReadOnlyList < ISticker >> Stickers Boolean IsPremiumProgressBarEnabled Remora.Rest.Core.Optional < DateTimeOffset > JoinedAt Remora.Rest.Core.Optional < Boolean > IsLarge Remora.Rest.Core.Optional < Boolean > IsUnavailable Remora.Rest.Core.Optional < Int32 > MemberCount Remora.Rest.Core.Optional < IReadOnlyList < IPartialVoiceState >> VoiceStates Remora.Rest.Core.Optional < IReadOnlyList < IGuildMember >> Members Remora.Rest.Core.Optional < IReadOnlyList < IChannel >> Channels Remora.Rest.Core.Optional < IReadOnlyList < IChannel >> Threads Remora.Rest.Core.Optional < IReadOnlyList < IPartialPresence >> Presences Remora.Rest.Core.Optional < IReadOnlyList < IStageInstance >> StageInstances Remora.Rest.Core.Optional < IReadOnlyList < IGuildScheduledEvent >> GuildScheduledEvents Properties | Improve this Doc View Source Channels Declaration public Optional<IReadOnlyList<IChannel>> Channels { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IChannel >> | Improve this Doc View Source GuildScheduledEvents Declaration public Optional<IReadOnlyList<IGuildScheduledEvent>> GuildScheduledEvents { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IGuildScheduledEvent >> | Improve this Doc View Source IsLarge Declaration public Optional<bool> IsLarge { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsUnavailable Declaration public Optional<bool> IsUnavailable { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source JoinedAt Declaration public Optional<DateTimeOffset> JoinedAt { get; set; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source MemberCount Declaration public Optional<int> MemberCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Members Declaration public Optional<IReadOnlyList<IGuildMember>> Members { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IGuildMember >> | Improve this Doc View Source Presences Declaration public Optional<IReadOnlyList<IPartialPresence>> Presences { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialPresence >> | Improve this Doc View Source StageInstances Declaration public Optional<IReadOnlyList<IStageInstance>> StageInstances { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IStageInstance >> | Improve this Doc View Source Threads Declaration public Optional<IReadOnlyList<IChannel>> Threads { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IChannel >> | Improve this Doc View Source VoiceStates Declaration public Optional<IReadOnlyList<IPartialVoiceState>> VoiceStates { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialVoiceState >> Implements System.IEquatable<T> IGuildCreate IGatewayEvent IGatewayPayloadData IGuild IPartialGuild System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildDelete.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildDelete.html",
    "title": "Class GuildDelete | Remora.Discord",
    "keywords": "Class GuildDelete Represents the delete of a guild. Inheritance Object UnavailableGuild GuildDelete Implements IEquatable < UnavailableGuild > IGuildDelete IGatewayEvent IGatewayPayloadData IUnavailableGuild IEquatable < GuildDelete > Inherited Members UnavailableGuild.ID UnavailableGuild.IsUnavailable Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildDelete : UnavailableGuild, IEquatable<UnavailableGuild>, IGuildDelete, IGatewayEvent, IGatewayPayloadData, IUnavailableGuild, IEquatable<GuildDelete> Constructors | Improve this Doc View Source GuildDelete(Snowflake, Optional<Boolean>) Declaration public GuildDelete(Snowflake ID, Optional<bool> IsUnavailable = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Optional < Boolean > IsUnavailable Implements System.IEquatable<T> IGuildDelete IGatewayEvent IGatewayPayloadData IUnavailableGuild System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildEmojisUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildEmojisUpdate.html",
    "title": "Class GuildEmojisUpdate | Remora.Discord",
    "keywords": "Class GuildEmojisUpdate Represents an update to a guild's emojis. Inheritance Object GuildEmojisUpdate Implements IGuildEmojisUpdate IGatewayEvent IGatewayPayloadData IEquatable < GuildEmojisUpdate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildEmojisUpdate : IGuildEmojisUpdate, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildEmojisUpdate> Constructors | Improve this Doc View Source GuildEmojisUpdate(Snowflake, IReadOnlyList<IEmoji>) Declaration public GuildEmojisUpdate(Snowflake GuildID, IReadOnlyList<IEmoji> Emojis) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID IReadOnlyList < IEmoji > Emojis Properties | Improve this Doc View Source Emojis Declaration public IReadOnlyList<IEmoji> Emojis { get; set; } Property Value Type Description IReadOnlyList < IEmoji > | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IGuildEmojisUpdate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildIntegrationsUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildIntegrationsUpdate.html",
    "title": "Class GuildIntegrationsUpdate | Remora.Discord",
    "keywords": "Class GuildIntegrationsUpdate Represents an update to a guild integration. Inheritance Object GuildIntegrationsUpdate Implements IGuildIntegrationsUpdate IGatewayEvent IGatewayPayloadData IEquatable < GuildIntegrationsUpdate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildIntegrationsUpdate : IGuildIntegrationsUpdate, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildIntegrationsUpdate> Constructors | Improve this Doc View Source GuildIntegrationsUpdate(Snowflake) Declaration public GuildIntegrationsUpdate(Snowflake GuildID) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IGuildIntegrationsUpdate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildMemberAdd.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildMemberAdd.html",
    "title": "Class GuildMemberAdd | Remora.Discord",
    "keywords": "Class GuildMemberAdd Represents a new user joining the guild. Inheritance Object GuildMember GuildMemberAdd Implements IEquatable < GuildMember > IGuildMemberAdd IGuildMember IPartialGuildMember IGatewayEvent IGatewayPayloadData IEquatable < GuildMemberAdd > Inherited Members GuildMember.User GuildMember.Nickname GuildMember.Avatar GuildMember.Roles GuildMember.JoinedAt GuildMember.PremiumSince GuildMember.IsDeafened GuildMember.IsMuted GuildMember.IsPending GuildMember.Permissions GuildMember.CommunicationDisabledUntil Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildMemberAdd : GuildMember, IEquatable<GuildMember>, IGuildMemberAdd, IGuildMember, IPartialGuildMember, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildMemberAdd> Constructors | Improve this Doc View Source GuildMemberAdd(Snowflake, Optional<IUser>, Optional<String>, Optional<IImageHash>, IReadOnlyList<Snowflake>, DateTimeOffset, Optional<Nullable<DateTimeOffset>>, Boolean, Boolean, Optional<Nullable<Boolean>>, Optional<IDiscordPermissionSet>, Optional<Nullable<DateTimeOffset>>) Declaration public GuildMemberAdd(Snowflake GuildID, Optional<IUser> User, Optional<string> Nickname, Optional<IImageHash> Avatar, IReadOnlyList<Snowflake> Roles, DateTimeOffset JoinedAt, Optional<DateTimeOffset?> PremiumSince, bool IsDeafened, bool IsMuted, Optional<bool?> IsPending, Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>), Optional<DateTimeOffset?> CommunicationDisabledUntil = default(Optional<DateTimeOffset?>)) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID Remora.Rest.Core.Optional < IUser > User Remora.Rest.Core.Optional < String > Nickname Remora.Rest.Core.Optional < IImageHash > Avatar IReadOnlyList < Remora.Rest.Core.Snowflake > Roles DateTimeOffset JoinedAt Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> PremiumSince Boolean IsDeafened Boolean IsMuted Remora.Rest.Core.Optional < Nullable < Boolean >> IsPending Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> CommunicationDisabledUntil Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements System.IEquatable<T> IGuildMemberAdd IGuildMember IPartialGuildMember IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildMemberRemove.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildMemberRemove.html",
    "title": "Class GuildMemberRemove | Remora.Discord",
    "keywords": "Class GuildMemberRemove Represents a user being removed from the guild. Inheritance Object GuildMemberRemove Implements IGuildMemberRemove IGatewayEvent IGatewayPayloadData IEquatable < GuildMemberRemove > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildMemberRemove : IGuildMemberRemove, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildMemberRemove> Constructors | Improve this Doc View Source GuildMemberRemove(Snowflake, IUser) Declaration public GuildMemberRemove(Snowflake GuildID, IUser User) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID IUser User Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source User Declaration public IUser User { get; set; } Property Value Type Description IUser Implements IGuildMemberRemove IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildMembersChunk.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildMembersChunk.html",
    "title": "Class GuildMembersChunk | Remora.Discord",
    "keywords": "Class GuildMembersChunk Represents a chunk of guild members. Inheritance Object GuildMembersChunk Implements IGuildMembersChunk IGatewayEvent IGatewayPayloadData IEquatable < GuildMembersChunk > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildMembersChunk : IGuildMembersChunk, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildMembersChunk> Constructors | Improve this Doc View Source GuildMembersChunk(Snowflake, IReadOnlyList<IGuildMember>, Int32, Int32, Optional<IReadOnlyList<Snowflake>>, Optional<IReadOnlyList<IPresence>>, Optional<String>) Declaration public GuildMembersChunk(Snowflake GuildID, IReadOnlyList<IGuildMember> Members, int ChunkIndex, int ChunkCount, Optional<IReadOnlyList<Snowflake>> NotFound = default(Optional<IReadOnlyList<Snowflake>>), Optional<IReadOnlyList<IPresence>> Presences = default(Optional<IReadOnlyList<IPresence>>), Optional<string> Nonce = default(Optional<string>)) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID IReadOnlyList < IGuildMember > Members Int32 ChunkIndex Int32 ChunkCount Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> NotFound Remora.Rest.Core.Optional < IReadOnlyList < IPresence >> Presences Remora.Rest.Core.Optional < String > Nonce Properties | Improve this Doc View Source ChunkCount Declaration public int ChunkCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ChunkIndex Declaration public int ChunkIndex { get; set; } Property Value Type Description Int32 | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Members Declaration public IReadOnlyList<IGuildMember> Members { get; set; } Property Value Type Description IReadOnlyList < IGuildMember > | Improve this Doc View Source Nonce Declaration public Optional<string> Nonce { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source NotFound Declaration public Optional<IReadOnlyList<Snowflake>> NotFound { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Presences Declaration public Optional<IReadOnlyList<IPresence>> Presences { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPresence >> Implements IGuildMembersChunk IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildMemberUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildMemberUpdate.html",
    "title": "Class GuildMemberUpdate | Remora.Discord",
    "keywords": "Class GuildMemberUpdate Represents a user being updated in the guild. Inheritance Object GuildMemberUpdate Implements IGuildMemberUpdate IGatewayEvent IGatewayPayloadData IEquatable < GuildMemberUpdate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildMemberUpdate : IGuildMemberUpdate, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildMemberUpdate> Constructors | Improve this Doc View Source GuildMemberUpdate(Snowflake, IReadOnlyList<Snowflake>, IUser, Optional<String>, Optional<IImageHash>, Nullable<DateTimeOffset>, Optional<Nullable<DateTimeOffset>>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<Nullable<DateTimeOffset>>) Declaration public GuildMemberUpdate(Snowflake GuildID, IReadOnlyList<Snowflake> Roles, IUser User, Optional<string> Nickname = default(Optional<string>), Optional<IImageHash> Avatar = default(Optional<IImageHash>), DateTimeOffset? JoinedAt = null, Optional<DateTimeOffset?> PremiumSince = default(Optional<DateTimeOffset?>), Optional<bool> IsPending = default(Optional<bool>), Optional<bool> IsDeafened = default(Optional<bool>), Optional<bool> IsMuted = default(Optional<bool>), Optional<DateTimeOffset?> CommunicationDisabledUntil = default(Optional<DateTimeOffset?>)) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID IReadOnlyList < Remora.Rest.Core.Snowflake > Roles IUser User Remora.Rest.Core.Optional < String > Nickname Remora.Rest.Core.Optional < IImageHash > Avatar Nullable < DateTimeOffset > JoinedAt Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> PremiumSince Remora.Rest.Core.Optional < Boolean > IsPending Remora.Rest.Core.Optional < Boolean > IsDeafened Remora.Rest.Core.Optional < Boolean > IsMuted Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> CommunicationDisabledUntil Properties | Improve this Doc View Source Avatar Declaration public Optional<IImageHash> Avatar { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source CommunicationDisabledUntil Declaration public Optional<DateTimeOffset?> CommunicationDisabledUntil { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsDeafened Declaration public Optional<bool> IsDeafened { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMuted Declaration public Optional<bool> IsMuted { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsPending Declaration public Optional<bool> IsPending { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source JoinedAt Declaration public DateTimeOffset? JoinedAt { get; set; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Nickname Declaration public Optional<string> Nickname { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source PremiumSince Declaration public Optional<DateTimeOffset?> PremiumSince { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Roles Declaration public IReadOnlyList<Snowflake> Roles { get; set; } Property Value Type Description IReadOnlyList < Remora.Rest.Core.Snowflake > | Improve this Doc View Source User Declaration public IUser User { get; set; } Property Value Type Description IUser Implements IGuildMemberUpdate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildRoleCreate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildRoleCreate.html",
    "title": "Class GuildRoleCreate | Remora.Discord",
    "keywords": "Class GuildRoleCreate Represents the creation of a role. Inheritance Object GuildRoleCreate Implements IGuildRoleCreate IGatewayEvent IGatewayPayloadData IEquatable < GuildRoleCreate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildRoleCreate : IGuildRoleCreate, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildRoleCreate> Constructors | Improve this Doc View Source GuildRoleCreate(Snowflake, IRole) Declaration public GuildRoleCreate(Snowflake GuildID, IRole Role) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID IRole Role Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Role Declaration public IRole Role { get; set; } Property Value Type Description IRole Implements IGuildRoleCreate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildRoleDelete.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildRoleDelete.html",
    "title": "Class GuildRoleDelete | Remora.Discord",
    "keywords": "Class GuildRoleDelete Represents a role deletion. Inheritance Object GuildRoleDelete Implements IGuildRoleDelete IGatewayEvent IGatewayPayloadData IEquatable < GuildRoleDelete > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildRoleDelete : IGuildRoleDelete, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildRoleDelete> Constructors | Improve this Doc View Source GuildRoleDelete(Snowflake, Snowflake) Declaration public GuildRoleDelete(Snowflake GuildID, Snowflake RoleID) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID Remora.Rest.Core.Snowflake RoleID Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source RoleID Declaration public Snowflake RoleID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IGuildRoleDelete IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildRoleUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildRoleUpdate.html",
    "title": "Class GuildRoleUpdate | Remora.Discord",
    "keywords": "Class GuildRoleUpdate Represents an update to a role. Inheritance Object GuildRoleUpdate Implements IGuildRoleUpdate IGatewayEvent IGatewayPayloadData IEquatable < GuildRoleUpdate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildRoleUpdate : IGuildRoleUpdate, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildRoleUpdate> Constructors | Improve this Doc View Source GuildRoleUpdate(Snowflake, IRole) Declaration public GuildRoleUpdate(Snowflake GuildID, IRole Role) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID IRole Role Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Role Declaration public IRole Role { get; set; } Property Value Type Description IRole Implements IGuildRoleUpdate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildScheduledEventCreate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildScheduledEventCreate.html",
    "title": "Class GuildScheduledEventCreate | Remora.Discord",
    "keywords": "Class GuildScheduledEventCreate Sent when a scheduled event is created. Inheritance Object GuildScheduledEvent GuildScheduledEventCreate Implements IEquatable < GuildScheduledEvent > IGuildScheduledEventCreate IGatewayEvent IGatewayPayloadData IGuildScheduledEvent IEquatable < GuildScheduledEventCreate > Inherited Members GuildScheduledEvent.ID GuildScheduledEvent.GuildID GuildScheduledEvent.ChannelID GuildScheduledEvent.CreatorID GuildScheduledEvent.Name GuildScheduledEvent.Description GuildScheduledEvent.ScheduledStartTime GuildScheduledEvent.ScheduledEndTime GuildScheduledEvent.PrivacyLevel GuildScheduledEvent.Status GuildScheduledEvent.EntityType GuildScheduledEvent.EntityID GuildScheduledEvent.EntityMetadata GuildScheduledEvent.Creator GuildScheduledEvent.UserCount GuildScheduledEvent.Image Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildScheduledEventCreate : GuildScheduledEvent, IEquatable<GuildScheduledEvent>, IGuildScheduledEventCreate, IGatewayEvent, IGatewayPayloadData, IGuildScheduledEvent, IEquatable<GuildScheduledEventCreate> Constructors | Improve this Doc View Source GuildScheduledEventCreate(Snowflake, Snowflake, Nullable<Snowflake>, Optional<Nullable<Snowflake>>, String, Optional<String>, DateTimeOffset, Nullable<DateTimeOffset>, GuildScheduledEventPrivacyLevel, GuildScheduledEventStatus, GuildScheduledEventEntityType, Nullable<Snowflake>, IGuildScheduledEventEntityMetadata, Optional<IUser>, Optional<Int32>, IImageHash) Declaration public GuildScheduledEventCreate(Snowflake ID, Snowflake GuildID, Snowflake? ChannelID, Optional<Snowflake?> CreatorID, string Name, Optional<string> Description, DateTimeOffset ScheduledStartTime, DateTimeOffset? ScheduledEndTime, GuildScheduledEventPrivacyLevel PrivacyLevel, GuildScheduledEventStatus Status, GuildScheduledEventEntityType EntityType, Snowflake? EntityID, IGuildScheduledEventEntityMetadata EntityMetadata, Optional<IUser> Creator, Optional<int> UserCount, IImageHash Image) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID Nullable < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> CreatorID String Name Remora.Rest.Core.Optional < String > Description DateTimeOffset ScheduledStartTime Nullable < DateTimeOffset > ScheduledEndTime GuildScheduledEventPrivacyLevel PrivacyLevel GuildScheduledEventStatus Status GuildScheduledEventEntityType EntityType Nullable < Remora.Rest.Core.Snowflake > EntityID IGuildScheduledEventEntityMetadata EntityMetadata Remora.Rest.Core.Optional < IUser > Creator Remora.Rest.Core.Optional < Int32 > UserCount IImageHash Image Implements System.IEquatable<T> IGuildScheduledEventCreate IGatewayEvent IGatewayPayloadData IGuildScheduledEvent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildScheduledEventDelete.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildScheduledEventDelete.html",
    "title": "Class GuildScheduledEventDelete | Remora.Discord",
    "keywords": "Class GuildScheduledEventDelete Sent when a scheduled event is deleted. Inheritance Object GuildScheduledEvent GuildScheduledEventDelete Implements IEquatable < GuildScheduledEvent > IGuildScheduledEventDelete IGatewayEvent IGatewayPayloadData IGuildScheduledEvent IEquatable < GuildScheduledEventDelete > Inherited Members GuildScheduledEvent.ID GuildScheduledEvent.GuildID GuildScheduledEvent.ChannelID GuildScheduledEvent.CreatorID GuildScheduledEvent.Name GuildScheduledEvent.Description GuildScheduledEvent.ScheduledStartTime GuildScheduledEvent.ScheduledEndTime GuildScheduledEvent.PrivacyLevel GuildScheduledEvent.Status GuildScheduledEvent.EntityType GuildScheduledEvent.EntityID GuildScheduledEvent.EntityMetadata GuildScheduledEvent.Creator GuildScheduledEvent.UserCount GuildScheduledEvent.Image Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildScheduledEventDelete : GuildScheduledEvent, IEquatable<GuildScheduledEvent>, IGuildScheduledEventDelete, IGatewayEvent, IGatewayPayloadData, IGuildScheduledEvent, IEquatable<GuildScheduledEventDelete> Constructors | Improve this Doc View Source GuildScheduledEventDelete(Snowflake, Snowflake, Nullable<Snowflake>, Optional<Nullable<Snowflake>>, String, Optional<String>, DateTimeOffset, Nullable<DateTimeOffset>, GuildScheduledEventPrivacyLevel, GuildScheduledEventStatus, GuildScheduledEventEntityType, Nullable<Snowflake>, IGuildScheduledEventEntityMetadata, Optional<IUser>, Optional<Int32>, IImageHash) Declaration public GuildScheduledEventDelete(Snowflake ID, Snowflake GuildID, Snowflake? ChannelID, Optional<Snowflake?> CreatorID, string Name, Optional<string> Description, DateTimeOffset ScheduledStartTime, DateTimeOffset? ScheduledEndTime, GuildScheduledEventPrivacyLevel PrivacyLevel, GuildScheduledEventStatus Status, GuildScheduledEventEntityType EntityType, Snowflake? EntityID, IGuildScheduledEventEntityMetadata EntityMetadata, Optional<IUser> Creator, Optional<int> UserCount, IImageHash Image) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID Nullable < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> CreatorID String Name Remora.Rest.Core.Optional < String > Description DateTimeOffset ScheduledStartTime Nullable < DateTimeOffset > ScheduledEndTime GuildScheduledEventPrivacyLevel PrivacyLevel GuildScheduledEventStatus Status GuildScheduledEventEntityType EntityType Nullable < Remora.Rest.Core.Snowflake > EntityID IGuildScheduledEventEntityMetadata EntityMetadata Remora.Rest.Core.Optional < IUser > Creator Remora.Rest.Core.Optional < Int32 > UserCount IImageHash Image Implements System.IEquatable<T> IGuildScheduledEventDelete IGatewayEvent IGatewayPayloadData IGuildScheduledEvent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildScheduledEventUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildScheduledEventUpdate.html",
    "title": "Class GuildScheduledEventUpdate | Remora.Discord",
    "keywords": "Class GuildScheduledEventUpdate Sent when a scheduled event is updated. Inheritance Object GuildScheduledEvent GuildScheduledEventUpdate Implements IEquatable < GuildScheduledEvent > IGuildScheduledEventUpdate IGatewayEvent IGatewayPayloadData IGuildScheduledEvent IEquatable < GuildScheduledEventUpdate > Inherited Members GuildScheduledEvent.ID GuildScheduledEvent.GuildID GuildScheduledEvent.ChannelID GuildScheduledEvent.CreatorID GuildScheduledEvent.Name GuildScheduledEvent.Description GuildScheduledEvent.ScheduledStartTime GuildScheduledEvent.ScheduledEndTime GuildScheduledEvent.PrivacyLevel GuildScheduledEvent.Status GuildScheduledEvent.EntityType GuildScheduledEvent.EntityID GuildScheduledEvent.EntityMetadata GuildScheduledEvent.Creator GuildScheduledEvent.UserCount GuildScheduledEvent.Image Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildScheduledEventUpdate : GuildScheduledEvent, IEquatable<GuildScheduledEvent>, IGuildScheduledEventUpdate, IGatewayEvent, IGatewayPayloadData, IGuildScheduledEvent, IEquatable<GuildScheduledEventUpdate> Constructors | Improve this Doc View Source GuildScheduledEventUpdate(Snowflake, Snowflake, Nullable<Snowflake>, Optional<Nullable<Snowflake>>, String, Optional<String>, DateTimeOffset, Nullable<DateTimeOffset>, GuildScheduledEventPrivacyLevel, GuildScheduledEventStatus, GuildScheduledEventEntityType, Nullable<Snowflake>, IGuildScheduledEventEntityMetadata, Optional<IUser>, Optional<Int32>, IImageHash) Declaration public GuildScheduledEventUpdate(Snowflake ID, Snowflake GuildID, Snowflake? ChannelID, Optional<Snowflake?> CreatorID, string Name, Optional<string> Description, DateTimeOffset ScheduledStartTime, DateTimeOffset? ScheduledEndTime, GuildScheduledEventPrivacyLevel PrivacyLevel, GuildScheduledEventStatus Status, GuildScheduledEventEntityType EntityType, Snowflake? EntityID, IGuildScheduledEventEntityMetadata EntityMetadata, Optional<IUser> Creator, Optional<int> UserCount, IImageHash Image) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID Nullable < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> CreatorID String Name Remora.Rest.Core.Optional < String > Description DateTimeOffset ScheduledStartTime Nullable < DateTimeOffset > ScheduledEndTime GuildScheduledEventPrivacyLevel PrivacyLevel GuildScheduledEventStatus Status GuildScheduledEventEntityType EntityType Nullable < Remora.Rest.Core.Snowflake > EntityID IGuildScheduledEventEntityMetadata EntityMetadata Remora.Rest.Core.Optional < IUser > Creator Remora.Rest.Core.Optional < Int32 > UserCount IImageHash Image Implements System.IEquatable<T> IGuildScheduledEventUpdate IGatewayEvent IGatewayPayloadData IGuildScheduledEvent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildScheduledEventUserAdd.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildScheduledEventUserAdd.html",
    "title": "Class GuildScheduledEventUserAdd | Remora.Discord",
    "keywords": "Class GuildScheduledEventUserAdd Sent when a user subscribes to a scheduled event. Inheritance Object GuildScheduledEventUserAdd Implements IGuildScheduledEventUserAdd IGatewayEvent IGatewayPayloadData IEquatable < GuildScheduledEventUserAdd > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildScheduledEventUserAdd : IGuildScheduledEventUserAdd, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildScheduledEventUserAdd> Constructors | Improve this Doc View Source GuildScheduledEventUserAdd(Snowflake, Snowflake, Snowflake) Declaration public GuildScheduledEventUserAdd(Snowflake GuildScheduledEventID, Snowflake UserID, Snowflake GuildID) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildScheduledEventID Remora.Rest.Core.Snowflake UserID Remora.Rest.Core.Snowflake GuildID Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildScheduledEventID Declaration public Snowflake GuildScheduledEventID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source UserID Declaration public Snowflake UserID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IGuildScheduledEventUserAdd IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildScheduledEventUserRemove.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildScheduledEventUserRemove.html",
    "title": "Class GuildScheduledEventUserRemove | Remora.Discord",
    "keywords": "Class GuildScheduledEventUserRemove Sent when a user unsubscribes from a scheduled event. Inheritance Object GuildScheduledEventUserRemove Implements IGuildScheduledEventUserRemove IGatewayEvent IGatewayPayloadData IEquatable < GuildScheduledEventUserRemove > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildScheduledEventUserRemove : IGuildScheduledEventUserRemove, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildScheduledEventUserRemove> Constructors | Improve this Doc View Source GuildScheduledEventUserRemove(Snowflake, Snowflake, Snowflake) Declaration public GuildScheduledEventUserRemove(Snowflake GuildScheduledEventID, Snowflake UserID, Snowflake GuildID) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildScheduledEventID Remora.Rest.Core.Snowflake UserID Remora.Rest.Core.Snowflake GuildID Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildScheduledEventID Declaration public Snowflake GuildScheduledEventID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source UserID Declaration public Snowflake UserID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IGuildScheduledEventUserRemove IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildStickersUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildStickersUpdate.html",
    "title": "Class GuildStickersUpdate | Remora.Discord",
    "keywords": "Class GuildStickersUpdate Represents a change to the stickers in a guild. Inheritance Object GuildStickersUpdate Implements IGuildStickersUpdate IGatewayEvent IGatewayPayloadData IEquatable < GuildStickersUpdate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildStickersUpdate : IGuildStickersUpdate, IGatewayEvent, IGatewayPayloadData, IEquatable<GuildStickersUpdate> Constructors | Improve this Doc View Source GuildStickersUpdate(Snowflake, IReadOnlyList<ISticker>) Declaration public GuildStickersUpdate(Snowflake GuildID, IReadOnlyList<ISticker> Stickers) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID IReadOnlyList < ISticker > Stickers Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Stickers Declaration public IReadOnlyList<ISticker> Stickers { get; set; } Property Value Type Description IReadOnlyList < ISticker > Implements IGuildStickersUpdate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.GuildUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.GuildUpdate.html",
    "title": "Class GuildUpdate | Remora.Discord",
    "keywords": "Class GuildUpdate Represents the update of a guild. Inheritance Object Guild GuildUpdate Implements IEquatable < Guild > IGuildUpdate IGatewayEvent IGatewayPayloadData IGuild IPartialGuild IEquatable < GuildUpdate > Inherited Members Guild.ID Guild.Name Guild.Icon Guild.Splash Guild.DiscoverySplash Guild.IsOwner Guild.OwnerID Guild.Permissions Guild.AFKChannelID Guild.AFKTimeout Guild.VerificationLevel Guild.DefaultMessageNotifications Guild.ExplicitContentFilter Guild.Roles Guild.Emojis Guild.GuildFeatures Guild.MFALevel Guild.ApplicationID Guild.IsWidgetEnabled Guild.WidgetChannelID Guild.SystemChannelID Guild.SystemChannelFlags Guild.RulesChannelID Guild.MaxPresences Guild.MaxMembers Guild.VanityUrlCode Guild.Description Guild.Banner Guild.PremiumTier Guild.PremiumSubscriptionCount Guild.PreferredLocale Guild.PublicUpdatesChannelID Guild.MaxVideoChannelUsers Guild.ApproximateMemberCount Guild.ApproximatePresenceCount Guild.WelcomeScreen Guild.NSFWLevel Guild.Stickers Guild.IsPremiumProgressBarEnabled Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildUpdate : Guild, IEquatable<Guild>, IGuildUpdate, IGatewayEvent, IGatewayPayloadData, IGuild, IPartialGuild, IEquatable<GuildUpdate> Constructors | Improve this Doc View Source GuildUpdate(Snowflake, String, IImageHash, IImageHash, IImageHash, Optional<Boolean>, Snowflake, Optional<IDiscordPermissionSet>, Nullable<Snowflake>, TimeSpan, VerificationLevel, MessageNotificationLevel, ExplicitContentFilterLevel, IReadOnlyList<IRole>, IReadOnlyList<IEmoji>, IReadOnlyList<GuildFeature>, MultiFactorAuthenticationLevel, Nullable<Snowflake>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Nullable<Snowflake>, SystemChannelFlags, Nullable<Snowflake>, Optional<Nullable<Int32>>, Optional<Int32>, String, String, IImageHash, PremiumTier, Optional<Int32>, String, Nullable<Snowflake>, Optional<Int32>, Optional<Int32>, Optional<Int32>, Optional<IWelcomeScreen>, GuildNSFWLevel, Optional<IReadOnlyList<ISticker>>, Boolean) Declaration public GuildUpdate(Snowflake ID, string Name, IImageHash Icon, IImageHash Splash, IImageHash DiscoverySplash, Optional<bool> IsOwner, Snowflake OwnerID, Optional<IDiscordPermissionSet> Permissions, Snowflake? AFKChannelID, TimeSpan AFKTimeout, VerificationLevel VerificationLevel, MessageNotificationLevel DefaultMessageNotifications, ExplicitContentFilterLevel ExplicitContentFilter, IReadOnlyList<IRole> Roles, IReadOnlyList<IEmoji> Emojis, IReadOnlyList<GuildFeature> GuildFeatures, MultiFactorAuthenticationLevel MFALevel, Snowflake? ApplicationID, Optional<bool> IsWidgetEnabled, Optional<Snowflake?> WidgetChannelID, Snowflake? SystemChannelID, SystemChannelFlags SystemChannelFlags, Snowflake? RulesChannelID, Optional<int?> MaxPresences, Optional<int> MaxMembers, string VanityUrlCode, string Description, IImageHash Banner, PremiumTier PremiumTier, Optional<int> PremiumSubscriptionCount, string PreferredLocale, Snowflake? PublicUpdatesChannelID, Optional<int> MaxVideoChannelUsers, Optional<int> ApproximateMemberCount, Optional<int> ApproximatePresenceCount, Optional<IWelcomeScreen> WelcomeScreen, GuildNSFWLevel NSFWLevel, Optional<IReadOnlyList<ISticker>> Stickers, bool IsPremiumProgressBarEnabled) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name IImageHash Icon IImageHash Splash IImageHash DiscoverySplash Remora.Rest.Core.Optional < Boolean > IsOwner Remora.Rest.Core.Snowflake OwnerID Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Nullable < Remora.Rest.Core.Snowflake > AFKChannelID TimeSpan AFKTimeout VerificationLevel VerificationLevel MessageNotificationLevel DefaultMessageNotifications ExplicitContentFilterLevel ExplicitContentFilter IReadOnlyList < IRole > Roles IReadOnlyList < IEmoji > Emojis IReadOnlyList < GuildFeature > GuildFeatures MultiFactorAuthenticationLevel MFALevel Nullable < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Boolean > IsWidgetEnabled Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> WidgetChannelID Nullable < Remora.Rest.Core.Snowflake > SystemChannelID SystemChannelFlags SystemChannelFlags Nullable < Remora.Rest.Core.Snowflake > RulesChannelID Remora.Rest.Core.Optional < Nullable < Int32 >> MaxPresences Remora.Rest.Core.Optional < Int32 > MaxMembers String VanityUrlCode String Description IImageHash Banner PremiumTier PremiumTier Remora.Rest.Core.Optional < Int32 > PremiumSubscriptionCount String PreferredLocale Nullable < Remora.Rest.Core.Snowflake > PublicUpdatesChannelID Remora.Rest.Core.Optional < Int32 > MaxVideoChannelUsers Remora.Rest.Core.Optional < Int32 > ApproximateMemberCount Remora.Rest.Core.Optional < Int32 > ApproximatePresenceCount Remora.Rest.Core.Optional < IWelcomeScreen > WelcomeScreen GuildNSFWLevel NSFWLevel Remora.Rest.Core.Optional < IReadOnlyList < ISticker >> Stickers Boolean IsPremiumProgressBarEnabled Implements System.IEquatable<T> IGuildUpdate IGatewayEvent IGatewayPayloadData IGuild IPartialGuild System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Hello.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Hello.html",
    "title": "Class Hello | Remora.Discord",
    "keywords": "Class Hello Represents the greeting event sent by the gateway after connection. Inheritance Object Hello Implements IHello IGatewayEvent IGatewayPayloadData IEquatable < Hello > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Hello : IHello, IGatewayEvent, IGatewayPayloadData, IEquatable<Hello> Constructors | Improve this Doc View Source Hello(TimeSpan) Declaration public Hello(TimeSpan HeartbeatInterval) Parameters Type Name Description TimeSpan HeartbeatInterval Properties | Improve this Doc View Source HeartbeatInterval Declaration public TimeSpan HeartbeatInterval { get; set; } Property Value Type Description TimeSpan Implements IHello IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.html",
    "title": "Namespace Remora.Discord.API.Gateway.Events | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Gateway.Events Classes ApplicationCommandPermissionsUpdate Represents an update to the permissions of a command. GuildBanAdd Represents a user being banned. GuildBanRemove Represents a user being unbanned. GuildCreate Represents the creation of a guild. This event is sent in one of three scenarios: When a user is initially connecting to lazily load and backfill information for all unavailable guilds sent in the IReady event. When a guild becomes available again to the client. When the current user joins a guild. GuildDelete Represents the delete of a guild. GuildEmojisUpdate Represents an update to a guild's emojis. GuildIntegrationsUpdate Represents an update to a guild integration. GuildMemberAdd Represents a new user joining the guild. GuildMemberRemove Represents a user being removed from the guild. GuildMembersChunk Represents a chunk of guild members. GuildMemberUpdate Represents a user being updated in the guild. GuildRoleCreate Represents the creation of a role. GuildRoleDelete Represents a role deletion. GuildRoleUpdate Represents an update to a role. GuildScheduledEventCreate Sent when a scheduled event is created. GuildScheduledEventDelete Sent when a scheduled event is deleted. GuildScheduledEventUpdate Sent when a scheduled event is updated. GuildScheduledEventUserAdd Sent when a user subscribes to a scheduled event. GuildScheduledEventUserRemove Sent when a user unsubscribes from a scheduled event. GuildStickersUpdate Represents a change to the stickers in a guild. GuildUpdate Represents the update of a guild. Hello Represents the greeting event sent by the gateway after connection. IntegrationCreate Represents the creation of an integration. IntegrationDelete Represents the creation of an integration. IntegrationUpdate Represents the creation of an integration. InteractionCreate Represents a user-invoked slash command. InvalidSession Represents a reconnection event from the gateway. InviteCreate Represents the creation of an invite. InviteDelete Represents the deletion of an invite link. MessageCreate Represents the creation of a message. MessageDelete Represents the deletion of a message. MessageDeleteBulk Represents a bulk deletion of a set of messages. MessageReactionAdd Represents the addition of a reaction to a message. MessageReactionRemove Represents the removal of a reaction from a message. MessageReactionRemoveAll Represents the removal of all reaction from a message. MessageReactionRemoveEmoji Represents the removal of all instances of a given emoji from a message. MessageUpdate Represents the creation of a message. PresenceUpdate Represents the update of a user's presence. Ready Represents initial gateway state information. Reconnect Represents a reconnection request. This interface defines no data. Resumed Represents an event that marks the completion of a session resumption. TypingStart Sent when a user starts typing in a channel. UnknownEvent Represents an unknown event. UserUpdate Represents an update to a user. VoiceServerUpdate Represents an update to a voice server of a guild. VoiceStateUpdate Represents an update to a user's voice state. WebhooksUpdate Represents an update to a webhook in a channel."
  },
  "api/Remora.Discord.API.Gateway.Events.IntegrationCreate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.IntegrationCreate.html",
    "title": "Class IntegrationCreate | Remora.Discord",
    "keywords": "Class IntegrationCreate Represents the creation of an integration. Inheritance Object Integration IntegrationCreate Implements IEquatable < Integration > IIntegrationCreate IIntegration IPartialIntegration IGatewayEvent IGatewayPayloadData IEquatable < IntegrationCreate > Inherited Members Integration.ID Integration.Name Integration.Type Integration.IsEnabled Integration.IsSyncing Integration.RoleID Integration.EnableEmoticons Integration.ExpireBehaviour Integration.ExpireGracePeriod Integration.User Integration.Account Integration.SyncedAt Integration.SubscriberCount Integration.IsRevoked Integration.Application Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class IntegrationCreate : Integration, IEquatable<Integration>, IIntegrationCreate, IIntegration, IPartialIntegration, IGatewayEvent, IGatewayPayloadData, IEquatable<IntegrationCreate> Constructors | Improve this Doc View Source IntegrationCreate(Snowflake, String, String, Optional<Boolean>, Boolean, Snowflake, Optional<Boolean>, IntegrationExpireBehaviour, TimeSpan, Optional<IUser>, IAccount, DateTimeOffset, Int32, Boolean, Optional<IIntegrationApplication>, Snowflake) Declaration public IntegrationCreate(Snowflake ID, string Name, string Type, Optional<bool> IsEnabled, bool IsSyncing, Snowflake RoleID, Optional<bool> EnableEmoticons, IntegrationExpireBehaviour ExpireBehaviour, TimeSpan ExpireGracePeriod, Optional<IUser> User, IAccount Account, DateTimeOffset SyncedAt, int SubscriberCount, bool IsRevoked, Optional<IIntegrationApplication> Application, Snowflake GuildID) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name String Type Remora.Rest.Core.Optional < Boolean > IsEnabled Boolean IsSyncing Remora.Rest.Core.Snowflake RoleID Remora.Rest.Core.Optional < Boolean > EnableEmoticons IntegrationExpireBehaviour ExpireBehaviour TimeSpan ExpireGracePeriod Remora.Rest.Core.Optional < IUser > User IAccount Account DateTimeOffset SyncedAt Int32 SubscriberCount Boolean IsRevoked Remora.Rest.Core.Optional < IIntegrationApplication > Application Remora.Rest.Core.Snowflake GuildID Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements System.IEquatable<T> IIntegrationCreate IIntegration IPartialIntegration IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.IntegrationDelete.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.IntegrationDelete.html",
    "title": "Class IntegrationDelete | Remora.Discord",
    "keywords": "Class IntegrationDelete Represents the creation of an integration. Inheritance Object IntegrationDelete Implements IIntegrationDelete IGatewayEvent IGatewayPayloadData IEquatable < IntegrationDelete > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class IntegrationDelete : IIntegrationDelete, IGatewayEvent, IGatewayPayloadData, IEquatable<IntegrationDelete> Constructors | Improve this Doc View Source IntegrationDelete(Snowflake, Snowflake, Optional<Snowflake>) Declaration public IntegrationDelete(Snowflake ID, Snowflake GuildID, Optional<Snowflake> ApplicationID) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Properties | Improve this Doc View Source ApplicationID Declaration public Optional<Snowflake> ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IIntegrationDelete IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.IntegrationUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.IntegrationUpdate.html",
    "title": "Class IntegrationUpdate | Remora.Discord",
    "keywords": "Class IntegrationUpdate Represents the creation of an integration. Inheritance Object Integration IntegrationUpdate Implements IEquatable < Integration > IIntegrationUpdate IIntegration IPartialIntegration IGatewayEvent IGatewayPayloadData IEquatable < IntegrationUpdate > Inherited Members Integration.ID Integration.Name Integration.Type Integration.IsEnabled Integration.IsSyncing Integration.RoleID Integration.EnableEmoticons Integration.ExpireBehaviour Integration.ExpireGracePeriod Integration.User Integration.Account Integration.SyncedAt Integration.SubscriberCount Integration.IsRevoked Integration.Application Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class IntegrationUpdate : Integration, IEquatable<Integration>, IIntegrationUpdate, IIntegration, IPartialIntegration, IGatewayEvent, IGatewayPayloadData, IEquatable<IntegrationUpdate> Constructors | Improve this Doc View Source IntegrationUpdate(Snowflake, String, String, Optional<Boolean>, Boolean, Snowflake, Optional<Boolean>, IntegrationExpireBehaviour, TimeSpan, Optional<IUser>, IAccount, DateTimeOffset, Int32, Boolean, Optional<IIntegrationApplication>, Snowflake) Declaration public IntegrationUpdate(Snowflake ID, string Name, string Type, Optional<bool> IsEnabled, bool IsSyncing, Snowflake RoleID, Optional<bool> EnableEmoticons, IntegrationExpireBehaviour ExpireBehaviour, TimeSpan ExpireGracePeriod, Optional<IUser> User, IAccount Account, DateTimeOffset SyncedAt, int SubscriberCount, bool IsRevoked, Optional<IIntegrationApplication> Application, Snowflake GuildID) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name String Type Remora.Rest.Core.Optional < Boolean > IsEnabled Boolean IsSyncing Remora.Rest.Core.Snowflake RoleID Remora.Rest.Core.Optional < Boolean > EnableEmoticons IntegrationExpireBehaviour ExpireBehaviour TimeSpan ExpireGracePeriod Remora.Rest.Core.Optional < IUser > User IAccount Account DateTimeOffset SyncedAt Int32 SubscriberCount Boolean IsRevoked Remora.Rest.Core.Optional < IIntegrationApplication > Application Remora.Rest.Core.Snowflake GuildID Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements System.IEquatable<T> IIntegrationUpdate IIntegration IPartialIntegration IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.InteractionCreate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.InteractionCreate.html",
    "title": "Class InteractionCreate | Remora.Discord",
    "keywords": "Class InteractionCreate Represents a user-invoked slash command. Inheritance Object InteractionCreate Implements IInteractionCreate IInteraction IGatewayEvent IGatewayPayloadData IEquatable < InteractionCreate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class InteractionCreate : IInteractionCreate, IInteraction, IGatewayEvent, IGatewayPayloadData, IEquatable<InteractionCreate> Constructors | Improve this Doc View Source InteractionCreate(Snowflake, Snowflake, InteractionType, Optional<IInteractionData>, Optional<Snowflake>, Optional<Snowflake>, Optional<IGuildMember>, Optional<IUser>, String, Int32, Optional<IMessage>, Optional<String>, Optional<String>) Declaration public InteractionCreate(Snowflake ID, Snowflake ApplicationID, InteractionType Type, Optional<IInteractionData> Data, Optional<Snowflake> GuildID, Optional<Snowflake> ChannelID, Optional<IGuildMember> Member, Optional<IUser> User, string Token, int Version, Optional<IMessage> Message = default(Optional<IMessage>), Optional<string> Locale = default(Optional<string>), Optional<string> GuildLocale = default(Optional<string>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake ApplicationID InteractionType Type Remora.Rest.Core.Optional < IInteractionData > Data Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < IGuildMember > Member Remora.Rest.Core.Optional < IUser > User String Token Int32 Version Remora.Rest.Core.Optional < IMessage > Message Remora.Rest.Core.Optional < String > Locale Remora.Rest.Core.Optional < String > GuildLocale Properties | Improve this Doc View Source ApplicationID Declaration public Snowflake ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ChannelID Declaration public Optional<Snowflake> ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Data Declaration public Optional<IInteractionData> Data { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IInteractionData > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildLocale Declaration public Optional<string> GuildLocale { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Locale Declaration public Optional<string> Locale { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Member Declaration public Optional<IGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source Message Declaration public Optional<IMessage> Message { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessage > | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description String | Improve this Doc View Source Type Declaration public InteractionType Type { get; set; } Property Value Type Description InteractionType | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source Version Declaration public int Version { get; set; } Property Value Type Description Int32 Implements IInteractionCreate IInteraction IGatewayEvent IGatewayPayloadData System.IEquatable<T> Extension Methods InteractionCreateExtensions.CreateContext(IInteractionCreate)"
  },
  "api/Remora.Discord.API.Gateway.Events.InvalidSession.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.InvalidSession.html",
    "title": "Class InvalidSession | Remora.Discord",
    "keywords": "Class InvalidSession Represents a reconnection event from the gateway. Inheritance Object InvalidSession Implements IInvalidSession IGatewayEvent IGatewayPayloadData IEquatable < InvalidSession > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class InvalidSession : IInvalidSession, IGatewayEvent, IGatewayPayloadData, IEquatable<InvalidSession> Constructors | Improve this Doc View Source InvalidSession(Boolean) Declaration public InvalidSession(bool IsResumable) Parameters Type Name Description Boolean IsResumable Properties | Improve this Doc View Source IsResumable Declaration public bool IsResumable { get; set; } Property Value Type Description Boolean Implements IInvalidSession IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.InviteCreate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.InviteCreate.html",
    "title": "Class InviteCreate | Remora.Discord",
    "keywords": "Class InviteCreate Represents the creation of an invite. Inheritance Object InviteCreate Implements IInviteCreate IGatewayEvent IGatewayPayloadData IEquatable < InviteCreate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class InviteCreate : IInviteCreate, IGatewayEvent, IGatewayPayloadData, IEquatable<InviteCreate> Constructors | Improve this Doc View Source InviteCreate(Snowflake, String, DateTimeOffset, Optional<Snowflake>, Optional<IUser>, TimeSpan, Int32, Optional<IPartialUser>, Optional<InviteTarget>, Optional<IPartialApplication>, Boolean, Int32) Declaration public InviteCreate(Snowflake ChannelID, string Code, DateTimeOffset CreatedAt, Optional<Snowflake> GuildID, Optional<IUser> Inviter, TimeSpan MaxAge, int MaxUses, Optional<IPartialUser> TargetUser, Optional<InviteTarget> TargetType, Optional<IPartialApplication> TargetApplication, bool IsTemporary, int Uses) Parameters Type Name Description Remora.Rest.Core.Snowflake ChannelID String Code DateTimeOffset CreatedAt Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < IUser > Inviter TimeSpan MaxAge Int32 MaxUses Remora.Rest.Core.Optional < IPartialUser > TargetUser Remora.Rest.Core.Optional < InviteTarget > TargetType Remora.Rest.Core.Optional < IPartialApplication > TargetApplication Boolean IsTemporary Int32 Uses Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Code Declaration public string Code { get; set; } Property Value Type Description String | Improve this Doc View Source CreatedAt Declaration public DateTimeOffset CreatedAt { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Inviter Declaration public Optional<IUser> Inviter { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source IsTemporary Declaration public bool IsTemporary { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MaxAge Declaration public TimeSpan MaxAge { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source MaxUses Declaration public int MaxUses { get; set; } Property Value Type Description Int32 | Improve this Doc View Source TargetApplication Declaration public Optional<IPartialApplication> TargetApplication { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source TargetType Declaration public Optional<InviteTarget> TargetType { get; set; } Property Value Type Description Remora.Rest.Core.Optional < InviteTarget > | Improve this Doc View Source TargetUser Declaration public Optional<IPartialUser> TargetUser { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialUser > | Improve this Doc View Source Uses Declaration public int Uses { get; set; } Property Value Type Description Int32 Implements IInviteCreate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.InviteDelete.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.InviteDelete.html",
    "title": "Class InviteDelete | Remora.Discord",
    "keywords": "Class InviteDelete Represents the deletion of an invite link. Inheritance Object InviteDelete Implements IInviteDelete IGatewayEvent IGatewayPayloadData IEquatable < InviteDelete > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class InviteDelete : IInviteDelete, IGatewayEvent, IGatewayPayloadData, IEquatable<InviteDelete> Constructors | Improve this Doc View Source InviteDelete(Snowflake, Optional<Snowflake>, String) Declaration public InviteDelete(Snowflake ChannelID, Optional<Snowflake> GuildID, string Code) Parameters Type Name Description Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID String Code Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Code Declaration public string Code { get; set; } Property Value Type Description String | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > Implements IInviteDelete IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.MessageCreate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.MessageCreate.html",
    "title": "Class MessageCreate | Remora.Discord",
    "keywords": "Class MessageCreate Represents the creation of a message. Inheritance Object Message MessageCreate Implements IEquatable < Message > IMessageCreate IGatewayEvent IGatewayPayloadData IMessage IPartialMessage IEquatable < MessageCreate > Inherited Members Message.ID Message.ChannelID Message.GuildID Message.Author Message.Member Message.Content Message.Timestamp Message.EditedTimestamp Message.IsTTS Message.MentionsEveryone Message.Mentions Message.MentionedRoles Message.MentionedChannels Message.Attachments Message.Embeds Message.Reactions Message.Nonce Message.IsPinned Message.WebhookID Message.Type Message.Activity Message.Application Message.ApplicationID Message.MessageReference Message.Flags Message.ReferencedMessage Message.Interaction Message.Thread Message.Components Message.StickerItems Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageCreate : Message, IEquatable<Message>, IMessageCreate, IGatewayEvent, IGatewayPayloadData, IMessage, IPartialMessage, IEquatable<MessageCreate> Constructors | Improve this Doc View Source MessageCreate(Snowflake, Snowflake, Optional<Snowflake>, IUser, Optional<IPartialGuildMember>, String, DateTimeOffset, Nullable<DateTimeOffset>, Boolean, Boolean, IReadOnlyList<IUserMention>, IReadOnlyList<Snowflake>, Optional<IReadOnlyList<IChannelMention>>, IReadOnlyList<IAttachment>, IReadOnlyList<IEmbed>, Optional<IReadOnlyList<IReaction>>, Optional<String>, Boolean, Optional<Snowflake>, MessageType, Optional<IMessageActivity>, Optional<IPartialApplication>, Optional<Snowflake>, Optional<IMessageReference>, Optional<MessageFlags>, Optional<IMessage>, Optional<IMessageInteraction>, Optional<IChannel>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<IStickerItem>>) Declaration public MessageCreate(Snowflake ID, Snowflake ChannelID, Optional<Snowflake> GuildID, IUser Author, Optional<IPartialGuildMember> Member, string Content, DateTimeOffset Timestamp, DateTimeOffset? EditedTimestamp, bool IsTTS, bool MentionsEveryone, IReadOnlyList<IUserMention> Mentions, IReadOnlyList<Snowflake> MentionedRoles, Optional<IReadOnlyList<IChannelMention>> MentionedChannels, IReadOnlyList<IAttachment> Attachments, IReadOnlyList<IEmbed> Embeds, Optional<IReadOnlyList<IReaction>> Reactions, Optional<string> Nonce, bool IsPinned, Optional<Snowflake> WebhookID, MessageType Type, Optional<IMessageActivity> Activity = default(Optional<IMessageActivity>), Optional<IPartialApplication> Application = default(Optional<IPartialApplication>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<IMessageReference> MessageReference = default(Optional<IMessageReference>), Optional<MessageFlags> Flags = default(Optional<MessageFlags>), Optional<IMessage> ReferencedMessage = default(Optional<IMessage>), Optional<IMessageInteraction> Interaction = default(Optional<IMessageInteraction>), Optional<IChannel> Thread = default(Optional<IChannel>), Optional<IReadOnlyList<IMessageComponent>> Components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<IStickerItem>> StickerItems = default(Optional<IReadOnlyList<IStickerItem>>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID IUser Author Remora.Rest.Core.Optional < IPartialGuildMember > Member String Content DateTimeOffset Timestamp Nullable < DateTimeOffset > EditedTimestamp Boolean IsTTS Boolean MentionsEveryone IReadOnlyList < IUserMention > Mentions IReadOnlyList < Remora.Rest.Core.Snowflake > MentionedRoles Remora.Rest.Core.Optional < IReadOnlyList < IChannelMention >> MentionedChannels IReadOnlyList < IAttachment > Attachments IReadOnlyList < IEmbed > Embeds Remora.Rest.Core.Optional < IReadOnlyList < IReaction >> Reactions Remora.Rest.Core.Optional < String > Nonce Boolean IsPinned Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > WebhookID MessageType Type Remora.Rest.Core.Optional < IMessageActivity > Activity Remora.Rest.Core.Optional < IPartialApplication > Application Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < IMessageReference > MessageReference Remora.Rest.Core.Optional < MessageFlags > Flags Remora.Rest.Core.Optional < IMessage > ReferencedMessage Remora.Rest.Core.Optional < IMessageInteraction > Interaction Remora.Rest.Core.Optional < IChannel > Thread Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> Components Remora.Rest.Core.Optional < IReadOnlyList < IStickerItem >> StickerItems Implements System.IEquatable<T> IMessageCreate IGatewayEvent IGatewayPayloadData IMessage IPartialMessage System.IEquatable<T> Extension Methods MessageCreateExtensions.CreateContext(IMessageCreate)"
  },
  "api/Remora.Discord.API.Gateway.Events.MessageDelete.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.MessageDelete.html",
    "title": "Class MessageDelete | Remora.Discord",
    "keywords": "Class MessageDelete Represents the deletion of a message. Inheritance Object MessageDelete Implements IMessageDelete IGatewayEvent IGatewayPayloadData IEquatable < MessageDelete > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageDelete : IMessageDelete, IGatewayEvent, IGatewayPayloadData, IEquatable<MessageDelete> Constructors | Improve this Doc View Source MessageDelete(Snowflake, Snowflake, Optional<Snowflake>) Declaration public MessageDelete(Snowflake ID, Snowflake ChannelID, Optional<Snowflake> GuildID = default(Optional<Snowflake>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IMessageDelete IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.MessageDeleteBulk.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.MessageDeleteBulk.html",
    "title": "Class MessageDeleteBulk | Remora.Discord",
    "keywords": "Class MessageDeleteBulk Represents a bulk deletion of a set of messages. Inheritance Object MessageDeleteBulk Implements IMessageDeleteBulk IGatewayEvent IGatewayPayloadData IEquatable < MessageDeleteBulk > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageDeleteBulk : IMessageDeleteBulk, IGatewayEvent, IGatewayPayloadData, IEquatable<MessageDeleteBulk> Constructors | Improve this Doc View Source MessageDeleteBulk(IReadOnlyList<Snowflake>, Snowflake, Optional<Snowflake>) Declaration public MessageDeleteBulk(IReadOnlyList<Snowflake> IDs, Snowflake ChannelID, Optional<Snowflake> GuildID = default(Optional<Snowflake>)) Parameters Type Name Description IReadOnlyList < Remora.Rest.Core.Snowflake > IDs Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IDs Declaration public IReadOnlyList<Snowflake> IDs { get; set; } Property Value Type Description IReadOnlyList < Remora.Rest.Core.Snowflake > Implements IMessageDeleteBulk IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.MessageReactionAdd.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.MessageReactionAdd.html",
    "title": "Class MessageReactionAdd | Remora.Discord",
    "keywords": "Class MessageReactionAdd Represents the addition of a reaction to a message. Inheritance Object MessageReactionAdd Implements IMessageReactionAdd IGatewayEvent IGatewayPayloadData IEquatable < MessageReactionAdd > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageReactionAdd : IMessageReactionAdd, IGatewayEvent, IGatewayPayloadData, IEquatable<MessageReactionAdd> Constructors | Improve this Doc View Source MessageReactionAdd(Snowflake, Snowflake, Snowflake, Optional<Snowflake>, Optional<IGuildMember>, IPartialEmoji) Declaration public MessageReactionAdd(Snowflake UserID, Snowflake ChannelID, Snowflake MessageID, Optional<Snowflake> GuildID, Optional<IGuildMember> Member, IPartialEmoji Emoji) Parameters Type Name Description Remora.Rest.Core.Snowflake UserID Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Snowflake MessageID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < IGuildMember > Member IPartialEmoji Emoji Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Emoji Declaration public IPartialEmoji Emoji { get; set; } Property Value Type Description IPartialEmoji | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Member Declaration public Optional<IGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source MessageID Declaration public Snowflake MessageID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source UserID Declaration public Snowflake UserID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IMessageReactionAdd IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.MessageReactionRemove.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.MessageReactionRemove.html",
    "title": "Class MessageReactionRemove | Remora.Discord",
    "keywords": "Class MessageReactionRemove Represents the removal of a reaction from a message. Inheritance Object MessageReactionRemove Implements IMessageReactionRemove IGatewayEvent IGatewayPayloadData IEquatable < MessageReactionRemove > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageReactionRemove : IMessageReactionRemove, IGatewayEvent, IGatewayPayloadData, IEquatable<MessageReactionRemove> Constructors | Improve this Doc View Source MessageReactionRemove(Snowflake, Snowflake, Snowflake, Optional<Snowflake>, IPartialEmoji) Declaration public MessageReactionRemove(Snowflake UserID, Snowflake ChannelID, Snowflake MessageID, Optional<Snowflake> GuildID, IPartialEmoji Emoji) Parameters Type Name Description Remora.Rest.Core.Snowflake UserID Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Snowflake MessageID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID IPartialEmoji Emoji Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Emoji Declaration public IPartialEmoji Emoji { get; set; } Property Value Type Description IPartialEmoji | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source MessageID Declaration public Snowflake MessageID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source UserID Declaration public Snowflake UserID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IMessageReactionRemove IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.MessageReactionRemoveAll.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.MessageReactionRemoveAll.html",
    "title": "Class MessageReactionRemoveAll | Remora.Discord",
    "keywords": "Class MessageReactionRemoveAll Represents the removal of all reaction from a message. Inheritance Object MessageReactionRemoveAll Implements IMessageReactionRemoveAll IGatewayEvent IGatewayPayloadData IEquatable < MessageReactionRemoveAll > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageReactionRemoveAll : IMessageReactionRemoveAll, IGatewayEvent, IGatewayPayloadData, IEquatable<MessageReactionRemoveAll> Constructors | Improve this Doc View Source MessageReactionRemoveAll(Snowflake, Snowflake, Optional<Snowflake>) Declaration public MessageReactionRemoveAll(Snowflake ChannelID, Snowflake MessageID, Optional<Snowflake> GuildID = default(Optional<Snowflake>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Snowflake MessageID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source MessageID Declaration public Snowflake MessageID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IMessageReactionRemoveAll IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.MessageReactionRemoveEmoji.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.MessageReactionRemoveEmoji.html",
    "title": "Class MessageReactionRemoveEmoji | Remora.Discord",
    "keywords": "Class MessageReactionRemoveEmoji Represents the removal of all instances of a given emoji from a message. Inheritance Object MessageReactionRemoveEmoji Implements IMessageReactionRemoveEmoji IGatewayEvent IGatewayPayloadData IEquatable < MessageReactionRemoveEmoji > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageReactionRemoveEmoji : IMessageReactionRemoveEmoji, IGatewayEvent, IGatewayPayloadData, IEquatable<MessageReactionRemoveEmoji> Constructors | Improve this Doc View Source MessageReactionRemoveEmoji(Snowflake, Snowflake, Optional<Snowflake>, IPartialEmoji) Declaration public MessageReactionRemoveEmoji(Snowflake ChannelID, Snowflake MessageID, Optional<Snowflake> GuildID, IPartialEmoji Emoji) Parameters Type Name Description Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Snowflake MessageID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID IPartialEmoji Emoji Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Emoji Declaration public IPartialEmoji Emoji { get; set; } Property Value Type Description IPartialEmoji | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source MessageID Declaration public Snowflake MessageID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IMessageReactionRemoveEmoji IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.MessageUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.MessageUpdate.html",
    "title": "Class MessageUpdate | Remora.Discord",
    "keywords": "Class MessageUpdate Represents the creation of a message. Inheritance Object PartialMessage MessageUpdate Implements IEquatable < PartialMessage > IMessageUpdate IPartialMessage IGatewayEvent IGatewayPayloadData IEquatable < MessageUpdate > Inherited Members PartialMessage.ID PartialMessage.ChannelID PartialMessage.GuildID PartialMessage.Author PartialMessage.Member PartialMessage.Content PartialMessage.Timestamp PartialMessage.EditedTimestamp PartialMessage.IsTTS PartialMessage.MentionsEveryone PartialMessage.Mentions PartialMessage.MentionedRoles PartialMessage.MentionedChannels PartialMessage.Attachments PartialMessage.Embeds PartialMessage.Reactions PartialMessage.Nonce PartialMessage.IsPinned PartialMessage.WebhookID PartialMessage.Type PartialMessage.Activity PartialMessage.Application PartialMessage.ApplicationID PartialMessage.MessageReference PartialMessage.Flags PartialMessage.ReferencedMessage PartialMessage.Interaction PartialMessage.Thread PartialMessage.Components PartialMessage.StickerItems Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageUpdate : PartialMessage, IEquatable<PartialMessage>, IMessageUpdate, IPartialMessage, IGatewayEvent, IGatewayPayloadData, IEquatable<MessageUpdate> Constructors | Improve this Doc View Source MessageUpdate(Optional<Snowflake>, Optional<Snowflake>, Optional<Snowflake>, Optional<IUser>, Optional<IPartialGuildMember>, Optional<String>, Optional<DateTimeOffset>, Optional<Nullable<DateTimeOffset>>, Optional<Boolean>, Optional<Boolean>, Optional<IReadOnlyList<IUserMention>>, Optional<IReadOnlyList<Snowflake>>, Optional<IReadOnlyList<IChannelMention>>, Optional<IReadOnlyList<IAttachment>>, Optional<IReadOnlyList<IEmbed>>, Optional<IReadOnlyList<IReaction>>, Optional<String>, Optional<Boolean>, Optional<Snowflake>, Optional<MessageType>, Optional<IMessageActivity>, Optional<IPartialApplication>, Optional<Snowflake>, Optional<IMessageReference>, Optional<MessageFlags>, Optional<IMessage>, Optional<IMessageInteraction>, Optional<IChannel>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<IStickerItem>>) Declaration public MessageUpdate(Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<Snowflake> ChannelID = default(Optional<Snowflake>), Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<IUser> Author = default(Optional<IUser>), Optional<IPartialGuildMember> Member = default(Optional<IPartialGuildMember>), Optional<string> Content = default(Optional<string>), Optional<DateTimeOffset> Timestamp = default(Optional<DateTimeOffset>), Optional<DateTimeOffset?> EditedTimestamp = default(Optional<DateTimeOffset?>), Optional<bool> IsTTS = default(Optional<bool>), Optional<bool> MentionsEveryone = default(Optional<bool>), Optional<IReadOnlyList<IUserMention>> Mentions = default(Optional<IReadOnlyList<IUserMention>>), Optional<IReadOnlyList<Snowflake>> MentionedRoles = default(Optional<IReadOnlyList<Snowflake>>), Optional<IReadOnlyList<IChannelMention>> MentionedChannels = default(Optional<IReadOnlyList<IChannelMention>>), Optional<IReadOnlyList<IAttachment>> Attachments = default(Optional<IReadOnlyList<IAttachment>>), Optional<IReadOnlyList<IEmbed>> Embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IReadOnlyList<IReaction>> Reactions = default(Optional<IReadOnlyList<IReaction>>), Optional<string> Nonce = default(Optional<string>), Optional<bool> IsPinned = default(Optional<bool>), Optional<Snowflake> WebhookID = default(Optional<Snowflake>), Optional<MessageType> Type = default(Optional<MessageType>), Optional<IMessageActivity> Activity = default(Optional<IMessageActivity>), Optional<IPartialApplication> Application = default(Optional<IPartialApplication>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<IMessageReference> MessageReference = default(Optional<IMessageReference>), Optional<MessageFlags> Flags = default(Optional<MessageFlags>), Optional<IMessage> ReferencedMessage = default(Optional<IMessage>), Optional<IMessageInteraction> Interaction = default(Optional<IMessageInteraction>), Optional<IChannel> Thread = default(Optional<IChannel>), Optional<IReadOnlyList<IMessageComponent>> Components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<IStickerItem>> StickerItems = default(Optional<IReadOnlyList<IStickerItem>>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < IUser > Author Remora.Rest.Core.Optional < IPartialGuildMember > Member Remora.Rest.Core.Optional < String > Content Remora.Rest.Core.Optional < DateTimeOffset > Timestamp Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> EditedTimestamp Remora.Rest.Core.Optional < Boolean > IsTTS Remora.Rest.Core.Optional < Boolean > MentionsEveryone Remora.Rest.Core.Optional < IReadOnlyList < IUserMention >> Mentions Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> MentionedRoles Remora.Rest.Core.Optional < IReadOnlyList < IChannelMention >> MentionedChannels Remora.Rest.Core.Optional < IReadOnlyList < IAttachment >> Attachments Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> Embeds Remora.Rest.Core.Optional < IReadOnlyList < IReaction >> Reactions Remora.Rest.Core.Optional < String > Nonce Remora.Rest.Core.Optional < Boolean > IsPinned Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > WebhookID Remora.Rest.Core.Optional < MessageType > Type Remora.Rest.Core.Optional < IMessageActivity > Activity Remora.Rest.Core.Optional < IPartialApplication > Application Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < IMessageReference > MessageReference Remora.Rest.Core.Optional < MessageFlags > Flags Remora.Rest.Core.Optional < IMessage > ReferencedMessage Remora.Rest.Core.Optional < IMessageInteraction > Interaction Remora.Rest.Core.Optional < IChannel > Thread Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> Components Remora.Rest.Core.Optional < IReadOnlyList < IStickerItem >> StickerItems Implements System.IEquatable<T> IMessageUpdate IPartialMessage IGatewayEvent IGatewayPayloadData System.IEquatable<T> Extension Methods MessageUpdateExtensions.CreateContext(IMessageUpdate)"
  },
  "api/Remora.Discord.API.Gateway.Events.PresenceUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.PresenceUpdate.html",
    "title": "Class PresenceUpdate | Remora.Discord",
    "keywords": "Class PresenceUpdate Represents the update of a user's presence. Inheritance Object Presence PresenceUpdate Implements IEquatable < Presence > IPresenceUpdate IGatewayEvent IGatewayPayloadData IPresence IPartialPresence IEquatable < PresenceUpdate > Inherited Members Presence.User Presence.GuildID Presence.Status Presence.Activities Presence.ClientStatus Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PresenceUpdate : Presence, IEquatable<Presence>, IPresenceUpdate, IGatewayEvent, IGatewayPayloadData, IPresence, IPartialPresence, IEquatable<PresenceUpdate> Constructors | Improve this Doc View Source PresenceUpdate(IPartialUser, Snowflake, ClientStatus, IReadOnlyList<IActivity>, IClientStatuses) Declaration public PresenceUpdate(IPartialUser User, Snowflake GuildID, ClientStatus Status, IReadOnlyList<IActivity> Activities, IClientStatuses ClientStatus) Parameters Type Name Description IPartialUser User Remora.Rest.Core.Snowflake GuildID ClientStatus Status IReadOnlyList < IActivity > Activities IClientStatuses ClientStatus Implements System.IEquatable<T> IPresenceUpdate IGatewayEvent IGatewayPayloadData IPresence IPartialPresence System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Ready.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Ready.html",
    "title": "Class Ready | Remora.Discord",
    "keywords": "Class Ready Represents initial gateway state information. Inheritance Object Ready Implements IReady IGatewayEvent IGatewayPayloadData IEquatable < Ready > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Ready : IReady, IGatewayEvent, IGatewayPayloadData, IEquatable<Ready> Constructors | Improve this Doc View Source Ready(Int32, IUser, IReadOnlyList<IUnavailableGuild>, String, Optional<IShardIdentification>, IPartialApplication) Declaration public Ready(int Version, IUser User, IReadOnlyList<IUnavailableGuild> Guilds, string SessionID, Optional<IShardIdentification> Shard, IPartialApplication Application) Parameters Type Name Description Int32 Version IUser User IReadOnlyList < IUnavailableGuild > Guilds String SessionID Remora.Rest.Core.Optional < IShardIdentification > Shard IPartialApplication Application Properties | Improve this Doc View Source Application Declaration public IPartialApplication Application { get; set; } Property Value Type Description IPartialApplication | Improve this Doc View Source Guilds Declaration public IReadOnlyList<IUnavailableGuild> Guilds { get; set; } Property Value Type Description IReadOnlyList < IUnavailableGuild > | Improve this Doc View Source SessionID Declaration public string SessionID { get; set; } Property Value Type Description String | Improve this Doc View Source Shard Declaration public Optional<IShardIdentification> Shard { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IShardIdentification > | Improve this Doc View Source User Declaration public IUser User { get; set; } Property Value Type Description IUser | Improve this Doc View Source Version Declaration public int Version { get; set; } Property Value Type Description Int32 Implements IReady IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Reconnect.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Reconnect.html",
    "title": "Class Reconnect | Remora.Discord",
    "keywords": "Class Reconnect Represents a reconnection request. This interface defines no data. Inheritance Object Reconnect Implements IReconnect IGatewayEvent IGatewayPayloadData IEquatable < Reconnect > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Reconnect : IReconnect, IGatewayEvent, IGatewayPayloadData, IEquatable<Reconnect> Implements IReconnect IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.Resumed.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.Resumed.html",
    "title": "Class Resumed | Remora.Discord",
    "keywords": "Class Resumed Represents an event that marks the completion of a session resumption. Inheritance Object Resumed Implements IResumed IGatewayEvent IGatewayPayloadData IEquatable < Resumed > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Resumed : IResumed, IGatewayEvent, IGatewayPayloadData, IEquatable<Resumed> Implements IResumed IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.TypingStart.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.TypingStart.html",
    "title": "Class TypingStart | Remora.Discord",
    "keywords": "Class TypingStart Sent when a user starts typing in a channel. Inheritance Object TypingStart Implements ITypingStart IGatewayEvent IGatewayPayloadData IEquatable < TypingStart > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class TypingStart : ITypingStart, IGatewayEvent, IGatewayPayloadData, IEquatable<TypingStart> Constructors | Improve this Doc View Source TypingStart(Snowflake, Optional<Snowflake>, Snowflake, DateTimeOffset, Optional<IGuildMember>) Declaration public TypingStart(Snowflake ChannelID, Optional<Snowflake> GuildID, Snowflake UserID, DateTimeOffset Timestamp, Optional<IGuildMember> Member = default(Optional<IGuildMember>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Snowflake UserID DateTimeOffset Timestamp Remora.Rest.Core.Optional < IGuildMember > Member Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Member Declaration public Optional<IGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source Timestamp Declaration public DateTimeOffset Timestamp { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source UserID Declaration public Snowflake UserID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements ITypingStart IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.UnknownEvent.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.UnknownEvent.html",
    "title": "Class UnknownEvent | Remora.Discord",
    "keywords": "Class UnknownEvent Represents an unknown event. Inheritance Object UnknownEvent Implements IUnknownEvent IGatewayEvent IGatewayPayloadData IEquatable < UnknownEvent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class UnknownEvent : IUnknownEvent, IGatewayEvent, IGatewayPayloadData, IEquatable<UnknownEvent> Constructors | Improve this Doc View Source UnknownEvent(String) Declaration public UnknownEvent(string Data) Parameters Type Name Description String Data Properties | Improve this Doc View Source Data Declaration public string Data { get; set; } Property Value Type Description String Implements IUnknownEvent IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.UserUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.UserUpdate.html",
    "title": "Class UserUpdate | Remora.Discord",
    "keywords": "Class UserUpdate Represents an update to a user. Inheritance Object User UserUpdate Implements IEquatable < User > IUserUpdate IGatewayEvent IGatewayPayloadData IUser IPartialUser IEquatable < UserUpdate > Inherited Members User.ID User.Username User.Discriminator User.Avatar User.IsBot User.IsSystem User.IsMFAEnabled User.Banner User.AccentColour User.Locale User.IsVerified User.Email User.Flags User.PremiumType User.PublicFlags Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class UserUpdate : User, IEquatable<User>, IUserUpdate, IGatewayEvent, IGatewayPayloadData, IUser, IPartialUser, IEquatable<UserUpdate> Constructors | Improve this Doc View Source UserUpdate(Snowflake, String, UInt16, IImageHash, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<IImageHash>, Optional<Nullable<Color>>, Optional<String>, Optional<Boolean>, Optional<String>, Optional<UserFlags>, Optional<PremiumType>, Optional<UserFlags>) Declaration public UserUpdate(Snowflake ID, string Username, ushort Discriminator, IImageHash Avatar, Optional<bool> IsBot = default(Optional<bool>), Optional<bool> IsSystem = default(Optional<bool>), Optional<bool> IsMFAEnabled = default(Optional<bool>), Optional<IImageHash> Banner = default(Optional<IImageHash>), Optional<Color?> AccentColour = default(Optional<Color?>), Optional<string> Locale = default(Optional<string>), Optional<bool> IsVerified = default(Optional<bool>), Optional<string> Email = default(Optional<string>), Optional<UserFlags> Flags = default(Optional<UserFlags>), Optional<PremiumType> PremiumType = default(Optional<PremiumType>), Optional<UserFlags> PublicFlags = default(Optional<UserFlags>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Username UInt16 Discriminator IImageHash Avatar Remora.Rest.Core.Optional < Boolean > IsBot Remora.Rest.Core.Optional < Boolean > IsSystem Remora.Rest.Core.Optional < Boolean > IsMFAEnabled Remora.Rest.Core.Optional < IImageHash > Banner Remora.Rest.Core.Optional < Nullable < Color >> AccentColour Remora.Rest.Core.Optional < String > Locale Remora.Rest.Core.Optional < Boolean > IsVerified Remora.Rest.Core.Optional < String > Email Remora.Rest.Core.Optional < UserFlags > Flags Remora.Rest.Core.Optional < PremiumType > PremiumType Remora.Rest.Core.Optional < UserFlags > PublicFlags Implements System.IEquatable<T> IUserUpdate IGatewayEvent IGatewayPayloadData IUser IPartialUser System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.VoiceServerUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.VoiceServerUpdate.html",
    "title": "Class VoiceServerUpdate | Remora.Discord",
    "keywords": "Class VoiceServerUpdate Represents an update to a voice server of a guild. Inheritance Object VoiceServerUpdate Implements IVoiceServerUpdate IGatewayEvent IGatewayPayloadData IEquatable < VoiceServerUpdate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceServerUpdate : IVoiceServerUpdate, IGatewayEvent, IGatewayPayloadData, IEquatable<VoiceServerUpdate> Constructors | Improve this Doc View Source VoiceServerUpdate(String, Snowflake, String) Declaration public VoiceServerUpdate(string Token, Snowflake GuildID, string Endpoint) Parameters Type Name Description String Token Remora.Rest.Core.Snowflake GuildID String Endpoint Properties | Improve this Doc View Source Endpoint Declaration public string Endpoint { get; set; } Property Value Type Description String | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description String Implements IVoiceServerUpdate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.VoiceStateUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.VoiceStateUpdate.html",
    "title": "Class VoiceStateUpdate | Remora.Discord",
    "keywords": "Class VoiceStateUpdate Represents an update to a user's voice state. Inheritance Object VoiceState VoiceStateUpdate Implements IEquatable < VoiceState > IVoiceStateUpdate IGatewayEvent IGatewayPayloadData IVoiceState IPartialVoiceState IEquatable < VoiceStateUpdate > Inherited Members VoiceState.GuildID VoiceState.ChannelID VoiceState.UserID VoiceState.Member VoiceState.SessionID VoiceState.IsDeafened VoiceState.IsMuted VoiceState.IsSelfDeafened VoiceState.IsSelfMuted VoiceState.IsStreaming VoiceState.IsVideoEnabled VoiceState.IsSuppressed VoiceState.RequestToSpeakTimestamp Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceStateUpdate : VoiceState, IEquatable<VoiceState>, IVoiceStateUpdate, IGatewayEvent, IGatewayPayloadData, IVoiceState, IPartialVoiceState, IEquatable<VoiceStateUpdate> Constructors | Improve this Doc View Source VoiceStateUpdate(Optional<Snowflake>, Nullable<Snowflake>, Snowflake, Optional<IGuildMember>, String, Boolean, Boolean, Boolean, Boolean, Optional<Boolean>, Boolean, Boolean, Nullable<DateTimeOffset>) Declaration public VoiceStateUpdate(Optional<Snowflake> GuildID, Snowflake? ChannelID, Snowflake UserID, Optional<IGuildMember> Member, string SessionID, bool IsDeafened, bool IsMuted, bool IsSelfDeafened, bool IsSelfMuted, Optional<bool> IsStreaming, bool IsVideoEnabled, bool IsSuppressed, DateTimeOffset? RequestToSpeakTimestamp) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Nullable < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Snowflake UserID Remora.Rest.Core.Optional < IGuildMember > Member String SessionID Boolean IsDeafened Boolean IsMuted Boolean IsSelfDeafened Boolean IsSelfMuted Remora.Rest.Core.Optional < Boolean > IsStreaming Boolean IsVideoEnabled Boolean IsSuppressed Nullable < DateTimeOffset > RequestToSpeakTimestamp Implements System.IEquatable<T> IVoiceStateUpdate IGatewayEvent IGatewayPayloadData IVoiceState IPartialVoiceState System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Gateway.Events.WebhooksUpdate.html": {
    "href": "api/Remora.Discord.API.Gateway.Events.WebhooksUpdate.html",
    "title": "Class WebhooksUpdate | Remora.Discord",
    "keywords": "Class WebhooksUpdate Represents an update to a webhook in a channel. Inheritance Object WebhooksUpdate Implements IWebhooksUpdate IGatewayEvent IGatewayPayloadData IEquatable < WebhooksUpdate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Gateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class WebhooksUpdate : IWebhooksUpdate, IGatewayEvent, IGatewayPayloadData, IEquatable<WebhooksUpdate> Constructors | Improve this Doc View Source WebhooksUpdate(Snowflake, Snowflake) Declaration public WebhooksUpdate(Snowflake GuildID, Snowflake ChannelID) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildID Remora.Rest.Core.Snowflake ChannelID Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IWebhooksUpdate IGatewayEvent IGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.html": {
    "href": "api/Remora.Discord.API.html",
    "title": "Namespace Remora.Discord.API | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API Classes CDN Provides various helper methods for accessing Discord's CDN. Constants Holds various constants. DiscordSnowflake Contains methods for initializing a Remora.Rest.Core.Snowflake with the DiscordEpoch . EventPayload<TEventData> Represents a Discord event payload. Payload<TData> Represents a payload from the Discord gateway. Enums CDNImageFormat Enumerates the image formats supported by the CDN."
  },
  "api/Remora.Discord.API.Json.html": {
    "href": "api/Remora.Discord.API.Json.html",
    "title": "Namespace Remora.Discord.API.Json | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Json Classes IPAddressConverter Converts an IPAddress to or from JSON. StringEnumListConverter<TEnum> Converts string array values into corresponding enum lists."
  },
  "api/Remora.Discord.API.Json.IPAddressConverter.html": {
    "href": "api/Remora.Discord.API.Json.IPAddressConverter.html",
    "title": "Class IPAddressConverter | Remora.Discord",
    "keywords": "Class IPAddressConverter Converts an IPAddress to or from JSON. Inheritance Object JsonConverter JsonConverter < IPAddress > IPAddressConverter Inherited Members JsonConverter<IPAddress>.CanConvert(Type) JsonConverter<IPAddress>.ReadAsPropertyName(Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<IPAddress>.WriteAsPropertyName(Utf8JsonWriter, IPAddress, JsonSerializerOptions) JsonConverter<IPAddress>.HandleNull Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Json Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class IPAddressConverter : JsonConverter<IPAddress> Methods | Improve this Doc View Source Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override IPAddress Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description IPAddress Overrides System.Text.Json.Serialization.JsonConverter<System.Net.IPAddress>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions) | Improve this Doc View Source Write(Utf8JsonWriter, IPAddress, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, IPAddress value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer IPAddress value JsonSerializerOptions options Overrides System.Text.Json.Serialization.JsonConverter<System.Net.IPAddress>.Write(System.Text.Json.Utf8JsonWriter, System.Net.IPAddress, System.Text.Json.JsonSerializerOptions)"
  },
  "api/Remora.Discord.API.Json.StringEnumListConverter-1.html": {
    "href": "api/Remora.Discord.API.Json.StringEnumListConverter-1.html",
    "title": "Class StringEnumListConverter<TEnum> | Remora.Discord",
    "keywords": "Class StringEnumListConverter<TEnum> Converts string array values into corresponding enum lists. Inheritance Object JsonConverter JsonConverter < IReadOnlyList <TEnum>> StringEnumListConverter<TEnum> Inherited Members JsonConverter<IReadOnlyList<TEnum>>.CanConvert(Type) JsonConverter<IReadOnlyList<TEnum>>.ReadAsPropertyName(Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<IReadOnlyList<TEnum>>.WriteAsPropertyName(Utf8JsonWriter, IReadOnlyList<TEnum>, JsonSerializerOptions) JsonConverter<IReadOnlyList<TEnum>>.HandleNull Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Json Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class StringEnumListConverter<TEnum> : JsonConverter<IReadOnlyList<TEnum>> where TEnum : struct, Enum Type Parameters Name Description TEnum The type of enum values to be converted. Constructors | Improve this Doc View Source StringEnumListConverter(JsonNamingPolicy) Initializes a new instance of the StringEnumListConverter<TEnum> class. Declaration public StringEnumListConverter(JsonNamingPolicy namingPolicy) Parameters Type Name Description JsonNamingPolicy namingPolicy The naming policy to be used to translate JSON values into enum values, and vice-versa. Methods | Improve this Doc View Source Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override IReadOnlyList<TEnum> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description IReadOnlyList <TEnum> Overrides System.Text.Json.Serialization.JsonConverter<System.Collections.Generic.IReadOnlyList<TEnum>>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions) | Improve this Doc View Source Write(Utf8JsonWriter, IReadOnlyList<TEnum>, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, IReadOnlyList<TEnum> value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer IReadOnlyList <TEnum> value JsonSerializerOptions options Overrides System.Text.Json.Serialization.JsonConverter<System.Collections.Generic.IReadOnlyList<TEnum>>.Write(System.Text.Json.Utf8JsonWriter, System.Collections.Generic.IReadOnlyList<TEnum>, System.Text.Json.JsonSerializerOptions)"
  },
  "api/Remora.Discord.API.Objects.Account.html": {
    "href": "api/Remora.Discord.API.Objects.Account.html",
    "title": "Class Account | Remora.Discord",
    "keywords": "Class Account Represents an integration account. Inheritance Object Account Implements IAccount IEquatable < Account > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Account : IAccount, IEquatable<Account> Constructors | Improve this Doc View Source Account(Snowflake, String) Declaration public Account(Snowflake ID, string Name) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name Properties | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String Implements IAccount System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ActionRowComponent.html": {
    "href": "api/Remora.Discord.API.Objects.ActionRowComponent.html",
    "title": "Class ActionRowComponent | Remora.Discord",
    "keywords": "Class ActionRowComponent Represents a row of interactive components. Inheritance Object ActionRowComponent Implements IActionRowComponent IMessageComponent IPartialActionRowComponent IPartialMessageComponent IEquatable < ActionRowComponent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ActionRowComponent : IActionRowComponent, IMessageComponent, IPartialActionRowComponent, IPartialMessageComponent, IEquatable<ActionRowComponent> Constructors | Improve this Doc View Source ActionRowComponent(IReadOnlyList<IMessageComponent>) Declaration public ActionRowComponent(IReadOnlyList<IMessageComponent> Components) Parameters Type Name Description IReadOnlyList < IMessageComponent > Components Properties | Improve this Doc View Source Components Declaration public IReadOnlyList<IMessageComponent> Components { get; set; } Property Value Type Description IReadOnlyList < IMessageComponent > | Improve this Doc View Source Type Gets the type of the component. Declaration public ComponentType Type { get; } Property Value Type Description ComponentType Implements IActionRowComponent IMessageComponent IPartialActionRowComponent IPartialMessageComponent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Activity.html": {
    "href": "api/Remora.Discord.API.Objects.Activity.html",
    "title": "Class Activity | Remora.Discord",
    "keywords": "Class Activity Represents information about an activity Discord is aware of. Inheritance Object Activity Implements IActivity IEquatable < Activity > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Activity : IActivity, IEquatable<Activity> Constructors | Improve this Doc View Source Activity(String, ActivityType, Optional<Uri>, Optional<DateTimeOffset>, Optional<Snowflake>, Optional<IActivityTimestamps>, Optional<String>, Optional<String>, Optional<IActivityEmoji>, Optional<IActivityParty>, Optional<IActivityAssets>, Optional<IActivitySecrets>, Optional<Boolean>, Optional<ActivityFlags>, Optional<OneOf<IReadOnlyList<String>, IReadOnlyList<IActivityButton>>>) Declaration public Activity(string Name, ActivityType Type, Optional<Uri> Url = default(Optional<Uri>), Optional<DateTimeOffset> CreatedAt = default(Optional<DateTimeOffset>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<IActivityTimestamps> Timestamps = default(Optional<IActivityTimestamps>), Optional<string> Details = default(Optional<string>), Optional<string> State = default(Optional<string>), Optional<IActivityEmoji> Emoji = default(Optional<IActivityEmoji>), Optional<IActivityParty> Party = default(Optional<IActivityParty>), Optional<IActivityAssets> Assets = default(Optional<IActivityAssets>), Optional<IActivitySecrets> Secrets = default(Optional<IActivitySecrets>), Optional<bool> Instance = default(Optional<bool>), Optional<ActivityFlags> Flags = default(Optional<ActivityFlags>), Optional<OneOf<IReadOnlyList<string>, IReadOnlyList<IActivityButton>>> Buttons = default(Optional<OneOf<IReadOnlyList<string>, IReadOnlyList<IActivityButton>>>)) Parameters Type Name Description String Name ActivityType Type Remora.Rest.Core.Optional < Uri > Url Remora.Rest.Core.Optional < DateTimeOffset > CreatedAt Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < IActivityTimestamps > Timestamps Remora.Rest.Core.Optional < String > Details Remora.Rest.Core.Optional < String > State Remora.Rest.Core.Optional < IActivityEmoji > Emoji Remora.Rest.Core.Optional < IActivityParty > Party Remora.Rest.Core.Optional < IActivityAssets > Assets Remora.Rest.Core.Optional < IActivitySecrets > Secrets Remora.Rest.Core.Optional < Boolean > Instance Remora.Rest.Core.Optional < ActivityFlags > Flags Remora.Rest.Core.Optional < OneOf.OneOf < IReadOnlyList < String >, IReadOnlyList < IActivityButton >>> Buttons Properties | Improve this Doc View Source ApplicationID Declaration public Optional<Snowflake> ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Assets Declaration public Optional<IActivityAssets> Assets { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IActivityAssets > | Improve this Doc View Source Buttons Declaration public Optional<OneOf<IReadOnlyList<string>, IReadOnlyList<IActivityButton>>> Buttons { get; set; } Property Value Type Description Remora.Rest.Core.Optional < OneOf.OneOf < IReadOnlyList < String >, IReadOnlyList < IActivityButton >>> | Improve this Doc View Source CreatedAt Declaration public Optional<DateTimeOffset> CreatedAt { get; set; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Details Declaration public Optional<string> Details { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Emoji Declaration public Optional<IActivityEmoji> Emoji { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IActivityEmoji > | Improve this Doc View Source Flags Declaration public Optional<ActivityFlags> Flags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ActivityFlags > | Improve this Doc View Source Instance Declaration public Optional<bool> Instance { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Party Declaration public Optional<IActivityParty> Party { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IActivityParty > | Improve this Doc View Source Secrets Declaration public Optional<IActivitySecrets> Secrets { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IActivitySecrets > | Improve this Doc View Source State Declaration public Optional<string> State { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Timestamps Declaration public Optional<IActivityTimestamps> Timestamps { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IActivityTimestamps > | Improve this Doc View Source Type Declaration public ActivityType Type { get; set; } Property Value Type Description ActivityType | Improve this Doc View Source Url Declaration public Optional<Uri> Url { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Uri > Implements IActivity System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ActivityAssets.html": {
    "href": "api/Remora.Discord.API.Objects.ActivityAssets.html",
    "title": "Class ActivityAssets | Remora.Discord",
    "keywords": "Class ActivityAssets Represents a set of descriptive assets related to an activity. Inheritance Object ActivityAssets Implements IActivityAssets IEquatable < ActivityAssets > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ActivityAssets : IActivityAssets, IEquatable<ActivityAssets> Constructors | Improve this Doc View Source ActivityAssets(Optional<String>, Optional<String>, Optional<String>, Optional<String>) Declaration public ActivityAssets(Optional<string> LargeImage = default(Optional<string>), Optional<string> LargeText = default(Optional<string>), Optional<string> SmallImage = default(Optional<string>), Optional<string> SmallText = default(Optional<string>)) Parameters Type Name Description Remora.Rest.Core.Optional < String > LargeImage Remora.Rest.Core.Optional < String > LargeText Remora.Rest.Core.Optional < String > SmallImage Remora.Rest.Core.Optional < String > SmallText Properties | Improve this Doc View Source LargeImage Declaration public Optional<string> LargeImage { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source LargeText Declaration public Optional<string> LargeText { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source SmallImage Declaration public Optional<string> SmallImage { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source SmallText Declaration public Optional<string> SmallText { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IActivityAssets System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ActivityButton.html": {
    "href": "api/Remora.Discord.API.Objects.ActivityButton.html",
    "title": "Class ActivityButton | Remora.Discord",
    "keywords": "Class ActivityButton Represents a custom activity button. Inheritance Object ActivityButton Implements IActivityButton IEquatable < ActivityButton > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ActivityButton : IActivityButton, IEquatable<ActivityButton> Constructors | Improve this Doc View Source ActivityButton(String, String) Declaration public ActivityButton(string Label, string URL) Parameters Type Name Description String Label String URL Properties | Improve this Doc View Source Label Declaration public string Label { get; set; } Property Value Type Description String | Improve this Doc View Source URL Declaration public string URL { get; set; } Property Value Type Description String Implements IActivityButton System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ActivityEmoji.html": {
    "href": "api/Remora.Discord.API.Objects.ActivityEmoji.html",
    "title": "Class ActivityEmoji | Remora.Discord",
    "keywords": "Class ActivityEmoji Represents an emoji displayed in an activity. Inheritance Object ActivityEmoji Implements IActivityEmoji IEquatable < ActivityEmoji > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ActivityEmoji : IActivityEmoji, IEquatable<ActivityEmoji> Constructors | Improve this Doc View Source ActivityEmoji(String, Optional<Snowflake>, Optional<Boolean>) Declaration public ActivityEmoji(string Name, Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<bool> Animated = default(Optional<bool>)) Parameters Type Name Description String Name Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < Boolean > Animated Properties | Improve this Doc View Source Animated Declaration public Optional<bool> Animated { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String Implements IActivityEmoji System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ActivityParty.html": {
    "href": "api/Remora.Discord.API.Objects.ActivityParty.html",
    "title": "Class ActivityParty | Remora.Discord",
    "keywords": "Class ActivityParty Represents a party of people in an activity. Inheritance Object ActivityParty Implements IActivityParty IEquatable < ActivityParty > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ActivityParty : IActivityParty, IEquatable<ActivityParty> Constructors | Improve this Doc View Source ActivityParty(Optional<String>, Optional<IPartySize>) Declaration public ActivityParty(Optional<string> ID = default(Optional<string>), Optional<IPartySize> Size = default(Optional<IPartySize>)) Parameters Type Name Description Remora.Rest.Core.Optional < String > ID Remora.Rest.Core.Optional < IPartySize > Size Properties | Improve this Doc View Source ID Declaration public Optional<string> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Size Declaration public Optional<IPartySize> Size { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartySize > Implements IActivityParty System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ActivitySecrets.html": {
    "href": "api/Remora.Discord.API.Objects.ActivitySecrets.html",
    "title": "Class ActivitySecrets | Remora.Discord",
    "keywords": "Class ActivitySecrets Represents a set of secrets used for interacting with the activity. Inheritance Object ActivitySecrets Implements IActivitySecrets IEquatable < ActivitySecrets > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ActivitySecrets : IActivitySecrets, IEquatable<ActivitySecrets> Constructors | Improve this Doc View Source ActivitySecrets(Optional<String>, Optional<String>, Optional<String>) Declaration public ActivitySecrets(Optional<string> Join = default(Optional<string>), Optional<string> Spectate = default(Optional<string>), Optional<string> Match = default(Optional<string>)) Parameters Type Name Description Remora.Rest.Core.Optional < String > Join Remora.Rest.Core.Optional < String > Spectate Remora.Rest.Core.Optional < String > Match Properties | Improve this Doc View Source Join Declaration public Optional<string> Join { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Match Declaration public Optional<string> Match { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Spectate Declaration public Optional<string> Spectate { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IActivitySecrets System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ActivityTimestamps.html": {
    "href": "api/Remora.Discord.API.Objects.ActivityTimestamps.html",
    "title": "Class ActivityTimestamps | Remora.Discord",
    "keywords": "Class ActivityTimestamps Represents a set of activity timestamps - that is, when the activity started and/or stopped. Inheritance Object ActivityTimestamps Implements IActivityTimestamps IEquatable < ActivityTimestamps > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ActivityTimestamps : IActivityTimestamps, IEquatable<ActivityTimestamps> Constructors | Improve this Doc View Source ActivityTimestamps(Optional<DateTimeOffset>, Optional<DateTimeOffset>) Declaration public ActivityTimestamps(Optional<DateTimeOffset> Start = default(Optional<DateTimeOffset>), Optional<DateTimeOffset> End = default(Optional<DateTimeOffset>)) Parameters Type Name Description Remora.Rest.Core.Optional < DateTimeOffset > Start Remora.Rest.Core.Optional < DateTimeOffset > End Properties | Improve this Doc View Source End Declaration public Optional<DateTimeOffset> End { get; set; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Start Declaration public Optional<DateTimeOffset> Start { get; set; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > Implements IActivityTimestamps System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.AllowedMentions.html": {
    "href": "api/Remora.Discord.API.Objects.AllowedMentions.html",
    "title": "Class AllowedMentions | Remora.Discord",
    "keywords": "Class AllowedMentions Represents a set of allowed mentions. Inheritance Object AllowedMentions Implements IAllowedMentions IEquatable < AllowedMentions > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class AllowedMentions : IAllowedMentions, IEquatable<AllowedMentions> Constructors | Improve this Doc View Source AllowedMentions(Optional<IReadOnlyList<MentionType>>, Optional<IReadOnlyList<Snowflake>>, Optional<IReadOnlyList<Snowflake>>, Optional<Boolean>) Declaration public AllowedMentions(Optional<IReadOnlyList<MentionType>> Parse = default(Optional<IReadOnlyList<MentionType>>), Optional<IReadOnlyList<Snowflake>> Roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<IReadOnlyList<Snowflake>> Users = default(Optional<IReadOnlyList<Snowflake>>), Optional<bool> MentionRepliedUser = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Optional < IReadOnlyList < MentionType >> Parse Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> Roles Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> Users Remora.Rest.Core.Optional < Boolean > MentionRepliedUser Properties | Improve this Doc View Source MentionRepliedUser Declaration public Optional<bool> MentionRepliedUser { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Parse Declaration public Optional<IReadOnlyList<MentionType>> Parse { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < MentionType >> | Improve this Doc View Source Roles Declaration public Optional<IReadOnlyList<Snowflake>> Roles { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Users Declaration public Optional<IReadOnlyList<Snowflake>> Users { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> Implements IAllowedMentions System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Application.html": {
    "href": "api/Remora.Discord.API.Objects.Application.html",
    "title": "Class Application | Remora.Discord",
    "keywords": "Class Application Represents information about an OAuth2 application. Inheritance Object Application Implements IApplication IPartialApplication IEquatable < Application > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Application : IApplication, IPartialApplication, IEquatable<Application> Constructors | Improve this Doc View Source Application(Snowflake, String, IImageHash, String, Optional<IReadOnlyList<String>>, Boolean, Boolean, Optional<String>, Optional<String>, IPartialUser, String, ITeam, Optional<Snowflake>, Optional<Snowflake>, Optional<String>, Optional<IImageHash>, Optional<ApplicationFlags>, Optional<IReadOnlyList<String>>, Optional<IApplicationInstallParameters>, Optional<Uri>) Declaration public Application(Snowflake ID, string Name, IImageHash Icon, string Description, Optional<IReadOnlyList<string>> RPCOrigins, bool IsBotPublic, bool DoesBotRequireCodeGrant, Optional<string> TermsOfServiceURL, Optional<string> PrivacyPolicyURL, IPartialUser Owner, string VerifyKey, ITeam Team, Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<Snowflake> PrimarySKUID = default(Optional<Snowflake>), Optional<string> Slug = default(Optional<string>), Optional<IImageHash> CoverImage = default(Optional<IImageHash>), Optional<ApplicationFlags> Flags = default(Optional<ApplicationFlags>), Optional<IReadOnlyList<string>> Tags = default(Optional<IReadOnlyList<string>>), Optional<IApplicationInstallParameters> InstallParams = default(Optional<IApplicationInstallParameters>), Optional<Uri> CustomInstallUrl = default(Optional<Uri>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name IImageHash Icon String Description Remora.Rest.Core.Optional < IReadOnlyList < String >> RPCOrigins Boolean IsBotPublic Boolean DoesBotRequireCodeGrant Remora.Rest.Core.Optional < String > TermsOfServiceURL Remora.Rest.Core.Optional < String > PrivacyPolicyURL IPartialUser Owner String VerifyKey ITeam Team Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > PrimarySKUID Remora.Rest.Core.Optional < String > Slug Remora.Rest.Core.Optional < IImageHash > CoverImage Remora.Rest.Core.Optional < ApplicationFlags > Flags Remora.Rest.Core.Optional < IReadOnlyList < String >> Tags Remora.Rest.Core.Optional < IApplicationInstallParameters > InstallParams Remora.Rest.Core.Optional < Uri > CustomInstallUrl Properties | Improve this Doc View Source CoverImage Declaration public Optional<IImageHash> CoverImage { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source CustomInstallUrl Declaration public Optional<Uri> CustomInstallUrl { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Uri > | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source DoesBotRequireCodeGrant Declaration public bool DoesBotRequireCodeGrant { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Flags Declaration public Optional<ApplicationFlags> Flags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ApplicationFlags > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Icon Declaration public IImageHash Icon { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source InstallParams Declaration public Optional<IApplicationInstallParameters> InstallParams { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IApplicationInstallParameters > | Improve this Doc View Source IsBotPublic Declaration public bool IsBotPublic { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Owner Declaration public IPartialUser Owner { get; set; } Property Value Type Description IPartialUser | Improve this Doc View Source PrimarySKUID Declaration public Optional<Snowflake> PrimarySKUID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source PrivacyPolicyURL Declaration public Optional<string> PrivacyPolicyURL { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source RPCOrigins Declaration public Optional<IReadOnlyList<string>> RPCOrigins { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> | Improve this Doc View Source Slug Declaration public Optional<string> Slug { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Tags Declaration public Optional<IReadOnlyList<string>> Tags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> | Improve this Doc View Source Team Declaration public ITeam Team { get; set; } Property Value Type Description ITeam | Improve this Doc View Source TermsOfServiceURL Declaration public Optional<string> TermsOfServiceURL { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source VerifyKey Declaration public string VerifyKey { get; set; } Property Value Type Description String Implements IApplication IPartialApplication System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ApplicationCommand.html": {
    "href": "api/Remora.Discord.API.Objects.ApplicationCommand.html",
    "title": "Class ApplicationCommand | Remora.Discord",
    "keywords": "Class ApplicationCommand Represents an application command. Inheritance Object ApplicationCommand Implements IApplicationCommand IEquatable < ApplicationCommand > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ApplicationCommand : IApplicationCommand, IEquatable<ApplicationCommand> Constructors | Improve this Doc View Source ApplicationCommand(Snowflake, Optional<ApplicationCommandType>, Snowflake, Optional<Snowflake>, String, String, Optional<IReadOnlyList<IApplicationCommandOption>>, Snowflake, Optional<IReadOnlyDictionary<String, String>>, Optional<String>, Optional<IReadOnlyDictionary<String, String>>, Optional<String>, IDiscordPermissionSet, Optional<Boolean>) Declaration public ApplicationCommand(Snowflake ID, Optional<ApplicationCommandType> Type, Snowflake ApplicationID, Optional<Snowflake> GuildID, string Name, string Description, Optional<IReadOnlyList<IApplicationCommandOption>> Options, Snowflake Version, Optional<IReadOnlyDictionary<string, string>> NameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<string> NameLocalized = default(Optional<string>), Optional<IReadOnlyDictionary<string, string>> DescriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<string> DescriptionLocalized = default(Optional<string>), IDiscordPermissionSet DefaultMemberPermissions = null, Optional<bool> DMPermission = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Optional < ApplicationCommandType > Type Remora.Rest.Core.Snowflake ApplicationID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID String Name String Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> Options Remora.Rest.Core.Snowflake Version Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> NameLocalizations Remora.Rest.Core.Optional < String > NameLocalized Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> DescriptionLocalizations Remora.Rest.Core.Optional < String > DescriptionLocalized IDiscordPermissionSet DefaultMemberPermissions Remora.Rest.Core.Optional < Boolean > DMPermission Properties | Improve this Doc View Source ApplicationID Declaration public Snowflake ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source DefaultMemberPermissions Declaration public IDiscordPermissionSet DefaultMemberPermissions { get; set; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source DescriptionLocalizations Declaration public Optional<IReadOnlyDictionary<string, string>> DescriptionLocalizations { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source DescriptionLocalized Declaration public Optional<string> DescriptionLocalized { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source DMPermission Declaration public Optional<bool> DMPermission { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source NameLocalizations Declaration public Optional<IReadOnlyDictionary<string, string>> NameLocalizations { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source NameLocalized Declaration public Optional<string> NameLocalized { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Options Declaration public Optional<IReadOnlyList<IApplicationCommandOption>> Options { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> | Improve this Doc View Source Type Declaration public Optional<ApplicationCommandType> Type { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ApplicationCommandType > | Improve this Doc View Source Version Declaration public Snowflake Version { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IApplicationCommand System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ApplicationCommandInteractionDataOption.html": {
    "href": "api/Remora.Discord.API.Objects.ApplicationCommandInteractionDataOption.html",
    "title": "Class ApplicationCommandInteractionDataOption | Remora.Discord",
    "keywords": "Class ApplicationCommandInteractionDataOption Represents a named option and its value. Inheritance Object ApplicationCommandInteractionDataOption Implements IApplicationCommandInteractionDataOption IEquatable < ApplicationCommandInteractionDataOption > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ApplicationCommandInteractionDataOption : IApplicationCommandInteractionDataOption, IEquatable<ApplicationCommandInteractionDataOption> Constructors | Improve this Doc View Source ApplicationCommandInteractionDataOption(String, ApplicationCommandOptionType, Optional<OneOf<String, Int64, Boolean, Snowflake, Double>>, Optional<IReadOnlyList<IApplicationCommandInteractionDataOption>>, Optional<Boolean>) Declaration public ApplicationCommandInteractionDataOption(string Name, ApplicationCommandOptionType Type, Optional<OneOf<string, long, bool, Snowflake, double>> Value = default(Optional<OneOf<string, long, bool, Snowflake, double>>), Optional<IReadOnlyList<IApplicationCommandInteractionDataOption>> Options = default(Optional<IReadOnlyList<IApplicationCommandInteractionDataOption>>), Optional<bool> IsFocused = default(Optional<bool>)) Parameters Type Name Description String Name ApplicationCommandOptionType Type Remora.Rest.Core.Optional < OneOf.OneOf < String , Int64 , Boolean , Remora.Rest.Core.Snowflake , Double >> Value Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandInteractionDataOption >> Options Remora.Rest.Core.Optional < Boolean > IsFocused Properties | Improve this Doc View Source IsFocused Declaration public Optional<bool> IsFocused { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Options Declaration public Optional<IReadOnlyList<IApplicationCommandInteractionDataOption>> Options { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandInteractionDataOption >> | Improve this Doc View Source Type Declaration public ApplicationCommandOptionType Type { get; set; } Property Value Type Description ApplicationCommandOptionType | Improve this Doc View Source Value Declaration public Optional<OneOf<string, long, bool, Snowflake, double>> Value { get; set; } Property Value Type Description Remora.Rest.Core.Optional < OneOf.OneOf < String , Int64 , Boolean , Remora.Rest.Core.Snowflake , Double >> Implements IApplicationCommandInteractionDataOption System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ApplicationCommandInteractionDataResolved.html": {
    "href": "api/Remora.Discord.API.Objects.ApplicationCommandInteractionDataResolved.html",
    "title": "Class ApplicationCommandInteractionDataResolved | Remora.Discord",
    "keywords": "Class ApplicationCommandInteractionDataResolved Represents data that was resolved during serverside execution of the command. Inheritance Object ApplicationCommandInteractionDataResolved Implements IApplicationCommandInteractionDataResolved IEquatable < ApplicationCommandInteractionDataResolved > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ApplicationCommandInteractionDataResolved : IApplicationCommandInteractionDataResolved, IEquatable<ApplicationCommandInteractionDataResolved> Constructors | Improve this Doc View Source ApplicationCommandInteractionDataResolved(Optional<IReadOnlyDictionary<Snowflake, IUser>>, Optional<IReadOnlyDictionary<Snowflake, IPartialGuildMember>>, Optional<IReadOnlyDictionary<Snowflake, IRole>>, Optional<IReadOnlyDictionary<Snowflake, IPartialChannel>>, Optional<IReadOnlyDictionary<Snowflake, IPartialMessage>>, Optional<IReadOnlyDictionary<Snowflake, IAttachment>>) Declaration public ApplicationCommandInteractionDataResolved(Optional<IReadOnlyDictionary<Snowflake, IUser>> Users, Optional<IReadOnlyDictionary<Snowflake, IPartialGuildMember>> Members, Optional<IReadOnlyDictionary<Snowflake, IRole>> Roles, Optional<IReadOnlyDictionary<Snowflake, IPartialChannel>> Channels, Optional<IReadOnlyDictionary<Snowflake, IPartialMessage>> Messages, Optional<IReadOnlyDictionary<Snowflake, IAttachment>> Attachments) Parameters Type Name Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IUser >> Users Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IPartialGuildMember >> Members Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IRole >> Roles Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IPartialChannel >> Channels Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IPartialMessage >> Messages Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IAttachment >> Attachments Properties | Improve this Doc View Source Attachments Declaration public Optional<IReadOnlyDictionary<Snowflake, IAttachment>> Attachments { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IAttachment >> | Improve this Doc View Source Channels Declaration public Optional<IReadOnlyDictionary<Snowflake, IPartialChannel>> Channels { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IPartialChannel >> | Improve this Doc View Source Members Declaration public Optional<IReadOnlyDictionary<Snowflake, IPartialGuildMember>> Members { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IPartialGuildMember >> | Improve this Doc View Source Messages Declaration public Optional<IReadOnlyDictionary<Snowflake, IPartialMessage>> Messages { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IPartialMessage >> | Improve this Doc View Source Roles Declaration public Optional<IReadOnlyDictionary<Snowflake, IRole>> Roles { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IRole >> | Improve this Doc View Source Users Declaration public Optional<IReadOnlyDictionary<Snowflake, IUser>> Users { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < Remora.Rest.Core.Snowflake , IUser >> Implements IApplicationCommandInteractionDataResolved System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ApplicationCommandOption.html": {
    "href": "api/Remora.Discord.API.Objects.ApplicationCommandOption.html",
    "title": "Class ApplicationCommandOption | Remora.Discord",
    "keywords": "Class ApplicationCommandOption Represents an option in an application command. Inheritance Object ApplicationCommandOption Implements IApplicationCommandOption IEquatable < ApplicationCommandOption > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ApplicationCommandOption : IApplicationCommandOption, IEquatable<ApplicationCommandOption> Constructors | Improve this Doc View Source ApplicationCommandOption(ApplicationCommandOptionType, String, String, Optional<Boolean>, Optional<Boolean>, Optional<IReadOnlyList<IApplicationCommandOptionChoice>>, Optional<IReadOnlyList<IApplicationCommandOption>>, Optional<IReadOnlyList<ChannelType>>, Optional<OneOf<UInt64, Int64, Single, Double>>, Optional<OneOf<UInt64, Int64, Single, Double>>, Optional<Boolean>, Optional<IReadOnlyDictionary<String, String>>, Optional<String>, Optional<IReadOnlyDictionary<String, String>>, Optional<String>) Declaration public ApplicationCommandOption(ApplicationCommandOptionType Type, string Name, string Description, Optional<bool> IsDefault = default(Optional<bool>), Optional<bool> IsRequired = default(Optional<bool>), Optional<IReadOnlyList<IApplicationCommandOptionChoice>> Choices = default(Optional<IReadOnlyList<IApplicationCommandOptionChoice>>), Optional<IReadOnlyList<IApplicationCommandOption>> Options = default(Optional<IReadOnlyList<IApplicationCommandOption>>), Optional<IReadOnlyList<ChannelType>> ChannelTypes = default(Optional<IReadOnlyList<ChannelType>>), Optional<OneOf<ulong, long, float, double>> MinValue = default(Optional<OneOf<ulong, long, float, double>>), Optional<OneOf<ulong, long, float, double>> MaxValue = default(Optional<OneOf<ulong, long, float, double>>), Optional<bool> EnableAutocomplete = default(Optional<bool>), Optional<IReadOnlyDictionary<string, string>> NameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<string> NameLocalized = default(Optional<string>), Optional<IReadOnlyDictionary<string, string>> DescriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<string> DescriptionLocalized = default(Optional<string>)) Parameters Type Name Description ApplicationCommandOptionType Type String Name String Description Remora.Rest.Core.Optional < Boolean > IsDefault Remora.Rest.Core.Optional < Boolean > IsRequired Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOptionChoice >> Choices Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> Options Remora.Rest.Core.Optional < IReadOnlyList < ChannelType >> ChannelTypes Remora.Rest.Core.Optional < OneOf.OneOf < UInt64 , Int64 , Single , Double >> MinValue Remora.Rest.Core.Optional < OneOf.OneOf < UInt64 , Int64 , Single , Double >> MaxValue Remora.Rest.Core.Optional < Boolean > EnableAutocomplete Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> NameLocalizations Remora.Rest.Core.Optional < String > NameLocalized Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> DescriptionLocalizations Remora.Rest.Core.Optional < String > DescriptionLocalized Properties | Improve this Doc View Source ChannelTypes Declaration public Optional<IReadOnlyList<ChannelType>> ChannelTypes { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < ChannelType >> | Improve this Doc View Source Choices Declaration public Optional<IReadOnlyList<IApplicationCommandOptionChoice>> Choices { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOptionChoice >> | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source DescriptionLocalizations Declaration public Optional<IReadOnlyDictionary<string, string>> DescriptionLocalizations { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source DescriptionLocalized Declaration public Optional<string> DescriptionLocalized { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source EnableAutocomplete Declaration public Optional<bool> EnableAutocomplete { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsDefault Declaration public Optional<bool> IsDefault { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsRequired Declaration public Optional<bool> IsRequired { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MaxValue Declaration public Optional<OneOf<ulong, long, float, double>> MaxValue { get; set; } Property Value Type Description Remora.Rest.Core.Optional < OneOf.OneOf < UInt64 , Int64 , Single , Double >> | Improve this Doc View Source MinValue Declaration public Optional<OneOf<ulong, long, float, double>> MinValue { get; set; } Property Value Type Description Remora.Rest.Core.Optional < OneOf.OneOf < UInt64 , Int64 , Single , Double >> | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source NameLocalizations Declaration public Optional<IReadOnlyDictionary<string, string>> NameLocalizations { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source NameLocalized Declaration public Optional<string> NameLocalized { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Options Declaration public Optional<IReadOnlyList<IApplicationCommandOption>> Options { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> | Improve this Doc View Source Type Declaration public ApplicationCommandOptionType Type { get; set; } Property Value Type Description ApplicationCommandOptionType Implements IApplicationCommandOption System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ApplicationCommandOptionChoice.html": {
    "href": "api/Remora.Discord.API.Objects.ApplicationCommandOptionChoice.html",
    "title": "Class ApplicationCommandOptionChoice | Remora.Discord",
    "keywords": "Class ApplicationCommandOptionChoice Represents a choice available to a user. Inheritance Object ApplicationCommandOptionChoice Implements IApplicationCommandOptionChoice IEquatable < ApplicationCommandOptionChoice > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ApplicationCommandOptionChoice : IApplicationCommandOptionChoice, IEquatable<ApplicationCommandOptionChoice> Constructors | Improve this Doc View Source ApplicationCommandOptionChoice(String, OneOf<String, Int32, Double>, Optional<IReadOnlyDictionary<String, String>>, Optional<String>) Declaration public ApplicationCommandOptionChoice(string Name, OneOf<string, int, double> Value, Optional<IReadOnlyDictionary<string, string>> NameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<string> NameLocalized = default(Optional<string>)) Parameters Type Name Description String Name OneOf.OneOf < String , Int32 , Double > Value Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> NameLocalizations Remora.Rest.Core.Optional < String > NameLocalized Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source NameLocalizations Declaration public Optional<IReadOnlyDictionary<string, string>> NameLocalizations { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source NameLocalized Declaration public Optional<string> NameLocalized { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Value Declaration public OneOf<string, int, double> Value { get; set; } Property Value Type Description OneOf.OneOf < String , Int32 , Double > Implements IApplicationCommandOptionChoice System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ApplicationCommandPermissions.html": {
    "href": "api/Remora.Discord.API.Objects.ApplicationCommandPermissions.html",
    "title": "Class ApplicationCommandPermissions | Remora.Discord",
    "keywords": "Class ApplicationCommandPermissions Represents a single permission for a command. Inheritance Object ApplicationCommandPermissions Implements IApplicationCommandPermissions IEquatable < ApplicationCommandPermissions > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ApplicationCommandPermissions : IApplicationCommandPermissions, IEquatable<ApplicationCommandPermissions> Constructors | Improve this Doc View Source ApplicationCommandPermissions(Snowflake, ApplicationCommandPermissionType, Boolean) Declaration public ApplicationCommandPermissions(Snowflake ID, ApplicationCommandPermissionType Type, bool HasPermission) Parameters Type Name Description Remora.Rest.Core.Snowflake ID ApplicationCommandPermissionType Type Boolean HasPermission Properties | Improve this Doc View Source HasPermission Declaration public bool HasPermission { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Type Declaration public ApplicationCommandPermissionType Type { get; set; } Property Value Type Description ApplicationCommandPermissionType Implements IApplicationCommandPermissions System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ApplicationInstallParameters.html": {
    "href": "api/Remora.Discord.API.Objects.ApplicationInstallParameters.html",
    "title": "Class ApplicationInstallParameters | Remora.Discord",
    "keywords": "Class ApplicationInstallParameters Represents a set of parameters applied to custom application installation. Inheritance Object ApplicationInstallParameters Implements IApplicationInstallParameters IEquatable < ApplicationInstallParameters > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ApplicationInstallParameters : IApplicationInstallParameters, IEquatable<ApplicationInstallParameters> Constructors | Improve this Doc View Source ApplicationInstallParameters(IReadOnlyList<String>, IDiscordPermissionSet) Declaration public ApplicationInstallParameters(IReadOnlyList<string> Scopes, IDiscordPermissionSet Permissions) Parameters Type Name Description IReadOnlyList < String > Scopes IDiscordPermissionSet Permissions Properties | Improve this Doc View Source Permissions Declaration public IDiscordPermissionSet Permissions { get; set; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Scopes Declaration public IReadOnlyList<string> Scopes { get; set; } Property Value Type Description IReadOnlyList < String > Implements IApplicationInstallParameters System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Attachment.html": {
    "href": "api/Remora.Discord.API.Objects.Attachment.html",
    "title": "Class Attachment | Remora.Discord",
    "keywords": "Class Attachment Represents an attachment in a message. Inheritance Object Attachment Implements IAttachment IPartialAttachment IEquatable < Attachment > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Attachment : IAttachment, IPartialAttachment, IEquatable<Attachment> Constructors | Improve this Doc View Source Attachment(Snowflake, String, Optional<String>, Optional<String>, Int32, String, String, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<Boolean>) Declaration public Attachment(Snowflake ID, string Filename, Optional<string> Description, Optional<string> ContentType, int Size, string Url, string ProxyUrl, Optional<int?> Height, Optional<int?> Width, Optional<bool> IsEphemeral) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Filename Remora.Rest.Core.Optional < String > Description Remora.Rest.Core.Optional < String > ContentType Int32 Size String Url String ProxyUrl Remora.Rest.Core.Optional < Nullable < Int32 >> Height Remora.Rest.Core.Optional < Nullable < Int32 >> Width Remora.Rest.Core.Optional < Boolean > IsEphemeral Properties | Improve this Doc View Source ContentType Declaration public Optional<string> ContentType { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Description Declaration public Optional<string> Description { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Filename Declaration public string Filename { get; set; } Property Value Type Description String | Improve this Doc View Source Height Declaration public Optional<int?> Height { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsEphemeral Declaration public Optional<bool> IsEphemeral { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source ProxyUrl Declaration public string ProxyUrl { get; set; } Property Value Type Description String | Improve this Doc View Source Size Declaration public int Size { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Url Declaration public string Url { get; set; } Property Value Type Description String | Improve this Doc View Source Width Declaration public Optional<int?> Width { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> Implements IAttachment IPartialAttachment System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.AuditLog.html": {
    "href": "api/Remora.Discord.API.Objects.AuditLog.html",
    "title": "Class AuditLog | Remora.Discord",
    "keywords": "Class AuditLog Represents an audit log page. Inheritance Object AuditLog Implements IAuditLog IEquatable < AuditLog > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class AuditLog : IAuditLog, IEquatable<AuditLog> Constructors | Improve this Doc View Source AuditLog(IReadOnlyList<IAuditLogEntry>, IReadOnlyList<IGuildScheduledEvent>, IReadOnlyList<IPartialIntegration>, IReadOnlyList<IChannel>, IReadOnlyList<IUser>, IReadOnlyList<IWebhook>) Declaration public AuditLog(IReadOnlyList<IAuditLogEntry> AuditLogEntries, IReadOnlyList<IGuildScheduledEvent> GuildScheduledEvents, IReadOnlyList<IPartialIntegration> Integrations, IReadOnlyList<IChannel> Threads, IReadOnlyList<IUser> Users, IReadOnlyList<IWebhook> Webhooks) Parameters Type Name Description IReadOnlyList < IAuditLogEntry > AuditLogEntries IReadOnlyList < IGuildScheduledEvent > GuildScheduledEvents IReadOnlyList < IPartialIntegration > Integrations IReadOnlyList < IChannel > Threads IReadOnlyList < IUser > Users IReadOnlyList < IWebhook > Webhooks Properties | Improve this Doc View Source AuditLogEntries Declaration public IReadOnlyList<IAuditLogEntry> AuditLogEntries { get; set; } Property Value Type Description IReadOnlyList < IAuditLogEntry > | Improve this Doc View Source GuildScheduledEvents Declaration public IReadOnlyList<IGuildScheduledEvent> GuildScheduledEvents { get; set; } Property Value Type Description IReadOnlyList < IGuildScheduledEvent > | Improve this Doc View Source Integrations Declaration public IReadOnlyList<IPartialIntegration> Integrations { get; set; } Property Value Type Description IReadOnlyList < IPartialIntegration > | Improve this Doc View Source Threads Declaration public IReadOnlyList<IChannel> Threads { get; set; } Property Value Type Description IReadOnlyList < IChannel > | Improve this Doc View Source Users Declaration public IReadOnlyList<IUser> Users { get; set; } Property Value Type Description IReadOnlyList < IUser > | Improve this Doc View Source Webhooks Declaration public IReadOnlyList<IWebhook> Webhooks { get; set; } Property Value Type Description IReadOnlyList < IWebhook > Implements IAuditLog System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.AuditLogChange.html": {
    "href": "api/Remora.Discord.API.Objects.AuditLogChange.html",
    "title": "Class AuditLogChange | Remora.Discord",
    "keywords": "Class AuditLogChange Represents a change to an audit log value. Inheritance Object AuditLogChange Implements IAuditLogChange IEquatable < AuditLogChange > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class AuditLogChange : IAuditLogChange, IEquatable<AuditLogChange> Constructors | Improve this Doc View Source AuditLogChange(Optional<String>, Optional<String>, String) Declaration public AuditLogChange(Optional<string> NewValue, Optional<string> OldValue, string Key) Parameters Type Name Description Remora.Rest.Core.Optional < String > NewValue Remora.Rest.Core.Optional < String > OldValue String Key Properties | Improve this Doc View Source Key Declaration public string Key { get; set; } Property Value Type Description String | Improve this Doc View Source NewValue Declaration public Optional<string> NewValue { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source OldValue Declaration public Optional<string> OldValue { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IAuditLogChange System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.AuditLogEntry.html": {
    "href": "api/Remora.Discord.API.Objects.AuditLogEntry.html",
    "title": "Class AuditLogEntry | Remora.Discord",
    "keywords": "Class AuditLogEntry Represents an entry in the audit log. Inheritance Object AuditLogEntry Implements IAuditLogEntry IEquatable < AuditLogEntry > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class AuditLogEntry : IAuditLogEntry, IEquatable<AuditLogEntry> Constructors | Improve this Doc View Source AuditLogEntry(String, Optional<IReadOnlyList<IAuditLogChange>>, Nullable<Snowflake>, Snowflake, AuditLogEvent, Optional<IOptionalAuditEntryInfo>, Optional<String>) Declaration public AuditLogEntry(string TargetID, Optional<IReadOnlyList<IAuditLogChange>> Changes, Snowflake? UserID, Snowflake ID, AuditLogEvent ActionType, Optional<IOptionalAuditEntryInfo> Options = default(Optional<IOptionalAuditEntryInfo>), Optional<string> Reason = default(Optional<string>)) Parameters Type Name Description String TargetID Remora.Rest.Core.Optional < IReadOnlyList < IAuditLogChange >> Changes Nullable < Remora.Rest.Core.Snowflake > UserID Remora.Rest.Core.Snowflake ID AuditLogEvent ActionType Remora.Rest.Core.Optional < IOptionalAuditEntryInfo > Options Remora.Rest.Core.Optional < String > Reason Properties | Improve this Doc View Source ActionType Declaration public AuditLogEvent ActionType { get; set; } Property Value Type Description AuditLogEvent | Improve this Doc View Source Changes Declaration public Optional<IReadOnlyList<IAuditLogChange>> Changes { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IAuditLogChange >> | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Options Declaration public Optional<IOptionalAuditEntryInfo> Options { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IOptionalAuditEntryInfo > | Improve this Doc View Source Reason Declaration public Optional<string> Reason { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source TargetID Declaration public string TargetID { get; set; } Property Value Type Description String | Improve this Doc View Source UserID Declaration public Snowflake? UserID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > Implements IAuditLogEntry System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.AuthorizationInformation.html": {
    "href": "api/Remora.Discord.API.Objects.AuthorizationInformation.html",
    "title": "Class AuthorizationInformation | Remora.Discord",
    "keywords": "Class AuthorizationInformation Represents information about OAuth2 authorizations. Inheritance Object AuthorizationInformation Implements IAuthorizationInformation IEquatable < AuthorizationInformation > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class AuthorizationInformation : IAuthorizationInformation, IEquatable<AuthorizationInformation> Constructors | Improve this Doc View Source AuthorizationInformation(IPartialApplication, IReadOnlyList<String>, DateTimeOffset, Optional<IUser>) Declaration public AuthorizationInformation(IPartialApplication Application, IReadOnlyList<string> Scopes, DateTimeOffset Expires, Optional<IUser> User = default(Optional<IUser>)) Parameters Type Name Description IPartialApplication Application IReadOnlyList < String > Scopes DateTimeOffset Expires Remora.Rest.Core.Optional < IUser > User Properties | Improve this Doc View Source Application Declaration public IPartialApplication Application { get; set; } Property Value Type Description IPartialApplication | Improve this Doc View Source Expires Declaration public DateTimeOffset Expires { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Scopes Declaration public IReadOnlyList<string> Scopes { get; set; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Implements IAuthorizationInformation System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Ban.html": {
    "href": "api/Remora.Discord.API.Objects.Ban.html",
    "title": "Class Ban | Remora.Discord",
    "keywords": "Class Ban Represents a ban in a guild. Inheritance Object Ban Implements IBan IEquatable < Ban > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Ban : IBan, IEquatable<Ban> Constructors | Improve this Doc View Source Ban(String, IUser) Declaration public Ban(string Reason, IUser User) Parameters Type Name Description String Reason IUser User Properties | Improve this Doc View Source Reason Declaration public string Reason { get; set; } Property Value Type Description String | Improve this Doc View Source User Declaration public IUser User { get; set; } Property Value Type Description IUser Implements IBan System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.BulkApplicationCommandData.html": {
    "href": "api/Remora.Discord.API.Objects.BulkApplicationCommandData.html",
    "title": "Class BulkApplicationCommandData | Remora.Discord",
    "keywords": "Class BulkApplicationCommandData Represents a request to create or update an application command. Inheritance Object BulkApplicationCommandData Implements IBulkApplicationCommandData IEquatable < BulkApplicationCommandData > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class BulkApplicationCommandData : IBulkApplicationCommandData, IEquatable<BulkApplicationCommandData> Constructors | Improve this Doc View Source BulkApplicationCommandData(String, Optional<String>, Optional<IReadOnlyList<IApplicationCommandOption>>, Optional<ApplicationCommandType>, Optional<IReadOnlyDictionary<String, String>>, Optional<IReadOnlyDictionary<String, String>>, IDiscordPermissionSet, Optional<Boolean>) Declaration public BulkApplicationCommandData(string Name, Optional<string> Description = default(Optional<string>), Optional<IReadOnlyList<IApplicationCommandOption>> Options = default(Optional<IReadOnlyList<IApplicationCommandOption>>), Optional<ApplicationCommandType> Type = default(Optional<ApplicationCommandType>), Optional<IReadOnlyDictionary<string, string>> NameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IReadOnlyDictionary<string, string>> DescriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), IDiscordPermissionSet DefaultMemberPermissions = null, Optional<bool> DMPermission = default(Optional<bool>)) Parameters Type Name Description String Name Remora.Rest.Core.Optional < String > Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> Options Remora.Rest.Core.Optional < ApplicationCommandType > Type Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> NameLocalizations Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> DescriptionLocalizations IDiscordPermissionSet DefaultMemberPermissions Remora.Rest.Core.Optional < Boolean > DMPermission Properties | Improve this Doc View Source DefaultMemberPermissions Declaration public IDiscordPermissionSet DefaultMemberPermissions { get; set; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Description Declaration public Optional<string> Description { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source DescriptionLocalizations Declaration public Optional<IReadOnlyDictionary<string, string>> DescriptionLocalizations { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source DMPermission Declaration public Optional<bool> DMPermission { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source NameLocalizations Declaration public Optional<IReadOnlyDictionary<string, string>> NameLocalizations { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> | Improve this Doc View Source Options Declaration public Optional<IReadOnlyList<IApplicationCommandOption>> Options { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> | Improve this Doc View Source Type Declaration public Optional<ApplicationCommandType> Type { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ApplicationCommandType > Implements IBulkApplicationCommandData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ButtonComponent.html": {
    "href": "api/Remora.Discord.API.Objects.ButtonComponent.html",
    "title": "Class ButtonComponent | Remora.Discord",
    "keywords": "Class ButtonComponent Represents a button component. Inheritance Object ButtonComponent Implements IButtonComponent IMessageComponent IPartialButtonComponent IPartialMessageComponent IEquatable < ButtonComponent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ButtonComponent : IButtonComponent, IMessageComponent, IPartialButtonComponent, IPartialMessageComponent, IEquatable<ButtonComponent> Constructors | Improve this Doc View Source ButtonComponent(ButtonComponentStyle, Optional<String>, Optional<IPartialEmoji>, Optional<String>, Optional<String>, Optional<Boolean>) Declaration public ButtonComponent(ButtonComponentStyle Style, Optional<string> Label = default(Optional<string>), Optional<IPartialEmoji> Emoji = default(Optional<IPartialEmoji>), Optional<string> CustomID = default(Optional<string>), Optional<string> URL = default(Optional<string>), Optional<bool> IsDisabled = default(Optional<bool>)) Parameters Type Name Description ButtonComponentStyle Style Remora.Rest.Core.Optional < String > Label Remora.Rest.Core.Optional < IPartialEmoji > Emoji Remora.Rest.Core.Optional < String > CustomID Remora.Rest.Core.Optional < String > URL Remora.Rest.Core.Optional < Boolean > IsDisabled Properties | Improve this Doc View Source CustomID Declaration public Optional<string> CustomID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Emoji Declaration public Optional<IPartialEmoji> Emoji { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialEmoji > | Improve this Doc View Source IsDisabled Declaration public Optional<bool> IsDisabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Declaration public Optional<string> Label { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Style Declaration public ButtonComponentStyle Style { get; set; } Property Value Type Description ButtonComponentStyle | Improve this Doc View Source Type Gets the type of the component. Declaration public ComponentType Type { get; } Property Value Type Description ComponentType | Improve this Doc View Source URL Declaration public Optional<string> URL { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IButtonComponent IMessageComponent IPartialButtonComponent IPartialMessageComponent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Channel.html": {
    "href": "api/Remora.Discord.API.Objects.Channel.html",
    "title": "Class Channel | Remora.Discord",
    "keywords": "Class Channel Represents a channel. Inheritance Object Channel ChannelCreate ChannelDelete ChannelUpdate ThreadCreate ThreadUpdate Implements IChannel IPartialChannel IEquatable < Channel > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Channel : IChannel, IPartialChannel, IEquatable<Channel> Constructors | Improve this Doc View Source Channel(Snowflake, ChannelType, Optional<Snowflake>, Optional<Int32>, Optional<IReadOnlyList<IPermissionOverwrite>>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<Int32>, Optional<Int32>, Optional<TimeSpan>, Optional<IReadOnlyList<IUser>>, Optional<IImageHash>, Optional<Snowflake>, Optional<Snowflake>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, Optional<VideoQualityMode>, Optional<Int32>, Optional<Int32>, Optional<IThreadMetadata>, Optional<IThreadMember>, Optional<AutoArchiveDuration>, Optional<IDiscordPermissionSet>) Declaration public Channel(Snowflake ID, ChannelType Type, Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<int> Position = default(Optional<int>), Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites = default(Optional<IReadOnlyList<IPermissionOverwrite>>), Optional<string> Name = default(Optional<string>), Optional<string> Topic = default(Optional<string>), Optional<bool> IsNsfw = default(Optional<bool>), Optional<Snowflake?> LastMessageID = default(Optional<Snowflake?>), Optional<int> Bitrate = default(Optional<int>), Optional<int> UserLimit = default(Optional<int>), Optional<TimeSpan> RateLimitPerUser = default(Optional<TimeSpan>), Optional<IReadOnlyList<IUser>> Recipients = default(Optional<IReadOnlyList<IUser>>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<Snowflake> OwnerID = default(Optional<Snowflake>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<Snowflake?> ParentID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> LastPinTimestamp = default(Optional<DateTimeOffset?>), Optional<string> RTCRegion = default(Optional<string>), Optional<VideoQualityMode> VideoQualityMode = default(Optional<VideoQualityMode>), Optional<int> MessageCount = default(Optional<int>), Optional<int> MemberCount = default(Optional<int>), Optional<IThreadMetadata> ThreadMetadata = default(Optional<IThreadMetadata>), Optional<IThreadMember> Member = default(Optional<IThreadMember>), Optional<AutoArchiveDuration> DefaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID ChannelType Type Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Int32 > Position Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> PermissionOverwrites Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < String > Topic Remora.Rest.Core.Optional < Boolean > IsNsfw Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> LastMessageID Remora.Rest.Core.Optional < Int32 > Bitrate Remora.Rest.Core.Optional < Int32 > UserLimit Remora.Rest.Core.Optional < TimeSpan > RateLimitPerUser Remora.Rest.Core.Optional < IReadOnlyList < IUser >> Recipients Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > OwnerID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ParentID Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> LastPinTimestamp Remora.Rest.Core.Optional < String > RTCRegion Remora.Rest.Core.Optional < VideoQualityMode > VideoQualityMode Remora.Rest.Core.Optional < Int32 > MessageCount Remora.Rest.Core.Optional < Int32 > MemberCount Remora.Rest.Core.Optional < IThreadMetadata > ThreadMetadata Remora.Rest.Core.Optional < IThreadMember > Member Remora.Rest.Core.Optional < AutoArchiveDuration > DefaultAutoArchiveDuration Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Properties | Improve this Doc View Source ApplicationID Declaration public Optional<Snowflake> ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Bitrate Declaration public Optional<int> Bitrate { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source DefaultAutoArchiveDuration Declaration public Optional<AutoArchiveDuration> DefaultAutoArchiveDuration { get; set; } Property Value Type Description Remora.Rest.Core.Optional < AutoArchiveDuration > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Icon Declaration public Optional<IImageHash> Icon { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsNsfw Declaration public Optional<bool> IsNsfw { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source LastMessageID Declaration public Optional<Snowflake?> LastMessageID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source LastPinTimestamp Declaration public Optional<DateTimeOffset?> LastPinTimestamp { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Member Declaration public Optional<IThreadMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IThreadMember > | Improve this Doc View Source MemberCount Declaration public Optional<int> MemberCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MessageCount Declaration public Optional<int> MessageCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Name Declaration public Optional<string> Name { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source OwnerID Declaration public Optional<Snowflake> OwnerID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ParentID Declaration public Optional<Snowflake?> ParentID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source PermissionOverwrites Declaration public Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> | Improve this Doc View Source Permissions Declaration public Optional<IDiscordPermissionSet> Permissions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source Position Declaration public Optional<int> Position { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source RateLimitPerUser Declaration public Optional<TimeSpan> RateLimitPerUser { get; set; } Property Value Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source Recipients Declaration public Optional<IReadOnlyList<IUser>> Recipients { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IUser >> | Improve this Doc View Source RTCRegion Declaration public Optional<string> RTCRegion { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ThreadMetadata Declaration public Optional<IThreadMetadata> ThreadMetadata { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IThreadMetadata > | Improve this Doc View Source Topic Declaration public Optional<string> Topic { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Declaration public ChannelType Type { get; set; } Property Value Type Description ChannelType | Improve this Doc View Source UserLimit Declaration public Optional<int> UserLimit { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source VideoQualityMode Declaration public Optional<VideoQualityMode> VideoQualityMode { get; set; } Property Value Type Description Remora.Rest.Core.Optional < VideoQualityMode > Implements IChannel IPartialChannel System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ChannelMention.html": {
    "href": "api/Remora.Discord.API.Objects.ChannelMention.html",
    "title": "Class ChannelMention | Remora.Discord",
    "keywords": "Class ChannelMention Represents a mentioned channel. Inheritance Object ChannelMention Implements IChannelMention IEquatable < ChannelMention > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ChannelMention : IChannelMention, IEquatable<ChannelMention> Constructors | Improve this Doc View Source ChannelMention(Snowflake, Snowflake, ChannelType, String) Declaration public ChannelMention(Snowflake ID, Snowflake GuildID, ChannelType Type, string Name) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID ChannelType Type String Name Properties | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Type Declaration public ChannelType Type { get; set; } Property Value Type Description ChannelType Implements IChannelMention System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ChannelTemplate.html": {
    "href": "api/Remora.Discord.API.Objects.ChannelTemplate.html",
    "title": "Class ChannelTemplate | Remora.Discord",
    "keywords": "Class ChannelTemplate Represents a channel. Inheritance Object ChannelTemplate Implements IChannelTemplate IEquatable < ChannelTemplate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ChannelTemplate : IChannelTemplate, IEquatable<ChannelTemplate> Constructors | Improve this Doc View Source ChannelTemplate(Int32, ChannelType, String, Int32, String, Int32, Int32, Boolean, Int32, Nullable<Int32>, IReadOnlyList<IPermissionOverwriteTemplate>) Declaration public ChannelTemplate(int ID, ChannelType Type, string Name, int Position, string Topic, int Bitrate, int UserLimit, bool IsNsfw, int RateLimitPerUser, int? ParentID, IReadOnlyList<IPermissionOverwriteTemplate> PermissionOverwrites) Parameters Type Name Description Int32 ID ChannelType Type String Name Int32 Position String Topic Int32 Bitrate Int32 UserLimit Boolean IsNsfw Int32 RateLimitPerUser Nullable < Int32 > ParentID IReadOnlyList < IPermissionOverwriteTemplate > PermissionOverwrites Properties | Improve this Doc View Source Bitrate Declaration public int Bitrate { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ID Declaration public int ID { get; set; } Property Value Type Description Int32 | Improve this Doc View Source IsNsfw Declaration public bool IsNsfw { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source ParentID Declaration public int? ParentID { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source PermissionOverwrites Declaration public IReadOnlyList<IPermissionOverwriteTemplate> PermissionOverwrites { get; set; } Property Value Type Description IReadOnlyList < IPermissionOverwriteTemplate > | Improve this Doc View Source Position Declaration public int Position { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RateLimitPerUser Declaration public int RateLimitPerUser { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Topic Declaration public string Topic { get; set; } Property Value Type Description String | Improve this Doc View Source Type Declaration public ChannelType Type { get; set; } Property Value Type Description ChannelType | Improve this Doc View Source UserLimit Declaration public int UserLimit { get; set; } Property Value Type Description Int32 Implements IChannelTemplate System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ClientStatuses.html": {
    "href": "api/Remora.Discord.API.Objects.ClientStatuses.html",
    "title": "Class ClientStatuses | Remora.Discord",
    "keywords": "Class ClientStatuses Represents a collection of platform statues. Inheritance Object ClientStatuses Implements IClientStatuses IEquatable < ClientStatuses > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ClientStatuses : IClientStatuses, IEquatable<ClientStatuses> Constructors | Improve this Doc View Source ClientStatuses(Optional<ClientStatus>, Optional<ClientStatus>, Optional<ClientStatus>) Declaration public ClientStatuses(Optional<ClientStatus> Desktop = default(Optional<ClientStatus>), Optional<ClientStatus> Mobile = default(Optional<ClientStatus>), Optional<ClientStatus> Web = default(Optional<ClientStatus>)) Parameters Type Name Description Remora.Rest.Core.Optional < ClientStatus > Desktop Remora.Rest.Core.Optional < ClientStatus > Mobile Remora.Rest.Core.Optional < ClientStatus > Web Properties | Improve this Doc View Source Desktop Declaration public Optional<ClientStatus> Desktop { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ClientStatus > | Improve this Doc View Source Mobile Declaration public Optional<ClientStatus> Mobile { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ClientStatus > | Improve this Doc View Source Web Declaration public Optional<ClientStatus> Web { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ClientStatus > Implements IClientStatuses System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Connection.html": {
    "href": "api/Remora.Discord.API.Objects.Connection.html",
    "title": "Class Connection | Remora.Discord",
    "keywords": "Class Connection Represents a connection between a user account and an external service. Inheritance Object Connection Implements IConnection IEquatable < Connection > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Connection : IConnection, IEquatable<Connection> Constructors | Improve this Doc View Source Connection(String, String, String, Optional<Boolean>, Optional<IReadOnlyList<IPartialIntegration>>, Boolean, Boolean, Boolean, ConnectionVisibility) Declaration public Connection(string ID, string Name, string Type, Optional<bool> IsRevoked, Optional<IReadOnlyList<IPartialIntegration>> Integrations, bool IsVerified, bool IsFriendSyncEnabled, bool ShouldShowActivity, ConnectionVisibility Visibility) Parameters Type Name Description String ID String Name String Type Remora.Rest.Core.Optional < Boolean > IsRevoked Remora.Rest.Core.Optional < IReadOnlyList < IPartialIntegration >> Integrations Boolean IsVerified Boolean IsFriendSyncEnabled Boolean ShouldShowActivity ConnectionVisibility Visibility Properties | Improve this Doc View Source ID Declaration public string ID { get; set; } Property Value Type Description String | Improve this Doc View Source Integrations Declaration public Optional<IReadOnlyList<IPartialIntegration>> Integrations { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialIntegration >> | Improve this Doc View Source IsFriendSyncEnabled Declaration public bool IsFriendSyncEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsRevoked Declaration public Optional<bool> IsRevoked { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsVerified Declaration public bool IsVerified { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source ShouldShowActivity Declaration public bool ShouldShowActivity { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Type Declaration public string Type { get; set; } Property Value Type Description String | Improve this Doc View Source Visibility Declaration public ConnectionVisibility Visibility { get; set; } Property Value Type Description ConnectionVisibility Implements IConnection System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.DiscordPermissionSet.html": {
    "href": "api/Remora.Discord.API.Objects.DiscordPermissionSet.html",
    "title": "Class DiscordPermissionSet | Remora.Discord",
    "keywords": "Class DiscordPermissionSet Represents a Discord permission set. Inheritance Object DiscordPermissionSet Implements IDiscordPermissionSet Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class DiscordPermissionSet : IDiscordPermissionSet Constructors | Improve this Doc View Source DiscordPermissionSet(DiscordPermission[]) Initializes a new instance of the DiscordPermissionSet class. Declaration public DiscordPermissionSet(params DiscordPermission[] permissions) Parameters Type Name Description DiscordPermission [] permissions The permissions in the set. | Improve this Doc View Source DiscordPermissionSet(DiscordTextPermission[]) Initializes a new instance of the DiscordPermissionSet class. Declaration public DiscordPermissionSet(params DiscordTextPermission[] permissions) Parameters Type Name Description DiscordTextPermission [] permissions The permissions in the set. | Improve this Doc View Source DiscordPermissionSet(DiscordVoicePermission[]) Initializes a new instance of the DiscordPermissionSet class. Declaration public DiscordPermissionSet(params DiscordVoicePermission[] permissions) Parameters Type Name Description DiscordVoicePermission [] permissions The permissions in the set. | Improve this Doc View Source DiscordPermissionSet(BigInteger) Initializes a new instance of the DiscordPermissionSet class. Declaration public DiscordPermissionSet(BigInteger value) Parameters Type Name Description BigInteger value The value. Properties | Improve this Doc View Source Empty Gets an empty permission set. Declaration public static DiscordPermissionSet Empty { get; } Property Value Type Description DiscordPermissionSet | Improve this Doc View Source Value Gets the raw value of the permission set. Declaration public BigInteger Value { get; } Property Value Type Description BigInteger Methods | Improve this Doc View Source ComputePermissions(Snowflake, IRole, IReadOnlyList<IPermissionOverwrite>) Computes a full permission set for a role, taking overwrites into account. Declaration public static IDiscordPermissionSet ComputePermissions(Snowflake roleID, IRole everyoneRole, IReadOnlyList<IPermissionOverwrite> overwrites = null) Parameters Type Name Description Remora.Rest.Core.Snowflake roleID The ID of the role. IRole everyoneRole The @everyone role, assigned to every user. IReadOnlyList < IPermissionOverwrite > overwrites The channel overwrites currently in effect, if any. Returns Type Description IDiscordPermissionSet The true permission set. | Improve this Doc View Source ComputePermissions(Snowflake, IRole, IReadOnlyList<IRole>, IReadOnlyList<IPermissionOverwrite>) Computes a full permission set for a user, taking roles and overwrites into account. Declaration public static IDiscordPermissionSet ComputePermissions(Snowflake memberID, IRole everyoneRole, IReadOnlyList<IRole> memberRoles, IReadOnlyList<IPermissionOverwrite> overwrites = null) Parameters Type Name Description Remora.Rest.Core.Snowflake memberID The ID of the member. IRole everyoneRole The @everyone role, assigned to every user. IReadOnlyList < IRole > memberRoles The roles that the user has, if any. IReadOnlyList < IPermissionOverwrite > overwrites The channel overwrites currently in effect, if any. Returns Type Description IDiscordPermissionSet The true permission set. | Improve this Doc View Source Equals(DiscordPermissionSet) Determines whether the specified object is equal to the current object. Declaration protected bool Equals(DiscordPermissionSet other) Parameters Type Name Description DiscordPermissionSet other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source GetPermissions() Gets a list of the DiscordPermission values contained within the set. Declaration public IReadOnlyList<DiscordPermission> GetPermissions() Returns Type Description IReadOnlyList < DiscordPermission > A list of DiscordPermission value. | Improve this Doc View Source HasPermission(DiscordPermission) Determines whether the set allows the given permission. Declaration public bool HasPermission(DiscordPermission permission) Parameters Type Name Description DiscordPermission permission The permission. Returns Type Description Boolean true if the given permission is in the set; otherwise, false. | Improve this Doc View Source HasPermission(DiscordTextPermission) Determines whether the set allows the given permission. Declaration public bool HasPermission(DiscordTextPermission permission) Parameters Type Name Description DiscordTextPermission permission The permission. Returns Type Description Boolean true if the given permission is in the set; otherwise, false. | Improve this Doc View Source HasPermission(DiscordVoicePermission) Determines whether the set allows the given permission. Declaration public bool HasPermission(DiscordVoicePermission permission) Parameters Type Name Description DiscordVoicePermission permission The permission. Returns Type Description Boolean true if the given permission is in the set; otherwise, false. Implements IDiscordPermissionSet"
  },
  "api/Remora.Discord.API.Objects.Embed.html": {
    "href": "api/Remora.Discord.API.Objects.Embed.html",
    "title": "Class Embed | Remora.Discord",
    "keywords": "Class Embed Represents an embed. Inheritance Object Embed Implements IEmbed IEquatable < Embed > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Embed : IEmbed, IEquatable<Embed> Constructors | Improve this Doc View Source Embed(Optional<String>, Optional<EmbedType>, Optional<String>, Optional<String>, Optional<DateTimeOffset>, Optional<Color>, Optional<IEmbedFooter>, Optional<IEmbedImage>, Optional<IEmbedThumbnail>, Optional<IEmbedVideo>, Optional<IEmbedProvider>, Optional<IEmbedAuthor>, Optional<IReadOnlyList<IEmbedField>>) Declaration public Embed(Optional<string> Title = default(Optional<string>), Optional<EmbedType> Type = default(Optional<EmbedType>), Optional<string> Description = default(Optional<string>), Optional<string> Url = default(Optional<string>), Optional<DateTimeOffset> Timestamp = default(Optional<DateTimeOffset>), Optional<Color> Colour = default(Optional<Color>), Optional<IEmbedFooter> Footer = default(Optional<IEmbedFooter>), Optional<IEmbedImage> Image = default(Optional<IEmbedImage>), Optional<IEmbedThumbnail> Thumbnail = default(Optional<IEmbedThumbnail>), Optional<IEmbedVideo> Video = default(Optional<IEmbedVideo>), Optional<IEmbedProvider> Provider = default(Optional<IEmbedProvider>), Optional<IEmbedAuthor> Author = default(Optional<IEmbedAuthor>), Optional<IReadOnlyList<IEmbedField>> Fields = default(Optional<IReadOnlyList<IEmbedField>>)) Parameters Type Name Description Remora.Rest.Core.Optional < String > Title Remora.Rest.Core.Optional < EmbedType > Type Remora.Rest.Core.Optional < String > Description Remora.Rest.Core.Optional < String > Url Remora.Rest.Core.Optional < DateTimeOffset > Timestamp Remora.Rest.Core.Optional < Color > Colour Remora.Rest.Core.Optional < IEmbedFooter > Footer Remora.Rest.Core.Optional < IEmbedImage > Image Remora.Rest.Core.Optional < IEmbedThumbnail > Thumbnail Remora.Rest.Core.Optional < IEmbedVideo > Video Remora.Rest.Core.Optional < IEmbedProvider > Provider Remora.Rest.Core.Optional < IEmbedAuthor > Author Remora.Rest.Core.Optional < IReadOnlyList < IEmbedField >> Fields Properties | Improve this Doc View Source Author Declaration public Optional<IEmbedAuthor> Author { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedAuthor > | Improve this Doc View Source Colour Declaration public Optional<Color> Colour { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Color > | Improve this Doc View Source Description Declaration public Optional<string> Description { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Fields Declaration public Optional<IReadOnlyList<IEmbedField>> Fields { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IEmbedField >> | Improve this Doc View Source Footer Declaration public Optional<IEmbedFooter> Footer { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedFooter > | Improve this Doc View Source Image Declaration public Optional<IEmbedImage> Image { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedImage > | Improve this Doc View Source Provider Declaration public Optional<IEmbedProvider> Provider { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedProvider > | Improve this Doc View Source Thumbnail Declaration public Optional<IEmbedThumbnail> Thumbnail { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedThumbnail > | Improve this Doc View Source Timestamp Declaration public Optional<DateTimeOffset> Timestamp { get; set; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Title Declaration public Optional<string> Title { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Declaration public Optional<EmbedType> Type { get; set; } Property Value Type Description Remora.Rest.Core.Optional < EmbedType > | Improve this Doc View Source Url Declaration public Optional<string> Url { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Video Declaration public Optional<IEmbedVideo> Video { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IEmbedVideo > Implements IEmbed System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.EmbedAuthor.html": {
    "href": "api/Remora.Discord.API.Objects.EmbedAuthor.html",
    "title": "Class EmbedAuthor | Remora.Discord",
    "keywords": "Class EmbedAuthor Represents information about an embed author. Inheritance Object EmbedAuthor Implements IEmbedAuthor IEquatable < EmbedAuthor > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class EmbedAuthor : IEmbedAuthor, IEquatable<EmbedAuthor> Constructors | Improve this Doc View Source EmbedAuthor(String, Optional<String>, Optional<String>, Optional<String>) Declaration public EmbedAuthor(string Name, Optional<string> Url = default(Optional<string>), Optional<string> IconUrl = default(Optional<string>), Optional<string> ProxyIconUrl = default(Optional<string>)) Parameters Type Name Description String Name Remora.Rest.Core.Optional < String > Url Remora.Rest.Core.Optional < String > IconUrl Remora.Rest.Core.Optional < String > ProxyIconUrl Properties | Improve this Doc View Source IconUrl Declaration public Optional<string> IconUrl { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source ProxyIconUrl Declaration public Optional<string> ProxyIconUrl { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Url Declaration public Optional<string> Url { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IEmbedAuthor System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.EmbedField.html": {
    "href": "api/Remora.Discord.API.Objects.EmbedField.html",
    "title": "Class EmbedField | Remora.Discord",
    "keywords": "Class EmbedField Represents a field in an embed. Inheritance Object EmbedField Implements IEmbedField IEquatable < EmbedField > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class EmbedField : IEmbedField, IEquatable<EmbedField> Constructors | Improve this Doc View Source EmbedField(String, String, Optional<Boolean>) Declaration public EmbedField(string Name, string Value, Optional<bool> IsInline = default(Optional<bool>)) Parameters Type Name Description String Name String Value Remora.Rest.Core.Optional < Boolean > IsInline Properties | Improve this Doc View Source IsInline Declaration public Optional<bool> IsInline { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Value Declaration public string Value { get; set; } Property Value Type Description String Implements IEmbedField System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.EmbedFooter.html": {
    "href": "api/Remora.Discord.API.Objects.EmbedFooter.html",
    "title": "Class EmbedFooter | Remora.Discord",
    "keywords": "Class EmbedFooter Represents a footer in an embed. Inheritance Object EmbedFooter Implements IEmbedFooter IEquatable < EmbedFooter > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class EmbedFooter : IEmbedFooter, IEquatable<EmbedFooter> Constructors | Improve this Doc View Source EmbedFooter(String, Optional<String>, Optional<String>) Declaration public EmbedFooter(string Text, Optional<string> IconUrl = default(Optional<string>), Optional<string> ProxyIconUrl = default(Optional<string>)) Parameters Type Name Description String Text Remora.Rest.Core.Optional < String > IconUrl Remora.Rest.Core.Optional < String > ProxyIconUrl Properties | Improve this Doc View Source IconUrl Declaration public Optional<string> IconUrl { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ProxyIconUrl Declaration public Optional<string> ProxyIconUrl { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Text Declaration public string Text { get; set; } Property Value Type Description String Implements IEmbedFooter System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.EmbedImage.html": {
    "href": "api/Remora.Discord.API.Objects.EmbedImage.html",
    "title": "Class EmbedImage | Remora.Discord",
    "keywords": "Class EmbedImage Represents information about an image in an embed. Inheritance Object EmbedImage Implements IEmbedImage IEquatable < EmbedImage > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class EmbedImage : IEmbedImage, IEquatable<EmbedImage> Constructors | Improve this Doc View Source EmbedImage(String, Optional<String>, Optional<Int32>, Optional<Int32>) Declaration public EmbedImage(string Url, Optional<string> ProxyUrl = default(Optional<string>), Optional<int> Height = default(Optional<int>), Optional<int> Width = default(Optional<int>)) Parameters Type Name Description String Url Remora.Rest.Core.Optional < String > ProxyUrl Remora.Rest.Core.Optional < Int32 > Height Remora.Rest.Core.Optional < Int32 > Width Properties | Improve this Doc View Source Height Declaration public Optional<int> Height { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ProxyUrl Declaration public Optional<string> ProxyUrl { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Url Declaration public string Url { get; set; } Property Value Type Description String | Improve this Doc View Source Width Declaration public Optional<int> Width { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > Implements IEmbedImage System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.EmbedProvider.html": {
    "href": "api/Remora.Discord.API.Objects.EmbedProvider.html",
    "title": "Class EmbedProvider | Remora.Discord",
    "keywords": "Class EmbedProvider Represents information about an embed provider. Inheritance Object EmbedProvider Implements IEmbedProvider IEquatable < EmbedProvider > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class EmbedProvider : IEmbedProvider, IEquatable<EmbedProvider> Constructors | Improve this Doc View Source EmbedProvider(Optional<String>, Optional<String>) Declaration public EmbedProvider(Optional<string> Name = default(Optional<string>), Optional<string> Url = default(Optional<string>)) Parameters Type Name Description Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < String > Url Properties | Improve this Doc View Source Name Declaration public Optional<string> Name { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Url Declaration public Optional<string> Url { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IEmbedProvider System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.EmbedThumbnail.html": {
    "href": "api/Remora.Discord.API.Objects.EmbedThumbnail.html",
    "title": "Class EmbedThumbnail | Remora.Discord",
    "keywords": "Class EmbedThumbnail Represents information about a thumbnail in an embed. Inheritance Object EmbedThumbnail Implements IEmbedThumbnail IEquatable < EmbedThumbnail > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class EmbedThumbnail : IEmbedThumbnail, IEquatable<EmbedThumbnail> Constructors | Improve this Doc View Source EmbedThumbnail(String, Optional<String>, Optional<Int32>, Optional<Int32>) Declaration public EmbedThumbnail(string Url, Optional<string> ProxyUrl = default(Optional<string>), Optional<int> Height = default(Optional<int>), Optional<int> Width = default(Optional<int>)) Parameters Type Name Description String Url Remora.Rest.Core.Optional < String > ProxyUrl Remora.Rest.Core.Optional < Int32 > Height Remora.Rest.Core.Optional < Int32 > Width Properties | Improve this Doc View Source Height Declaration public Optional<int> Height { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ProxyUrl Declaration public Optional<string> ProxyUrl { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Url Declaration public string Url { get; set; } Property Value Type Description String | Improve this Doc View Source Width Declaration public Optional<int> Width { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > Implements IEmbedThumbnail System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.EmbedVideo.html": {
    "href": "api/Remora.Discord.API.Objects.EmbedVideo.html",
    "title": "Class EmbedVideo | Remora.Discord",
    "keywords": "Class EmbedVideo Represents information about a video in an embed. Inheritance Object EmbedVideo Implements IEmbedVideo IEquatable < EmbedVideo > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class EmbedVideo : IEmbedVideo, IEquatable<EmbedVideo> Constructors | Improve this Doc View Source EmbedVideo(Optional<String>, Optional<String>, Optional<Int32>, Optional<Int32>) Declaration public EmbedVideo(Optional<string> Url = default(Optional<string>), Optional<string> ProxyUrl = default(Optional<string>), Optional<int> Height = default(Optional<int>), Optional<int> Width = default(Optional<int>)) Parameters Type Name Description Remora.Rest.Core.Optional < String > Url Remora.Rest.Core.Optional < String > ProxyUrl Remora.Rest.Core.Optional < Int32 > Height Remora.Rest.Core.Optional < Int32 > Width Properties | Improve this Doc View Source Height Declaration public Optional<int> Height { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ProxyUrl Declaration public Optional<string> ProxyUrl { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Url Declaration public Optional<string> Url { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Width Declaration public Optional<int> Width { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > Implements IEmbedVideo System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Emoji.html": {
    "href": "api/Remora.Discord.API.Objects.Emoji.html",
    "title": "Class Emoji | Remora.Discord",
    "keywords": "Class Emoji Represents an emoji. Inheritance Object Emoji Implements IEmoji IPartialEmoji IEquatable < Emoji > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Emoji : IEmoji, IPartialEmoji, IEquatable<Emoji> Constructors | Improve this Doc View Source Emoji(Nullable<Snowflake>, String, Optional<IReadOnlyList<Snowflake>>, Optional<IUser>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>) Declaration public Emoji(Snowflake? ID, string Name, Optional<IReadOnlyList<Snowflake>> Roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<IUser> User = default(Optional<IUser>), Optional<bool> RequireColons = default(Optional<bool>), Optional<bool> IsManaged = default(Optional<bool>), Optional<bool> IsAnimated = default(Optional<bool>), Optional<bool> IsAvailable = default(Optional<bool>)) Parameters Type Name Description Nullable < Remora.Rest.Core.Snowflake > ID String Name Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> Roles Remora.Rest.Core.Optional < IUser > User Remora.Rest.Core.Optional < Boolean > RequireColons Remora.Rest.Core.Optional < Boolean > IsManaged Remora.Rest.Core.Optional < Boolean > IsAnimated Remora.Rest.Core.Optional < Boolean > IsAvailable Properties | Improve this Doc View Source ID Declaration public Snowflake? ID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsAnimated Declaration public Optional<bool> IsAnimated { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsAvailable Declaration public Optional<bool> IsAvailable { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsManaged Declaration public Optional<bool> IsManaged { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source RequireColons Declaration public Optional<bool> RequireColons { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Roles Declaration public Optional<IReadOnlyList<Snowflake>> Roles { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Implements IEmoji IPartialEmoji System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ErrorDetails.html": {
    "href": "api/Remora.Discord.API.Objects.ErrorDetails.html",
    "title": "Class ErrorDetails | Remora.Discord",
    "keywords": "Class ErrorDetails Represents information about a single error. Inheritance Object ErrorDetails Implements IErrorDetails IEquatable < ErrorDetails > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ErrorDetails : IErrorDetails, IEquatable<ErrorDetails> Constructors | Improve this Doc View Source ErrorDetails(String, String) Declaration public ErrorDetails(string Code, string Message) Parameters Type Name Description String Code String Message Properties | Improve this Doc View Source Code Declaration public string Code { get; set; } Property Value Type Description String | Improve this Doc View Source Message Declaration public string Message { get; set; } Property Value Type Description String Implements IErrorDetails System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.FollowedChannel.html": {
    "href": "api/Remora.Discord.API.Objects.FollowedChannel.html",
    "title": "Class FollowedChannel | Remora.Discord",
    "keywords": "Class FollowedChannel Represents a followed news channel. Inheritance Object FollowedChannel Implements IFollowedChannel IEquatable < FollowedChannel > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class FollowedChannel : IFollowedChannel, IEquatable<FollowedChannel> Constructors | Improve this Doc View Source FollowedChannel(Snowflake, Snowflake) Declaration public FollowedChannel(Snowflake ChannelID, Snowflake WebhookID) Parameters Type Name Description Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Snowflake WebhookID Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source WebhookID Declaration public Snowflake WebhookID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IFollowedChannel System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GatewayEndpoint.html": {
    "href": "api/Remora.Discord.API.Objects.GatewayEndpoint.html",
    "title": "Class GatewayEndpoint | Remora.Discord",
    "keywords": "Class GatewayEndpoint Represents a gateway endpoint. Inheritance Object GatewayEndpoint Implements IGatewayEndpoint IEquatable < GatewayEndpoint > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GatewayEndpoint : IGatewayEndpoint, IEquatable<GatewayEndpoint> Constructors | Improve this Doc View Source GatewayEndpoint(String, Optional<Int32>, Optional<ISessionStartLimit>) Declaration public GatewayEndpoint(string Url, Optional<int> Shards = default(Optional<int>), Optional<ISessionStartLimit> SessionStartLimit = default(Optional<ISessionStartLimit>)) Parameters Type Name Description String Url Remora.Rest.Core.Optional < Int32 > Shards Remora.Rest.Core.Optional < ISessionStartLimit > SessionStartLimit Properties | Improve this Doc View Source SessionStartLimit Declaration public Optional<ISessionStartLimit> SessionStartLimit { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ISessionStartLimit > | Improve this Doc View Source Shards Declaration public Optional<int> Shards { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Url Declaration public string Url { get; set; } Property Value Type Description String Implements IGatewayEndpoint System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Guild.html": {
    "href": "api/Remora.Discord.API.Objects.Guild.html",
    "title": "Class Guild | Remora.Discord",
    "keywords": "Class Guild Represents a Discord Guild. Inheritance Object Guild GuildCreate GuildUpdate Implements IGuild IPartialGuild IEquatable < Guild > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Guild : IGuild, IPartialGuild, IEquatable<Guild> Constructors | Improve this Doc View Source Guild(Snowflake, String, IImageHash, IImageHash, IImageHash, Optional<Boolean>, Snowflake, Optional<IDiscordPermissionSet>, Nullable<Snowflake>, TimeSpan, VerificationLevel, MessageNotificationLevel, ExplicitContentFilterLevel, IReadOnlyList<IRole>, IReadOnlyList<IEmoji>, IReadOnlyList<GuildFeature>, MultiFactorAuthenticationLevel, Nullable<Snowflake>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Nullable<Snowflake>, SystemChannelFlags, Nullable<Snowflake>, Optional<Nullable<Int32>>, Optional<Int32>, String, String, IImageHash, PremiumTier, Optional<Int32>, String, Nullable<Snowflake>, Optional<Int32>, Optional<Int32>, Optional<Int32>, Optional<IWelcomeScreen>, GuildNSFWLevel, Optional<IReadOnlyList<ISticker>>, Boolean) Declaration public Guild(Snowflake ID, string Name, IImageHash Icon, IImageHash Splash, IImageHash DiscoverySplash, Optional<bool> IsOwner, Snowflake OwnerID, Optional<IDiscordPermissionSet> Permissions, Snowflake? AFKChannelID, TimeSpan AFKTimeout, VerificationLevel VerificationLevel, MessageNotificationLevel DefaultMessageNotifications, ExplicitContentFilterLevel ExplicitContentFilter, IReadOnlyList<IRole> Roles, IReadOnlyList<IEmoji> Emojis, IReadOnlyList<GuildFeature> GuildFeatures, MultiFactorAuthenticationLevel MFALevel, Snowflake? ApplicationID, Optional<bool> IsWidgetEnabled, Optional<Snowflake?> WidgetChannelID, Snowflake? SystemChannelID, SystemChannelFlags SystemChannelFlags, Snowflake? RulesChannelID, Optional<int?> MaxPresences, Optional<int> MaxMembers, string VanityUrlCode, string Description, IImageHash Banner, PremiumTier PremiumTier, Optional<int> PremiumSubscriptionCount, string PreferredLocale, Snowflake? PublicUpdatesChannelID, Optional<int> MaxVideoChannelUsers, Optional<int> ApproximateMemberCount, Optional<int> ApproximatePresenceCount, Optional<IWelcomeScreen> WelcomeScreen, GuildNSFWLevel NSFWLevel, Optional<IReadOnlyList<ISticker>> Stickers, bool IsPremiumProgressBarEnabled) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name IImageHash Icon IImageHash Splash IImageHash DiscoverySplash Remora.Rest.Core.Optional < Boolean > IsOwner Remora.Rest.Core.Snowflake OwnerID Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Nullable < Remora.Rest.Core.Snowflake > AFKChannelID TimeSpan AFKTimeout VerificationLevel VerificationLevel MessageNotificationLevel DefaultMessageNotifications ExplicitContentFilterLevel ExplicitContentFilter IReadOnlyList < IRole > Roles IReadOnlyList < IEmoji > Emojis IReadOnlyList < GuildFeature > GuildFeatures MultiFactorAuthenticationLevel MFALevel Nullable < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Boolean > IsWidgetEnabled Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> WidgetChannelID Nullable < Remora.Rest.Core.Snowflake > SystemChannelID SystemChannelFlags SystemChannelFlags Nullable < Remora.Rest.Core.Snowflake > RulesChannelID Remora.Rest.Core.Optional < Nullable < Int32 >> MaxPresences Remora.Rest.Core.Optional < Int32 > MaxMembers String VanityUrlCode String Description IImageHash Banner PremiumTier PremiumTier Remora.Rest.Core.Optional < Int32 > PremiumSubscriptionCount String PreferredLocale Nullable < Remora.Rest.Core.Snowflake > PublicUpdatesChannelID Remora.Rest.Core.Optional < Int32 > MaxVideoChannelUsers Remora.Rest.Core.Optional < Int32 > ApproximateMemberCount Remora.Rest.Core.Optional < Int32 > ApproximatePresenceCount Remora.Rest.Core.Optional < IWelcomeScreen > WelcomeScreen GuildNSFWLevel NSFWLevel Remora.Rest.Core.Optional < IReadOnlyList < ISticker >> Stickers Boolean IsPremiumProgressBarEnabled Properties | Improve this Doc View Source AFKChannelID Declaration public Snowflake? AFKChannelID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source AFKTimeout Declaration public TimeSpan AFKTimeout { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source ApplicationID Declaration public Snowflake? ApplicationID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ApproximateMemberCount Declaration public Optional<int> ApproximateMemberCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ApproximatePresenceCount Declaration public Optional<int> ApproximatePresenceCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Banner Declaration public IImageHash Banner { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source DefaultMessageNotifications Declaration public MessageNotificationLevel DefaultMessageNotifications { get; set; } Property Value Type Description MessageNotificationLevel | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source DiscoverySplash Declaration public IImageHash DiscoverySplash { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source Emojis Declaration public IReadOnlyList<IEmoji> Emojis { get; set; } Property Value Type Description IReadOnlyList < IEmoji > | Improve this Doc View Source ExplicitContentFilter Declaration public ExplicitContentFilterLevel ExplicitContentFilter { get; set; } Property Value Type Description ExplicitContentFilterLevel | Improve this Doc View Source GuildFeatures Declaration public IReadOnlyList<GuildFeature> GuildFeatures { get; set; } Property Value Type Description IReadOnlyList < GuildFeature > | Improve this Doc View Source Icon Declaration public IImageHash Icon { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsOwner Declaration public Optional<bool> IsOwner { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsPremiumProgressBarEnabled Declaration public bool IsPremiumProgressBarEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsWidgetEnabled Declaration public Optional<bool> IsWidgetEnabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MaxMembers Declaration public Optional<int> MaxMembers { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MaxPresences Declaration public Optional<int?> MaxPresences { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> | Improve this Doc View Source MaxVideoChannelUsers Declaration public Optional<int> MaxVideoChannelUsers { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MFALevel Declaration public MultiFactorAuthenticationLevel MFALevel { get; set; } Property Value Type Description MultiFactorAuthenticationLevel | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source NSFWLevel Declaration public GuildNSFWLevel NSFWLevel { get; set; } Property Value Type Description GuildNSFWLevel | Improve this Doc View Source OwnerID Declaration public Snowflake OwnerID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Permissions Declaration public Optional<IDiscordPermissionSet> Permissions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source PreferredLocale Declaration public string PreferredLocale { get; set; } Property Value Type Description String | Improve this Doc View Source PremiumSubscriptionCount Declaration public Optional<int> PremiumSubscriptionCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source PremiumTier Declaration public PremiumTier PremiumTier { get; set; } Property Value Type Description PremiumTier | Improve this Doc View Source PublicUpdatesChannelID Declaration public Snowflake? PublicUpdatesChannelID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Roles Declaration public IReadOnlyList<IRole> Roles { get; set; } Property Value Type Description IReadOnlyList < IRole > | Improve this Doc View Source RulesChannelID Declaration public Snowflake? RulesChannelID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Splash Declaration public IImageHash Splash { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source Stickers Declaration public Optional<IReadOnlyList<ISticker>> Stickers { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < ISticker >> | Improve this Doc View Source SystemChannelFlags Declaration public SystemChannelFlags SystemChannelFlags { get; set; } Property Value Type Description SystemChannelFlags | Improve this Doc View Source SystemChannelID Declaration public Snowflake? SystemChannelID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source VanityUrlCode Declaration public string VanityUrlCode { get; set; } Property Value Type Description String | Improve this Doc View Source VerificationLevel Declaration public VerificationLevel VerificationLevel { get; set; } Property Value Type Description VerificationLevel | Improve this Doc View Source WelcomeScreen Declaration public Optional<IWelcomeScreen> WelcomeScreen { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IWelcomeScreen > | Improve this Doc View Source WidgetChannelID Declaration public Optional<Snowflake?> WidgetChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> Implements IGuild IPartialGuild System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GuildApplicationCommandPermissions.html": {
    "href": "api/Remora.Discord.API.Objects.GuildApplicationCommandPermissions.html",
    "title": "Class GuildApplicationCommandPermissions | Remora.Discord",
    "keywords": "Class GuildApplicationCommandPermissions Represents a set of permissions for a command in a guild. Inheritance Object GuildApplicationCommandPermissions ApplicationCommandPermissionsUpdate Implements IGuildApplicationCommandPermissions IPartialGuildApplicationCommandPermissions IEquatable < GuildApplicationCommandPermissions > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildApplicationCommandPermissions : IGuildApplicationCommandPermissions, IPartialGuildApplicationCommandPermissions, IEquatable<GuildApplicationCommandPermissions> Constructors | Improve this Doc View Source GuildApplicationCommandPermissions(Snowflake, Snowflake, Snowflake, IReadOnlyList<IApplicationCommandPermissions>) Declaration public GuildApplicationCommandPermissions(Snowflake ID, Snowflake ApplicationID, Snowflake GuildID, IReadOnlyList<IApplicationCommandPermissions> Permissions) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake ApplicationID Remora.Rest.Core.Snowflake GuildID IReadOnlyList < IApplicationCommandPermissions > Permissions Properties | Improve this Doc View Source ApplicationID Declaration public Snowflake ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Permissions Declaration public IReadOnlyList<IApplicationCommandPermissions> Permissions { get; set; } Property Value Type Description IReadOnlyList < IApplicationCommandPermissions > Implements IGuildApplicationCommandPermissions IPartialGuildApplicationCommandPermissions System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GuildMember.html": {
    "href": "api/Remora.Discord.API.Objects.GuildMember.html",
    "title": "Class GuildMember | Remora.Discord",
    "keywords": "Class GuildMember Represents information about a guild member. Inheritance Object GuildMember GuildMemberAdd Implements IGuildMember IPartialGuildMember IEquatable < GuildMember > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildMember : IGuildMember, IPartialGuildMember, IEquatable<GuildMember> Constructors | Improve this Doc View Source GuildMember(Optional<IUser>, Optional<String>, Optional<IImageHash>, IReadOnlyList<Snowflake>, DateTimeOffset, Optional<Nullable<DateTimeOffset>>, Boolean, Boolean, Optional<Nullable<Boolean>>, Optional<IDiscordPermissionSet>, Optional<Nullable<DateTimeOffset>>) Declaration public GuildMember(Optional<IUser> User, Optional<string> Nickname, Optional<IImageHash> Avatar, IReadOnlyList<Snowflake> Roles, DateTimeOffset JoinedAt, Optional<DateTimeOffset?> PremiumSince, bool IsDeafened, bool IsMuted, Optional<bool?> IsPending = default(Optional<bool?>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>), Optional<DateTimeOffset?> CommunicationDisabledUntil = default(Optional<DateTimeOffset?>)) Parameters Type Name Description Remora.Rest.Core.Optional < IUser > User Remora.Rest.Core.Optional < String > Nickname Remora.Rest.Core.Optional < IImageHash > Avatar IReadOnlyList < Remora.Rest.Core.Snowflake > Roles DateTimeOffset JoinedAt Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> PremiumSince Boolean IsDeafened Boolean IsMuted Remora.Rest.Core.Optional < Nullable < Boolean >> IsPending Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> CommunicationDisabledUntil Properties | Improve this Doc View Source Avatar Declaration public Optional<IImageHash> Avatar { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source CommunicationDisabledUntil Declaration public Optional<DateTimeOffset?> CommunicationDisabledUntil { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IsDeafened Declaration public bool IsDeafened { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsMuted Declaration public bool IsMuted { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsPending Declaration public Optional<bool?> IsPending { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Boolean >> | Improve this Doc View Source JoinedAt Declaration public DateTimeOffset JoinedAt { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Nickname Declaration public Optional<string> Nickname { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Permissions Declaration public Optional<IDiscordPermissionSet> Permissions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source PremiumSince Declaration public Optional<DateTimeOffset?> PremiumSince { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Roles Declaration public IReadOnlyList<Snowflake> Roles { get; set; } Property Value Type Description IReadOnlyList < Remora.Rest.Core.Snowflake > | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Implements IGuildMember IPartialGuildMember System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GuildPreview.html": {
    "href": "api/Remora.Discord.API.Objects.GuildPreview.html",
    "title": "Class GuildPreview | Remora.Discord",
    "keywords": "Class GuildPreview Represents a preview of a public guild. Inheritance Object GuildPreview Implements IGuildPreview IEquatable < GuildPreview > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildPreview : IGuildPreview, IEquatable<GuildPreview> Constructors | Improve this Doc View Source GuildPreview(Snowflake, String, IImageHash, IImageHash, IImageHash, IReadOnlyList<IEmoji>, IReadOnlyList<GuildFeature>, Optional<Int32>, Optional<Int32>, String, IReadOnlyList<ISticker>) Declaration public GuildPreview(Snowflake ID, string Name, IImageHash Icon, IImageHash Splash, IImageHash DiscoverySplash, IReadOnlyList<IEmoji> Emojis, IReadOnlyList<GuildFeature> Features, Optional<int> ApproximatePresenceCount, Optional<int> ApproximateMemberCount, string Description, IReadOnlyList<ISticker> Stickers) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name IImageHash Icon IImageHash Splash IImageHash DiscoverySplash IReadOnlyList < IEmoji > Emojis IReadOnlyList < GuildFeature > Features Remora.Rest.Core.Optional < Int32 > ApproximatePresenceCount Remora.Rest.Core.Optional < Int32 > ApproximateMemberCount String Description IReadOnlyList < ISticker > Stickers Properties | Improve this Doc View Source ApproximateMemberCount Declaration public Optional<int> ApproximateMemberCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ApproximatePresenceCount Declaration public Optional<int> ApproximatePresenceCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source DiscoverySplash Declaration public IImageHash DiscoverySplash { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source Emojis Declaration public IReadOnlyList<IEmoji> Emojis { get; set; } Property Value Type Description IReadOnlyList < IEmoji > | Improve this Doc View Source Features Declaration public IReadOnlyList<GuildFeature> Features { get; set; } Property Value Type Description IReadOnlyList < GuildFeature > | Improve this Doc View Source Icon Declaration public IImageHash Icon { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Splash Declaration public IImageHash Splash { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source Stickers Declaration public IReadOnlyList<ISticker> Stickers { get; set; } Property Value Type Description IReadOnlyList < ISticker > Implements IGuildPreview System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GuildScheduledEvent.html": {
    "href": "api/Remora.Discord.API.Objects.GuildScheduledEvent.html",
    "title": "Class GuildScheduledEvent | Remora.Discord",
    "keywords": "Class GuildScheduledEvent Represents a scheduled event in a guild. Inheritance Object GuildScheduledEvent GuildScheduledEventCreate GuildScheduledEventDelete GuildScheduledEventUpdate Implements IGuildScheduledEvent IEquatable < GuildScheduledEvent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax public class GuildScheduledEvent : IGuildScheduledEvent, IEquatable<GuildScheduledEvent> Constructors | Improve this Doc View Source GuildScheduledEvent(Snowflake, Snowflake, Nullable<Snowflake>, Optional<Nullable<Snowflake>>, String, Optional<String>, DateTimeOffset, Nullable<DateTimeOffset>, GuildScheduledEventPrivacyLevel, GuildScheduledEventStatus, GuildScheduledEventEntityType, Nullable<Snowflake>, IGuildScheduledEventEntityMetadata, Optional<IUser>, Optional<Int32>, IImageHash) Declaration public GuildScheduledEvent(Snowflake ID, Snowflake GuildID, Snowflake? ChannelID, Optional<Snowflake?> CreatorID, string Name, Optional<string> Description, DateTimeOffset ScheduledStartTime, DateTimeOffset? ScheduledEndTime, GuildScheduledEventPrivacyLevel PrivacyLevel, GuildScheduledEventStatus Status, GuildScheduledEventEntityType EntityType, Snowflake? EntityID, IGuildScheduledEventEntityMetadata EntityMetadata, Optional<IUser> Creator, Optional<int> UserCount, IImageHash Image) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID Nullable < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> CreatorID String Name Remora.Rest.Core.Optional < String > Description DateTimeOffset ScheduledStartTime Nullable < DateTimeOffset > ScheduledEndTime GuildScheduledEventPrivacyLevel PrivacyLevel GuildScheduledEventStatus Status GuildScheduledEventEntityType EntityType Nullable < Remora.Rest.Core.Snowflake > EntityID IGuildScheduledEventEntityMetadata EntityMetadata Remora.Rest.Core.Optional < IUser > Creator Remora.Rest.Core.Optional < Int32 > UserCount IImageHash Image Properties | Improve this Doc View Source ChannelID Declaration public Snowflake? ChannelID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Creator Declaration public Optional<IUser> Creator { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source CreatorID Declaration public Optional<Snowflake?> CreatorID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Description Declaration public Optional<string> Description { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source EntityID Declaration public Snowflake? EntityID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source EntityMetadata Declaration public IGuildScheduledEventEntityMetadata EntityMetadata { get; set; } Property Value Type Description IGuildScheduledEventEntityMetadata | Improve this Doc View Source EntityType Declaration public GuildScheduledEventEntityType EntityType { get; set; } Property Value Type Description GuildScheduledEventEntityType | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Image Declaration public IImageHash Image { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source PrivacyLevel Declaration public GuildScheduledEventPrivacyLevel PrivacyLevel { get; set; } Property Value Type Description GuildScheduledEventPrivacyLevel | Improve this Doc View Source ScheduledEndTime Declaration public DateTimeOffset? ScheduledEndTime { get; set; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source ScheduledStartTime Declaration public DateTimeOffset ScheduledStartTime { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Status Declaration public GuildScheduledEventStatus Status { get; set; } Property Value Type Description GuildScheduledEventStatus | Improve this Doc View Source UserCount Declaration public Optional<int> UserCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > Implements IGuildScheduledEvent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GuildScheduledEventEntityMetadata.html": {
    "href": "api/Remora.Discord.API.Objects.GuildScheduledEventEntityMetadata.html",
    "title": "Class GuildScheduledEventEntityMetadata | Remora.Discord",
    "keywords": "Class GuildScheduledEventEntityMetadata Represents metadata related to an event entity. Inheritance Object GuildScheduledEventEntityMetadata Implements IGuildScheduledEventEntityMetadata IEquatable < GuildScheduledEventEntityMetadata > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildScheduledEventEntityMetadata : IGuildScheduledEventEntityMetadata, IEquatable<GuildScheduledEventEntityMetadata> Constructors | Improve this Doc View Source GuildScheduledEventEntityMetadata(Optional<String>) Declaration public GuildScheduledEventEntityMetadata(Optional<string> Location = default(Optional<string>)) Parameters Type Name Description Remora.Rest.Core.Optional < String > Location Properties | Improve this Doc View Source Location Declaration public Optional<string> Location { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IGuildScheduledEventEntityMetadata System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GuildScheduledEventUser.html": {
    "href": "api/Remora.Discord.API.Objects.GuildScheduledEventUser.html",
    "title": "Class GuildScheduledEventUser | Remora.Discord",
    "keywords": "Class GuildScheduledEventUser Represents a user subscribed to a guild event. Inheritance Object GuildScheduledEventUser Implements IGuildScheduledEventUser IEquatable < GuildScheduledEventUser > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildScheduledEventUser : IGuildScheduledEventUser, IEquatable<GuildScheduledEventUser> Constructors | Improve this Doc View Source GuildScheduledEventUser(Snowflake, IUser, Optional<IGuildMember>) Declaration public GuildScheduledEventUser(Snowflake GuildScheduledEventID, IUser User, Optional<IGuildMember> GuildMember = default(Optional<IGuildMember>)) Parameters Type Name Description Remora.Rest.Core.Snowflake GuildScheduledEventID IUser User Remora.Rest.Core.Optional < IGuildMember > GuildMember Properties | Improve this Doc View Source GuildMember Declaration public Optional<IGuildMember> GuildMember { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source GuildScheduledEventID Declaration public Snowflake GuildScheduledEventID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source User Declaration public IUser User { get; set; } Property Value Type Description IUser Implements IGuildScheduledEventUser System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GuildTemplate.html": {
    "href": "api/Remora.Discord.API.Objects.GuildTemplate.html",
    "title": "Class GuildTemplate | Remora.Discord",
    "keywords": "Class GuildTemplate Represents a Discord Guild. Inheritance Object GuildTemplate Implements IGuildTemplate IEquatable < GuildTemplate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildTemplate : IGuildTemplate, IEquatable<GuildTemplate> Constructors | Improve this Doc View Source GuildTemplate(String, String, IImageHash, VerificationLevel, MessageNotificationLevel, ExplicitContentFilterLevel, String, Int32, IReadOnlyList<IRoleTemplate>, IReadOnlyList<IChannelTemplate>, Nullable<Int32>, Nullable<Int32>, SystemChannelFlags) Declaration public GuildTemplate(string Name, string Description, IImageHash IconHash, VerificationLevel VerificationLevel, MessageNotificationLevel DefaultMessageNotifications, ExplicitContentFilterLevel ExplicitContentFilter, string PreferredLocale, int AFKTimeout, IReadOnlyList<IRoleTemplate> Roles, IReadOnlyList<IChannelTemplate> Channels, int? AFKChannelID, int? SystemChannelID, SystemChannelFlags SystemChannelFlags) Parameters Type Name Description String Name String Description IImageHash IconHash VerificationLevel VerificationLevel MessageNotificationLevel DefaultMessageNotifications ExplicitContentFilterLevel ExplicitContentFilter String PreferredLocale Int32 AFKTimeout IReadOnlyList < IRoleTemplate > Roles IReadOnlyList < IChannelTemplate > Channels Nullable < Int32 > AFKChannelID Nullable < Int32 > SystemChannelID SystemChannelFlags SystemChannelFlags Properties | Improve this Doc View Source AFKChannelID Declaration public int? AFKChannelID { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source AFKTimeout Declaration public int AFKTimeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Channels Declaration public IReadOnlyList<IChannelTemplate> Channels { get; set; } Property Value Type Description IReadOnlyList < IChannelTemplate > | Improve this Doc View Source DefaultMessageNotifications Declaration public MessageNotificationLevel DefaultMessageNotifications { get; set; } Property Value Type Description MessageNotificationLevel | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source ExplicitContentFilter Declaration public ExplicitContentFilterLevel ExplicitContentFilter { get; set; } Property Value Type Description ExplicitContentFilterLevel | Improve this Doc View Source IconHash Declaration public IImageHash IconHash { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source PreferredLocale Declaration public string PreferredLocale { get; set; } Property Value Type Description String | Improve this Doc View Source Roles Declaration public IReadOnlyList<IRoleTemplate> Roles { get; set; } Property Value Type Description IReadOnlyList < IRoleTemplate > | Improve this Doc View Source SystemChannelFlags Declaration public SystemChannelFlags SystemChannelFlags { get; set; } Property Value Type Description SystemChannelFlags | Improve this Doc View Source SystemChannelID Declaration public int? SystemChannelID { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source VerificationLevel Declaration public VerificationLevel VerificationLevel { get; set; } Property Value Type Description VerificationLevel Implements IGuildTemplate System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GuildThreadQueryResponse.html": {
    "href": "api/Remora.Discord.API.Objects.GuildThreadQueryResponse.html",
    "title": "Class GuildThreadQueryResponse | Remora.Discord",
    "keywords": "Class GuildThreadQueryResponse Represents a response object from the REST API regarding a thread query. Inheritance Object GuildThreadQueryResponse Implements IGuildThreadQueryResponse IEquatable < GuildThreadQueryResponse > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildThreadQueryResponse : IGuildThreadQueryResponse, IEquatable<GuildThreadQueryResponse> Constructors | Improve this Doc View Source GuildThreadQueryResponse(IReadOnlyList<IChannel>, IReadOnlyList<IThreadMember>) Declaration public GuildThreadQueryResponse(IReadOnlyList<IChannel> Threads, IReadOnlyList<IThreadMember> Members) Parameters Type Name Description IReadOnlyList < IChannel > Threads IReadOnlyList < IThreadMember > Members Properties | Improve this Doc View Source Members Declaration public IReadOnlyList<IThreadMember> Members { get; set; } Property Value Type Description IReadOnlyList < IThreadMember > | Improve this Doc View Source Threads Declaration public IReadOnlyList<IChannel> Threads { get; set; } Property Value Type Description IReadOnlyList < IChannel > Implements IGuildThreadQueryResponse System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GuildWidget.html": {
    "href": "api/Remora.Discord.API.Objects.GuildWidget.html",
    "title": "Class GuildWidget | Remora.Discord",
    "keywords": "Class GuildWidget Represents the status and invite widget for a guild. Inheritance Object GuildWidget Implements IGuildWidget IEquatable < GuildWidget > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildWidget : IGuildWidget, IEquatable<GuildWidget> Constructors | Improve this Doc View Source GuildWidget(Snowflake, String, String, IReadOnlyList<IPartialChannel>, IReadOnlyList<IPartialUser>, Int32) Declaration public GuildWidget(Snowflake ID, string Name, string InstantInvite, IReadOnlyList<IPartialChannel> Channels, IReadOnlyList<IPartialUser> Members, int PresenceCount) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name String InstantInvite IReadOnlyList < IPartialChannel > Channels IReadOnlyList < IPartialUser > Members Int32 PresenceCount Properties | Improve this Doc View Source Channels Declaration public IReadOnlyList<IPartialChannel> Channels { get; set; } Property Value Type Description IReadOnlyList < IPartialChannel > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source InstantInvite Declaration public string InstantInvite { get; set; } Property Value Type Description String | Improve this Doc View Source Members Declaration public IReadOnlyList<IPartialUser> Members { get; set; } Property Value Type Description IReadOnlyList < IPartialUser > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source PresenceCount Declaration public int PresenceCount { get; set; } Property Value Type Description Int32 Implements IGuildWidget System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.GuildWidgetSettings.html": {
    "href": "api/Remora.Discord.API.Objects.GuildWidgetSettings.html",
    "title": "Class GuildWidgetSettings | Remora.Discord",
    "keywords": "Class GuildWidgetSettings Represents settings related to the status and invite widget for a guild. Inheritance Object GuildWidgetSettings Implements IGuildWidgetSettings IEquatable < GuildWidgetSettings > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class GuildWidgetSettings : IGuildWidgetSettings, IEquatable<GuildWidgetSettings> Constructors | Improve this Doc View Source GuildWidgetSettings(Boolean, Nullable<Snowflake>) Declaration public GuildWidgetSettings(bool IsEnabled, Snowflake? ChannelID) Parameters Type Name Description Boolean IsEnabled Nullable < Remora.Rest.Core.Snowflake > ChannelID Properties | Improve this Doc View Source ChannelID Declaration public Snowflake? ChannelID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsEnabled Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean Implements IGuildWidgetSettings System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.html": {
    "href": "api/Remora.Discord.API.Objects.html",
    "title": "Namespace Remora.Discord.API.Objects | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.Objects Classes Account Represents an integration account. ActionRowComponent Represents a row of interactive components. Activity Represents information about an activity Discord is aware of. ActivityAssets Represents a set of descriptive assets related to an activity. ActivityButton Represents a custom activity button. ActivityEmoji Represents an emoji displayed in an activity. ActivityParty Represents a party of people in an activity. ActivitySecrets Represents a set of secrets used for interacting with the activity. ActivityTimestamps Represents a set of activity timestamps - that is, when the activity started and/or stopped. AllowedMentions Represents a set of allowed mentions. Application Represents information about an OAuth2 application. ApplicationCommand Represents an application command. ApplicationCommandInteractionDataOption Represents a named option and its value. ApplicationCommandInteractionDataResolved Represents data that was resolved during serverside execution of the command. ApplicationCommandOption Represents an option in an application command. ApplicationCommandOptionChoice Represents a choice available to a user. ApplicationCommandPermissions Represents a single permission for a command. ApplicationInstallParameters Represents a set of parameters applied to custom application installation. Attachment Represents an attachment in a message. AuditLog Represents an audit log page. AuditLogChange Represents a change to an audit log value. AuditLogEntry Represents an entry in the audit log. AuthorizationInformation Represents information about OAuth2 authorizations. Ban Represents a ban in a guild. BulkApplicationCommandData Represents a request to create or update an application command. ButtonComponent Represents a button component. Channel Represents a channel. ChannelMention Represents a mentioned channel. ChannelTemplate Represents a channel. ClientStatuses Represents a collection of platform statues. Connection Represents a connection between a user account and an external service. DiscordPermissionSet Represents a Discord permission set. Embed Represents an embed. EmbedAuthor Represents information about an embed author. EmbedField Represents a field in an embed. EmbedFooter Represents a footer in an embed. EmbedImage Represents information about an image in an embed. EmbedProvider Represents information about an embed provider. EmbedThumbnail Represents information about a thumbnail in an embed. EmbedVideo Represents information about a video in an embed. Emoji Represents an emoji. ErrorDetails Represents information about a single error. FollowedChannel Represents a followed news channel. GatewayEndpoint Represents a gateway endpoint. Guild Represents a Discord Guild. GuildApplicationCommandPermissions Represents a set of permissions for a command in a guild. GuildMember Represents information about a guild member. GuildPreview Represents a preview of a public guild. GuildScheduledEvent Represents a scheduled event in a guild. GuildScheduledEventEntityMetadata Represents metadata related to an event entity. GuildScheduledEventUser Represents a user subscribed to a guild event. GuildTemplate Represents a Discord Guild. GuildThreadQueryResponse Represents a response object from the REST API regarding a thread query. GuildWidget Represents the status and invite widget for a guild. GuildWidgetSettings Represents settings related to the status and invite widget for a guild. ImageHash Represents a Discord image hash. Integration Represents an integration object. IntegrationApplication Represents application information for a Discord integration. Interaction Represents a user interaction. InteractionAutocompleteCallbackData Represents return payload data for an autocomplete interaction response. InteractionData Represents payload data for a command. InteractionMessageCallbackData Represents return payload data for an interaction response. InteractionModalCallbackData Represents return payload data for an interaction response. InteractionResponse Represents a response to an interaction. Invite Represents an invite. Message Represents a message. MessageActivity Represents an activity reference. MessageInteraction Represents additional data sent on a message that is a response to an interaction. MessageReference Represents a message reference. NitroStickerPacks Represents a set of sticker packs available to Nitro subscribers. OptionalAuditEntryInfo Represents optional audit log information. PartialActionRowComponent Represents a partial row of interactive components. PartialApplication Represents information about an OAuth2 application. PartialAttachment PartialButtonComponent Represents a partial button component. PartialChannel Represents a partial channel. PartialEmoji Represents a partial emoji. PartialGuild Represents a partial Discord Guild. PartialGuildApplicationCommandPermissions Represents a set of permissions for a command in a guild. PartialGuildMember Represents partial information about a guild member. PartialIntegration Represents a partial integration object. PartialInvite Represents a partial invite. PartialMessage Represents a message. PartialPermissionOverwrite PartialPresence Represents a user's presence. PartialRole Represents a partial Discord role. PartialSelectMenuComponent Represents a partial dropdown of selectable values. PartialSelectOption Represents a single partial selectable option. PartialTextInputComponent Represents a text-based input component. PartialUser Represents a partial Discord user. PartialVoiceState Represents a user's partial voice connection status. PartySize Represents a party size object. PermissionOverwrite Represents a channel- or category-specific permission overwrite. PermissionOverwriteTemplate Represents a channel- or category-specific permission overwrite. Presence Represents a user's presence. PropertyErrorDetails Represents detailed information about errors in a property from Discord. PruneCount Represents a count of members that would be pruned in a prune operation. Reaction Represents a reaction to a message. RestError Represents an error reported by the REST API. Role Represents a Discord role. RoleTags Represents a set of role tags. RoleTemplate Represents a Discord role. SelectMenuComponent Represents a dropdown of selectable values. SelectOption Represents a single selectable option. SessionStartLimit Represents information about session start limits. StageInstance Represents information about a live stage. Sticker Represents a sticker. StickerItem Represents a sticker in a message. StickerPack Represents a pack of stickers. Team Represents a developer team on Discord. TeamMember Represents a Discord developer team member. Template Represents a guild template. TextInputComponent Represents a text-based input component. ThreadMember Represents a thread member. ThreadMetadata Represents metadata information for a thread channel. UnavailableGuild Represents an unavailable guild. User Represents a Discord user. UserMention Represents a user mention. VoiceRegion Represents a voice region. VoiceState Represents a user's voice connection status. Webhook Represents a webhook object. WelcomeScreen Represents the welcome screen in a community-enabled server. WelcomeScreenChannel Represents a channel in a welcome screen."
  },
  "api/Remora.Discord.API.Objects.ImageHash.html": {
    "href": "api/Remora.Discord.API.Objects.ImageHash.html",
    "title": "Class ImageHash | Remora.Discord",
    "keywords": "Class ImageHash Represents a Discord image hash. Inheritance Object ImageHash Implements IImageHash IEquatable < ImageHash > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ImageHash : IImageHash, IEquatable<ImageHash> Constructors | Improve this Doc View Source ImageHash(String) Declaration public ImageHash(string Value) Parameters Type Name Description String Value Properties | Improve this Doc View Source HasGif Gets a value indicating whether the hash has a gif alternative. Declaration public bool HasGif { get; } Property Value Type Description Boolean | Improve this Doc View Source Value Declaration public string Value { get; set; } Property Value Type Description String Implements IImageHash System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Integration.html": {
    "href": "api/Remora.Discord.API.Objects.Integration.html",
    "title": "Class Integration | Remora.Discord",
    "keywords": "Class Integration Represents an integration object. Inheritance Object Integration IntegrationCreate IntegrationUpdate Implements IIntegration IPartialIntegration IEquatable < Integration > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Integration : IIntegration, IPartialIntegration, IEquatable<Integration> Constructors | Improve this Doc View Source Integration(Snowflake, String, String, Optional<Boolean>, Boolean, Snowflake, Optional<Boolean>, IntegrationExpireBehaviour, TimeSpan, Optional<IUser>, IAccount, DateTimeOffset, Int32, Boolean, Optional<IIntegrationApplication>) Declaration public Integration(Snowflake ID, string Name, string Type, Optional<bool> IsEnabled, bool IsSyncing, Snowflake RoleID, Optional<bool> EnableEmoticons, IntegrationExpireBehaviour ExpireBehaviour, TimeSpan ExpireGracePeriod, Optional<IUser> User, IAccount Account, DateTimeOffset SyncedAt, int SubscriberCount, bool IsRevoked, Optional<IIntegrationApplication> Application = default(Optional<IIntegrationApplication>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name String Type Remora.Rest.Core.Optional < Boolean > IsEnabled Boolean IsSyncing Remora.Rest.Core.Snowflake RoleID Remora.Rest.Core.Optional < Boolean > EnableEmoticons IntegrationExpireBehaviour ExpireBehaviour TimeSpan ExpireGracePeriod Remora.Rest.Core.Optional < IUser > User IAccount Account DateTimeOffset SyncedAt Int32 SubscriberCount Boolean IsRevoked Remora.Rest.Core.Optional < IIntegrationApplication > Application Properties | Improve this Doc View Source Account Declaration public IAccount Account { get; set; } Property Value Type Description IAccount | Improve this Doc View Source Application Declaration public Optional<IIntegrationApplication> Application { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IIntegrationApplication > | Improve this Doc View Source EnableEmoticons Declaration public Optional<bool> EnableEmoticons { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source ExpireBehaviour Declaration public IntegrationExpireBehaviour ExpireBehaviour { get; set; } Property Value Type Description IntegrationExpireBehaviour | Improve this Doc View Source ExpireGracePeriod Declaration public TimeSpan ExpireGracePeriod { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsEnabled Declaration public Optional<bool> IsEnabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsRevoked Declaration public bool IsRevoked { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSyncing Declaration public bool IsSyncing { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source RoleID Declaration public Snowflake RoleID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source SubscriberCount Declaration public int SubscriberCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SyncedAt Declaration public DateTimeOffset SyncedAt { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Type Declaration public string Type { get; set; } Property Value Type Description String | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Implements IIntegration IPartialIntegration System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.IntegrationApplication.html": {
    "href": "api/Remora.Discord.API.Objects.IntegrationApplication.html",
    "title": "Class IntegrationApplication | Remora.Discord",
    "keywords": "Class IntegrationApplication Represents application information for a Discord integration. Inheritance Object IntegrationApplication Implements IIntegrationApplication IEquatable < IntegrationApplication > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class IntegrationApplication : IIntegrationApplication, IEquatable<IntegrationApplication> Constructors | Improve this Doc View Source IntegrationApplication(Snowflake, String, IImageHash, String, Optional<IUser>) Declaration public IntegrationApplication(Snowflake ID, string Name, IImageHash Icon, string Description, Optional<IUser> Bot = default(Optional<IUser>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name IImageHash Icon String Description Remora.Rest.Core.Optional < IUser > Bot Properties | Improve this Doc View Source Bot Declaration public Optional<IUser> Bot { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Icon Declaration public IImageHash Icon { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String Implements IIntegrationApplication System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Interaction.html": {
    "href": "api/Remora.Discord.API.Objects.Interaction.html",
    "title": "Class Interaction | Remora.Discord",
    "keywords": "Class Interaction Represents a user interaction. Inheritance Object Interaction Implements IInteraction IEquatable < Interaction > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Interaction : IInteraction, IEquatable<Interaction> Constructors | Improve this Doc View Source Interaction(Snowflake, Snowflake, InteractionType, Optional<IInteractionData>, Optional<Snowflake>, Optional<Snowflake>, Optional<IGuildMember>, Optional<IUser>, String, Int32, Optional<IMessage>, Optional<String>, Optional<String>) Declaration public Interaction(Snowflake ID, Snowflake ApplicationID, InteractionType Type, Optional<IInteractionData> Data, Optional<Snowflake> GuildID, Optional<Snowflake> ChannelID, Optional<IGuildMember> Member, Optional<IUser> User, string Token, int Version, Optional<IMessage> Message = default(Optional<IMessage>), Optional<string> Locale = default(Optional<string>), Optional<string> GuildLocale = default(Optional<string>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake ApplicationID InteractionType Type Remora.Rest.Core.Optional < IInteractionData > Data Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < IGuildMember > Member Remora.Rest.Core.Optional < IUser > User String Token Int32 Version Remora.Rest.Core.Optional < IMessage > Message Remora.Rest.Core.Optional < String > Locale Remora.Rest.Core.Optional < String > GuildLocale Properties | Improve this Doc View Source ApplicationID Declaration public Snowflake ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source ChannelID Declaration public Optional<Snowflake> ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Data Declaration public Optional<IInteractionData> Data { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IInteractionData > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildLocale Declaration public Optional<string> GuildLocale { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Locale Declaration public Optional<string> Locale { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Member Declaration public Optional<IGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source Message Declaration public Optional<IMessage> Message { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessage > | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description String | Improve this Doc View Source Type Declaration public InteractionType Type { get; set; } Property Value Type Description InteractionType | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source Version Declaration public int Version { get; set; } Property Value Type Description Int32 Implements IInteraction System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.InteractionAutocompleteCallbackData.html": {
    "href": "api/Remora.Discord.API.Objects.InteractionAutocompleteCallbackData.html",
    "title": "Class InteractionAutocompleteCallbackData | Remora.Discord",
    "keywords": "Class InteractionAutocompleteCallbackData Represents return payload data for an autocomplete interaction response. Inheritance Object InteractionAutocompleteCallbackData Implements IInteractionAutocompleteCallbackData IEquatable < InteractionAutocompleteCallbackData > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class InteractionAutocompleteCallbackData : IInteractionAutocompleteCallbackData, IEquatable<InteractionAutocompleteCallbackData> Constructors | Improve this Doc View Source InteractionAutocompleteCallbackData(IReadOnlyList<IApplicationCommandOptionChoice>) Declaration public InteractionAutocompleteCallbackData(IReadOnlyList<IApplicationCommandOptionChoice> Choices) Parameters Type Name Description IReadOnlyList < IApplicationCommandOptionChoice > Choices Properties | Improve this Doc View Source Choices Declaration public IReadOnlyList<IApplicationCommandOptionChoice> Choices { get; set; } Property Value Type Description IReadOnlyList < IApplicationCommandOptionChoice > Implements IInteractionAutocompleteCallbackData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.InteractionData.html": {
    "href": "api/Remora.Discord.API.Objects.InteractionData.html",
    "title": "Class InteractionData | Remora.Discord",
    "keywords": "Class InteractionData Represents payload data for a command. Inheritance Object InteractionData Implements IInteractionData IEquatable < InteractionData > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class InteractionData : IInteractionData, IEquatable<InteractionData> Constructors | Improve this Doc View Source InteractionData(Optional<Snowflake>, Optional<String>, Optional<IApplicationCommandInteractionDataResolved>, Optional<IReadOnlyList<IApplicationCommandInteractionDataOption>>, Optional<Snowflake>, Optional<String>, Optional<ComponentType>, Optional<IReadOnlyList<String>>, Optional<Snowflake>, Optional<IReadOnlyList<IPartialMessageComponent>>) Declaration public InteractionData(Optional<Snowflake> ID, Optional<string> Name, Optional<IApplicationCommandInteractionDataResolved> Resolved, Optional<IReadOnlyList<IApplicationCommandInteractionDataOption>> Options = default(Optional<IReadOnlyList<IApplicationCommandInteractionDataOption>>), Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<string> CustomID = default(Optional<string>), Optional<ComponentType> ComponentType = default(Optional<ComponentType>), Optional<IReadOnlyList<string>> Values = default(Optional<IReadOnlyList<string>>), Optional<Snowflake> TargetID = default(Optional<Snowflake>), Optional<IReadOnlyList<IPartialMessageComponent>> Components = default(Optional<IReadOnlyList<IPartialMessageComponent>>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < IApplicationCommandInteractionDataResolved > Resolved Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandInteractionDataOption >> Options Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < String > CustomID Remora.Rest.Core.Optional < ComponentType > ComponentType Remora.Rest.Core.Optional < IReadOnlyList < String >> Values Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > TargetID Remora.Rest.Core.Optional < IReadOnlyList < IPartialMessageComponent >> Components Properties | Improve this Doc View Source Components Declaration public Optional<IReadOnlyList<IPartialMessageComponent>> Components { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialMessageComponent >> | Improve this Doc View Source ComponentType Declaration public Optional<ComponentType> ComponentType { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ComponentType > | Improve this Doc View Source CustomID Declaration public Optional<string> CustomID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Name Declaration public Optional<string> Name { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Options Declaration public Optional<IReadOnlyList<IApplicationCommandInteractionDataOption>> Options { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandInteractionDataOption >> | Improve this Doc View Source Resolved Declaration public Optional<IApplicationCommandInteractionDataResolved> Resolved { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IApplicationCommandInteractionDataResolved > | Improve this Doc View Source TargetID Declaration public Optional<Snowflake> TargetID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Values Declaration public Optional<IReadOnlyList<string>> Values { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> Implements IInteractionData System.IEquatable<T> Extension Methods InteractionDataExtensions.UnpackInteraction(IInteractionData, out IReadOnlyList<String>, out IReadOnlyDictionary<String, IReadOnlyList<String>>)"
  },
  "api/Remora.Discord.API.Objects.InteractionMessageCallbackData.html": {
    "href": "api/Remora.Discord.API.Objects.InteractionMessageCallbackData.html",
    "title": "Class InteractionMessageCallbackData | Remora.Discord",
    "keywords": "Class InteractionMessageCallbackData Represents return payload data for an interaction response. Inheritance Object InteractionMessageCallbackData Implements IInteractionMessageCallbackData IEquatable < InteractionMessageCallbackData > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class InteractionMessageCallbackData : IInteractionMessageCallbackData, IEquatable<InteractionMessageCallbackData> Constructors | Improve this Doc View Source InteractionMessageCallbackData(Optional<Boolean>, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<MessageFlags>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<IPartialAttachment>>) Declaration public InteractionMessageCallbackData(Optional<bool> IsTTS = default(Optional<bool>), Optional<string> Content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> Embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> AllowedMentions = default(Optional<IAllowedMentions>), Optional<MessageFlags> Flags = default(Optional<MessageFlags>), Optional<IReadOnlyList<IMessageComponent>> Components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<IPartialAttachment>> Attachments = default(Optional<IReadOnlyList<IPartialAttachment>>)) Parameters Type Name Description Remora.Rest.Core.Optional < Boolean > IsTTS Remora.Rest.Core.Optional < String > Content Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> Embeds Remora.Rest.Core.Optional < IAllowedMentions > AllowedMentions Remora.Rest.Core.Optional < MessageFlags > Flags Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> Components Remora.Rest.Core.Optional < IReadOnlyList < IPartialAttachment >> Attachments Properties | Improve this Doc View Source AllowedMentions Declaration public Optional<IAllowedMentions> AllowedMentions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IAllowedMentions > | Improve this Doc View Source Attachments Declaration public Optional<IReadOnlyList<IPartialAttachment>> Attachments { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialAttachment >> | Improve this Doc View Source Components Declaration public Optional<IReadOnlyList<IMessageComponent>> Components { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> | Improve this Doc View Source Content Declaration public Optional<string> Content { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Embeds Declaration public Optional<IReadOnlyList<IEmbed>> Embeds { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> | Improve this Doc View Source Flags Declaration public Optional<MessageFlags> Flags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < MessageFlags > | Improve this Doc View Source IsTTS Declaration public Optional<bool> IsTTS { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > Implements IInteractionMessageCallbackData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.InteractionModalCallbackData.html": {
    "href": "api/Remora.Discord.API.Objects.InteractionModalCallbackData.html",
    "title": "Class InteractionModalCallbackData | Remora.Discord",
    "keywords": "Class InteractionModalCallbackData Represents return payload data for an interaction response. Inheritance Object InteractionModalCallbackData Implements IInteractionModalCallbackData IEquatable < InteractionModalCallbackData > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class InteractionModalCallbackData : IInteractionModalCallbackData, IEquatable<InteractionModalCallbackData> Constructors | Improve this Doc View Source InteractionModalCallbackData(String, String, IReadOnlyList<IMessageComponent>) Declaration public InteractionModalCallbackData(string CustomID, string Title, IReadOnlyList<IMessageComponent> Components) Parameters Type Name Description String CustomID String Title IReadOnlyList < IMessageComponent > Components Properties | Improve this Doc View Source Components Declaration public IReadOnlyList<IMessageComponent> Components { get; set; } Property Value Type Description IReadOnlyList < IMessageComponent > | Improve this Doc View Source CustomID Declaration public string CustomID { get; set; } Property Value Type Description String | Improve this Doc View Source Title Declaration public string Title { get; set; } Property Value Type Description String Implements IInteractionModalCallbackData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.InteractionResponse.html": {
    "href": "api/Remora.Discord.API.Objects.InteractionResponse.html",
    "title": "Class InteractionResponse | Remora.Discord",
    "keywords": "Class InteractionResponse Represents a response to an interaction. Inheritance Object InteractionResponse Implements IInteractionResponse IEquatable < InteractionResponse > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class InteractionResponse : IInteractionResponse, IEquatable<InteractionResponse> Constructors | Improve this Doc View Source InteractionResponse(InteractionCallbackType, Optional<OneOf<IInteractionMessageCallbackData, IInteractionAutocompleteCallbackData, IInteractionModalCallbackData>>) Declaration public InteractionResponse(InteractionCallbackType Type, Optional<OneOf<IInteractionMessageCallbackData, IInteractionAutocompleteCallbackData, IInteractionModalCallbackData>> Data = default(Optional<OneOf<IInteractionMessageCallbackData, IInteractionAutocompleteCallbackData, IInteractionModalCallbackData>>)) Parameters Type Name Description InteractionCallbackType Type Remora.Rest.Core.Optional < OneOf.OneOf < IInteractionMessageCallbackData , IInteractionAutocompleteCallbackData , IInteractionModalCallbackData >> Data Properties | Improve this Doc View Source Data Declaration public Optional<OneOf<IInteractionMessageCallbackData, IInteractionAutocompleteCallbackData, IInteractionModalCallbackData>> Data { get; set; } Property Value Type Description Remora.Rest.Core.Optional < OneOf.OneOf < IInteractionMessageCallbackData , IInteractionAutocompleteCallbackData , IInteractionModalCallbackData >> | Improve this Doc View Source Type Declaration public InteractionCallbackType Type { get; set; } Property Value Type Description InteractionCallbackType Implements IInteractionResponse System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Invite.html": {
    "href": "api/Remora.Discord.API.Objects.Invite.html",
    "title": "Class Invite | Remora.Discord",
    "keywords": "Class Invite Represents an invite. Inheritance Object Invite Implements IInvite IPartialInvite IEquatable < Invite > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Invite : IInvite, IPartialInvite, IEquatable<Invite> Constructors | Improve this Doc View Source Invite(String, Optional<IPartialGuild>, IPartialChannel, Optional<IUser>, Optional<InviteTarget>, Optional<IPartialUser>, Optional<IPartialApplication>, Optional<Int32>, Optional<Int32>, Optional<Nullable<DateTimeOffset>>, Optional<IGuildScheduledEvent>) Declaration public Invite(string Code, Optional<IPartialGuild> Guild, IPartialChannel Channel, Optional<IUser> Inviter = default(Optional<IUser>), Optional<InviteTarget> TargetType = default(Optional<InviteTarget>), Optional<IPartialUser> TargetUser = default(Optional<IPartialUser>), Optional<IPartialApplication> TargetApplication = default(Optional<IPartialApplication>), Optional<int> ApproximatePresenceCount = default(Optional<int>), Optional<int> ApproximateMemberCount = default(Optional<int>), Optional<DateTimeOffset?> ExpiresAt = default(Optional<DateTimeOffset?>), Optional<IGuildScheduledEvent> GuildScheduledEvent = default(Optional<IGuildScheduledEvent>)) Parameters Type Name Description String Code Remora.Rest.Core.Optional < IPartialGuild > Guild IPartialChannel Channel Remora.Rest.Core.Optional < IUser > Inviter Remora.Rest.Core.Optional < InviteTarget > TargetType Remora.Rest.Core.Optional < IPartialUser > TargetUser Remora.Rest.Core.Optional < IPartialApplication > TargetApplication Remora.Rest.Core.Optional < Int32 > ApproximatePresenceCount Remora.Rest.Core.Optional < Int32 > ApproximateMemberCount Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> ExpiresAt Remora.Rest.Core.Optional < IGuildScheduledEvent > GuildScheduledEvent Properties | Improve this Doc View Source ApproximateMemberCount Declaration public Optional<int> ApproximateMemberCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ApproximatePresenceCount Declaration public Optional<int> ApproximatePresenceCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Channel Declaration public IPartialChannel Channel { get; set; } Property Value Type Description IPartialChannel | Improve this Doc View Source Code Declaration public string Code { get; set; } Property Value Type Description String | Improve this Doc View Source ExpiresAt Declaration public Optional<DateTimeOffset?> ExpiresAt { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Guild Declaration public Optional<IPartialGuild> Guild { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuild > | Improve this Doc View Source GuildScheduledEvent Declaration public Optional<IGuildScheduledEvent> GuildScheduledEvent { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildScheduledEvent > | Improve this Doc View Source Inviter Declaration public Optional<IUser> Inviter { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source TargetApplication Declaration public Optional<IPartialApplication> TargetApplication { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source TargetType Declaration public Optional<InviteTarget> TargetType { get; set; } Property Value Type Description Remora.Rest.Core.Optional < InviteTarget > | Improve this Doc View Source TargetUser Declaration public Optional<IPartialUser> TargetUser { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialUser > Implements IInvite IPartialInvite System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Message.html": {
    "href": "api/Remora.Discord.API.Objects.Message.html",
    "title": "Class Message | Remora.Discord",
    "keywords": "Class Message Represents a message. Inheritance Object Message MessageCreate Implements IMessage IPartialMessage IEquatable < Message > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Message : IMessage, IPartialMessage, IEquatable<Message> Constructors | Improve this Doc View Source Message(Snowflake, Snowflake, Optional<Snowflake>, IUser, Optional<IPartialGuildMember>, String, DateTimeOffset, Nullable<DateTimeOffset>, Boolean, Boolean, IReadOnlyList<IUserMention>, IReadOnlyList<Snowflake>, Optional<IReadOnlyList<IChannelMention>>, IReadOnlyList<IAttachment>, IReadOnlyList<IEmbed>, Optional<IReadOnlyList<IReaction>>, Optional<String>, Boolean, Optional<Snowflake>, MessageType, Optional<IMessageActivity>, Optional<IPartialApplication>, Optional<Snowflake>, Optional<IMessageReference>, Optional<MessageFlags>, Optional<IMessage>, Optional<IMessageInteraction>, Optional<IChannel>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<IStickerItem>>) Declaration public Message(Snowflake ID, Snowflake ChannelID, Optional<Snowflake> GuildID, IUser Author, Optional<IPartialGuildMember> Member, string Content, DateTimeOffset Timestamp, DateTimeOffset? EditedTimestamp, bool IsTTS, bool MentionsEveryone, IReadOnlyList<IUserMention> Mentions, IReadOnlyList<Snowflake> MentionedRoles, Optional<IReadOnlyList<IChannelMention>> MentionedChannels, IReadOnlyList<IAttachment> Attachments, IReadOnlyList<IEmbed> Embeds, Optional<IReadOnlyList<IReaction>> Reactions, Optional<string> Nonce, bool IsPinned, Optional<Snowflake> WebhookID, MessageType Type, Optional<IMessageActivity> Activity = default(Optional<IMessageActivity>), Optional<IPartialApplication> Application = default(Optional<IPartialApplication>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<IMessageReference> MessageReference = default(Optional<IMessageReference>), Optional<MessageFlags> Flags = default(Optional<MessageFlags>), Optional<IMessage> ReferencedMessage = default(Optional<IMessage>), Optional<IMessageInteraction> Interaction = default(Optional<IMessageInteraction>), Optional<IChannel> Thread = default(Optional<IChannel>), Optional<IReadOnlyList<IMessageComponent>> Components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<IStickerItem>> StickerItems = default(Optional<IReadOnlyList<IStickerItem>>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake ChannelID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID IUser Author Remora.Rest.Core.Optional < IPartialGuildMember > Member String Content DateTimeOffset Timestamp Nullable < DateTimeOffset > EditedTimestamp Boolean IsTTS Boolean MentionsEveryone IReadOnlyList < IUserMention > Mentions IReadOnlyList < Remora.Rest.Core.Snowflake > MentionedRoles Remora.Rest.Core.Optional < IReadOnlyList < IChannelMention >> MentionedChannels IReadOnlyList < IAttachment > Attachments IReadOnlyList < IEmbed > Embeds Remora.Rest.Core.Optional < IReadOnlyList < IReaction >> Reactions Remora.Rest.Core.Optional < String > Nonce Boolean IsPinned Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > WebhookID MessageType Type Remora.Rest.Core.Optional < IMessageActivity > Activity Remora.Rest.Core.Optional < IPartialApplication > Application Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < IMessageReference > MessageReference Remora.Rest.Core.Optional < MessageFlags > Flags Remora.Rest.Core.Optional < IMessage > ReferencedMessage Remora.Rest.Core.Optional < IMessageInteraction > Interaction Remora.Rest.Core.Optional < IChannel > Thread Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> Components Remora.Rest.Core.Optional < IReadOnlyList < IStickerItem >> StickerItems Properties | Improve this Doc View Source Activity Declaration public Optional<IMessageActivity> Activity { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessageActivity > | Improve this Doc View Source Application Declaration public Optional<IPartialApplication> Application { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source ApplicationID Declaration public Optional<Snowflake> ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Attachments Declaration public IReadOnlyList<IAttachment> Attachments { get; set; } Property Value Type Description IReadOnlyList < IAttachment > | Improve this Doc View Source Author Declaration public IUser Author { get; set; } Property Value Type Description IUser | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Components Declaration public Optional<IReadOnlyList<IMessageComponent>> Components { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> | Improve this Doc View Source Content Declaration public string Content { get; set; } Property Value Type Description String | Improve this Doc View Source EditedTimestamp Declaration public DateTimeOffset? EditedTimestamp { get; set; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Embeds Declaration public IReadOnlyList<IEmbed> Embeds { get; set; } Property Value Type Description IReadOnlyList < IEmbed > | Improve this Doc View Source Flags Declaration public Optional<MessageFlags> Flags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < MessageFlags > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Interaction Declaration public Optional<IMessageInteraction> Interaction { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessageInteraction > | Improve this Doc View Source IsPinned Declaration public bool IsPinned { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsTTS Declaration public bool IsTTS { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Member Declaration public Optional<IPartialGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuildMember > | Improve this Doc View Source MentionedChannels Declaration public Optional<IReadOnlyList<IChannelMention>> MentionedChannels { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IChannelMention >> | Improve this Doc View Source MentionedRoles Declaration public IReadOnlyList<Snowflake> MentionedRoles { get; set; } Property Value Type Description IReadOnlyList < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Mentions Declaration public IReadOnlyList<IUserMention> Mentions { get; set; } Property Value Type Description IReadOnlyList < IUserMention > | Improve this Doc View Source MentionsEveryone Declaration public bool MentionsEveryone { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MessageReference Declaration public Optional<IMessageReference> MessageReference { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessageReference > | Improve this Doc View Source Nonce Declaration public Optional<string> Nonce { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Reactions Declaration public Optional<IReadOnlyList<IReaction>> Reactions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IReaction >> | Improve this Doc View Source ReferencedMessage Declaration public Optional<IMessage> ReferencedMessage { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessage > | Improve this Doc View Source StickerItems Declaration public Optional<IReadOnlyList<IStickerItem>> StickerItems { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IStickerItem >> | Improve this Doc View Source Thread Declaration public Optional<IChannel> Thread { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IChannel > | Improve this Doc View Source Timestamp Declaration public DateTimeOffset Timestamp { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Type Declaration public MessageType Type { get; set; } Property Value Type Description MessageType | Improve this Doc View Source WebhookID Declaration public Optional<Snowflake> WebhookID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > Implements IMessage IPartialMessage System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.MessageActivity.html": {
    "href": "api/Remora.Discord.API.Objects.MessageActivity.html",
    "title": "Class MessageActivity | Remora.Discord",
    "keywords": "Class MessageActivity Represents an activity reference. Inheritance Object MessageActivity Implements IMessageActivity IEquatable < MessageActivity > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageActivity : IMessageActivity, IEquatable<MessageActivity> Constructors | Improve this Doc View Source MessageActivity(MessageActivityType, Optional<String>) Declaration public MessageActivity(MessageActivityType Type, Optional<string> PartyID = default(Optional<string>)) Parameters Type Name Description MessageActivityType Type Remora.Rest.Core.Optional < String > PartyID Properties | Improve this Doc View Source PartyID Declaration public Optional<string> PartyID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Declaration public MessageActivityType Type { get; set; } Property Value Type Description MessageActivityType Implements IMessageActivity System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.MessageInteraction.html": {
    "href": "api/Remora.Discord.API.Objects.MessageInteraction.html",
    "title": "Class MessageInteraction | Remora.Discord",
    "keywords": "Class MessageInteraction Represents additional data sent on a message that is a response to an interaction. Inheritance Object MessageInteraction Implements IMessageInteraction IEquatable < MessageInteraction > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageInteraction : IMessageInteraction, IEquatable<MessageInteraction> Constructors | Improve this Doc View Source MessageInteraction(Snowflake, InteractionType, String, IUser) Declaration public MessageInteraction(Snowflake ID, InteractionType Type, string Name, IUser User) Parameters Type Name Description Remora.Rest.Core.Snowflake ID InteractionType Type String Name IUser User Properties | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Type Declaration public InteractionType Type { get; set; } Property Value Type Description InteractionType | Improve this Doc View Source User Declaration public IUser User { get; set; } Property Value Type Description IUser Implements IMessageInteraction System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.MessageReference.html": {
    "href": "api/Remora.Discord.API.Objects.MessageReference.html",
    "title": "Class MessageReference | Remora.Discord",
    "keywords": "Class MessageReference Represents a message reference. Inheritance Object MessageReference Implements IMessageReference IEquatable < MessageReference > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class MessageReference : IMessageReference, IEquatable<MessageReference> Constructors | Improve this Doc View Source MessageReference(Optional<Snowflake>, Optional<Snowflake>, Optional<Snowflake>, Optional<Boolean>) Declaration public MessageReference(Optional<Snowflake> MessageID = default(Optional<Snowflake>), Optional<Snowflake> ChannelID = default(Optional<Snowflake>), Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<bool> FailIfNotExists = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > MessageID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Boolean > FailIfNotExists Properties | Improve this Doc View Source ChannelID Declaration public Optional<Snowflake> ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source FailIfNotExists Declaration public Optional<bool> FailIfNotExists { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source MessageID Declaration public Optional<Snowflake> MessageID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > Implements IMessageReference System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.NitroStickerPacks.html": {
    "href": "api/Remora.Discord.API.Objects.NitroStickerPacks.html",
    "title": "Class NitroStickerPacks | Remora.Discord",
    "keywords": "Class NitroStickerPacks Represents a set of sticker packs available to Nitro subscribers. Inheritance Object NitroStickerPacks Implements INitroStickerPacks IEquatable < NitroStickerPacks > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class NitroStickerPacks : INitroStickerPacks, IEquatable<NitroStickerPacks> Constructors | Improve this Doc View Source NitroStickerPacks(IReadOnlyList<IStickerPack>) Declaration public NitroStickerPacks(IReadOnlyList<IStickerPack> StickerPacks) Parameters Type Name Description IReadOnlyList < IStickerPack > StickerPacks Properties | Improve this Doc View Source StickerPacks Declaration public IReadOnlyList<IStickerPack> StickerPacks { get; set; } Property Value Type Description IReadOnlyList < IStickerPack > Implements INitroStickerPacks System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.OptionalAuditEntryInfo.html": {
    "href": "api/Remora.Discord.API.Objects.OptionalAuditEntryInfo.html",
    "title": "Class OptionalAuditEntryInfo | Remora.Discord",
    "keywords": "Class OptionalAuditEntryInfo Represents optional audit log information. Inheritance Object OptionalAuditEntryInfo Implements IOptionalAuditEntryInfo IEquatable < OptionalAuditEntryInfo > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class OptionalAuditEntryInfo : IOptionalAuditEntryInfo, IEquatable<OptionalAuditEntryInfo> Constructors | Improve this Doc View Source OptionalAuditEntryInfo(Optional<Snowflake>, Optional<Snowflake>, Optional<String>, Optional<String>, Optional<Snowflake>, Optional<String>, Optional<Snowflake>, Optional<String>, Optional<PermissionOverwriteType>) Declaration public OptionalAuditEntryInfo(Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<Snowflake> ChannelID = default(Optional<Snowflake>), Optional<string> Count = default(Optional<string>), Optional<string> DeleteMemberDays = default(Optional<string>), Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<string> MembersRemoved = default(Optional<string>), Optional<Snowflake> MessageID = default(Optional<Snowflake>), Optional<string> RoleName = default(Optional<string>), Optional<PermissionOverwriteType> Type = default(Optional<PermissionOverwriteType>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < String > Count Remora.Rest.Core.Optional < String > DeleteMemberDays Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < String > MembersRemoved Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > MessageID Remora.Rest.Core.Optional < String > RoleName Remora.Rest.Core.Optional < PermissionOverwriteType > Type Properties | Improve this Doc View Source ApplicationID Declaration public Optional<Snowflake> ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ChannelID Declaration public Optional<Snowflake> ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Count Declaration public Optional<string> Count { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source DeleteMemberDays Declaration public Optional<string> DeleteMemberDays { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source MembersRemoved Declaration public Optional<string> MembersRemoved { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source MessageID Declaration public Optional<Snowflake> MessageID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source RoleName Declaration public Optional<string> RoleName { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Declaration public Optional<PermissionOverwriteType> Type { get; set; } Property Value Type Description Remora.Rest.Core.Optional < PermissionOverwriteType > Implements IOptionalAuditEntryInfo System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialActionRowComponent.html": {
    "href": "api/Remora.Discord.API.Objects.PartialActionRowComponent.html",
    "title": "Class PartialActionRowComponent | Remora.Discord",
    "keywords": "Class PartialActionRowComponent Represents a partial row of interactive components. Inheritance Object PartialActionRowComponent Implements IPartialActionRowComponent IPartialMessageComponent IEquatable < PartialActionRowComponent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialActionRowComponent : IPartialActionRowComponent, IPartialMessageComponent, IEquatable<PartialActionRowComponent> Constructors | Improve this Doc View Source PartialActionRowComponent(Optional<IReadOnlyList<IPartialMessageComponent>>) Declaration public PartialActionRowComponent(Optional<IReadOnlyList<IPartialMessageComponent>> Components) Parameters Type Name Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialMessageComponent >> Components Properties | Improve this Doc View Source Components Declaration public Optional<IReadOnlyList<IPartialMessageComponent>> Components { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialMessageComponent >> | Improve this Doc View Source Type Gets the type of the component. Declaration public Optional<ComponentType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ComponentType > Implements IPartialActionRowComponent IPartialMessageComponent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialApplication.html": {
    "href": "api/Remora.Discord.API.Objects.PartialApplication.html",
    "title": "Class PartialApplication | Remora.Discord",
    "keywords": "Class PartialApplication Represents information about an OAuth2 application. Inheritance Object PartialApplication Implements IPartialApplication IEquatable < PartialApplication > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialApplication : IPartialApplication, IEquatable<PartialApplication> Constructors | Improve this Doc View Source PartialApplication(Optional<Snowflake>, Optional<String>, Optional<IImageHash>, Optional<String>, Optional<IReadOnlyList<String>>, Optional<Boolean>, Optional<Boolean>, Optional<String>, Optional<String>, Optional<IPartialUser>, Optional<String>, Optional<ITeam>, Optional<Snowflake>, Optional<Snowflake>, Optional<String>, Optional<IImageHash>, Optional<ApplicationFlags>, Optional<IReadOnlyList<String>>, Optional<IApplicationInstallParameters>, Optional<Uri>) Declaration public PartialApplication(Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<string> Name = default(Optional<string>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<string> Description = default(Optional<string>), Optional<IReadOnlyList<string>> RPCOrigins = default(Optional<IReadOnlyList<string>>), Optional<bool> IsBotPublic = default(Optional<bool>), Optional<bool> DoesBotRequireCodeGrant = default(Optional<bool>), Optional<string> TermsOfServiceURL = default(Optional<string>), Optional<string> PrivacyPolicyURL = default(Optional<string>), Optional<IPartialUser> Owner = default(Optional<IPartialUser>), Optional<string> VerifyKey = default(Optional<string>), Optional<ITeam> Team = default(Optional<ITeam>), Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<Snowflake> PrimarySKUID = default(Optional<Snowflake>), Optional<string> Slug = default(Optional<string>), Optional<IImageHash> CoverImage = default(Optional<IImageHash>), Optional<ApplicationFlags> Flags = default(Optional<ApplicationFlags>), Optional<IReadOnlyList<string>> Tags = default(Optional<IReadOnlyList<string>>), Optional<IApplicationInstallParameters> InstallParams = default(Optional<IApplicationInstallParameters>), Optional<Uri> CustomInstallUrl = default(Optional<Uri>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < String > Description Remora.Rest.Core.Optional < IReadOnlyList < String >> RPCOrigins Remora.Rest.Core.Optional < Boolean > IsBotPublic Remora.Rest.Core.Optional < Boolean > DoesBotRequireCodeGrant Remora.Rest.Core.Optional < String > TermsOfServiceURL Remora.Rest.Core.Optional < String > PrivacyPolicyURL Remora.Rest.Core.Optional < IPartialUser > Owner Remora.Rest.Core.Optional < String > VerifyKey Remora.Rest.Core.Optional < ITeam > Team Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > PrimarySKUID Remora.Rest.Core.Optional < String > Slug Remora.Rest.Core.Optional < IImageHash > CoverImage Remora.Rest.Core.Optional < ApplicationFlags > Flags Remora.Rest.Core.Optional < IReadOnlyList < String >> Tags Remora.Rest.Core.Optional < IApplicationInstallParameters > InstallParams Remora.Rest.Core.Optional < Uri > CustomInstallUrl Properties | Improve this Doc View Source CoverImage Declaration public Optional<IImageHash> CoverImage { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source CustomInstallUrl Declaration public Optional<Uri> CustomInstallUrl { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Uri > | Improve this Doc View Source Description Declaration public Optional<string> Description { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source DoesBotRequireCodeGrant Declaration public Optional<bool> DoesBotRequireCodeGrant { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Flags Declaration public Optional<ApplicationFlags> Flags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ApplicationFlags > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Icon Declaration public Optional<IImageHash> Icon { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source InstallParams Declaration public Optional<IApplicationInstallParameters> InstallParams { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IApplicationInstallParameters > | Improve this Doc View Source IsBotPublic Declaration public Optional<bool> IsBotPublic { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Declaration public Optional<string> Name { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Owner Declaration public Optional<IPartialUser> Owner { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialUser > | Improve this Doc View Source PrimarySKUID Declaration public Optional<Snowflake> PrimarySKUID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source PrivacyPolicyURL Declaration public Optional<string> PrivacyPolicyURL { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source RPCOrigins Declaration public Optional<IReadOnlyList<string>> RPCOrigins { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> | Improve this Doc View Source Slug Declaration public Optional<string> Slug { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Tags Declaration public Optional<IReadOnlyList<string>> Tags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < String >> | Improve this Doc View Source Team Declaration public Optional<ITeam> Team { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ITeam > | Improve this Doc View Source TermsOfServiceURL Declaration public Optional<string> TermsOfServiceURL { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source VerifyKey Declaration public Optional<string> VerifyKey { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IPartialApplication System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialAttachment.html": {
    "href": "api/Remora.Discord.API.Objects.PartialAttachment.html",
    "title": "Class PartialAttachment | Remora.Discord",
    "keywords": "Class PartialAttachment Inheritance Object PartialAttachment Implements IPartialAttachment IEquatable < PartialAttachment > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialAttachment : IPartialAttachment, IEquatable<PartialAttachment> Constructors | Improve this Doc View Source PartialAttachment(Optional<Snowflake>, Optional<String>, Optional<String>, Optional<String>, Optional<Int32>, Optional<String>, Optional<String>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<Boolean>) Declaration public PartialAttachment(Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<string> Filename = default(Optional<string>), Optional<string> Description = default(Optional<string>), Optional<string> ContentType = default(Optional<string>), Optional<int> Size = default(Optional<int>), Optional<string> Url = default(Optional<string>), Optional<string> ProxyUrl = default(Optional<string>), Optional<int?> Height = default(Optional<int?>), Optional<int?> Width = default(Optional<int?>), Optional<bool> IsEphemeral = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < String > Filename Remora.Rest.Core.Optional < String > Description Remora.Rest.Core.Optional < String > ContentType Remora.Rest.Core.Optional < Int32 > Size Remora.Rest.Core.Optional < String > Url Remora.Rest.Core.Optional < String > ProxyUrl Remora.Rest.Core.Optional < Nullable < Int32 >> Height Remora.Rest.Core.Optional < Nullable < Int32 >> Width Remora.Rest.Core.Optional < Boolean > IsEphemeral Properties | Improve this Doc View Source ContentType Declaration public Optional<string> ContentType { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Description Declaration public Optional<string> Description { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Filename Declaration public Optional<string> Filename { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Height Declaration public Optional<int?> Height { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsEphemeral Declaration public Optional<bool> IsEphemeral { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source ProxyUrl Declaration public Optional<string> ProxyUrl { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Size Declaration public Optional<int> Size { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Url Declaration public Optional<string> Url { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Width Declaration public Optional<int?> Width { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> Implements IPartialAttachment System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialButtonComponent.html": {
    "href": "api/Remora.Discord.API.Objects.PartialButtonComponent.html",
    "title": "Class PartialButtonComponent | Remora.Discord",
    "keywords": "Class PartialButtonComponent Represents a partial button component. Inheritance Object PartialButtonComponent Implements IPartialButtonComponent IPartialMessageComponent IEquatable < PartialButtonComponent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialButtonComponent : IPartialButtonComponent, IPartialMessageComponent, IEquatable<PartialButtonComponent> Constructors | Improve this Doc View Source PartialButtonComponent(Optional<ButtonComponentStyle>, Optional<String>, Optional<IPartialEmoji>, Optional<String>, Optional<String>, Optional<Boolean>) Declaration public PartialButtonComponent(Optional<ButtonComponentStyle> Style, Optional<string> Label = default(Optional<string>), Optional<IPartialEmoji> Emoji = default(Optional<IPartialEmoji>), Optional<string> CustomID = default(Optional<string>), Optional<string> URL = default(Optional<string>), Optional<bool> IsDisabled = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Optional < ButtonComponentStyle > Style Remora.Rest.Core.Optional < String > Label Remora.Rest.Core.Optional < IPartialEmoji > Emoji Remora.Rest.Core.Optional < String > CustomID Remora.Rest.Core.Optional < String > URL Remora.Rest.Core.Optional < Boolean > IsDisabled Properties | Improve this Doc View Source CustomID Declaration public Optional<string> CustomID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Emoji Declaration public Optional<IPartialEmoji> Emoji { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialEmoji > | Improve this Doc View Source IsDisabled Declaration public Optional<bool> IsDisabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Declaration public Optional<string> Label { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Style Declaration public Optional<ButtonComponentStyle> Style { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ButtonComponentStyle > | Improve this Doc View Source Type Gets the type of the component. Declaration public Optional<ComponentType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ComponentType > | Improve this Doc View Source URL Declaration public Optional<string> URL { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IPartialButtonComponent IPartialMessageComponent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialChannel.html": {
    "href": "api/Remora.Discord.API.Objects.PartialChannel.html",
    "title": "Class PartialChannel | Remora.Discord",
    "keywords": "Class PartialChannel Represents a partial channel. Inheritance Object PartialChannel ThreadDelete Implements IPartialChannel IEquatable < PartialChannel > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialChannel : IPartialChannel, IEquatable<PartialChannel> Constructors | Improve this Doc View Source PartialChannel(Optional<Snowflake>, Optional<ChannelType>, Optional<Snowflake>, Optional<Int32>, Optional<IReadOnlyList<IPermissionOverwrite>>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<Int32>, Optional<Int32>, Optional<TimeSpan>, Optional<IReadOnlyList<IUser>>, Optional<IImageHash>, Optional<Snowflake>, Optional<Snowflake>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, Optional<VideoQualityMode>, Optional<Int32>, Optional<Int32>, Optional<IThreadMetadata>, Optional<IThreadMember>, Optional<AutoArchiveDuration>, Optional<IDiscordPermissionSet>) Declaration public PartialChannel(Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<ChannelType> Type = default(Optional<ChannelType>), Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<int> Position = default(Optional<int>), Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites = default(Optional<IReadOnlyList<IPermissionOverwrite>>), Optional<string> Name = default(Optional<string>), Optional<string> Topic = default(Optional<string>), Optional<bool> IsNsfw = default(Optional<bool>), Optional<Snowflake?> LastMessageID = default(Optional<Snowflake?>), Optional<int> Bitrate = default(Optional<int>), Optional<int> UserLimit = default(Optional<int>), Optional<TimeSpan> RateLimitPerUser = default(Optional<TimeSpan>), Optional<IReadOnlyList<IUser>> Recipients = default(Optional<IReadOnlyList<IUser>>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<Snowflake> OwnerID = default(Optional<Snowflake>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<Snowflake?> ParentID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> LastPinTimestamp = default(Optional<DateTimeOffset?>), Optional<string> RTCRegion = default(Optional<string>), Optional<VideoQualityMode> VideoQualityMode = default(Optional<VideoQualityMode>), Optional<int> MessageCount = default(Optional<int>), Optional<int> MemberCount = default(Optional<int>), Optional<IThreadMetadata> ThreadMetadata = default(Optional<IThreadMetadata>), Optional<IThreadMember> Member = default(Optional<IThreadMember>), Optional<AutoArchiveDuration> DefaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < ChannelType > Type Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Int32 > Position Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> PermissionOverwrites Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < String > Topic Remora.Rest.Core.Optional < Boolean > IsNsfw Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> LastMessageID Remora.Rest.Core.Optional < Int32 > Bitrate Remora.Rest.Core.Optional < Int32 > UserLimit Remora.Rest.Core.Optional < TimeSpan > RateLimitPerUser Remora.Rest.Core.Optional < IReadOnlyList < IUser >> Recipients Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > OwnerID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ParentID Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> LastPinTimestamp Remora.Rest.Core.Optional < String > RTCRegion Remora.Rest.Core.Optional < VideoQualityMode > VideoQualityMode Remora.Rest.Core.Optional < Int32 > MessageCount Remora.Rest.Core.Optional < Int32 > MemberCount Remora.Rest.Core.Optional < IThreadMetadata > ThreadMetadata Remora.Rest.Core.Optional < IThreadMember > Member Remora.Rest.Core.Optional < AutoArchiveDuration > DefaultAutoArchiveDuration Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Properties | Improve this Doc View Source ApplicationID Declaration public Optional<Snowflake> ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Bitrate Declaration public Optional<int> Bitrate { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source DefaultAutoArchiveDuration Declaration public Optional<AutoArchiveDuration> DefaultAutoArchiveDuration { get; set; } Property Value Type Description Remora.Rest.Core.Optional < AutoArchiveDuration > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Icon Declaration public Optional<IImageHash> Icon { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsNsfw Declaration public Optional<bool> IsNsfw { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source LastMessageID Declaration public Optional<Snowflake?> LastMessageID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source LastPinTimestamp Declaration public Optional<DateTimeOffset?> LastPinTimestamp { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Member Declaration public Optional<IThreadMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IThreadMember > | Improve this Doc View Source MemberCount Declaration public Optional<int> MemberCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MessageCount Declaration public Optional<int> MessageCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Name Declaration public Optional<string> Name { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source OwnerID Declaration public Optional<Snowflake> OwnerID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ParentID Declaration public Optional<Snowflake?> ParentID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source PermissionOverwrites Declaration public Optional<IReadOnlyList<IPermissionOverwrite>> PermissionOverwrites { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPermissionOverwrite >> | Improve this Doc View Source Permissions Declaration public Optional<IDiscordPermissionSet> Permissions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source Position Declaration public Optional<int> Position { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source RateLimitPerUser Declaration public Optional<TimeSpan> RateLimitPerUser { get; set; } Property Value Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source Recipients Declaration public Optional<IReadOnlyList<IUser>> Recipients { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IUser >> | Improve this Doc View Source RTCRegion Declaration public Optional<string> RTCRegion { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ThreadMetadata Declaration public Optional<IThreadMetadata> ThreadMetadata { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IThreadMetadata > | Improve this Doc View Source Topic Declaration public Optional<string> Topic { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Declaration public Optional<ChannelType> Type { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ChannelType > | Improve this Doc View Source UserLimit Declaration public Optional<int> UserLimit { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source VideoQualityMode Declaration public Optional<VideoQualityMode> VideoQualityMode { get; set; } Property Value Type Description Remora.Rest.Core.Optional < VideoQualityMode > Implements IPartialChannel System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialEmoji.html": {
    "href": "api/Remora.Discord.API.Objects.PartialEmoji.html",
    "title": "Class PartialEmoji | Remora.Discord",
    "keywords": "Class PartialEmoji Represents a partial emoji. Inheritance Object PartialEmoji Implements IPartialEmoji IEquatable < PartialEmoji > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialEmoji : IPartialEmoji, IEquatable<PartialEmoji> Constructors | Improve this Doc View Source PartialEmoji(Optional<Nullable<Snowflake>>, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<IUser>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>) Declaration public PartialEmoji(Optional<Snowflake?> ID = default(Optional<Snowflake?>), Optional<string> Name = default(Optional<string>), Optional<IReadOnlyList<Snowflake>> Roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<IUser> User = default(Optional<IUser>), Optional<bool> RequireColons = default(Optional<bool>), Optional<bool> IsManaged = default(Optional<bool>), Optional<bool> IsAnimated = default(Optional<bool>), Optional<bool> IsAvailable = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ID Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> Roles Remora.Rest.Core.Optional < IUser > User Remora.Rest.Core.Optional < Boolean > RequireColons Remora.Rest.Core.Optional < Boolean > IsManaged Remora.Rest.Core.Optional < Boolean > IsAnimated Remora.Rest.Core.Optional < Boolean > IsAvailable Properties | Improve this Doc View Source ID Declaration public Optional<Snowflake?> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source IsAnimated Declaration public Optional<bool> IsAnimated { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsAvailable Declaration public Optional<bool> IsAvailable { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsManaged Declaration public Optional<bool> IsManaged { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Declaration public Optional<string> Name { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source RequireColons Declaration public Optional<bool> RequireColons { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Roles Declaration public Optional<IReadOnlyList<Snowflake>> Roles { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Implements IPartialEmoji System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialGuild.html": {
    "href": "api/Remora.Discord.API.Objects.PartialGuild.html",
    "title": "Class PartialGuild | Remora.Discord",
    "keywords": "Class PartialGuild Represents a partial Discord Guild. Inheritance Object PartialGuild Implements IPartialGuild IEquatable < PartialGuild > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialGuild : IPartialGuild, IEquatable<PartialGuild> Constructors | Improve this Doc View Source PartialGuild(Optional<Snowflake>, Optional<String>, Optional<IImageHash>, Optional<IImageHash>, Optional<IImageHash>, Optional<Boolean>, Optional<Snowflake>, Optional<IDiscordPermissionSet>, Optional<Nullable<Snowflake>>, Optional<TimeSpan>, Optional<VerificationLevel>, Optional<MessageNotificationLevel>, Optional<ExplicitContentFilterLevel>, Optional<IReadOnlyList<IRole>>, Optional<IReadOnlyList<IEmoji>>, Optional<IReadOnlyList<GuildFeature>>, Optional<MultiFactorAuthenticationLevel>, Optional<Nullable<Snowflake>>, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<Nullable<Snowflake>>, Optional<SystemChannelFlags>, Optional<Nullable<Snowflake>>, Optional<Nullable<Int32>>, Optional<Int32>, Optional<String>, Optional<String>, Optional<IImageHash>, Optional<PremiumTier>, Optional<Int32>, Optional<String>, Optional<Nullable<Snowflake>>, Optional<Int32>, Optional<Int32>, Optional<Int32>, Optional<IWelcomeScreen>, Optional<GuildNSFWLevel>, Optional<IReadOnlyList<ISticker>>, Optional<Boolean>) Declaration public PartialGuild(Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<string> Name = default(Optional<string>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<IImageHash> Splash = default(Optional<IImageHash>), Optional<IImageHash> DiscoverySplash = default(Optional<IImageHash>), Optional<bool> IsOwner = default(Optional<bool>), Optional<Snowflake> OwnerID = default(Optional<Snowflake>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>), Optional<Snowflake?> AFKChannelID = default(Optional<Snowflake?>), Optional<TimeSpan> AFKTimeout = default(Optional<TimeSpan>), Optional<VerificationLevel> VerificationLevel = default(Optional<VerificationLevel>), Optional<MessageNotificationLevel> DefaultMessageNotifications = default(Optional<MessageNotificationLevel>), Optional<ExplicitContentFilterLevel> ExplicitContentFilter = default(Optional<ExplicitContentFilterLevel>), Optional<IReadOnlyList<IRole>> Roles = default(Optional<IReadOnlyList<IRole>>), Optional<IReadOnlyList<IEmoji>> Emojis = default(Optional<IReadOnlyList<IEmoji>>), Optional<IReadOnlyList<GuildFeature>> GuildFeatures = default(Optional<IReadOnlyList<GuildFeature>>), Optional<MultiFactorAuthenticationLevel> MFALevel = default(Optional<MultiFactorAuthenticationLevel>), Optional<Snowflake?> ApplicationID = default(Optional<Snowflake?>), Optional<bool> IsWidgetEnabled = default(Optional<bool>), Optional<Snowflake?> WidgetChannelID = default(Optional<Snowflake?>), Optional<Snowflake?> SystemChannelID = default(Optional<Snowflake?>), Optional<SystemChannelFlags> SystemChannelFlags = default(Optional<SystemChannelFlags>), Optional<Snowflake?> RulesChannelID = default(Optional<Snowflake?>), Optional<int?> MaxPresences = default(Optional<int?>), Optional<int> MaxMembers = default(Optional<int>), Optional<string> VanityUrlCode = default(Optional<string>), Optional<string> Description = default(Optional<string>), Optional<IImageHash> Banner = default(Optional<IImageHash>), Optional<PremiumTier> PremiumTier = default(Optional<PremiumTier>), Optional<int> PremiumSubscriptionCount = default(Optional<int>), Optional<string> PreferredLocale = default(Optional<string>), Optional<Snowflake?> PublicUpdatesChannelID = default(Optional<Snowflake?>), Optional<int> MaxVideoChannelUsers = default(Optional<int>), Optional<int> ApproximateMemberCount = default(Optional<int>), Optional<int> ApproximatePresenceCount = default(Optional<int>), Optional<IWelcomeScreen> WelcomeScreen = default(Optional<IWelcomeScreen>), Optional<GuildNSFWLevel> NSFWLevel = default(Optional<GuildNSFWLevel>), Optional<IReadOnlyList<ISticker>> Stickers = default(Optional<IReadOnlyList<ISticker>>), Optional<bool> IsPremiumProgressBarEnabled = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < IImageHash > Splash Remora.Rest.Core.Optional < IImageHash > DiscoverySplash Remora.Rest.Core.Optional < Boolean > IsOwner Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > OwnerID Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> AFKChannelID Remora.Rest.Core.Optional < TimeSpan > AFKTimeout Remora.Rest.Core.Optional < VerificationLevel > VerificationLevel Remora.Rest.Core.Optional < MessageNotificationLevel > DefaultMessageNotifications Remora.Rest.Core.Optional < ExplicitContentFilterLevel > ExplicitContentFilter Remora.Rest.Core.Optional < IReadOnlyList < IRole >> Roles Remora.Rest.Core.Optional < IReadOnlyList < IEmoji >> Emojis Remora.Rest.Core.Optional < IReadOnlyList < GuildFeature >> GuildFeatures Remora.Rest.Core.Optional < MultiFactorAuthenticationLevel > MFALevel Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ApplicationID Remora.Rest.Core.Optional < Boolean > IsWidgetEnabled Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> WidgetChannelID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> SystemChannelID Remora.Rest.Core.Optional < SystemChannelFlags > SystemChannelFlags Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> RulesChannelID Remora.Rest.Core.Optional < Nullable < Int32 >> MaxPresences Remora.Rest.Core.Optional < Int32 > MaxMembers Remora.Rest.Core.Optional < String > VanityUrlCode Remora.Rest.Core.Optional < String > Description Remora.Rest.Core.Optional < IImageHash > Banner Remora.Rest.Core.Optional < PremiumTier > PremiumTier Remora.Rest.Core.Optional < Int32 > PremiumSubscriptionCount Remora.Rest.Core.Optional < String > PreferredLocale Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> PublicUpdatesChannelID Remora.Rest.Core.Optional < Int32 > MaxVideoChannelUsers Remora.Rest.Core.Optional < Int32 > ApproximateMemberCount Remora.Rest.Core.Optional < Int32 > ApproximatePresenceCount Remora.Rest.Core.Optional < IWelcomeScreen > WelcomeScreen Remora.Rest.Core.Optional < GuildNSFWLevel > NSFWLevel Remora.Rest.Core.Optional < IReadOnlyList < ISticker >> Stickers Remora.Rest.Core.Optional < Boolean > IsPremiumProgressBarEnabled Properties | Improve this Doc View Source AFKChannelID Declaration public Optional<Snowflake?> AFKChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source AFKTimeout Declaration public Optional<TimeSpan> AFKTimeout { get; set; } Property Value Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source ApplicationID Declaration public Optional<Snowflake?> ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source ApproximateMemberCount Declaration public Optional<int> ApproximateMemberCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ApproximatePresenceCount Declaration public Optional<int> ApproximatePresenceCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Banner Declaration public Optional<IImageHash> Banner { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source DefaultMessageNotifications Declaration public Optional<MessageNotificationLevel> DefaultMessageNotifications { get; set; } Property Value Type Description Remora.Rest.Core.Optional < MessageNotificationLevel > | Improve this Doc View Source Description Declaration public Optional<string> Description { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source DiscoverySplash Declaration public Optional<IImageHash> DiscoverySplash { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source Emojis Declaration public Optional<IReadOnlyList<IEmoji>> Emojis { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IEmoji >> | Improve this Doc View Source ExplicitContentFilter Declaration public Optional<ExplicitContentFilterLevel> ExplicitContentFilter { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ExplicitContentFilterLevel > | Improve this Doc View Source GuildFeatures Declaration public Optional<IReadOnlyList<GuildFeature>> GuildFeatures { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < GuildFeature >> | Improve this Doc View Source Icon Declaration public Optional<IImageHash> Icon { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsOwner Declaration public Optional<bool> IsOwner { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsPremiumProgressBarEnabled Declaration public Optional<bool> IsPremiumProgressBarEnabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsWidgetEnabled Declaration public Optional<bool> IsWidgetEnabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MaxMembers Declaration public Optional<int> MaxMembers { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MaxPresences Declaration public Optional<int?> MaxPresences { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Int32 >> | Improve this Doc View Source MaxVideoChannelUsers Declaration public Optional<int> MaxVideoChannelUsers { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MFALevel Declaration public Optional<MultiFactorAuthenticationLevel> MFALevel { get; set; } Property Value Type Description Remora.Rest.Core.Optional < MultiFactorAuthenticationLevel > | Improve this Doc View Source Name Declaration public Optional<string> Name { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source NSFWLevel Declaration public Optional<GuildNSFWLevel> NSFWLevel { get; set; } Property Value Type Description Remora.Rest.Core.Optional < GuildNSFWLevel > | Improve this Doc View Source OwnerID Declaration public Optional<Snowflake> OwnerID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Permissions Declaration public Optional<IDiscordPermissionSet> Permissions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source PreferredLocale Declaration public Optional<string> PreferredLocale { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source PremiumSubscriptionCount Declaration public Optional<int> PremiumSubscriptionCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source PremiumTier Declaration public Optional<PremiumTier> PremiumTier { get; set; } Property Value Type Description Remora.Rest.Core.Optional < PremiumTier > | Improve this Doc View Source PublicUpdatesChannelID Declaration public Optional<Snowflake?> PublicUpdatesChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Roles Declaration public Optional<IReadOnlyList<IRole>> Roles { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IRole >> | Improve this Doc View Source RulesChannelID Declaration public Optional<Snowflake?> RulesChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Splash Declaration public Optional<IImageHash> Splash { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source Stickers Declaration public Optional<IReadOnlyList<ISticker>> Stickers { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < ISticker >> | Improve this Doc View Source SystemChannelFlags Declaration public Optional<SystemChannelFlags> SystemChannelFlags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < SystemChannelFlags > | Improve this Doc View Source SystemChannelID Declaration public Optional<Snowflake?> SystemChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source VanityUrlCode Declaration public Optional<string> VanityUrlCode { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source VerificationLevel Declaration public Optional<VerificationLevel> VerificationLevel { get; set; } Property Value Type Description Remora.Rest.Core.Optional < VerificationLevel > | Improve this Doc View Source WelcomeScreen Declaration public Optional<IWelcomeScreen> WelcomeScreen { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IWelcomeScreen > | Improve this Doc View Source WidgetChannelID Declaration public Optional<Snowflake?> WidgetChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> Implements IPartialGuild System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialGuildApplicationCommandPermissions.html": {
    "href": "api/Remora.Discord.API.Objects.PartialGuildApplicationCommandPermissions.html",
    "title": "Class PartialGuildApplicationCommandPermissions | Remora.Discord",
    "keywords": "Class PartialGuildApplicationCommandPermissions Represents a set of permissions for a command in a guild. Inheritance Object PartialGuildApplicationCommandPermissions Implements IPartialGuildApplicationCommandPermissions IEquatable < PartialGuildApplicationCommandPermissions > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialGuildApplicationCommandPermissions : IPartialGuildApplicationCommandPermissions, IEquatable<PartialGuildApplicationCommandPermissions> Constructors | Improve this Doc View Source PartialGuildApplicationCommandPermissions(Optional<Snowflake>, Optional<Snowflake>, Optional<Snowflake>, Optional<IReadOnlyList<IApplicationCommandPermissions>>) Declaration public PartialGuildApplicationCommandPermissions(Optional<Snowflake> ID, Optional<Snowflake> ApplicationID, Optional<Snowflake> GuildID, Optional<IReadOnlyList<IApplicationCommandPermissions>> Permissions) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandPermissions >> Permissions Properties | Improve this Doc View Source ApplicationID Declaration public Optional<Snowflake> ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Permissions Declaration public Optional<IReadOnlyList<IApplicationCommandPermissions>> Permissions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandPermissions >> Implements IPartialGuildApplicationCommandPermissions System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialGuildMember.html": {
    "href": "api/Remora.Discord.API.Objects.PartialGuildMember.html",
    "title": "Class PartialGuildMember | Remora.Discord",
    "keywords": "Class PartialGuildMember Represents partial information about a guild member. Inheritance Object PartialGuildMember Implements IPartialGuildMember IEquatable < PartialGuildMember > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialGuildMember : IPartialGuildMember, IEquatable<PartialGuildMember> Constructors | Improve this Doc View Source PartialGuildMember(Optional<IUser>, Optional<String>, Optional<IImageHash>, Optional<IReadOnlyList<Snowflake>>, Optional<DateTimeOffset>, Optional<Nullable<DateTimeOffset>>, Optional<Boolean>, Optional<Boolean>, Optional<Nullable<Boolean>>, Optional<IDiscordPermissionSet>, Optional<Nullable<DateTimeOffset>>) Declaration public PartialGuildMember(Optional<IUser> User = default(Optional<IUser>), Optional<string> Nickname = default(Optional<string>), Optional<IImageHash> Avatar = default(Optional<IImageHash>), Optional<IReadOnlyList<Snowflake>> Roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<DateTimeOffset> JoinedAt = default(Optional<DateTimeOffset>), Optional<DateTimeOffset?> PremiumSince = default(Optional<DateTimeOffset?>), Optional<bool> IsDeafened = default(Optional<bool>), Optional<bool> IsMuted = default(Optional<bool>), Optional<bool?> IsPending = default(Optional<bool?>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>), Optional<DateTimeOffset?> CommunicationDisabledUntil = default(Optional<DateTimeOffset?>)) Parameters Type Name Description Remora.Rest.Core.Optional < IUser > User Remora.Rest.Core.Optional < String > Nickname Remora.Rest.Core.Optional < IImageHash > Avatar Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> Roles Remora.Rest.Core.Optional < DateTimeOffset > JoinedAt Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> PremiumSince Remora.Rest.Core.Optional < Boolean > IsDeafened Remora.Rest.Core.Optional < Boolean > IsMuted Remora.Rest.Core.Optional < Nullable < Boolean >> IsPending Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> CommunicationDisabledUntil Properties | Improve this Doc View Source Avatar Declaration public Optional<IImageHash> Avatar { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source CommunicationDisabledUntil Declaration public Optional<DateTimeOffset?> CommunicationDisabledUntil { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IsDeafened Declaration public Optional<bool> IsDeafened { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMuted Declaration public Optional<bool> IsMuted { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsPending Declaration public Optional<bool?> IsPending { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Boolean >> | Improve this Doc View Source JoinedAt Declaration public Optional<DateTimeOffset> JoinedAt { get; set; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Nickname Declaration public Optional<string> Nickname { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Permissions Declaration public Optional<IDiscordPermissionSet> Permissions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source PremiumSince Declaration public Optional<DateTimeOffset?> PremiumSince { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Roles Declaration public Optional<IReadOnlyList<Snowflake>> Roles { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Implements IPartialGuildMember System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialIntegration.html": {
    "href": "api/Remora.Discord.API.Objects.PartialIntegration.html",
    "title": "Class PartialIntegration | Remora.Discord",
    "keywords": "Class PartialIntegration Represents a partial integration object. Inheritance Object PartialIntegration Implements IPartialIntegration IEquatable < PartialIntegration > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialIntegration : IPartialIntegration, IEquatable<PartialIntegration> Constructors | Improve this Doc View Source PartialIntegration(Optional<Snowflake>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<Boolean>, Optional<Snowflake>, Optional<Boolean>, Optional<IntegrationExpireBehaviour>, Optional<TimeSpan>, Optional<IUser>, Optional<IAccount>, Optional<DateTimeOffset>, Optional<Int32>, Optional<Boolean>, Optional<IIntegrationApplication>) Declaration public PartialIntegration(Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<string> Name = default(Optional<string>), Optional<string> Type = default(Optional<string>), Optional<bool> IsEnabled = default(Optional<bool>), Optional<bool> IsSyncing = default(Optional<bool>), Optional<Snowflake> RoleID = default(Optional<Snowflake>), Optional<bool> EnableEmoticons = default(Optional<bool>), Optional<IntegrationExpireBehaviour> ExpireBehaviour = default(Optional<IntegrationExpireBehaviour>), Optional<TimeSpan> ExpireGracePeriod = default(Optional<TimeSpan>), Optional<IUser> User = default(Optional<IUser>), Optional<IAccount> Account = default(Optional<IAccount>), Optional<DateTimeOffset> SyncedAt = default(Optional<DateTimeOffset>), Optional<int> SubscriberCount = default(Optional<int>), Optional<bool> IsRevoked = default(Optional<bool>), Optional<IIntegrationApplication> Application = default(Optional<IIntegrationApplication>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < String > Type Remora.Rest.Core.Optional < Boolean > IsEnabled Remora.Rest.Core.Optional < Boolean > IsSyncing Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > RoleID Remora.Rest.Core.Optional < Boolean > EnableEmoticons Remora.Rest.Core.Optional < IntegrationExpireBehaviour > ExpireBehaviour Remora.Rest.Core.Optional < TimeSpan > ExpireGracePeriod Remora.Rest.Core.Optional < IUser > User Remora.Rest.Core.Optional < IAccount > Account Remora.Rest.Core.Optional < DateTimeOffset > SyncedAt Remora.Rest.Core.Optional < Int32 > SubscriberCount Remora.Rest.Core.Optional < Boolean > IsRevoked Remora.Rest.Core.Optional < IIntegrationApplication > Application Properties | Improve this Doc View Source Account Declaration public Optional<IAccount> Account { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IAccount > | Improve this Doc View Source Application Declaration public Optional<IIntegrationApplication> Application { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IIntegrationApplication > | Improve this Doc View Source EnableEmoticons Declaration public Optional<bool> EnableEmoticons { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source ExpireBehaviour Declaration public Optional<IntegrationExpireBehaviour> ExpireBehaviour { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IntegrationExpireBehaviour > | Improve this Doc View Source ExpireGracePeriod Declaration public Optional<TimeSpan> ExpireGracePeriod { get; set; } Property Value Type Description Remora.Rest.Core.Optional < TimeSpan > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsEnabled Declaration public Optional<bool> IsEnabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsRevoked Declaration public Optional<bool> IsRevoked { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSyncing Declaration public Optional<bool> IsSyncing { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Declaration public Optional<string> Name { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source RoleID Declaration public Optional<Snowflake> RoleID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source SubscriberCount Declaration public Optional<int> SubscriberCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source SyncedAt Declaration public Optional<DateTimeOffset> SyncedAt { get; set; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Type Declaration public Optional<string> Type { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Implements IPartialIntegration System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialInvite.html": {
    "href": "api/Remora.Discord.API.Objects.PartialInvite.html",
    "title": "Class PartialInvite | Remora.Discord",
    "keywords": "Class PartialInvite Represents a partial invite. Inheritance Object PartialInvite Implements IPartialInvite IEquatable < PartialInvite > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialInvite : IPartialInvite, IEquatable<PartialInvite> Constructors | Improve this Doc View Source PartialInvite(Optional<String>, Optional<IPartialGuild>, Optional<IPartialChannel>, Optional<IUser>, Optional<InviteTarget>, Optional<IPartialUser>, Optional<IPartialApplication>, Optional<Int32>, Optional<Int32>, Optional<Nullable<DateTimeOffset>>, Optional<IGuildScheduledEvent>) Declaration public PartialInvite(Optional<string> Code = default(Optional<string>), Optional<IPartialGuild> Guild = default(Optional<IPartialGuild>), Optional<IPartialChannel> Channel = default(Optional<IPartialChannel>), Optional<IUser> Inviter = default(Optional<IUser>), Optional<InviteTarget> TargetType = default(Optional<InviteTarget>), Optional<IPartialUser> TargetUser = default(Optional<IPartialUser>), Optional<IPartialApplication> TargetApplication = default(Optional<IPartialApplication>), Optional<int> ApproximatePresenceCount = default(Optional<int>), Optional<int> ApproximateMemberCount = default(Optional<int>), Optional<DateTimeOffset?> ExpiresAt = default(Optional<DateTimeOffset?>), Optional<IGuildScheduledEvent> GuildScheduledEvent = default(Optional<IGuildScheduledEvent>)) Parameters Type Name Description Remora.Rest.Core.Optional < String > Code Remora.Rest.Core.Optional < IPartialGuild > Guild Remora.Rest.Core.Optional < IPartialChannel > Channel Remora.Rest.Core.Optional < IUser > Inviter Remora.Rest.Core.Optional < InviteTarget > TargetType Remora.Rest.Core.Optional < IPartialUser > TargetUser Remora.Rest.Core.Optional < IPartialApplication > TargetApplication Remora.Rest.Core.Optional < Int32 > ApproximatePresenceCount Remora.Rest.Core.Optional < Int32 > ApproximateMemberCount Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> ExpiresAt Remora.Rest.Core.Optional < IGuildScheduledEvent > GuildScheduledEvent Properties | Improve this Doc View Source ApproximateMemberCount Declaration public Optional<int> ApproximateMemberCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source ApproximatePresenceCount Declaration public Optional<int> ApproximatePresenceCount { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Channel Declaration public Optional<IPartialChannel> Channel { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialChannel > | Improve this Doc View Source Code Declaration public Optional<string> Code { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source ExpiresAt Declaration public Optional<DateTimeOffset?> ExpiresAt { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Guild Declaration public Optional<IPartialGuild> Guild { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuild > | Improve this Doc View Source GuildScheduledEvent Declaration public Optional<IGuildScheduledEvent> GuildScheduledEvent { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildScheduledEvent > | Improve this Doc View Source Inviter Declaration public Optional<IUser> Inviter { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source TargetApplication Declaration public Optional<IPartialApplication> TargetApplication { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source TargetType Declaration public Optional<InviteTarget> TargetType { get; set; } Property Value Type Description Remora.Rest.Core.Optional < InviteTarget > | Improve this Doc View Source TargetUser Declaration public Optional<IPartialUser> TargetUser { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialUser > Implements IPartialInvite System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialMessage.html": {
    "href": "api/Remora.Discord.API.Objects.PartialMessage.html",
    "title": "Class PartialMessage | Remora.Discord",
    "keywords": "Class PartialMessage Represents a message. Inheritance Object PartialMessage MessageUpdate Implements IPartialMessage IEquatable < PartialMessage > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialMessage : IPartialMessage, IEquatable<PartialMessage> Constructors | Improve this Doc View Source PartialMessage(Optional<Snowflake>, Optional<Snowflake>, Optional<Snowflake>, Optional<IUser>, Optional<IPartialGuildMember>, Optional<String>, Optional<DateTimeOffset>, Optional<Nullable<DateTimeOffset>>, Optional<Boolean>, Optional<Boolean>, Optional<IReadOnlyList<IUserMention>>, Optional<IReadOnlyList<Snowflake>>, Optional<IReadOnlyList<IChannelMention>>, Optional<IReadOnlyList<IAttachment>>, Optional<IReadOnlyList<IEmbed>>, Optional<IReadOnlyList<IReaction>>, Optional<String>, Optional<Boolean>, Optional<Snowflake>, Optional<MessageType>, Optional<IMessageActivity>, Optional<IPartialApplication>, Optional<Snowflake>, Optional<IMessageReference>, Optional<MessageFlags>, Optional<IMessage>, Optional<IMessageInteraction>, Optional<IChannel>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<IStickerItem>>) Declaration public PartialMessage(Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<Snowflake> ChannelID = default(Optional<Snowflake>), Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<IUser> Author = default(Optional<IUser>), Optional<IPartialGuildMember> Member = default(Optional<IPartialGuildMember>), Optional<string> Content = default(Optional<string>), Optional<DateTimeOffset> Timestamp = default(Optional<DateTimeOffset>), Optional<DateTimeOffset?> EditedTimestamp = default(Optional<DateTimeOffset?>), Optional<bool> IsTTS = default(Optional<bool>), Optional<bool> MentionsEveryone = default(Optional<bool>), Optional<IReadOnlyList<IUserMention>> Mentions = default(Optional<IReadOnlyList<IUserMention>>), Optional<IReadOnlyList<Snowflake>> MentionedRoles = default(Optional<IReadOnlyList<Snowflake>>), Optional<IReadOnlyList<IChannelMention>> MentionedChannels = default(Optional<IReadOnlyList<IChannelMention>>), Optional<IReadOnlyList<IAttachment>> Attachments = default(Optional<IReadOnlyList<IAttachment>>), Optional<IReadOnlyList<IEmbed>> Embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IReadOnlyList<IReaction>> Reactions = default(Optional<IReadOnlyList<IReaction>>), Optional<string> Nonce = default(Optional<string>), Optional<bool> IsPinned = default(Optional<bool>), Optional<Snowflake> WebhookID = default(Optional<Snowflake>), Optional<MessageType> Type = default(Optional<MessageType>), Optional<IMessageActivity> Activity = default(Optional<IMessageActivity>), Optional<IPartialApplication> Application = default(Optional<IPartialApplication>), Optional<Snowflake> ApplicationID = default(Optional<Snowflake>), Optional<IMessageReference> MessageReference = default(Optional<IMessageReference>), Optional<MessageFlags> Flags = default(Optional<MessageFlags>), Optional<IMessage> ReferencedMessage = default(Optional<IMessage>), Optional<IMessageInteraction> Interaction = default(Optional<IMessageInteraction>), Optional<IChannel> Thread = default(Optional<IChannel>), Optional<IReadOnlyList<IMessageComponent>> Components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<IStickerItem>> StickerItems = default(Optional<IReadOnlyList<IStickerItem>>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < IUser > Author Remora.Rest.Core.Optional < IPartialGuildMember > Member Remora.Rest.Core.Optional < String > Content Remora.Rest.Core.Optional < DateTimeOffset > Timestamp Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> EditedTimestamp Remora.Rest.Core.Optional < Boolean > IsTTS Remora.Rest.Core.Optional < Boolean > MentionsEveryone Remora.Rest.Core.Optional < IReadOnlyList < IUserMention >> Mentions Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> MentionedRoles Remora.Rest.Core.Optional < IReadOnlyList < IChannelMention >> MentionedChannels Remora.Rest.Core.Optional < IReadOnlyList < IAttachment >> Attachments Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> Embeds Remora.Rest.Core.Optional < IReadOnlyList < IReaction >> Reactions Remora.Rest.Core.Optional < String > Nonce Remora.Rest.Core.Optional < Boolean > IsPinned Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > WebhookID Remora.Rest.Core.Optional < MessageType > Type Remora.Rest.Core.Optional < IMessageActivity > Activity Remora.Rest.Core.Optional < IPartialApplication > Application Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < IMessageReference > MessageReference Remora.Rest.Core.Optional < MessageFlags > Flags Remora.Rest.Core.Optional < IMessage > ReferencedMessage Remora.Rest.Core.Optional < IMessageInteraction > Interaction Remora.Rest.Core.Optional < IChannel > Thread Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> Components Remora.Rest.Core.Optional < IReadOnlyList < IStickerItem >> StickerItems Properties | Improve this Doc View Source Activity Declaration public Optional<IMessageActivity> Activity { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessageActivity > | Improve this Doc View Source Application Declaration public Optional<IPartialApplication> Application { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialApplication > | Improve this Doc View Source ApplicationID Declaration public Optional<Snowflake> ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Attachments Declaration public Optional<IReadOnlyList<IAttachment>> Attachments { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IAttachment >> | Improve this Doc View Source Author Declaration public Optional<IUser> Author { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > | Improve this Doc View Source ChannelID Declaration public Optional<Snowflake> ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Components Declaration public Optional<IReadOnlyList<IMessageComponent>> Components { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> | Improve this Doc View Source Content Declaration public Optional<string> Content { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source EditedTimestamp Declaration public Optional<DateTimeOffset?> EditedTimestamp { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source Embeds Declaration public Optional<IReadOnlyList<IEmbed>> Embeds { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> | Improve this Doc View Source Flags Declaration public Optional<MessageFlags> Flags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < MessageFlags > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Interaction Declaration public Optional<IMessageInteraction> Interaction { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessageInteraction > | Improve this Doc View Source IsPinned Declaration public Optional<bool> IsPinned { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsTTS Declaration public Optional<bool> IsTTS { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Member Declaration public Optional<IPartialGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuildMember > | Improve this Doc View Source MentionedChannels Declaration public Optional<IReadOnlyList<IChannelMention>> MentionedChannels { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IChannelMention >> | Improve this Doc View Source MentionedRoles Declaration public Optional<IReadOnlyList<Snowflake>> MentionedRoles { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source Mentions Declaration public Optional<IReadOnlyList<IUserMention>> Mentions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IUserMention >> | Improve this Doc View Source MentionsEveryone Declaration public Optional<bool> MentionsEveryone { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MessageReference Declaration public Optional<IMessageReference> MessageReference { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessageReference > | Improve this Doc View Source Nonce Declaration public Optional<string> Nonce { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Reactions Declaration public Optional<IReadOnlyList<IReaction>> Reactions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IReaction >> | Improve this Doc View Source ReferencedMessage Declaration public Optional<IMessage> ReferencedMessage { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessage > | Improve this Doc View Source StickerItems Declaration public Optional<IReadOnlyList<IStickerItem>> StickerItems { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IStickerItem >> | Improve this Doc View Source Thread Declaration public Optional<IChannel> Thread { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IChannel > | Improve this Doc View Source Timestamp Declaration public Optional<DateTimeOffset> Timestamp { get; set; } Property Value Type Description Remora.Rest.Core.Optional < DateTimeOffset > | Improve this Doc View Source Type Declaration public Optional<MessageType> Type { get; set; } Property Value Type Description Remora.Rest.Core.Optional < MessageType > | Improve this Doc View Source WebhookID Declaration public Optional<Snowflake> WebhookID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > Implements IPartialMessage System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialPermissionOverwrite.html": {
    "href": "api/Remora.Discord.API.Objects.PartialPermissionOverwrite.html",
    "title": "Class PartialPermissionOverwrite | Remora.Discord",
    "keywords": "Class PartialPermissionOverwrite Inheritance Object PartialPermissionOverwrite Implements IPartialPermissionOverwrite IEquatable < PartialPermissionOverwrite > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialPermissionOverwrite : IPartialPermissionOverwrite, IEquatable<PartialPermissionOverwrite> Constructors | Improve this Doc View Source PartialPermissionOverwrite(Optional<Snowflake>, Optional<PermissionOverwriteType>, Optional<IDiscordPermissionSet>, Optional<IDiscordPermissionSet>) Declaration public PartialPermissionOverwrite(Optional<Snowflake> ID, Optional<PermissionOverwriteType> Type, Optional<IDiscordPermissionSet> Allow, Optional<IDiscordPermissionSet> Deny) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < PermissionOverwriteType > Type Remora.Rest.Core.Optional < IDiscordPermissionSet > Allow Remora.Rest.Core.Optional < IDiscordPermissionSet > Deny Properties | Improve this Doc View Source Allow Declaration public Optional<IDiscordPermissionSet> Allow { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source Deny Declaration public Optional<IDiscordPermissionSet> Deny { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Type Declaration public Optional<PermissionOverwriteType> Type { get; set; } Property Value Type Description Remora.Rest.Core.Optional < PermissionOverwriteType > Implements IPartialPermissionOverwrite System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialPresence.html": {
    "href": "api/Remora.Discord.API.Objects.PartialPresence.html",
    "title": "Class PartialPresence | Remora.Discord",
    "keywords": "Class PartialPresence Represents a user's presence. Inheritance Object PartialPresence Implements IPartialPresence IEquatable < PartialPresence > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialPresence : IPartialPresence, IEquatable<PartialPresence> Constructors | Improve this Doc View Source PartialPresence(Optional<IPartialUser>, Optional<Snowflake>, Optional<ClientStatus>, Optional<IReadOnlyList<IActivity>>, Optional<IClientStatuses>) Declaration public PartialPresence(Optional<IPartialUser> User = default(Optional<IPartialUser>), Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<ClientStatus> Status = default(Optional<ClientStatus>), Optional<IReadOnlyList<IActivity>> Activities = default(Optional<IReadOnlyList<IActivity>>), Optional<IClientStatuses> ClientStatus = default(Optional<IClientStatuses>)) Parameters Type Name Description Remora.Rest.Core.Optional < IPartialUser > User Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < ClientStatus > Status Remora.Rest.Core.Optional < IReadOnlyList < IActivity >> Activities Remora.Rest.Core.Optional < IClientStatuses > ClientStatus Properties | Improve this Doc View Source Activities Declaration public Optional<IReadOnlyList<IActivity>> Activities { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IActivity >> | Improve this Doc View Source ClientStatus Declaration public Optional<IClientStatuses> ClientStatus { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IClientStatuses > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Status Declaration public Optional<ClientStatus> Status { get; set; } Property Value Type Description Remora.Rest.Core.Optional < ClientStatus > | Improve this Doc View Source User Declaration public Optional<IPartialUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialUser > Implements IPartialPresence System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialRole.html": {
    "href": "api/Remora.Discord.API.Objects.PartialRole.html",
    "title": "Class PartialRole | Remora.Discord",
    "keywords": "Class PartialRole Represents a partial Discord role. Inheritance Object PartialRole Implements IPartialRole IEquatable < PartialRole > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialRole : IPartialRole, IEquatable<PartialRole> Constructors | Improve this Doc View Source PartialRole(Optional<Snowflake>, Optional<String>, Optional<Color>, Optional<Boolean>, Optional<IImageHash>, Optional<String>, Optional<Int32>, Optional<IDiscordPermissionSet>, Optional<Boolean>, Optional<Boolean>, Optional<IRoleTags>) Declaration public PartialRole(Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<string> Name = default(Optional<string>), Optional<Color> Colour = default(Optional<Color>), Optional<bool> IsHoisted = default(Optional<bool>), Optional<IImageHash> Icon = default(Optional<IImageHash>), Optional<string> UnicodeEmoji = default(Optional<string>), Optional<int> Position = default(Optional<int>), Optional<IDiscordPermissionSet> Permissions = default(Optional<IDiscordPermissionSet>), Optional<bool> IsManaged = default(Optional<bool>), Optional<bool> IsMentionable = default(Optional<bool>), Optional<IRoleTags> Tags = default(Optional<IRoleTags>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < String > Name Remora.Rest.Core.Optional < Color > Colour Remora.Rest.Core.Optional < Boolean > IsHoisted Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < String > UnicodeEmoji Remora.Rest.Core.Optional < Int32 > Position Remora.Rest.Core.Optional < IDiscordPermissionSet > Permissions Remora.Rest.Core.Optional < Boolean > IsManaged Remora.Rest.Core.Optional < Boolean > IsMentionable Remora.Rest.Core.Optional < IRoleTags > Tags Properties | Improve this Doc View Source Colour Declaration public Optional<Color> Colour { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Color > | Improve this Doc View Source Icon Declaration public Optional<IImageHash> Icon { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsHoisted Declaration public Optional<bool> IsHoisted { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsManaged Declaration public Optional<bool> IsManaged { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMentionable Declaration public Optional<bool> IsMentionable { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Declaration public Optional<string> Name { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Permissions Declaration public Optional<IDiscordPermissionSet> Permissions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IDiscordPermissionSet > | Improve this Doc View Source Position Declaration public Optional<int> Position { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Tags Declaration public Optional<IRoleTags> Tags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IRoleTags > | Improve this Doc View Source UnicodeEmoji Declaration public Optional<string> UnicodeEmoji { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IPartialRole System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialSelectMenuComponent.html": {
    "href": "api/Remora.Discord.API.Objects.PartialSelectMenuComponent.html",
    "title": "Class PartialSelectMenuComponent | Remora.Discord",
    "keywords": "Class PartialSelectMenuComponent Represents a partial dropdown of selectable values. Inheritance Object PartialSelectMenuComponent Implements IPartialSelectMenuComponent IPartialMessageComponent IEquatable < PartialSelectMenuComponent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialSelectMenuComponent : IPartialSelectMenuComponent, IPartialMessageComponent, IEquatable<PartialSelectMenuComponent> Constructors | Improve this Doc View Source PartialSelectMenuComponent(Optional<String>, Optional<IReadOnlyList<IPartialSelectOption>>, Optional<String>, Optional<Int32>, Optional<Int32>, Optional<Boolean>) Declaration public PartialSelectMenuComponent(Optional<string> CustomID, Optional<IReadOnlyList<IPartialSelectOption>> Options, Optional<string> Placeholder = default(Optional<string>), Optional<int> MinValues = default(Optional<int>), Optional<int> MaxValues = default(Optional<int>), Optional<bool> IsDisabled = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Optional < String > CustomID Remora.Rest.Core.Optional < IReadOnlyList < IPartialSelectOption >> Options Remora.Rest.Core.Optional < String > Placeholder Remora.Rest.Core.Optional < Int32 > MinValues Remora.Rest.Core.Optional < Int32 > MaxValues Remora.Rest.Core.Optional < Boolean > IsDisabled Properties | Improve this Doc View Source CustomID Declaration public Optional<string> CustomID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IsDisabled Declaration public Optional<bool> IsDisabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MaxValues Declaration public Optional<int> MaxValues { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MinValues Declaration public Optional<int> MinValues { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Options Declaration public Optional<IReadOnlyList<IPartialSelectOption>> Options { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IPartialSelectOption >> | Improve this Doc View Source Placeholder Declaration public Optional<string> Placeholder { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Gets the type of the component. Declaration public Optional<ComponentType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ComponentType > Implements IPartialSelectMenuComponent IPartialMessageComponent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialSelectOption.html": {
    "href": "api/Remora.Discord.API.Objects.PartialSelectOption.html",
    "title": "Class PartialSelectOption | Remora.Discord",
    "keywords": "Class PartialSelectOption Represents a single partial selectable option. Inheritance Object PartialSelectOption Implements IPartialSelectOption IEquatable < PartialSelectOption > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialSelectOption : IPartialSelectOption, IEquatable<PartialSelectOption> Constructors | Improve this Doc View Source PartialSelectOption(Optional<String>, Optional<String>, Optional<String>, Optional<IPartialEmoji>, Optional<Boolean>) Declaration public PartialSelectOption(Optional<string> Label, Optional<string> Value, Optional<string> Description = default(Optional<string>), Optional<IPartialEmoji> Emoji = default(Optional<IPartialEmoji>), Optional<bool> IsDefault = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Optional < String > Label Remora.Rest.Core.Optional < String > Value Remora.Rest.Core.Optional < String > Description Remora.Rest.Core.Optional < IPartialEmoji > Emoji Remora.Rest.Core.Optional < Boolean > IsDefault Properties | Improve this Doc View Source Description Declaration public Optional<string> Description { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Emoji Declaration public Optional<IPartialEmoji> Emoji { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialEmoji > | Improve this Doc View Source IsDefault Declaration public Optional<bool> IsDefault { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Declaration public Optional<string> Label { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Value Declaration public Optional<string> Value { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IPartialSelectOption System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialTextInputComponent.html": {
    "href": "api/Remora.Discord.API.Objects.PartialTextInputComponent.html",
    "title": "Class PartialTextInputComponent | Remora.Discord",
    "keywords": "Class PartialTextInputComponent Represents a text-based input component. Inheritance Object PartialTextInputComponent Implements IPartialTextInputComponent IPartialMessageComponent IEquatable < PartialTextInputComponent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialTextInputComponent : IPartialTextInputComponent, IPartialMessageComponent, IEquatable<PartialTextInputComponent> Constructors | Improve this Doc View Source PartialTextInputComponent(Optional<String>, Optional<String>, Optional<TextInputStyle>, Optional<String>, Optional<Int32>, Optional<Int32>, Optional<Boolean>, Optional<String>) Declaration public PartialTextInputComponent(Optional<string> CustomID, Optional<string> Value, Optional<TextInputStyle> Style, Optional<string> Label, Optional<int> MinLength, Optional<int> MaxLength, Optional<bool> IsRequired, Optional<string> Placeholder) Parameters Type Name Description Remora.Rest.Core.Optional < String > CustomID Remora.Rest.Core.Optional < String > Value Remora.Rest.Core.Optional < TextInputStyle > Style Remora.Rest.Core.Optional < String > Label Remora.Rest.Core.Optional < Int32 > MinLength Remora.Rest.Core.Optional < Int32 > MaxLength Remora.Rest.Core.Optional < Boolean > IsRequired Remora.Rest.Core.Optional < String > Placeholder Properties | Improve this Doc View Source CustomID Declaration public Optional<string> CustomID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source IsRequired Declaration public Optional<bool> IsRequired { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Declaration public Optional<string> Label { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source MaxLength Declaration public Optional<int> MaxLength { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MinLength Declaration public Optional<int> MinLength { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Placeholder Declaration public Optional<string> Placeholder { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Style Declaration public Optional<TextInputStyle> Style { get; set; } Property Value Type Description Remora.Rest.Core.Optional < TextInputStyle > | Improve this Doc View Source Type Gets the type of the component. Declaration public Optional<ComponentType> Type { get; } Property Value Type Description Remora.Rest.Core.Optional < ComponentType > | Improve this Doc View Source Value Declaration public Optional<string> Value { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IPartialTextInputComponent IPartialMessageComponent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialUser.html": {
    "href": "api/Remora.Discord.API.Objects.PartialUser.html",
    "title": "Class PartialUser | Remora.Discord",
    "keywords": "Class PartialUser Represents a partial Discord user. Inheritance Object PartialUser Implements IPartialUser IEquatable < PartialUser > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialUser : IPartialUser, IEquatable<PartialUser> Constructors | Improve this Doc View Source PartialUser(Optional<Snowflake>, Optional<String>, Optional<UInt16>, Optional<IImageHash>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<IImageHash>, Optional<Nullable<Color>>, Optional<String>, Optional<Boolean>, Optional<String>, Optional<UserFlags>, Optional<PremiumType>, Optional<UserFlags>) Declaration public PartialUser(Optional<Snowflake> ID = default(Optional<Snowflake>), Optional<string> Username = default(Optional<string>), Optional<ushort> Discriminator = default(Optional<ushort>), Optional<IImageHash> Avatar = default(Optional<IImageHash>), Optional<bool> IsBot = default(Optional<bool>), Optional<bool> IsSystem = default(Optional<bool>), Optional<bool> IsMFAEnabled = default(Optional<bool>), Optional<IImageHash> Banner = default(Optional<IImageHash>), Optional<Color?> AccentColour = default(Optional<Color?>), Optional<string> Locale = default(Optional<string>), Optional<bool> IsVerified = default(Optional<bool>), Optional<string> Email = default(Optional<string>), Optional<UserFlags> Flags = default(Optional<UserFlags>), Optional<PremiumType> PremiumType = default(Optional<PremiumType>), Optional<UserFlags> PublicFlags = default(Optional<UserFlags>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < String > Username Remora.Rest.Core.Optional < UInt16 > Discriminator Remora.Rest.Core.Optional < IImageHash > Avatar Remora.Rest.Core.Optional < Boolean > IsBot Remora.Rest.Core.Optional < Boolean > IsSystem Remora.Rest.Core.Optional < Boolean > IsMFAEnabled Remora.Rest.Core.Optional < IImageHash > Banner Remora.Rest.Core.Optional < Nullable < Color >> AccentColour Remora.Rest.Core.Optional < String > Locale Remora.Rest.Core.Optional < Boolean > IsVerified Remora.Rest.Core.Optional < String > Email Remora.Rest.Core.Optional < UserFlags > Flags Remora.Rest.Core.Optional < PremiumType > PremiumType Remora.Rest.Core.Optional < UserFlags > PublicFlags Properties | Improve this Doc View Source AccentColour Declaration public Optional<Color?> AccentColour { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Color >> | Improve this Doc View Source Avatar Declaration public Optional<IImageHash> Avatar { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source Banner Declaration public Optional<IImageHash> Banner { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source Discriminator Declaration public Optional<ushort> Discriminator { get; set; } Property Value Type Description Remora.Rest.Core.Optional < UInt16 > | Improve this Doc View Source Email Declaration public Optional<string> Email { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Flags Declaration public Optional<UserFlags> Flags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < UserFlags > | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsBot Declaration public Optional<bool> IsBot { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMFAEnabled Declaration public Optional<bool> IsMFAEnabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSystem Declaration public Optional<bool> IsSystem { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsVerified Declaration public Optional<bool> IsVerified { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Locale Declaration public Optional<string> Locale { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source PremiumType Declaration public Optional<PremiumType> PremiumType { get; set; } Property Value Type Description Remora.Rest.Core.Optional < PremiumType > | Improve this Doc View Source PublicFlags Declaration public Optional<UserFlags> PublicFlags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < UserFlags > | Improve this Doc View Source Username Declaration public Optional<string> Username { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IPartialUser System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartialVoiceState.html": {
    "href": "api/Remora.Discord.API.Objects.PartialVoiceState.html",
    "title": "Class PartialVoiceState | Remora.Discord",
    "keywords": "Class PartialVoiceState Represents a user's partial voice connection status. Inheritance Object PartialVoiceState Implements IPartialVoiceState IEquatable < PartialVoiceState > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartialVoiceState : IPartialVoiceState, IEquatable<PartialVoiceState> Constructors | Improve this Doc View Source PartialVoiceState(Optional<Snowflake>, Optional<Nullable<Snowflake>>, Optional<Snowflake>, Optional<IGuildMember>, Optional<String>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<Nullable<DateTimeOffset>>) Declaration public PartialVoiceState(Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<Snowflake?> ChannelID = default(Optional<Snowflake?>), Optional<Snowflake> UserID = default(Optional<Snowflake>), Optional<IGuildMember> Member = default(Optional<IGuildMember>), Optional<string> SessionID = default(Optional<string>), Optional<bool> IsDeafened = default(Optional<bool>), Optional<bool> IsMuted = default(Optional<bool>), Optional<bool> IsSelfDeafened = default(Optional<bool>), Optional<bool> IsSelfMuted = default(Optional<bool>), Optional<bool> IsStreaming = default(Optional<bool>), Optional<bool> IsVideoEnabled = default(Optional<bool>), Optional<bool> IsSuppressed = default(Optional<bool>), Optional<DateTimeOffset?> RequestToSpeakTimestamp = default(Optional<DateTimeOffset?>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> ChannelID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > UserID Remora.Rest.Core.Optional < IGuildMember > Member Remora.Rest.Core.Optional < String > SessionID Remora.Rest.Core.Optional < Boolean > IsDeafened Remora.Rest.Core.Optional < Boolean > IsMuted Remora.Rest.Core.Optional < Boolean > IsSelfDeafened Remora.Rest.Core.Optional < Boolean > IsSelfMuted Remora.Rest.Core.Optional < Boolean > IsStreaming Remora.Rest.Core.Optional < Boolean > IsVideoEnabled Remora.Rest.Core.Optional < Boolean > IsSuppressed Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> RequestToSpeakTimestamp Properties | Improve this Doc View Source ChannelID Declaration public Optional<Snowflake?> ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsDeafened Declaration public Optional<bool> IsDeafened { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMuted Declaration public Optional<bool> IsMuted { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSelfDeafened Declaration public Optional<bool> IsSelfDeafened { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSelfMuted Declaration public Optional<bool> IsSelfMuted { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsStreaming Declaration public Optional<bool> IsStreaming { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSuppressed Declaration public Optional<bool> IsSuppressed { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsVideoEnabled Declaration public Optional<bool> IsVideoEnabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Member Declaration public Optional<IGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source RequestToSpeakTimestamp Declaration public Optional<DateTimeOffset?> RequestToSpeakTimestamp { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source SessionID Declaration public Optional<string> SessionID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source UserID Declaration public Optional<Snowflake> UserID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > Implements IPartialVoiceState System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PartySize.html": {
    "href": "api/Remora.Discord.API.Objects.PartySize.html",
    "title": "Class PartySize | Remora.Discord",
    "keywords": "Class PartySize Represents a party size object. Inheritance Object PartySize Implements IPartySize IEquatable < PartySize > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PartySize : IPartySize, IEquatable<PartySize> Constructors | Improve this Doc View Source PartySize(Int32, Int32) Declaration public PartySize(int CurrentSize, int MaxSize) Parameters Type Name Description Int32 CurrentSize Int32 MaxSize Properties | Improve this Doc View Source CurrentSize Declaration public int CurrentSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MaxSize Declaration public int MaxSize { get; set; } Property Value Type Description Int32 Implements IPartySize System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PermissionOverwrite.html": {
    "href": "api/Remora.Discord.API.Objects.PermissionOverwrite.html",
    "title": "Class PermissionOverwrite | Remora.Discord",
    "keywords": "Class PermissionOverwrite Represents a channel- or category-specific permission overwrite. Inheritance Object PermissionOverwrite Implements IPermissionOverwrite IPartialPermissionOverwrite IEquatable < PermissionOverwrite > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PermissionOverwrite : IPermissionOverwrite, IPartialPermissionOverwrite, IEquatable<PermissionOverwrite> Constructors | Improve this Doc View Source PermissionOverwrite(Snowflake, PermissionOverwriteType, IDiscordPermissionSet, IDiscordPermissionSet) Declaration public PermissionOverwrite(Snowflake ID, PermissionOverwriteType Type, IDiscordPermissionSet Allow, IDiscordPermissionSet Deny) Parameters Type Name Description Remora.Rest.Core.Snowflake ID PermissionOverwriteType Type IDiscordPermissionSet Allow IDiscordPermissionSet Deny Properties | Improve this Doc View Source Allow Declaration public IDiscordPermissionSet Allow { get; set; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Deny Declaration public IDiscordPermissionSet Deny { get; set; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Type Declaration public PermissionOverwriteType Type { get; set; } Property Value Type Description PermissionOverwriteType Implements IPermissionOverwrite IPartialPermissionOverwrite System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PermissionOverwriteTemplate.html": {
    "href": "api/Remora.Discord.API.Objects.PermissionOverwriteTemplate.html",
    "title": "Class PermissionOverwriteTemplate | Remora.Discord",
    "keywords": "Class PermissionOverwriteTemplate Represents a channel- or category-specific permission overwrite. Inheritance Object PermissionOverwriteTemplate Implements IPermissionOverwriteTemplate IEquatable < PermissionOverwriteTemplate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PermissionOverwriteTemplate : IPermissionOverwriteTemplate, IEquatable<PermissionOverwriteTemplate> Constructors | Improve this Doc View Source PermissionOverwriteTemplate(Int32, PermissionOverwriteType, IDiscordPermissionSet, IDiscordPermissionSet) Declaration public PermissionOverwriteTemplate(int ID, PermissionOverwriteType Type, IDiscordPermissionSet Allow, IDiscordPermissionSet Deny) Parameters Type Name Description Int32 ID PermissionOverwriteType Type IDiscordPermissionSet Allow IDiscordPermissionSet Deny Properties | Improve this Doc View Source Allow Declaration public IDiscordPermissionSet Allow { get; set; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Deny Declaration public IDiscordPermissionSet Deny { get; set; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source ID Declaration public int ID { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Type Declaration public PermissionOverwriteType Type { get; set; } Property Value Type Description PermissionOverwriteType Implements IPermissionOverwriteTemplate System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Presence.html": {
    "href": "api/Remora.Discord.API.Objects.Presence.html",
    "title": "Class Presence | Remora.Discord",
    "keywords": "Class Presence Represents a user's presence. Inheritance Object Presence PresenceUpdate Implements IPresence IPartialPresence IEquatable < Presence > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Presence : IPresence, IPartialPresence, IEquatable<Presence> Constructors | Improve this Doc View Source Presence(IPartialUser, Snowflake, ClientStatus, IReadOnlyList<IActivity>, IClientStatuses) Declaration public Presence(IPartialUser User, Snowflake GuildID, ClientStatus Status, IReadOnlyList<IActivity> Activities, IClientStatuses ClientStatus) Parameters Type Name Description IPartialUser User Remora.Rest.Core.Snowflake GuildID ClientStatus Status IReadOnlyList < IActivity > Activities IClientStatuses ClientStatus Properties | Improve this Doc View Source Activities Declaration public IReadOnlyList<IActivity> Activities { get; set; } Property Value Type Description IReadOnlyList < IActivity > | Improve this Doc View Source ClientStatus Declaration public IClientStatuses ClientStatus { get; set; } Property Value Type Description IClientStatuses | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Status Declaration public ClientStatus Status { get; set; } Property Value Type Description ClientStatus | Improve this Doc View Source User Declaration public IPartialUser User { get; set; } Property Value Type Description IPartialUser Implements IPresence IPartialPresence System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PropertyErrorDetails.html": {
    "href": "api/Remora.Discord.API.Objects.PropertyErrorDetails.html",
    "title": "Class PropertyErrorDetails | Remora.Discord",
    "keywords": "Class PropertyErrorDetails Represents detailed information about errors in a property from Discord. Inheritance Object PropertyErrorDetails Implements IPropertyErrorDetails IEquatable < PropertyErrorDetails > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PropertyErrorDetails : IPropertyErrorDetails, IEquatable<PropertyErrorDetails> Constructors | Improve this Doc View Source PropertyErrorDetails(IReadOnlyDictionary<String, IPropertyErrorDetails>, IReadOnlyList<IErrorDetails>) Declaration public PropertyErrorDetails(IReadOnlyDictionary<string, IPropertyErrorDetails> MemberErrors = null, IReadOnlyList<IErrorDetails> Errors = null) Parameters Type Name Description IReadOnlyDictionary < String , IPropertyErrorDetails > MemberErrors IReadOnlyList < IErrorDetails > Errors Properties | Improve this Doc View Source Errors Declaration public IReadOnlyList<IErrorDetails> Errors { get; set; } Property Value Type Description IReadOnlyList < IErrorDetails > | Improve this Doc View Source MemberErrors Declaration public IReadOnlyDictionary<string, IPropertyErrorDetails> MemberErrors { get; set; } Property Value Type Description IReadOnlyDictionary < String , IPropertyErrorDetails > Implements IPropertyErrorDetails System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.PruneCount.html": {
    "href": "api/Remora.Discord.API.Objects.PruneCount.html",
    "title": "Class PruneCount | Remora.Discord",
    "keywords": "Class PruneCount Represents a count of members that would be pruned in a prune operation. Inheritance Object PruneCount Implements IPruneCount IEquatable < PruneCount > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class PruneCount : IPruneCount, IEquatable<PruneCount> Constructors | Improve this Doc View Source PruneCount(Nullable<Int32>) Declaration public PruneCount(int? Pruned) Parameters Type Name Description Nullable < Int32 > Pruned Properties | Improve this Doc View Source Pruned Declaration public int? Pruned { get; set; } Property Value Type Description Nullable < Int32 > Implements IPruneCount System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Reaction.html": {
    "href": "api/Remora.Discord.API.Objects.Reaction.html",
    "title": "Class Reaction | Remora.Discord",
    "keywords": "Class Reaction Represents a reaction to a message. Inheritance Object Reaction Implements IReaction IEquatable < Reaction > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Reaction : IReaction, IEquatable<Reaction> Constructors | Improve this Doc View Source Reaction(Int32, Boolean, IPartialEmoji) Declaration public Reaction(int Count, bool HasCurrentUserReacted, IPartialEmoji Emoji) Parameters Type Name Description Int32 Count Boolean HasCurrentUserReacted IPartialEmoji Emoji Properties | Improve this Doc View Source Count Declaration public int Count { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Emoji Declaration public IPartialEmoji Emoji { get; set; } Property Value Type Description IPartialEmoji | Improve this Doc View Source HasCurrentUserReacted Declaration public bool HasCurrentUserReacted { get; set; } Property Value Type Description Boolean Implements IReaction System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.RestError.html": {
    "href": "api/Remora.Discord.API.Objects.RestError.html",
    "title": "Class RestError | Remora.Discord",
    "keywords": "Class RestError Represents an error reported by the REST API. Inheritance Object RestError Implements IRestError IEquatable < RestError > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class RestError : IRestError, IEquatable<RestError> Constructors | Improve this Doc View Source RestError(DiscordError, Optional<IReadOnlyDictionary<String, OneOf<IPropertyErrorDetails, IReadOnlyList<IErrorDetails>>>>, String) Declaration public RestError(DiscordError Code, Optional<IReadOnlyDictionary<string, OneOf<IPropertyErrorDetails, IReadOnlyList<IErrorDetails>>>> Errors, string Message) Parameters Type Name Description DiscordError Code Remora.Rest.Core.Optional < IReadOnlyDictionary < String , OneOf.OneOf < IPropertyErrorDetails , IReadOnlyList < IErrorDetails >>>> Errors String Message Properties | Improve this Doc View Source Code Declaration public DiscordError Code { get; set; } Property Value Type Description DiscordError | Improve this Doc View Source Errors Declaration public Optional<IReadOnlyDictionary<string, OneOf<IPropertyErrorDetails, IReadOnlyList<IErrorDetails>>>> Errors { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyDictionary < String , OneOf.OneOf < IPropertyErrorDetails , IReadOnlyList < IErrorDetails >>>> | Improve this Doc View Source Message Declaration public string Message { get; set; } Property Value Type Description String Implements IRestError System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Role.html": {
    "href": "api/Remora.Discord.API.Objects.Role.html",
    "title": "Class Role | Remora.Discord",
    "keywords": "Class Role Represents a Discord role. Inheritance Object Role Implements IRole IPartialRole IEquatable < Role > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Role : IRole, IPartialRole, IEquatable<Role> Constructors | Improve this Doc View Source Role(Snowflake, String, Color, Boolean, Optional<IImageHash>, Optional<String>, Int32, IDiscordPermissionSet, Boolean, Boolean, Optional<IRoleTags>) Declaration public Role(Snowflake ID, string Name, Color Colour, bool IsHoisted, Optional<IImageHash> Icon, Optional<string> UnicodeEmoji, int Position, IDiscordPermissionSet Permissions, bool IsManaged, bool IsMentionable, Optional<IRoleTags> Tags = default(Optional<IRoleTags>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name Color Colour Boolean IsHoisted Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < String > UnicodeEmoji Int32 Position IDiscordPermissionSet Permissions Boolean IsManaged Boolean IsMentionable Remora.Rest.Core.Optional < IRoleTags > Tags Properties | Improve this Doc View Source Colour Declaration public Color Colour { get; set; } Property Value Type Description Color | Improve this Doc View Source Icon Declaration public Optional<IImageHash> Icon { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsHoisted Declaration public bool IsHoisted { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsManaged Declaration public bool IsManaged { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsMentionable Declaration public bool IsMentionable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Permissions Declaration public IDiscordPermissionSet Permissions { get; set; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Position Declaration public int Position { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Tags Declaration public Optional<IRoleTags> Tags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IRoleTags > | Improve this Doc View Source UnicodeEmoji Declaration public Optional<string> UnicodeEmoji { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IRole IPartialRole System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.RoleTags.html": {
    "href": "api/Remora.Discord.API.Objects.RoleTags.html",
    "title": "Class RoleTags | Remora.Discord",
    "keywords": "Class RoleTags Represents a set of role tags. Inheritance Object RoleTags Implements IRoleTags IEquatable < RoleTags > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class RoleTags : IRoleTags, IEquatable<RoleTags> Constructors | Improve this Doc View Source RoleTags(Optional<Snowflake>, Optional<Snowflake>, Optional<Nullable<Boolean>>) Declaration public RoleTags(Optional<Snowflake> BotID = default(Optional<Snowflake>), Optional<Snowflake> IntegrationID = default(Optional<Snowflake>), Optional<bool?> IsPremiumSubscriberRole = default(Optional<bool?>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > BotID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > IntegrationID Remora.Rest.Core.Optional < Nullable < Boolean >> IsPremiumSubscriberRole Properties | Improve this Doc View Source BotID Declaration public Optional<Snowflake> BotID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IntegrationID Declaration public Optional<Snowflake> IntegrationID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsPremiumSubscriberRole Declaration public Optional<bool?> IsPremiumSubscriberRole { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Boolean >> Implements IRoleTags System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.RoleTemplate.html": {
    "href": "api/Remora.Discord.API.Objects.RoleTemplate.html",
    "title": "Class RoleTemplate | Remora.Discord",
    "keywords": "Class RoleTemplate Represents a Discord role. Inheritance Object RoleTemplate Implements IRoleTemplate IEquatable < RoleTemplate > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class RoleTemplate : IRoleTemplate, IEquatable<RoleTemplate> Constructors | Improve this Doc View Source RoleTemplate(Int32, String, Color, Boolean, Optional<IImageHash>, Optional<String>, Int32, IDiscordPermissionSet, Boolean, Optional<IRoleTags>) Declaration public RoleTemplate(int ID, string Name, Color Colour, bool IsHoisted, Optional<IImageHash> Icon, Optional<string> UnicodeEmoji, int Position, IDiscordPermissionSet Permissions, bool IsMentionable, Optional<IRoleTags> Tags) Parameters Type Name Description Int32 ID String Name Color Colour Boolean IsHoisted Remora.Rest.Core.Optional < IImageHash > Icon Remora.Rest.Core.Optional < String > UnicodeEmoji Int32 Position IDiscordPermissionSet Permissions Boolean IsMentionable Remora.Rest.Core.Optional < IRoleTags > Tags Properties | Improve this Doc View Source Colour Declaration public Color Colour { get; set; } Property Value Type Description Color | Improve this Doc View Source Icon Declaration public Optional<IImageHash> Icon { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source ID Declaration public int ID { get; set; } Property Value Type Description Int32 | Improve this Doc View Source IsHoisted Declaration public bool IsHoisted { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsMentionable Declaration public bool IsMentionable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Permissions Declaration public IDiscordPermissionSet Permissions { get; set; } Property Value Type Description IDiscordPermissionSet | Improve this Doc View Source Position Declaration public int Position { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Tags Declaration public Optional<IRoleTags> Tags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IRoleTags > | Improve this Doc View Source UnicodeEmoji Declaration public Optional<string> UnicodeEmoji { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements IRoleTemplate System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.SelectMenuComponent.html": {
    "href": "api/Remora.Discord.API.Objects.SelectMenuComponent.html",
    "title": "Class SelectMenuComponent | Remora.Discord",
    "keywords": "Class SelectMenuComponent Represents a dropdown of selectable values. Inheritance Object SelectMenuComponent Implements ISelectMenuComponent IMessageComponent IPartialSelectMenuComponent IPartialMessageComponent IEquatable < SelectMenuComponent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class SelectMenuComponent : ISelectMenuComponent, IMessageComponent, IPartialSelectMenuComponent, IPartialMessageComponent, IEquatable<SelectMenuComponent> Constructors | Improve this Doc View Source SelectMenuComponent(String, IReadOnlyList<ISelectOption>, Optional<String>, Optional<Int32>, Optional<Int32>, Optional<Boolean>) Declaration public SelectMenuComponent(string CustomID, IReadOnlyList<ISelectOption> Options, Optional<string> Placeholder = default(Optional<string>), Optional<int> MinValues = default(Optional<int>), Optional<int> MaxValues = default(Optional<int>), Optional<bool> IsDisabled = default(Optional<bool>)) Parameters Type Name Description String CustomID IReadOnlyList < ISelectOption > Options Remora.Rest.Core.Optional < String > Placeholder Remora.Rest.Core.Optional < Int32 > MinValues Remora.Rest.Core.Optional < Int32 > MaxValues Remora.Rest.Core.Optional < Boolean > IsDisabled Properties | Improve this Doc View Source CustomID Declaration public string CustomID { get; set; } Property Value Type Description String | Improve this Doc View Source IsDisabled Declaration public Optional<bool> IsDisabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MaxValues Declaration public Optional<int> MaxValues { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MinValues Declaration public Optional<int> MinValues { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Options Declaration public IReadOnlyList<ISelectOption> Options { get; set; } Property Value Type Description IReadOnlyList < ISelectOption > | Improve this Doc View Source Placeholder Declaration public Optional<string> Placeholder { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Gets the type of the component. Declaration public ComponentType Type { get; } Property Value Type Description ComponentType Implements ISelectMenuComponent IMessageComponent IPartialSelectMenuComponent IPartialMessageComponent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.SelectOption.html": {
    "href": "api/Remora.Discord.API.Objects.SelectOption.html",
    "title": "Class SelectOption | Remora.Discord",
    "keywords": "Class SelectOption Represents a single selectable option. Inheritance Object SelectOption Implements ISelectOption IPartialSelectOption IEquatable < SelectOption > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class SelectOption : ISelectOption, IPartialSelectOption, IEquatable<SelectOption> Constructors | Improve this Doc View Source SelectOption(String, String, Optional<String>, Optional<IPartialEmoji>, Optional<Boolean>) Declaration public SelectOption(string Label, string Value, Optional<string> Description = default(Optional<string>), Optional<IPartialEmoji> Emoji = default(Optional<IPartialEmoji>), Optional<bool> IsDefault = default(Optional<bool>)) Parameters Type Name Description String Label String Value Remora.Rest.Core.Optional < String > Description Remora.Rest.Core.Optional < IPartialEmoji > Emoji Remora.Rest.Core.Optional < Boolean > IsDefault Properties | Improve this Doc View Source Description Declaration public Optional<string> Description { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Emoji Declaration public Optional<IPartialEmoji> Emoji { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialEmoji > | Improve this Doc View Source IsDefault Declaration public Optional<bool> IsDefault { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Declaration public string Label { get; set; } Property Value Type Description String | Improve this Doc View Source Value Declaration public string Value { get; set; } Property Value Type Description String Implements ISelectOption IPartialSelectOption System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.SessionStartLimit.html": {
    "href": "api/Remora.Discord.API.Objects.SessionStartLimit.html",
    "title": "Class SessionStartLimit | Remora.Discord",
    "keywords": "Class SessionStartLimit Represents information about session start limits. Inheritance Object SessionStartLimit Implements ISessionStartLimit IEquatable < SessionStartLimit > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class SessionStartLimit : ISessionStartLimit, IEquatable<SessionStartLimit> Constructors | Improve this Doc View Source SessionStartLimit(Int32, Int32, TimeSpan, Int32) Declaration public SessionStartLimit(int Total, int Remaining, TimeSpan ResetAfter, int MaxConcurrency) Parameters Type Name Description Int32 Total Int32 Remaining TimeSpan ResetAfter Int32 MaxConcurrency Properties | Improve this Doc View Source MaxConcurrency Declaration public int MaxConcurrency { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Remaining Declaration public int Remaining { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ResetAfter Declaration public TimeSpan ResetAfter { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source Total Declaration public int Total { get; set; } Property Value Type Description Int32 Implements ISessionStartLimit System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.StageInstance.html": {
    "href": "api/Remora.Discord.API.Objects.StageInstance.html",
    "title": "Class StageInstance | Remora.Discord",
    "keywords": "Class StageInstance Represents information about a live stage. Inheritance Object StageInstance StageInstanceCreate StageInstanceDelete StageInstanceUpdate Implements IStageInstance IEquatable < StageInstance > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class StageInstance : IStageInstance, IEquatable<StageInstance> Constructors | Improve this Doc View Source StageInstance(Snowflake, Snowflake, Snowflake, String, StagePrivacyLevel, Boolean, Nullable<Snowflake>) Declaration public StageInstance(Snowflake ID, Snowflake GuildID, Snowflake ChannelID, string Topic, StagePrivacyLevel PrivacyLevel, bool IsDiscoveryDisabled, Snowflake? GuildScheduledEventID) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake GuildID Remora.Rest.Core.Snowflake ChannelID String Topic StagePrivacyLevel PrivacyLevel Boolean IsDiscoveryDisabled Nullable < Remora.Rest.Core.Snowflake > GuildScheduledEventID Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Declaration public Snowflake GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildScheduledEventID Declaration public Snowflake? GuildScheduledEventID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsDiscoveryDisabled Declaration public bool IsDiscoveryDisabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source PrivacyLevel Declaration public StagePrivacyLevel PrivacyLevel { get; set; } Property Value Type Description StagePrivacyLevel | Improve this Doc View Source Topic Declaration public string Topic { get; set; } Property Value Type Description String Implements IStageInstance System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Sticker.html": {
    "href": "api/Remora.Discord.API.Objects.Sticker.html",
    "title": "Class Sticker | Remora.Discord",
    "keywords": "Class Sticker Represents a sticker. Inheritance Object Sticker Implements ISticker IEquatable < Sticker > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Sticker : ISticker, IEquatable<Sticker> Constructors | Improve this Doc View Source Sticker(Snowflake, Optional<Snowflake>, String, String, String, StickerType, StickerFormatType, Optional<Boolean>, Optional<Snowflake>, Optional<IUser>, Optional<Int32>) Declaration public Sticker(Snowflake ID, Optional<Snowflake> PackID, string Name, string Description, string Tags, StickerType Type, StickerFormatType FormatType, Optional<bool> IsAvailable = default(Optional<bool>), Optional<Snowflake> GuildID = default(Optional<Snowflake>), Optional<IUser> User = default(Optional<IUser>), Optional<int> SortValue = default(Optional<int>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > PackID String Name String Description String Tags StickerType Type StickerFormatType FormatType Remora.Rest.Core.Optional < Boolean > IsAvailable Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Optional < IUser > User Remora.Rest.Core.Optional < Int32 > SortValue Properties | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source FormatType Declaration public StickerFormatType FormatType { get; set; } Property Value Type Description StickerFormatType | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsAvailable Declaration public Optional<bool> IsAvailable { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source PackID Declaration public Optional<Snowflake> PackID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source SortValue Declaration public Optional<int> SortValue { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Tags Declaration public string Tags { get; set; } Property Value Type Description String | Improve this Doc View Source Type Declaration public StickerType Type { get; set; } Property Value Type Description StickerType | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Implements ISticker System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.StickerItem.html": {
    "href": "api/Remora.Discord.API.Objects.StickerItem.html",
    "title": "Class StickerItem | Remora.Discord",
    "keywords": "Class StickerItem Represents a sticker in a message. Inheritance Object StickerItem Implements IStickerItem IEquatable < StickerItem > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class StickerItem : IStickerItem, IEquatable<StickerItem> Constructors | Improve this Doc View Source StickerItem(Snowflake, String, StickerFormatType) Declaration public StickerItem(Snowflake ID, string Name, StickerFormatType FormatType) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Name StickerFormatType FormatType Properties | Improve this Doc View Source FormatType Declaration public StickerFormatType FormatType { get; set; } Property Value Type Description StickerFormatType | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String Implements IStickerItem System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.StickerPack.html": {
    "href": "api/Remora.Discord.API.Objects.StickerPack.html",
    "title": "Class StickerPack | Remora.Discord",
    "keywords": "Class StickerPack Represents a pack of stickers. Inheritance Object StickerPack Implements IStickerPack IEquatable < StickerPack > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class StickerPack : IStickerPack, IEquatable<StickerPack> Constructors | Improve this Doc View Source StickerPack(Snowflake, IReadOnlyList<ISticker>, String, Snowflake, Optional<Snowflake>, String, Optional<Snowflake>) Declaration public StickerPack(Snowflake ID, IReadOnlyList<ISticker> Stickers, string Name, Snowflake SKUID, Optional<Snowflake> CoverStickerID, string Description, Optional<Snowflake> BannerAssetID) Parameters Type Name Description Remora.Rest.Core.Snowflake ID IReadOnlyList < ISticker > Stickers String Name Remora.Rest.Core.Snowflake SKUID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > CoverStickerID String Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > BannerAssetID Properties | Improve this Doc View Source BannerAssetID Declaration public Optional<Snowflake> BannerAssetID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source CoverStickerID Declaration public Optional<Snowflake> CoverStickerID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source SKUID Declaration public Snowflake SKUID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Stickers Declaration public IReadOnlyList<ISticker> Stickers { get; set; } Property Value Type Description IReadOnlyList < ISticker > Implements IStickerPack System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Team.html": {
    "href": "api/Remora.Discord.API.Objects.Team.html",
    "title": "Class Team | Remora.Discord",
    "keywords": "Class Team Represents a developer team on Discord. Inheritance Object Team Implements ITeam IEquatable < Team > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Team : ITeam, IEquatable<Team> Constructors | Improve this Doc View Source Team(IImageHash, Snowflake, IReadOnlyList<ITeamMember>, String, Snowflake) Declaration public Team(IImageHash Icon, Snowflake ID, IReadOnlyList<ITeamMember> Members, string Name, Snowflake OwnerUserID) Parameters Type Name Description IImageHash Icon Remora.Rest.Core.Snowflake ID IReadOnlyList < ITeamMember > Members String Name Remora.Rest.Core.Snowflake OwnerUserID Properties | Improve this Doc View Source Icon Declaration public IImageHash Icon { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Members Declaration public IReadOnlyList<ITeamMember> Members { get; set; } Property Value Type Description IReadOnlyList < ITeamMember > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source OwnerUserID Declaration public Snowflake OwnerUserID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements ITeam System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.TeamMember.html": {
    "href": "api/Remora.Discord.API.Objects.TeamMember.html",
    "title": "Class TeamMember | Remora.Discord",
    "keywords": "Class TeamMember Represents a Discord developer team member. Inheritance Object TeamMember Implements ITeamMember IEquatable < TeamMember > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class TeamMember : ITeamMember, IEquatable<TeamMember> Constructors | Improve this Doc View Source TeamMember(MembershipState, IReadOnlyList<String>, Snowflake, IPartialUser) Declaration public TeamMember(MembershipState MembershipState, IReadOnlyList<string> Permissions, Snowflake TeamID, IPartialUser User) Parameters Type Name Description MembershipState MembershipState IReadOnlyList < String > Permissions Remora.Rest.Core.Snowflake TeamID IPartialUser User Properties | Improve this Doc View Source MembershipState Declaration public MembershipState MembershipState { get; set; } Property Value Type Description MembershipState | Improve this Doc View Source Permissions Declaration public IReadOnlyList<string> Permissions { get; set; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source TeamID Declaration public Snowflake TeamID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source User Declaration public IPartialUser User { get; set; } Property Value Type Description IPartialUser Implements ITeamMember System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Template.html": {
    "href": "api/Remora.Discord.API.Objects.Template.html",
    "title": "Class Template | Remora.Discord",
    "keywords": "Class Template Represents a guild template. Inheritance Object Template Implements ITemplate IEquatable < Template > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Template : ITemplate, IEquatable<Template> Constructors | Improve this Doc View Source Template(String, String, String, Int32, Snowflake, IUser, DateTimeOffset, DateTimeOffset, Snowflake, IGuildTemplate, Nullable<Boolean>) Declaration public Template(string Code, string Name, string Description, int UsageCount, Snowflake CreatorID, IUser Creator, DateTimeOffset CreatedAt, DateTimeOffset UpdatedAt, Snowflake SourceGuildID, IGuildTemplate SerializedSourceGuild, bool? IsDirty) Parameters Type Name Description String Code String Name String Description Int32 UsageCount Remora.Rest.Core.Snowflake CreatorID IUser Creator DateTimeOffset CreatedAt DateTimeOffset UpdatedAt Remora.Rest.Core.Snowflake SourceGuildID IGuildTemplate SerializedSourceGuild Nullable < Boolean > IsDirty Properties | Improve this Doc View Source Code Declaration public string Code { get; set; } Property Value Type Description String | Improve this Doc View Source CreatedAt Declaration public DateTimeOffset CreatedAt { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Creator Declaration public IUser Creator { get; set; } Property Value Type Description IUser | Improve this Doc View Source CreatorID Declaration public Snowflake CreatorID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source IsDirty Declaration public bool? IsDirty { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source SerializedSourceGuild Declaration public IGuildTemplate SerializedSourceGuild { get; set; } Property Value Type Description IGuildTemplate | Improve this Doc View Source SourceGuildID Declaration public Snowflake SourceGuildID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source UpdatedAt Declaration public DateTimeOffset UpdatedAt { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source UsageCount Declaration public int UsageCount { get; set; } Property Value Type Description Int32 Implements ITemplate System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.TextInputComponent.html": {
    "href": "api/Remora.Discord.API.Objects.TextInputComponent.html",
    "title": "Class TextInputComponent | Remora.Discord",
    "keywords": "Class TextInputComponent Represents a text-based input component. Inheritance Object TextInputComponent Implements ITextInputComponent IMessageComponent IPartialTextInputComponent IPartialMessageComponent IEquatable < TextInputComponent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class TextInputComponent : ITextInputComponent, IMessageComponent, IPartialTextInputComponent, IPartialMessageComponent, IEquatable<TextInputComponent> Constructors | Improve this Doc View Source TextInputComponent(String, TextInputStyle, String, Optional<Int32>, Optional<Int32>, Optional<Boolean>, Optional<String>, Optional<String>) Declaration public TextInputComponent(string CustomID, TextInputStyle Style, string Label, Optional<int> MinLength, Optional<int> MaxLength, Optional<bool> IsRequired, Optional<string> Value, Optional<string> Placeholder) Parameters Type Name Description String CustomID TextInputStyle Style String Label Remora.Rest.Core.Optional < Int32 > MinLength Remora.Rest.Core.Optional < Int32 > MaxLength Remora.Rest.Core.Optional < Boolean > IsRequired Remora.Rest.Core.Optional < String > Value Remora.Rest.Core.Optional < String > Placeholder Properties | Improve this Doc View Source CustomID Declaration public string CustomID { get; set; } Property Value Type Description String | Improve this Doc View Source IsRequired Declaration public Optional<bool> IsRequired { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Label Declaration public string Label { get; set; } Property Value Type Description String | Improve this Doc View Source MaxLength Declaration public Optional<int> MaxLength { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source MinLength Declaration public Optional<int> MinLength { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Int32 > | Improve this Doc View Source Placeholder Declaration public Optional<string> Placeholder { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Style Declaration public TextInputStyle Style { get; set; } Property Value Type Description TextInputStyle | Improve this Doc View Source Type Gets the type of the component. Declaration public ComponentType Type { get; } Property Value Type Description ComponentType | Improve this Doc View Source Value Declaration public Optional<string> Value { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > Implements ITextInputComponent IMessageComponent IPartialTextInputComponent IPartialMessageComponent System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ThreadMember.html": {
    "href": "api/Remora.Discord.API.Objects.ThreadMember.html",
    "title": "Class ThreadMember | Remora.Discord",
    "keywords": "Class ThreadMember Represents a thread member. Inheritance Object ThreadMember ThreadMemberUpdate Implements IThreadMember IEquatable < ThreadMember > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ThreadMember : IThreadMember, IEquatable<ThreadMember> Constructors | Improve this Doc View Source ThreadMember(Optional<Snowflake>, Optional<Snowflake>, DateTimeOffset, ThreadMemberFlags, Optional<IGuildMember>, Optional<IPartialPresence>) Declaration public ThreadMember(Optional<Snowflake> ID, Optional<Snowflake> UserID, DateTimeOffset JoinTimestamp, ThreadMemberFlags Flags, Optional<IGuildMember> Member = default(Optional<IGuildMember>), Optional<IPartialPresence> Presence = default(Optional<IPartialPresence>)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ID Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > UserID DateTimeOffset JoinTimestamp ThreadMemberFlags Flags Remora.Rest.Core.Optional < IGuildMember > Member Remora.Rest.Core.Optional < IPartialPresence > Presence Properties | Improve this Doc View Source Flags Declaration public ThreadMemberFlags Flags { get; set; } Property Value Type Description ThreadMemberFlags | Improve this Doc View Source ID Declaration public Optional<Snowflake> ID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source JoinTimestamp Declaration public DateTimeOffset JoinTimestamp { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Member Declaration public Optional<IGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source Presence Declaration public Optional<IPartialPresence> Presence { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialPresence > | Improve this Doc View Source UserID Declaration public Optional<Snowflake> UserID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > Implements IThreadMember System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.ThreadMetadata.html": {
    "href": "api/Remora.Discord.API.Objects.ThreadMetadata.html",
    "title": "Class ThreadMetadata | Remora.Discord",
    "keywords": "Class ThreadMetadata Represents metadata information for a thread channel. Inheritance Object ThreadMetadata Implements IThreadMetadata IEquatable < ThreadMetadata > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class ThreadMetadata : IThreadMetadata, IEquatable<ThreadMetadata> Constructors | Improve this Doc View Source ThreadMetadata(Boolean, AutoArchiveDuration, DateTimeOffset, Boolean, Optional<Boolean>, Optional<Nullable<DateTimeOffset>>) Declaration public ThreadMetadata(bool IsArchived, AutoArchiveDuration AutoArchiveDuration, DateTimeOffset ArchiveTimestamp, bool IsLocked, Optional<bool> IsInvitable, Optional<DateTimeOffset?> CreateTimestamp) Parameters Type Name Description Boolean IsArchived AutoArchiveDuration AutoArchiveDuration DateTimeOffset ArchiveTimestamp Boolean IsLocked Remora.Rest.Core.Optional < Boolean > IsInvitable Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> CreateTimestamp Properties | Improve this Doc View Source ArchiveTimestamp Declaration public DateTimeOffset ArchiveTimestamp { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source AutoArchiveDuration Declaration public AutoArchiveDuration AutoArchiveDuration { get; set; } Property Value Type Description AutoArchiveDuration | Improve this Doc View Source CreateTimestamp Declaration public Optional<DateTimeOffset?> CreateTimestamp { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> | Improve this Doc View Source IsArchived Declaration public bool IsArchived { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsInvitable Declaration public Optional<bool> IsInvitable { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsLocked Declaration public bool IsLocked { get; set; } Property Value Type Description Boolean Implements IThreadMetadata System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.UnavailableGuild.html": {
    "href": "api/Remora.Discord.API.Objects.UnavailableGuild.html",
    "title": "Class UnavailableGuild | Remora.Discord",
    "keywords": "Class UnavailableGuild Represents an unavailable guild. Inheritance Object UnavailableGuild GuildDelete Implements IUnavailableGuild IEquatable < UnavailableGuild > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class UnavailableGuild : IUnavailableGuild, IEquatable<UnavailableGuild> Constructors | Improve this Doc View Source UnavailableGuild(Snowflake, Optional<Boolean>) Declaration public UnavailableGuild(Snowflake ID, Optional<bool> IsUnavailable = default(Optional<bool>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Optional < Boolean > IsUnavailable Properties | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsUnavailable Declaration public Optional<bool> IsUnavailable { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > Implements IUnavailableGuild System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.User.html": {
    "href": "api/Remora.Discord.API.Objects.User.html",
    "title": "Class User | Remora.Discord",
    "keywords": "Class User Represents a Discord user. Inheritance Object User UserUpdate UserMention Implements IUser IPartialUser IEquatable < User > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class User : IUser, IPartialUser, IEquatable<User> Constructors | Improve this Doc View Source User(Snowflake, String, UInt16, IImageHash, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<IImageHash>, Optional<Nullable<Color>>, Optional<String>, Optional<Boolean>, Optional<String>, Optional<UserFlags>, Optional<PremiumType>, Optional<UserFlags>) Declaration public User(Snowflake ID, string Username, ushort Discriminator, IImageHash Avatar, Optional<bool> IsBot = default(Optional<bool>), Optional<bool> IsSystem = default(Optional<bool>), Optional<bool> IsMFAEnabled = default(Optional<bool>), Optional<IImageHash> Banner = default(Optional<IImageHash>), Optional<Color?> AccentColour = default(Optional<Color?>), Optional<string> Locale = default(Optional<string>), Optional<bool> IsVerified = default(Optional<bool>), Optional<string> Email = default(Optional<string>), Optional<UserFlags> Flags = default(Optional<UserFlags>), Optional<PremiumType> PremiumType = default(Optional<PremiumType>), Optional<UserFlags> PublicFlags = default(Optional<UserFlags>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Username UInt16 Discriminator IImageHash Avatar Remora.Rest.Core.Optional < Boolean > IsBot Remora.Rest.Core.Optional < Boolean > IsSystem Remora.Rest.Core.Optional < Boolean > IsMFAEnabled Remora.Rest.Core.Optional < IImageHash > Banner Remora.Rest.Core.Optional < Nullable < Color >> AccentColour Remora.Rest.Core.Optional < String > Locale Remora.Rest.Core.Optional < Boolean > IsVerified Remora.Rest.Core.Optional < String > Email Remora.Rest.Core.Optional < UserFlags > Flags Remora.Rest.Core.Optional < PremiumType > PremiumType Remora.Rest.Core.Optional < UserFlags > PublicFlags Properties | Improve this Doc View Source AccentColour Declaration public Optional<Color?> AccentColour { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Color >> | Improve this Doc View Source Avatar Declaration public IImageHash Avatar { get; set; } Property Value Type Description IImageHash | Improve this Doc View Source Banner Declaration public Optional<IImageHash> Banner { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IImageHash > | Improve this Doc View Source Discriminator Declaration public ushort Discriminator { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Email Declaration public Optional<string> Email { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Flags Declaration public Optional<UserFlags> Flags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < UserFlags > | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source IsBot Declaration public Optional<bool> IsBot { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsMFAEnabled Declaration public Optional<bool> IsMFAEnabled { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSystem Declaration public Optional<bool> IsSystem { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsVerified Declaration public Optional<bool> IsVerified { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source Locale Declaration public Optional<string> Locale { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source PremiumType Declaration public Optional<PremiumType> PremiumType { get; set; } Property Value Type Description Remora.Rest.Core.Optional < PremiumType > | Improve this Doc View Source PublicFlags Declaration public Optional<UserFlags> PublicFlags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < UserFlags > | Improve this Doc View Source Username Declaration public string Username { get; set; } Property Value Type Description String Implements IUser IPartialUser System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.UserMention.html": {
    "href": "api/Remora.Discord.API.Objects.UserMention.html",
    "title": "Class UserMention | Remora.Discord",
    "keywords": "Class UserMention Represents a user mention. Inheritance Object User UserMention Implements IEquatable < User > IUserMention IUser IPartialUser IEquatable < UserMention > Inherited Members User.ID User.Username User.Discriminator User.Avatar User.IsBot User.IsSystem User.IsMFAEnabled User.Banner User.AccentColour User.Locale User.IsVerified User.Email User.Flags User.PremiumType User.PublicFlags Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class UserMention : User, IEquatable<User>, IUserMention, IUser, IPartialUser, IEquatable<UserMention> Constructors | Improve this Doc View Source UserMention(Snowflake, String, UInt16, IImageHash, Optional<Boolean>, Optional<Boolean>, Optional<Boolean>, Optional<IImageHash>, Optional<Nullable<Color>>, Optional<String>, Optional<Boolean>, Optional<String>, Optional<UserFlags>, Optional<PremiumType>, Optional<UserFlags>, Optional<IPartialGuildMember>) Declaration public UserMention(Snowflake ID, string Username, ushort Discriminator, IImageHash Avatar, Optional<bool> IsBot = default(Optional<bool>), Optional<bool> IsSystem = default(Optional<bool>), Optional<bool> IsMFAEnabled = default(Optional<bool>), Optional<IImageHash> Banner = default(Optional<IImageHash>), Optional<Color?> AccentColour = default(Optional<Color?>), Optional<string> Locale = default(Optional<string>), Optional<bool> IsVerified = default(Optional<bool>), Optional<string> Email = default(Optional<string>), Optional<UserFlags> Flags = default(Optional<UserFlags>), Optional<PremiumType> PremiumType = default(Optional<PremiumType>), Optional<UserFlags> PublicFlags = default(Optional<UserFlags>), Optional<IPartialGuildMember> Member = default(Optional<IPartialGuildMember>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID String Username UInt16 Discriminator IImageHash Avatar Remora.Rest.Core.Optional < Boolean > IsBot Remora.Rest.Core.Optional < Boolean > IsSystem Remora.Rest.Core.Optional < Boolean > IsMFAEnabled Remora.Rest.Core.Optional < IImageHash > Banner Remora.Rest.Core.Optional < Nullable < Color >> AccentColour Remora.Rest.Core.Optional < String > Locale Remora.Rest.Core.Optional < Boolean > IsVerified Remora.Rest.Core.Optional < String > Email Remora.Rest.Core.Optional < UserFlags > Flags Remora.Rest.Core.Optional < PremiumType > PremiumType Remora.Rest.Core.Optional < UserFlags > PublicFlags Remora.Rest.Core.Optional < IPartialGuildMember > Member Properties | Improve this Doc View Source Member Declaration public Optional<IPartialGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuildMember > Implements System.IEquatable<T> IUserMention IUser IPartialUser System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.VoiceRegion.html": {
    "href": "api/Remora.Discord.API.Objects.VoiceRegion.html",
    "title": "Class VoiceRegion | Remora.Discord",
    "keywords": "Class VoiceRegion Represents a voice region. Inheritance Object VoiceRegion Implements IVoiceRegion IEquatable < VoiceRegion > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceRegion : IVoiceRegion, IEquatable<VoiceRegion> Constructors | Improve this Doc View Source VoiceRegion(String, String, Boolean, Boolean, Boolean) Declaration public VoiceRegion(string ID, string Name, bool IsOptimal, bool IsDeprecated, bool IsCustom) Parameters Type Name Description String ID String Name Boolean IsOptimal Boolean IsDeprecated Boolean IsCustom Properties | Improve this Doc View Source ID Declaration public string ID { get; set; } Property Value Type Description String | Improve this Doc View Source IsCustom Declaration public bool IsCustom { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsDeprecated Declaration public bool IsDeprecated { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsOptimal Declaration public bool IsOptimal { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String Implements IVoiceRegion System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.VoiceState.html": {
    "href": "api/Remora.Discord.API.Objects.VoiceState.html",
    "title": "Class VoiceState | Remora.Discord",
    "keywords": "Class VoiceState Represents a user's voice connection status. Inheritance Object VoiceState VoiceStateUpdate Implements IVoiceState IPartialVoiceState IEquatable < VoiceState > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceState : IVoiceState, IPartialVoiceState, IEquatable<VoiceState> Constructors | Improve this Doc View Source VoiceState(Optional<Snowflake>, Nullable<Snowflake>, Snowflake, Optional<IGuildMember>, String, Boolean, Boolean, Boolean, Boolean, Optional<Boolean>, Boolean, Boolean, Nullable<DateTimeOffset>) Declaration public VoiceState(Optional<Snowflake> GuildID, Snowflake? ChannelID, Snowflake UserID, Optional<IGuildMember> Member, string SessionID, bool IsDeafened, bool IsMuted, bool IsSelfDeafened, bool IsSelfMuted, Optional<bool> IsStreaming, bool IsVideoEnabled, bool IsSuppressed, DateTimeOffset? RequestToSpeakTimestamp) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Nullable < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Snowflake UserID Remora.Rest.Core.Optional < IGuildMember > Member String SessionID Boolean IsDeafened Boolean IsMuted Boolean IsSelfDeafened Boolean IsSelfMuted Remora.Rest.Core.Optional < Boolean > IsStreaming Boolean IsVideoEnabled Boolean IsSuppressed Nullable < DateTimeOffset > RequestToSpeakTimestamp Properties | Improve this Doc View Source ChannelID Declaration public Snowflake? ChannelID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source IsDeafened Declaration public bool IsDeafened { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsMuted Declaration public bool IsMuted { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSelfDeafened Declaration public bool IsSelfDeafened { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSelfMuted Declaration public bool IsSelfMuted { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsStreaming Declaration public Optional<bool> IsStreaming { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source IsSuppressed Declaration public bool IsSuppressed { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsVideoEnabled Declaration public bool IsVideoEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Member Declaration public Optional<IGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source RequestToSpeakTimestamp Declaration public DateTimeOffset? RequestToSpeakTimestamp { get; set; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source SessionID Declaration public string SessionID { get; set; } Property Value Type Description String | Improve this Doc View Source UserID Declaration public Snowflake UserID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IVoiceState IPartialVoiceState System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.Webhook.html": {
    "href": "api/Remora.Discord.API.Objects.Webhook.html",
    "title": "Class Webhook | Remora.Discord",
    "keywords": "Class Webhook Represents a webhook object. Inheritance Object Webhook Implements IWebhook IEquatable < Webhook > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Webhook : IWebhook, IEquatable<Webhook> Constructors | Improve this Doc View Source Webhook(Snowflake, WebhookType, Optional<Nullable<Snowflake>>, Nullable<Snowflake>, Optional<IUser>, String, String, Optional<String>, Nullable<Snowflake>, Optional<IPartialGuild>, Optional<IPartialChannel>, Optional<String>) Declaration public Webhook(Snowflake ID, WebhookType Type, Optional<Snowflake?> GuildID, Snowflake? ChannelID, Optional<IUser> User, string Name, string Avatar, Optional<string> Token = default(Optional<string>), Snowflake? ApplicationID = null, Optional<IPartialGuild> SourceGuild = default(Optional<IPartialGuild>), Optional<IPartialChannel> SourceChannel = default(Optional<IPartialChannel>), Optional<string> URL = default(Optional<string>)) Parameters Type Name Description Remora.Rest.Core.Snowflake ID WebhookType Type Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> GuildID Nullable < Remora.Rest.Core.Snowflake > ChannelID Remora.Rest.Core.Optional < IUser > User String Name String Avatar Remora.Rest.Core.Optional < String > Token Nullable < Remora.Rest.Core.Snowflake > ApplicationID Remora.Rest.Core.Optional < IPartialGuild > SourceGuild Remora.Rest.Core.Optional < IPartialChannel > SourceChannel Remora.Rest.Core.Optional < String > URL Properties | Improve this Doc View Source ApplicationID Declaration public Snowflake? ApplicationID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source Avatar Declaration public string Avatar { get; set; } Property Value Type Description String | Improve this Doc View Source ChannelID Declaration public Snowflake? ChannelID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source GuildID Declaration public Optional<Snowflake?> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source SourceChannel Declaration public Optional<IPartialChannel> SourceChannel { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialChannel > | Improve this Doc View Source SourceGuild Declaration public Optional<IPartialGuild> SourceGuild { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IPartialGuild > | Improve this Doc View Source Token Declaration public Optional<string> Token { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Type Declaration public WebhookType Type { get; set; } Property Value Type Description WebhookType | Improve this Doc View Source URL Declaration public Optional<string> URL { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source User Declaration public Optional<IUser> User { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IUser > Implements IWebhook System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.WelcomeScreen.html": {
    "href": "api/Remora.Discord.API.Objects.WelcomeScreen.html",
    "title": "Class WelcomeScreen | Remora.Discord",
    "keywords": "Class WelcomeScreen Represents the welcome screen in a community-enabled server. Inheritance Object WelcomeScreen Implements IWelcomeScreen IEquatable < WelcomeScreen > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class WelcomeScreen : IWelcomeScreen, IEquatable<WelcomeScreen> Constructors | Improve this Doc View Source WelcomeScreen(String, IReadOnlyList<IWelcomeScreenChannel>) Declaration public WelcomeScreen(string Description, IReadOnlyList<IWelcomeScreenChannel> WelcomeChannels) Parameters Type Name Description String Description IReadOnlyList < IWelcomeScreenChannel > WelcomeChannels Properties | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source WelcomeChannels Declaration public IReadOnlyList<IWelcomeScreenChannel> WelcomeChannels { get; set; } Property Value Type Description IReadOnlyList < IWelcomeScreenChannel > Implements IWelcomeScreen System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Objects.WelcomeScreenChannel.html": {
    "href": "api/Remora.Discord.API.Objects.WelcomeScreenChannel.html",
    "title": "Class WelcomeScreenChannel | Remora.Discord",
    "keywords": "Class WelcomeScreenChannel Represents a channel in a welcome screen. Inheritance Object WelcomeScreenChannel Implements IWelcomeScreenChannel IEquatable < WelcomeScreenChannel > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.Objects Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class WelcomeScreenChannel : IWelcomeScreenChannel, IEquatable<WelcomeScreenChannel> Constructors | Improve this Doc View Source WelcomeScreenChannel(Snowflake, String, Nullable<Snowflake>, String) Declaration public WelcomeScreenChannel(Snowflake ChannelID, string Description, Snowflake? EmojiID, string EmojiName) Parameters Type Name Description Remora.Rest.Core.Snowflake ChannelID String Description Nullable < Remora.Rest.Core.Snowflake > EmojiID String EmojiName Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source EmojiID Declaration public Snowflake? EmojiID { get; set; } Property Value Type Description Nullable < Remora.Rest.Core.Snowflake > | Improve this Doc View Source EmojiName Declaration public string EmojiName { get; set; } Property Value Type Description String Implements IWelcomeScreenChannel System.IEquatable<T>"
  },
  "api/Remora.Discord.API.Payload-1.html": {
    "href": "api/Remora.Discord.API.Payload-1.html",
    "title": "Class Payload<TData> | Remora.Discord",
    "keywords": "Class Payload<TData> Represents a payload from the Discord gateway. Inheritance Object Payload<TData> EventPayload<TEventData> Implements IPayload <TData> IPayload IEquatable < Payload <TData>> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class Payload<TData> : IPayload<TData>, IPayload, IEquatable<Payload<TData>> where TData : IGatewayPayloadData Type Parameters Name Description TData The data type encapsulated in the payload. Constructors | Improve this Doc View Source Payload(TData) Represents a payload from the Discord gateway. Declaration public Payload(TData Data) Parameters Type Name Description TData Data Properties | Improve this Doc View Source Data Declaration public TData Data { get; set; } Property Value Type Description TData Implements IPayload<TData> IPayload System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Commands.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Commands.html",
    "title": "Namespace Remora.Discord.API.VoiceGateway.Commands | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.VoiceGateway.Commands Classes VoiceHeartbeat Represents a heartbeat command. VoiceIdentify Represents a request to identify with the voice gateway. VoiceProtocolData Represents clientside connection information provided to the voice server. VoiceResume Represents a request to resume an interrupted voice session. VoiceSelectProtocol Represents a protocol selection request. VoiceSpeakingCommand Represents a speaking update request."
  },
  "api/Remora.Discord.API.VoiceGateway.Commands.VoiceHeartbeat.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Commands.VoiceHeartbeat.html",
    "title": "Class VoiceHeartbeat | Remora.Discord",
    "keywords": "Class VoiceHeartbeat Represents a heartbeat command. Inheritance Object VoiceHeartbeat Implements IVoiceHeartbeat IVoiceGatewayCommand IVoiceGatewayPayloadData IEquatable < VoiceHeartbeat > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceHeartbeat : IVoiceHeartbeat, IVoiceGatewayCommand, IVoiceGatewayPayloadData, IEquatable<VoiceHeartbeat> Constructors | Improve this Doc View Source VoiceHeartbeat(Int64) Declaration public VoiceHeartbeat(long Nonce) Parameters Type Name Description Int64 Nonce Properties | Improve this Doc View Source Nonce Declaration public long Nonce { get; set; } Property Value Type Description Int64 Implements IVoiceHeartbeat IVoiceGatewayCommand IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Commands.VoiceIdentify.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Commands.VoiceIdentify.html",
    "title": "Class VoiceIdentify | Remora.Discord",
    "keywords": "Class VoiceIdentify Represents a request to identify with the voice gateway. Inheritance Object VoiceIdentify Implements IVoiceIdentify IVoiceGatewayCommand IVoiceGatewayPayloadData IEquatable < VoiceIdentify > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceIdentify : IVoiceIdentify, IVoiceGatewayCommand, IVoiceGatewayPayloadData, IEquatable<VoiceIdentify> Constructors | Improve this Doc View Source VoiceIdentify(Snowflake, Snowflake, String, String) Declaration public VoiceIdentify(Snowflake ServerID, Snowflake UserID, string SessionID, string Token) Parameters Type Name Description Remora.Rest.Core.Snowflake ServerID Remora.Rest.Core.Snowflake UserID String SessionID String Token Properties | Improve this Doc View Source ServerID Declaration public Snowflake ServerID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source SessionID Declaration public string SessionID { get; set; } Property Value Type Description String | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description String | Improve this Doc View Source UserID Declaration public Snowflake UserID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IVoiceIdentify IVoiceGatewayCommand IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Commands.VoiceProtocolData.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Commands.VoiceProtocolData.html",
    "title": "Class VoiceProtocolData | Remora.Discord",
    "keywords": "Class VoiceProtocolData Represents clientside connection information provided to the voice server. Inheritance Object VoiceProtocolData Implements IVoiceProtocolData IVoiceGatewayCommand IVoiceGatewayPayloadData IEquatable < VoiceProtocolData > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceProtocolData : IVoiceProtocolData, IVoiceGatewayCommand, IVoiceGatewayPayloadData, IEquatable<VoiceProtocolData> Constructors | Improve this Doc View Source VoiceProtocolData(String, UInt16, String) Declaration public VoiceProtocolData(string Address, ushort Port, string Mode) Parameters Type Name Description String Address UInt16 Port String Mode Properties | Improve this Doc View Source Address Declaration public string Address { get; set; } Property Value Type Description String | Improve this Doc View Source Mode Declaration public string Mode { get; set; } Property Value Type Description String | Improve this Doc View Source Port Declaration public ushort Port { get; set; } Property Value Type Description UInt16 Implements IVoiceProtocolData IVoiceGatewayCommand IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Commands.VoiceResume.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Commands.VoiceResume.html",
    "title": "Class VoiceResume | Remora.Discord",
    "keywords": "Class VoiceResume Represents a request to resume an interrupted voice session. Inheritance Object VoiceResume Implements IVoiceResume IVoiceGatewayCommand IVoiceGatewayPayloadData IEquatable < VoiceResume > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceResume : IVoiceResume, IVoiceGatewayCommand, IVoiceGatewayPayloadData, IEquatable<VoiceResume> Constructors | Improve this Doc View Source VoiceResume(Snowflake, String, String) Declaration public VoiceResume(Snowflake ServerID, string SessionID, string Token) Parameters Type Name Description Remora.Rest.Core.Snowflake ServerID String SessionID String Token Properties | Improve this Doc View Source ServerID Declaration public Snowflake ServerID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source SessionID Declaration public string SessionID { get; set; } Property Value Type Description String | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description String Implements IVoiceResume IVoiceGatewayCommand IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Commands.VoiceSelectProtocol.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Commands.VoiceSelectProtocol.html",
    "title": "Class VoiceSelectProtocol | Remora.Discord",
    "keywords": "Class VoiceSelectProtocol Represents a protocol selection request. Inheritance Object VoiceSelectProtocol Implements IVoiceSelectProtocol IVoiceGatewayCommand IVoiceGatewayPayloadData IEquatable < VoiceSelectProtocol > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceSelectProtocol : IVoiceSelectProtocol, IVoiceGatewayCommand, IVoiceGatewayPayloadData, IEquatable<VoiceSelectProtocol> Constructors | Improve this Doc View Source VoiceSelectProtocol(String, IVoiceProtocolData) Declaration public VoiceSelectProtocol(string Protocol, IVoiceProtocolData Data) Parameters Type Name Description String Protocol IVoiceProtocolData Data Properties | Improve this Doc View Source Data Declaration public IVoiceProtocolData Data { get; set; } Property Value Type Description IVoiceProtocolData | Improve this Doc View Source Protocol Declaration public string Protocol { get; set; } Property Value Type Description String Implements IVoiceSelectProtocol IVoiceGatewayCommand IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Commands.VoiceSpeakingCommand.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Commands.VoiceSpeakingCommand.html",
    "title": "Class VoiceSpeakingCommand | Remora.Discord",
    "keywords": "Class VoiceSpeakingCommand Represents a speaking update request. Inheritance Object VoiceSpeakingCommand Implements IVoiceSpeakingCommand IVoiceGatewayCommand IVoiceGatewayPayloadData IEquatable < VoiceSpeakingCommand > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Commands Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceSpeakingCommand : IVoiceSpeakingCommand, IVoiceGatewayCommand, IVoiceGatewayPayloadData, IEquatable<VoiceSpeakingCommand> Constructors | Improve this Doc View Source VoiceSpeakingCommand(SpeakingFlags, Int32, UInt32) Declaration public VoiceSpeakingCommand(SpeakingFlags Speaking, int Delay, uint SSRC) Parameters Type Name Description SpeakingFlags Speaking Int32 Delay UInt32 SSRC Properties | Improve this Doc View Source Delay Declaration public int Delay { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Speaking Declaration public SpeakingFlags Speaking { get; set; } Property Value Type Description SpeakingFlags | Improve this Doc View Source SSRC Declaration public uint SSRC { get; set; } Property Value Type Description UInt32 Implements IVoiceSpeakingCommand IVoiceGatewayCommand IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Events.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Events.html",
    "title": "Namespace Remora.Discord.API.VoiceGateway.Events | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.VoiceGateway.Events Classes VoiceClientDisconnect Represents data that a client disconnected. VoiceHeartbeatAcknowledge Represents a heartbeat acknowledgement. VoiceHello Represents the greeting event sent by the voice gateway after connection. VoiceReady Indicates a successful authentication with the voice gateway, and provides initial connection information. VoiceResumed Represents an acknowledged session resume. VoiceSessionDescription Represents a session descriptor with information used to establish an encrypted voice connection. VoiceSpeakingEvent Represents data that a client is speaking."
  },
  "api/Remora.Discord.API.VoiceGateway.Events.VoiceClientDisconnect.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Events.VoiceClientDisconnect.html",
    "title": "Class VoiceClientDisconnect | Remora.Discord",
    "keywords": "Class VoiceClientDisconnect Represents data that a client disconnected. Inheritance Object VoiceClientDisconnect Implements IVoiceClientDisconnect IVoiceGatewayEvent IVoiceGatewayPayloadData IEquatable < VoiceClientDisconnect > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Events Assembly : Remora.Discord.Unstable.dll Syntax [PublicAPI] public class VoiceClientDisconnect : IVoiceClientDisconnect, IVoiceGatewayEvent, IVoiceGatewayPayloadData, IEquatable<VoiceClientDisconnect> Constructors | Improve this Doc View Source VoiceClientDisconnect(Snowflake) Declaration public VoiceClientDisconnect(Snowflake UserID) Parameters Type Name Description Remora.Rest.Core.Snowflake UserID Properties | Improve this Doc View Source UserID Declaration public Snowflake UserID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IVoiceClientDisconnect IVoiceGatewayEvent IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Events.VoiceHeartbeatAcknowledge.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Events.VoiceHeartbeatAcknowledge.html",
    "title": "Class VoiceHeartbeatAcknowledge | Remora.Discord",
    "keywords": "Class VoiceHeartbeatAcknowledge Represents a heartbeat acknowledgement. Inheritance Object VoiceHeartbeatAcknowledge Implements IVoiceHeartbeatAcknowledge IVoiceGatewayEvent IVoiceGatewayPayloadData IEquatable < VoiceHeartbeatAcknowledge > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceHeartbeatAcknowledge : IVoiceHeartbeatAcknowledge, IVoiceGatewayEvent, IVoiceGatewayPayloadData, IEquatable<VoiceHeartbeatAcknowledge> Constructors | Improve this Doc View Source VoiceHeartbeatAcknowledge(Int64) Declaration public VoiceHeartbeatAcknowledge(long Nonce) Parameters Type Name Description Int64 Nonce Properties | Improve this Doc View Source Nonce Declaration public long Nonce { get; set; } Property Value Type Description Int64 Implements IVoiceHeartbeatAcknowledge IVoiceGatewayEvent IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Events.VoiceHello.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Events.VoiceHello.html",
    "title": "Class VoiceHello | Remora.Discord",
    "keywords": "Class VoiceHello Represents the greeting event sent by the voice gateway after connection. Inheritance Object VoiceHello Implements IVoiceHello IVoiceGatewayEvent IVoiceGatewayPayloadData IEquatable < VoiceHello > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceHello : IVoiceHello, IVoiceGatewayEvent, IVoiceGatewayPayloadData, IEquatable<VoiceHello> Constructors | Improve this Doc View Source VoiceHello(TimeSpan) Declaration public VoiceHello(TimeSpan HeartbeatInterval) Parameters Type Name Description TimeSpan HeartbeatInterval Properties | Improve this Doc View Source HeartbeatInterval Declaration public TimeSpan HeartbeatInterval { get; set; } Property Value Type Description TimeSpan Implements IVoiceHello IVoiceGatewayEvent IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Events.VoiceReady.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Events.VoiceReady.html",
    "title": "Class VoiceReady | Remora.Discord",
    "keywords": "Class VoiceReady Indicates a successful authentication with the voice gateway, and provides initial connection information. Inheritance Object VoiceReady Implements IVoiceReady IVoiceGatewayEvent IVoiceGatewayPayloadData IEquatable < VoiceReady > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceReady : IVoiceReady, IVoiceGatewayEvent, IVoiceGatewayPayloadData, IEquatable<VoiceReady> Constructors | Improve this Doc View Source VoiceReady(UInt32, IPAddress, UInt16, IReadOnlyList<String>) Declaration public VoiceReady(uint SSRC, IPAddress IP, ushort Port, IReadOnlyList<string> Modes) Parameters Type Name Description UInt32 SSRC IPAddress IP UInt16 Port IReadOnlyList < String > Modes Properties | Improve this Doc View Source IP Declaration public IPAddress IP { get; set; } Property Value Type Description IPAddress | Improve this Doc View Source Modes Declaration public IReadOnlyList<string> Modes { get; set; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source Port Declaration public ushort Port { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source SSRC Declaration public uint SSRC { get; set; } Property Value Type Description UInt32 Implements IVoiceReady IVoiceGatewayEvent IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Events.VoiceResumed.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Events.VoiceResumed.html",
    "title": "Class VoiceResumed | Remora.Discord",
    "keywords": "Class VoiceResumed Represents an acknowledged session resume. Inheritance Object VoiceResumed Implements IVoiceResumed IVoiceGatewayEvent IVoiceGatewayPayloadData IEquatable < VoiceResumed > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceResumed : IVoiceResumed, IVoiceGatewayEvent, IVoiceGatewayPayloadData, IEquatable<VoiceResumed> Implements IVoiceResumed IVoiceGatewayEvent IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Events.VoiceSessionDescription.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Events.VoiceSessionDescription.html",
    "title": "Class VoiceSessionDescription | Remora.Discord",
    "keywords": "Class VoiceSessionDescription Represents a session descriptor with information used to establish an encrypted voice connection. Inheritance Object VoiceSessionDescription Implements IVoiceSessionDescription IVoiceGatewayEvent IVoiceGatewayPayloadData IEquatable < VoiceSessionDescription > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Events Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoiceSessionDescription : IVoiceSessionDescription, IVoiceGatewayEvent, IVoiceGatewayPayloadData, IEquatable<VoiceSessionDescription> Constructors | Improve this Doc View Source VoiceSessionDescription(String, IReadOnlyList<Byte>) Declaration public VoiceSessionDescription(string Mode, IReadOnlyList<byte> SecretKey) Parameters Type Name Description String Mode IReadOnlyList < Byte > SecretKey Properties | Improve this Doc View Source Mode Declaration public string Mode { get; set; } Property Value Type Description String | Improve this Doc View Source SecretKey Declaration public IReadOnlyList<byte> SecretKey { get; set; } Property Value Type Description IReadOnlyList < Byte > Implements IVoiceSessionDescription IVoiceGatewayEvent IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.Events.VoiceSpeakingEvent.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.Events.VoiceSpeakingEvent.html",
    "title": "Class VoiceSpeakingEvent | Remora.Discord",
    "keywords": "Class VoiceSpeakingEvent Represents data that a client is speaking. Inheritance Object VoiceSpeakingEvent Implements IVoiceSpeakingEvent IVoiceGatewayEvent IVoiceGatewayPayloadData IEquatable < VoiceSpeakingEvent > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway.Events Assembly : Remora.Discord.Unstable.dll Syntax [PublicAPI] public class VoiceSpeakingEvent : IVoiceSpeakingEvent, IVoiceGatewayEvent, IVoiceGatewayPayloadData, IEquatable<VoiceSpeakingEvent> Constructors | Improve this Doc View Source VoiceSpeakingEvent(Snowflake, SpeakingFlags, UInt32) Declaration public VoiceSpeakingEvent(Snowflake UserID, SpeakingFlags Speaking, uint SSRC) Parameters Type Name Description Remora.Rest.Core.Snowflake UserID SpeakingFlags Speaking UInt32 SSRC Properties | Improve this Doc View Source Speaking Declaration public SpeakingFlags Speaking { get; set; } Property Value Type Description SpeakingFlags | Improve this Doc View Source SSRC Declaration public uint SSRC { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source UserID Declaration public Snowflake UserID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements IVoiceSpeakingEvent IVoiceGatewayEvent IVoiceGatewayPayloadData System.IEquatable<T>"
  },
  "api/Remora.Discord.API.VoiceGateway.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.html",
    "title": "Namespace Remora.Discord.API.VoiceGateway | Remora.Discord",
    "keywords": "Namespace Remora.Discord.API.VoiceGateway Classes VoicePayload<TData> Represents a payload of data to be sent to, or received from, the Discord voice gateway."
  },
  "api/Remora.Discord.API.VoiceGateway.VoicePayload-1.html": {
    "href": "api/Remora.Discord.API.VoiceGateway.VoicePayload-1.html",
    "title": "Class VoicePayload<TData> | Remora.Discord",
    "keywords": "Class VoicePayload<TData> Represents a payload of data to be sent to, or received from, the Discord voice gateway. Inheritance Object VoicePayload<TData> Implements IVoicePayload <TData> IVoicePayload IEquatable < VoicePayload <TData>> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.API.VoiceGateway Assembly : Remora.Discord.API.dll Syntax [PublicAPI] public class VoicePayload<TData> : IVoicePayload<TData>, IVoicePayload, IEquatable<VoicePayload<TData>> where TData : IVoiceGatewayPayloadData Type Parameters Name Description TData The data type encapsulated in the payload. Constructors | Improve this Doc View Source VoicePayload(VoiceOperationCode, TData) Represents a payload of data to be sent to, or received from, the Discord voice gateway. Declaration public VoicePayload(VoiceOperationCode OperationCode, TData Data) Parameters Type Name Description VoiceOperationCode OperationCode The operation code of the payload. TData Data The data encapsulated in the payload. Properties | Improve this Doc View Source Data Declaration public TData Data { get; set; } Property Value Type Description TData | Improve this Doc View Source OperationCode Declaration public VoiceOperationCode OperationCode { get; set; } Property Value Type Description VoiceOperationCode Implements IVoicePayload<TData> IVoicePayload System.IEquatable<T>"
  },
  "api/Remora.Discord.Caching.Abstractions.Services.html": {
    "href": "api/Remora.Discord.Caching.Abstractions.Services.html",
    "title": "Namespace Remora.Discord.Caching.Abstractions.Services | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Caching.Abstractions.Services Interfaces ICacheProvider Represents an abstraction between a cache service and it's backing store."
  },
  "api/Remora.Discord.Caching.Abstractions.Services.ICacheProvider.html": {
    "href": "api/Remora.Discord.Caching.Abstractions.Services.ICacheProvider.html",
    "title": "Interface ICacheProvider | Remora.Discord",
    "keywords": "Interface ICacheProvider Represents an abstraction between a cache service and it's backing store. Namespace : Remora.Discord.Caching.Abstractions.Services Assembly : Remora.Discord.Caching.Abstractions.dll Syntax [PublicAPI] public interface ICacheProvider Methods | Improve this Doc View Source CacheAsync<TInstance>(String, TInstance, Nullable<DateTimeOffset>, Nullable<TimeSpan>, CancellationToken) Caches a value in the backing store. Declaration ValueTask CacheAsync<TInstance>(string key, TInstance instance, DateTimeOffset? absoluteExpiration = null, TimeSpan? slidingExpiration = null, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The key to cache the value with. TInstance instance The instance of the object ot cache. Nullable < DateTimeOffset > absoluteExpiration The absolute expiration of the value to cache. Nullable < TimeSpan > slidingExpiration The sliding expiration of the value to cache. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask A ValueTask representing the result of the potentially asynchronous operation. Type Parameters Name Description TInstance The type to cache. Remarks Absolute and sliding expirations may be handled differently (or not at all) depending on the implementation, and are simply a hint to the implementation that the value should have a pre-determined lifetime in it's backing-store. | Improve this Doc View Source EvictAsync(String, CancellationToken) Evicts a key from the backing store. Declaration ValueTask<Result> EvictAsync(string key, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String key The key to evict from the backing store. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result > A ValueTask representing the result of the potentially asynchronous action. | Improve this Doc View Source EvictAsync<TInstance>(String, CancellationToken) Evicts a key from the backing store, returning its current value if it exists. Declaration ValueTask<Result<TInstance>> EvictAsync<TInstance>(string key, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The key to evict from the backing store. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result <TInstance>> A ValueTask representing the result of the potentially asynchronous action. Type Parameters Name Description TInstance The type to return from the backing store, if it exists. | Improve this Doc View Source RetrieveAsync<TInstance>(String, CancellationToken) Retrieves a value from the backing store. Declaration ValueTask<Result<TInstance>> RetrieveAsync<TInstance>(string key, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The key to retrieve a potential value from the backing store. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result <TInstance>> A ValueTask representing the result of the potentially asynchronous action. Type Parameters Name Description TInstance The type to return from the backing store, if it exists."
  },
  "api/Remora.Discord.Caching.API.CachingDiscordRestChannelAPI.html": {
    "href": "api/Remora.Discord.Caching.API.CachingDiscordRestChannelAPI.html",
    "title": "Class CachingDiscordRestChannelAPI | Remora.Discord",
    "keywords": "Class CachingDiscordRestChannelAPI Decorates the registered channel API with caching functionality. Inheritance Object CachingDiscordRestChannelAPI Implements IDiscordRestChannelAPI Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.API Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CachingDiscordRestChannelAPI : IDiscordRestChannelAPI, IRestCustomizable Constructors | Improve this Doc View Source CachingDiscordRestChannelAPI(IDiscordRestChannelAPI, CacheService) Initializes a new instance of the CachingDiscordRestChannelAPI class. Declaration public CachingDiscordRestChannelAPI(IDiscordRestChannelAPI actual, CacheService cacheService) Parameters Type Name Description IDiscordRestChannelAPI actual The decorated instance. CacheService cacheService The cache service. Methods | Improve this Doc View Source AddThreadMemberAsync(Snowflake, Snowflake, CancellationToken) Adds the given user to the given thread. Declaration public Task<Result> AddThreadMemberAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to add the user to. Remora.Rest.Core.Snowflake userID The user to add to the thread. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source BulkDeleteMessagesAsync(Snowflake, IReadOnlyList<Snowflake>, Optional<String>, CancellationToken) Bulk deletes a set of messages. Declaration public async Task<Result> BulkDeleteMessagesAsync(Snowflake channelID, IReadOnlyList<Snowflake> messageIDs, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel to delete messages in. IReadOnlyList < Remora.Rest.Core.Snowflake > messageIDs The IDs of the messages to delete. Messages older than 2 weeks may not be deleted in this manner. Any invalid message IDs will count towards the minimum and maximum number of messages to deleted (currently 2 and 100, respectively). Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source CreateChannelInviteAsync(Snowflake, Optional<TimeSpan>, Optional<Int32>, Optional<Boolean>, Optional<Boolean>, Optional<InviteTarget>, Optional<Snowflake>, Optional<Snowflake>, Optional<String>, CancellationToken) Creates an invite to the given channel. Declaration public async Task<Result<IInvite>> CreateChannelInviteAsync(Snowflake channelID, Optional<TimeSpan> maxAge = default(Optional<TimeSpan>), Optional<int> maxUses = default(Optional<int>), Optional<bool> isTemporary = default(Optional<bool>), Optional<bool> isUnique = default(Optional<bool>), Optional<InviteTarget> targetType = default(Optional<InviteTarget>), Optional<Snowflake> targetUserID = default(Optional<Snowflake>), Optional<Snowflake> targetApplicationID = default(Optional<Snowflake>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < TimeSpan > maxAge The duration of the invite before expiry, or 0 for never. Remora.Rest.Core.Optional < Int32 > maxUses The max number of uses, or 0 for unlimited. Remora.Rest.Core.Optional < Boolean > isTemporary Whether this invite grants temporary membership. Remora.Rest.Core.Optional < Boolean > isUnique If true, don't try to reuse an existing invite with the same settings. Remora.Rest.Core.Optional < InviteTarget > targetType The target type for this invite. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > targetUserID The target user ID for this invite. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > targetApplicationID The ID of the application to open for this invite. Required if targetType is EmbeddedApplication . Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IInvite >> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateMessageAsync(Snowflake, Optional<String>, Optional<String>, Optional<Boolean>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IMessageReference>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<Snowflake>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<MessageFlags>, CancellationToken) Posts a message to the given channel. At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. Declaration public async Task<Result<IMessage>> CreateMessageAsync(Snowflake channelID, Optional<string> content = default(Optional<string>), Optional<string> nonce = default(Optional<string>), Optional<bool> isTTS = default(Optional<bool>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IMessageReference> messageReference = default(Optional<IMessageReference>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<Snowflake>> stickerIds = default(Optional<IReadOnlyList<Snowflake>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<MessageFlags> flags = default(Optional<MessageFlags>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < String > nonce A nonce that can be used for optimistic message sending. Remora.Rest.Core.Optional < Boolean > isTTS Whether the message is a TTS message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The rich embeds in the message. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions An object describing the allowed mention types. Remora.Rest.Core.Optional < IMessageReference > messageReference A reference to another message. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components of the message. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> stickerIds The stickers to send with the message (max 3). Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < MessageFlags > flags The message flags. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateReactionAsync(Snowflake, Snowflake, String, CancellationToken) Adds a reaction to the given message. Declaration public Task<Result> CreateReactionAsync(Snowflake channelID, Snowflake messageID, string emoji, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to react with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A creation result which may or may not have succeeded. | Improve this Doc View Source CrosspostMessageAsync(Snowflake, Snowflake, CancellationToken) Crosspost a message otherwise known as \"publishing\" a message from a announcement channel that other guilds can follow. Declaration public async Task<Result<IMessage>> CrosspostMessageAsync(Snowflake channelID, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. | Improve this Doc View Source DeleteAllReactionsAsync(Snowflake, Snowflake, CancellationToken) Deletes all reactions from the given message. Declaration public Task<Result> DeleteAllReactionsAsync(Snowflake channelID, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteAllReactionsForEmojiAsync(Snowflake, Snowflake, String, CancellationToken) Deletes all reactions from the given message. Declaration public Task<Result> DeleteAllReactionsForEmojiAsync(Snowflake channelID, Snowflake messageID, string emoji, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to delete. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteChannelAsync(Snowflake, Optional<String>, CancellationToken) Deletes a channel by its ID. Declaration public async Task<Result> DeleteChannelAsync(Snowflake channelID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A retrieval result which may or may not have succeeded. | Improve this Doc View Source DeleteChannelPermissionAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given permission overwrite from the given channel. Declaration public async Task<Result> DeleteChannelPermissionAsync(Snowflake channelID, Snowflake overwriteID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake overwriteID The ID of the permission overwrite. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteMessageAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given message. Declaration public async Task<Result> DeleteMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteOwnReactionAsync(Snowflake, Snowflake, String, CancellationToken) Deletes a reaction from the given message. Declaration public Task<Result> DeleteOwnReactionAsync(Snowflake channelID, Snowflake messageID, string emoji, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to remove. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteUserReactionAsync(Snowflake, Snowflake, String, Snowflake, CancellationToken) Deletes a reaction from the given message. Declaration public Task<Result> DeleteUserReactionAsync(Snowflake channelID, Snowflake messageID, string emoji, Snowflake user, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to remove. Remora.Rest.Core.Snowflake user The user that has reacted with the emoji. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditChannelPermissionsAsync(Snowflake, Snowflake, Optional<IDiscordPermissionSet>, Optional<IDiscordPermissionSet>, Optional<PermissionOverwriteType>, Optional<String>, CancellationToken) Edits a permission overwrite on the given channel. Declaration public Task<Result> EditChannelPermissionsAsync(Snowflake channelID, Snowflake overwriteID, Optional<IDiscordPermissionSet> allow = default(Optional<IDiscordPermissionSet>), Optional<IDiscordPermissionSet> deny = default(Optional<IDiscordPermissionSet>), Optional<PermissionOverwriteType> type = default(Optional<PermissionOverwriteType>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake overwriteID The ID of the overwrite. Remora.Rest.Core.Optional < IDiscordPermissionSet > allow The permissions to allow. Remora.Rest.Core.Optional < IDiscordPermissionSet > deny The permissions to deny. Remora.Rest.Core.Optional < PermissionOverwriteType > type The new type of the overwrite. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A modification result which may or may not have succeeded. | Improve this Doc View Source EditMessageAsync(Snowflake, Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<Nullable<MessageFlags>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Edits a previously sent message. Declaration public async Task<Result<IMessage>> EditMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<MessageFlags?> flags = default(Optional<MessageFlags?>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > content The new content of the message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds associated with the message. Remora.Rest.Core.Optional < Nullable < MessageFlags >> flags The new message flags. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The allowed mentions for the message. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components of the message. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A modification result which may or may not have succeeded. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source FollowNewsChannelAsync(Snowflake, Snowflake, CancellationToken) Follows a news channel to send messages to a target channel. Declaration public Task<Result<IFollowedChannel>> FollowNewsChannelAsync(Snowflake channelID, Snowflake webhookChannelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the news channel. Remora.Rest.Core.Snowflake webhookChannelID The ID of the channel to send news to. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IFollowedChannel >> A creation result which may or may not have succeeded. | Improve this Doc View Source GetChannelAsync(Snowflake, CancellationToken) Gets a channel by its ID. Declaration public async Task<Result<IChannel>> GetChannelAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetChannelInvitesAsync(Snowflake, CancellationToken) Gets the invites for a given channel. Declaration public async Task<Result<IReadOnlyList<IInvite>>> GetChannelInvitesAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IInvite >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetChannelMessageAsync(Snowflake, Snowflake, CancellationToken) Gets a message from a channel by its ID. Declaration public async Task<Result<IMessage>> GetChannelMessageAsync(Snowflake channelID, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The channel ID. Remora.Rest.Core.Snowflake messageID The message ID. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetChannelMessagesAsync(Snowflake, Optional<Snowflake>, Optional<Snowflake>, Optional<Snowflake>, Optional<Int32>, CancellationToken) Gets the messages for a channel. Declaration public async Task<Result<IReadOnlyList<IMessage>>> GetChannelMessagesAsync(Snowflake channelID, Optional<Snowflake> around = default(Optional<Snowflake>), Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > around The ID of the message to get messages around. This is a mutually exclusive option with before and after . Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before The ID of the message to get messages before. This is a mutually exclusive option with around and after . Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The ID of the message to get messages after. This is a mutually exclusive option with before and around . Remora.Rest.Core.Optional < Int32 > limit The maximum number of messages to retrieve. Ranges between 1 and 100. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetPinnedMessagesAsync(Snowflake, CancellationToken) Gets the pinned messages in the given channel. Declaration public async Task<Result<IReadOnlyList<IMessage>>> GetPinnedMessagesAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetReactionsAsync(Snowflake, Snowflake, String, Optional<Snowflake>, Optional<Int32>, CancellationToken) Gets a list of users that have reacted with the given emoji. Declaration public Task<Result<IReadOnlyList<IUser>>> GetReactionsAsync(Snowflake channelID, Snowflake messageID, string emoji, Optional<Snowflake> after = default(Optional<Snowflake>), Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to filter on. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The users to get after this user ID. Remora.Rest.Core.Optional < Int32 > limit The maximum page size. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IUser >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetThreadMemberAsync(Snowflake, Snowflake, CancellationToken) Gets a thread member object for the specified user if they're a member of the thread. Declaration public async Task<Result<IThreadMember>> GetThreadMemberAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the thread. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IThreadMember >> A result which may or may not have succeeded. | Improve this Doc View Source GroupDMAddRecipientAsync(Snowflake, Snowflake, String, Optional<String>, CancellationToken) Adds a recipient to a group DM using their access token. Declaration public Task<Result> GroupDMAddRecipientAsync(Snowflake channelID, Snowflake userID, string accessToken, Optional<string> nickname = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake userID The ID of the user. String accessToken The access token. Remora.Rest.Core.Optional < String > nickname The nickname of the user to use in the group DM. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source GroupDMRemoveRecipientAsync(Snowflake, Snowflake, CancellationToken) Removes a recipient from a group DM. Declaration public Task<Result> GroupDMRemoveRecipientAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source JoinThreadAsync(Snowflake, CancellationToken) Joins the given thread. Declaration public Task<Result> JoinThreadAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to join. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source LeaveThreadAsync(Snowflake, CancellationToken) Leaves the given thread. Declaration public Task<Result> LeaveThreadAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to leave. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source ListThreadMembersAsync(Snowflake, CancellationToken) Lists the members of the given thread. Restricted to bots with with GuildMembers intent. Declaration public async Task<Result<IReadOnlyList<IThreadMember>>> ListThreadMembersAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to list the members of. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IThreadMember >>> A result which may or may not have succeeded. | Improve this Doc View Source ModifyChannelAsync(Snowflake, Optional<String>, Optional<Stream>, Optional<ChannelType>, Optional<Nullable<Int32>>, Optional<String>, Optional<Nullable<Boolean>>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<Nullable<VideoQualityMode>>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<String>, Optional<ChannelFlags>, Optional<String>, CancellationToken) Modifies the given channel. Declaration public async Task<Result<IChannel>> ModifyChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<Stream> icon = default(Optional<Stream>), Optional<ChannelType> type = default(Optional<ChannelType>), Optional<int?> position = default(Optional<int?>), Optional<string> topic = default(Optional<string>), Optional<bool?> isNsfw = default(Optional<bool?>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<int?> bitrate = default(Optional<int?>), Optional<int?> userLimit = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<VideoQualityMode?> videoQualityMode = default(Optional<VideoQualityMode?>), Optional<bool> isArchived = default(Optional<bool>), Optional<AutoArchiveDuration> autoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<bool> isLocked = default(Optional<bool>), Optional<AutoArchiveDuration> defaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<string> rtcRegion = default(Optional<string>), Optional<ChannelFlags> flags = default(Optional<ChannelFlags>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Stream > icon The new icon. Remora.Rest.Core.Optional < ChannelType > type The new type of the channel. Only conversions between GuildText and GuildNews are supported. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < String > topic The new topic of the channel. Remora.Rest.Core.Optional < Nullable < Boolean >> isNsfw The new NSFW status of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The new rate limit per user. Remora.Rest.Core.Optional < Nullable < Int32 >> bitrate The new bitrate. Remora.Rest.Core.Optional < Nullable < Int32 >> userLimit The new user limit. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < Nullable < VideoQualityMode >> videoQualityMode The new video quality mode. Remora.Rest.Core.Optional < Boolean > isArchived Whether the thread is archived. Remora.Rest.Core.Optional < AutoArchiveDuration > autoArchiveDuration The time of inactivity after which the thread is archived. Remora.Rest.Core.Optional < Boolean > isLocked Whether the thread is locked. Remora.Rest.Core.Optional < AutoArchiveDuration > defaultAutoArchiveDuration The default time of inactivity after which threads in the channel are archived. Remora.Rest.Core.Optional < String > rtcRegion The channel's voice region. Automatic when null. Remora.Rest.Core.Optional < ChannelFlags > flags The channel flags to use. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGroupDMChannelAsync(Snowflake, Optional<String>, Optional<Stream>, CancellationToken) Modifies the given group DM channel. Declaration public Task<Result<IChannel>> ModifyGroupDMChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<Stream> icon = default(Optional<Stream>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Stream > icon The new icon. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGuildNewsChannelAsync(Snowflake, Optional<String>, Optional<ChannelType>, Optional<Nullable<Int32>>, Optional<String>, Optional<Nullable<Boolean>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<String>, CancellationToken) Modifies the given guild news channel. Declaration public Task<Result<IChannel>> ModifyGuildNewsChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<ChannelType> type = default(Optional<ChannelType>), Optional<int?> position = default(Optional<int?>), Optional<string> topic = default(Optional<string>), Optional<bool?> isNsfw = default(Optional<bool?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < ChannelType > type The new type of the channel. Only conversions between GuildText and GuildNews are supported. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < String > topic The new topic of the channel. Remora.Rest.Core.Optional < Nullable < Boolean >> isNsfw The new NSFW status of the channel. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildStageChannelAsync(Snowflake, Optional<String>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<String>, Optional<String>, CancellationToken) Modifies the given guild stage channel. Declaration public Task<Result<IChannel>> ModifyGuildStageChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<int?> position = default(Optional<int?>), Optional<int?> bitrate = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<string> rtcRegion = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < Nullable < Int32 >> bitrate The new bitrate. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < String > rtcRegion The channel's voice region. Automatic when null. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildTextChannelAsync(Snowflake, Optional<String>, Optional<ChannelType>, Optional<Nullable<Int32>>, Optional<String>, Optional<Nullable<Boolean>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<AutoArchiveDuration>, Optional<String>, CancellationToken) Modifies the given guild text channel. Declaration public Task<Result<IChannel>> ModifyGuildTextChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<ChannelType> type = default(Optional<ChannelType>), Optional<int?> position = default(Optional<int?>), Optional<string> topic = default(Optional<string>), Optional<bool?> isNsfw = default(Optional<bool?>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<AutoArchiveDuration> defaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < ChannelType > type The new type of the channel. Only conversions between GuildText and GuildNews are supported. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < String > topic The new topic of the channel. Remora.Rest.Core.Optional < Nullable < Boolean >> isNsfw The new NSFW status of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The new rate limit per user. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < AutoArchiveDuration > defaultAutoArchiveDuration The default time of inactivity after which threads in the channel are archived. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildVoiceChannelAsync(Snowflake, Optional<String>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<String>, Optional<Nullable<VideoQualityMode>>, Optional<String>, CancellationToken) Modifies the given guild voice channel. Declaration public Task<Result<IChannel>> ModifyGuildVoiceChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<int?> position = default(Optional<int?>), Optional<int?> bitrate = default(Optional<int?>), Optional<int?> userLimit = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<string> rtcRegion = default(Optional<string>), Optional<VideoQualityMode?> videoQualityMode = default(Optional<VideoQualityMode?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < Nullable < Int32 >> bitrate The new bitrate. Remora.Rest.Core.Optional < Nullable < Int32 >> userLimit The new user limit. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < String > rtcRegion The channel's voice region. Automatic when null. Remora.Rest.Core.Optional < Nullable < VideoQualityMode >> videoQualityMode The new video quality mode. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyThreadChannelAsync(Snowflake, Optional<String>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<Boolean>, Optional<Nullable<Int32>>, Optional<ChannelFlags>, Optional<String>, CancellationToken) Modifies the given channel. Declaration public Task<Result<IChannel>> ModifyThreadChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<bool> isArchived = default(Optional<bool>), Optional<AutoArchiveDuration> autoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<bool> isLocked = default(Optional<bool>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<ChannelFlags> flags = default(Optional<ChannelFlags>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Boolean > isArchived Whether the thread is archived. Remora.Rest.Core.Optional < AutoArchiveDuration > autoArchiveDuration The time of inactivity after which the thread is archived. Remora.Rest.Core.Optional < Boolean > isLocked Whether the thread is locked. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The new rate limit per user. Remora.Rest.Core.Optional < ChannelFlags > flags The channel flags to use. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source PinMessageAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Pins the given message in the channel. Declaration public Task<Result> PinMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source RemoveThreadMemberAsync(Snowflake, Snowflake, CancellationToken) Removes the given user from the given thread. Declaration public async Task<Result> RemoveThreadMemberAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to remove the user from. Remora.Rest.Core.Snowflake userID The user to remove from the thread. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source StartThreadWithMessageAsync(Snowflake, Snowflake, String, Optional<AutoArchiveDuration>, Optional<Nullable<Int32>>, Optional<String>, CancellationToken) Starts a new public thread from an existing message. Declaration public async Task<Result<IChannel>> StartThreadWithMessageAsync(Snowflake channelID, Snowflake messageID, string name, Optional<AutoArchiveDuration> autoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The channel to start the thread in. Remora.Rest.Core.Snowflake messageID The message to start the thread from. String name The name of the thread. Remora.Rest.Core.Optional < AutoArchiveDuration > autoArchiveDuration The time of inactivity after which to archive the thread. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The message rate limit per user, that is, the number of seconds they have to wait between sending messages. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A result which may or may not have succeeded. | Improve this Doc View Source StartThreadWithoutMessageAsync(Snowflake, String, AutoArchiveDuration, ChannelType, Optional<Boolean>, Optional<Nullable<Int32>>, Optional<String>, CancellationToken) Starts a new private thread. Declaration public async Task<Result<IChannel>> StartThreadWithoutMessageAsync(Snowflake channelID, string name, AutoArchiveDuration autoArchiveDuration, ChannelType type, Optional<bool> isInvitable = default(Optional<bool>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The channel to start the thread in. String name The name of the thread. AutoArchiveDuration autoArchiveDuration The time of inactivity after which to archive the thread. ChannelType type The thread type to create. Discord defaults to creating a GuildPrivateThread , but this is likely to change in a future API version. Prefer always setting this explicitly. Remora.Rest.Core.Optional < Boolean > isInvitable The value indicating whether non-moderators can add other non-moderators to the thread. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The message rate limit per user, that is, the number of seconds they have to wait between sending messages. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A result which may or may not have succeeded. | Improve this Doc View Source TriggerTypingIndicatorAsync(Snowflake, CancellationToken) Triggers the typing indicator for the current user in the given channel. Declaration public Task<Result> TriggerTypingIndicatorAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source UnpinMessageAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Unpins the given message in the channel. Declaration public async Task<Result> UnpinMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements IDiscordRestChannelAPI Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Caching.API.CachingDiscordRestEmojiAPI.html": {
    "href": "api/Remora.Discord.Caching.API.CachingDiscordRestEmojiAPI.html",
    "title": "Class CachingDiscordRestEmojiAPI | Remora.Discord",
    "keywords": "Class CachingDiscordRestEmojiAPI Decorates the registered emoji API with caching functionality. Inheritance Object CachingDiscordRestEmojiAPI Implements IDiscordRestEmojiAPI Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.API Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CachingDiscordRestEmojiAPI : IDiscordRestEmojiAPI, IRestCustomizable Constructors | Improve this Doc View Source CachingDiscordRestEmojiAPI(IDiscordRestEmojiAPI, CacheService) Initializes a new instance of the CachingDiscordRestEmojiAPI class. Declaration public CachingDiscordRestEmojiAPI(IDiscordRestEmojiAPI actual, CacheService cacheService) Parameters Type Name Description IDiscordRestEmojiAPI actual The decorated instance. CacheService cacheService The cache service. Methods | Improve this Doc View Source CreateGuildEmojiAsync(Snowflake, String, Stream, IReadOnlyList<Snowflake>, Optional<String>, CancellationToken) Creates a new emoji for the given guild with the given parameters. Declaration public async Task<Result<IEmoji>> CreateGuildEmojiAsync(Snowflake guildID, string name, Stream image, IReadOnlyList<Snowflake> roles, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the new emoji. Stream image The image data. IReadOnlyList < Remora.Rest.Core.Snowflake > roles The roles that the emoji will be restricted to. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IEmoji >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteGuildEmojiAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given emoji. Declaration public async Task<Result> DeleteGuildEmojiAsync(Snowflake guildID, Snowflake emojiID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake emojiID The ID of the emoji. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source GetGuildEmojiAsync(Snowflake, Snowflake, CancellationToken) Gets the emoji on the given guild with the given ID. Declaration public async Task<Result<IEmoji>> GetGuildEmojiAsync(Snowflake guildID, Snowflake emojiID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake emojiID The ID of the emoji. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IEmoji >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListGuildEmojisAsync(Snowflake, CancellationToken) Gets a list of emojis for the given guild. Declaration public async Task<Result<IReadOnlyList<IEmoji>>> ListGuildEmojisAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IEmoji >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildEmojiAsync(Snowflake, Snowflake, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<String>, CancellationToken) Modifies the given emoji. Declaration public async Task<Result<IEmoji>> ModifyGuildEmojiAsync(Snowflake guildID, Snowflake emojiID, Optional<string> name = default(Optional<string>), Optional<IReadOnlyList<Snowflake>> roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake emojiID The ID of the emoji. Remora.Rest.Core.Optional < String > name The new name of the emoji. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> roles The new restricted roles. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IEmoji >> A modification result which may or may not have succeeded. | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements IDiscordRestEmojiAPI Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Caching.API.CachingDiscordRestGuildAPI.html": {
    "href": "api/Remora.Discord.Caching.API.CachingDiscordRestGuildAPI.html",
    "title": "Class CachingDiscordRestGuildAPI | Remora.Discord",
    "keywords": "Class CachingDiscordRestGuildAPI Decorates the registered guild API with caching functionality. Inheritance Object CachingDiscordRestGuildAPI Implements IDiscordRestGuildAPI Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.API Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CachingDiscordRestGuildAPI : IDiscordRestGuildAPI, IRestCustomizable Constructors | Improve this Doc View Source CachingDiscordRestGuildAPI(IDiscordRestGuildAPI, CacheService) Initializes a new instance of the CachingDiscordRestGuildAPI class. Declaration public CachingDiscordRestGuildAPI(IDiscordRestGuildAPI actual, CacheService cacheService) Parameters Type Name Description IDiscordRestGuildAPI actual The decorated instance. CacheService cacheService The cache service. Methods | Improve this Doc View Source AddGuildMemberAsync(Snowflake, Snowflake, String, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<Boolean>, Optional<Boolean>, CancellationToken) Adds a user to the guild using their OAuth2 access token. Declaration public async Task<Result<IGuildMember>> AddGuildMemberAsync(Snowflake guildID, Snowflake userID, string accessToken, Optional<string> nickname = default(Optional<string>), Optional<IReadOnlyList<Snowflake>> roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<bool> isMuted = default(Optional<bool>), Optional<bool> isDeafened = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user to add. String accessToken The OAuth2 access token. Remora.Rest.Core.Optional < String > nickname The user's new nickname. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> roles The roles the user should have. Remora.Rest.Core.Optional < Boolean > isMuted Whether the user should be muted in voice channels. Remora.Rest.Core.Optional < Boolean > isDeafened Whether the user should be deafened in voice channels. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A creation result that may or may not have succeeded. Remarks The returned value will be null if the user is already in the guild. | Improve this Doc View Source AddGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional<String>, CancellationToken) Adds a role to a guild member. Declaration public Task<Result> AddGuildMemberRoleAsync(Snowflake guildID, Snowflake userID, Snowflake roleID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source BeginGuildPruneAsync(Snowflake, Optional<Int32>, Optional<Boolean>, Optional<IReadOnlyList<Snowflake>>, Optional<String>, CancellationToken) Initiates a prune of the guild members. Declaration public Task<Result<IPruneCount>> BeginGuildPruneAsync(Snowflake guildID, Optional<int> days = default(Optional<int>), Optional<bool> computePruneCount = default(Optional<bool>), Optional<IReadOnlyList<Snowflake>> includeRoles = default(Optional<IReadOnlyList<Snowflake>>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > days The days a user needs to have been inactive for them to be pruned. Remora.Rest.Core.Optional < Boolean > computePruneCount Whether the number of pruned users should be computed and returned. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> includeRoles The roles that should be included in a prune operation. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPruneCount >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source CreateGuildAsync(String, Optional<Stream>, Optional<VerificationLevel>, Optional<MessageNotificationLevel>, Optional<ExplicitContentFilterLevel>, Optional<IReadOnlyList<IRole>>, Optional<IReadOnlyList<IPartialChannel>>, Optional<Snowflake>, Optional<TimeSpan>, Optional<Snowflake>, Optional<SystemChannelFlags>, CancellationToken) Creates a new guild. This can only by used by bots in less than 10 guilds. Declaration public async Task<Result<IGuild>> CreateGuildAsync(string name, Optional<Stream> icon = default(Optional<Stream>), Optional<VerificationLevel> verificationLevel = default(Optional<VerificationLevel>), Optional<MessageNotificationLevel> defaultMessageNotifications = default(Optional<MessageNotificationLevel>), Optional<ExplicitContentFilterLevel> explicitContentFilter = default(Optional<ExplicitContentFilterLevel>), Optional<IReadOnlyList<IRole>> roles = default(Optional<IReadOnlyList<IRole>>), Optional<IReadOnlyList<IPartialChannel>> channels = default(Optional<IReadOnlyList<IPartialChannel>>), Optional<Snowflake> afkChannelID = default(Optional<Snowflake>), Optional<TimeSpan> afkTimeout = default(Optional<TimeSpan>), Optional<Snowflake> systemChannelID = default(Optional<Snowflake>), Optional<SystemChannelFlags> systemChannelFlags = default(Optional<SystemChannelFlags>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String name The name of the guild (2-100 characters). Remora.Rest.Core.Optional < Stream > icon The icon. Remora.Rest.Core.Optional < VerificationLevel > verificationLevel The verification level. Remora.Rest.Core.Optional < MessageNotificationLevel > defaultMessageNotifications The default message notification level. Remora.Rest.Core.Optional < ExplicitContentFilterLevel > explicitContentFilter The explicit content filter level. Remora.Rest.Core.Optional < IReadOnlyList < IRole >> roles The new guild roles. Remora.Rest.Core.Optional < IReadOnlyList < IPartialChannel >> channels The new guild channels. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > afkChannelID The ID of the AFK channel. Remora.Rest.Core.Optional < TimeSpan > afkTimeout The number of seconds until AFK timeout. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > systemChannelID The ID of the system message channel. Remora.Rest.Core.Optional < SystemChannelFlags > systemChannelFlags The channel flags to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source CreateGuildBanAsync(Snowflake, Snowflake, Optional<Int32>, Optional<String>, CancellationToken) Bans the given user. Declaration public Task<Result> CreateGuildBanAsync(Snowflake guildID, Snowflake userID, Optional<int> deleteMessageDays = default(Optional<int>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < Int32 > deleteMessageDays The number of days to delete messages for (0-7). Defaults to 0. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source CreateGuildChannelAsync(Snowflake, String, Optional<ChannelType>, Optional<String>, Optional<Int32>, Optional<Int32>, Optional<Int32>, Optional<Int32>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Snowflake>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<String>, CancellationToken) Creates a new channel for the guild. Declaration public async Task<Result<IChannel>> CreateGuildChannelAsync(Snowflake guildID, string name, Optional<ChannelType> type = default(Optional<ChannelType>), Optional<string> topic = default(Optional<string>), Optional<int> bitrate = default(Optional<int>), Optional<int> userLimit = default(Optional<int>), Optional<int> rateLimitPerUser = default(Optional<int>), Optional<int> position = default(Optional<int>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake> parentID = default(Optional<Snowflake>), Optional<bool> isNsfw = default(Optional<bool>), Optional<AutoArchiveDuration> defaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the new channel. Remora.Rest.Core.Optional < ChannelType > type The type of the new channel. Remora.Rest.Core.Optional < String > topic The topic of the new channel. Remora.Rest.Core.Optional < Int32 > bitrate The bitrate of the new channel, if it is a voice channel. Remora.Rest.Core.Optional < Int32 > userLimit The maximum number of users in the channel, if it is a voice channel. Remora.Rest.Core.Optional < Int32 > rateLimitPerUser The number of seconds a user has to wait between messages. Remora.Rest.Core.Optional < Int32 > position The sorting position of the new channel. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The permission overwrites of the new channel. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > parentID The ID of the parent category of the new channel. Remora.Rest.Core.Optional < Boolean > isNsfw Whether the new channel is NSFW. Remora.Rest.Core.Optional < AutoArchiveDuration > defaultAutoArchiveDuration The default auto archival duration for threads. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateGuildRoleAsync(Snowflake, Optional<String>, Optional<IDiscordPermissionSet>, Optional<Color>, Optional<Boolean>, Optional<Stream>, Optional<String>, Optional<Boolean>, Optional<String>, CancellationToken) Creates a new guild role. Declaration public async Task<Result<IRole>> CreateGuildRoleAsync(Snowflake guildID, Optional<string> name = default(Optional<string>), Optional<IDiscordPermissionSet> permissions = default(Optional<IDiscordPermissionSet>), Optional<Color> colour = default(Optional<Color>), Optional<bool> isHoisted = default(Optional<bool>), Optional<Stream> icon = default(Optional<Stream>), Optional<string> unicodeEmoji = default(Optional<string>), Optional<bool> isMentionable = default(Optional<bool>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < String > name The name of the new role. Remora.Rest.Core.Optional < IDiscordPermissionSet > permissions The permissions of the new role. Remora.Rest.Core.Optional < Color > colour The colour of the new role. Remora.Rest.Core.Optional < Boolean > isHoisted Whether the new role is displayed separately in the sidebar. Remora.Rest.Core.Optional < Stream > icon The role's icon image. Remora.Rest.Core.Optional < String > unicodeEmoji The role's unicode emoji icon. Remora.Rest.Core.Optional < Boolean > isMentionable Whether the new role is mentionable. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IRole >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteGuildAsync(Snowflake, CancellationToken) Deletes the guild with the given ID. Declaration public async Task<Result> DeleteGuildAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteGuildRoleAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given role. Declaration public async Task<Result> DeleteGuildRoleAsync(Snowflake guildId, Snowflake roleID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source GetGuildAsync(Snowflake, Optional<Boolean>, CancellationToken) Gets the guild with the given ID. Declaration public async Task<Result<IGuild>> GetGuildAsync(Snowflake guildID, Optional<bool> withCounts = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > withCounts Whether member and presence counts should be included. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildBanAsync(Snowflake, Snowflake, CancellationToken) Gets a ban object for the given user. Declaration public async Task<Result<IBan>> GetGuildBanAsync(Snowflake guildID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IBan >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildBansAsync(Snowflake, Optional<Int32>, Optional<Snowflake>, Optional<Snowflake>, CancellationToken) Gets a list of bans. Declaration public async Task<Result<IReadOnlyList<IBan>>> GetGuildBansAsync(Snowflake guildID, Optional<int> limit = default(Optional<int>), Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > limit The maximum number of bans to return (max 1000). Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before The ID of the ban to get bans before. This is a mutually exclusive option with after , though Discord accepts both at the same time. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The ID of the ban to get bans after. This is a mutually exclusive option with before , though Discord accepts both at the same time. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IBan >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildChannelsAsync(Snowflake, CancellationToken) Gets the channels of the given guild. Declaration public async Task<Result<IReadOnlyList<IChannel>>> GetGuildChannelsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IChannel >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildIntegrationsAsync(Snowflake, Optional<Boolean>, CancellationToken) Gets the integrations for the guild. Declaration public async Task<Result<IReadOnlyList<IIntegration>>> GetGuildIntegrationsAsync(Snowflake guildID, Optional<bool> includeApplications = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > includeApplications Whether bot and OAuth2 webhook integrations should be included. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IIntegration >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildInvitesAsync(Snowflake, CancellationToken) Gets the invites for the guild. Declaration public async Task<Result<IReadOnlyList<IInvite>>> GetGuildInvitesAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IInvite >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildMemberAsync(Snowflake, Snowflake, CancellationToken) Gets member information about the given user. Declaration public async Task<Result<IGuildMember>> GetGuildMemberAsync(Snowflake guildID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildPreviewAsync(Snowflake, CancellationToken) Gets a preview of the guild with the given ID. This is only for public guilds. Declaration public async Task<Result<IGuildPreview>> GetGuildPreviewAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildPreview >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildPruneCountAsync(Snowflake, Optional<Int32>, Optional<IReadOnlyList<Snowflake>>, CancellationToken) Gets the number of users that would br pruned in a prune operation. Declaration public Task<Result<IPruneCount>> GetGuildPruneCountAsync(Snowflake guildID, Optional<int> days = default(Optional<int>), Optional<IReadOnlyList<Snowflake>> includeRoles = default(Optional<IReadOnlyList<Snowflake>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > days The days a user needs to have been inactive for them to be pruned. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> includeRoles The roles that should be included in a prune operation. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPruneCount >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildRolesAsync(Snowflake, CancellationToken) Gets the roles in the guild. Declaration public async Task<Result<IReadOnlyList<IRole>>> GetGuildRolesAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IRole >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildVanityUrlAsync(Snowflake, CancellationToken) Gets the vanity invite for the given guild. Declaration public Task<Result<IPartialInvite>> GetGuildVanityUrlAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPartialInvite >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildVoiceRegionsAsync(Snowflake, CancellationToken) Gets the voice regions for the guild. Declaration public async Task<Result<IReadOnlyList<IVoiceRegion>>> GetGuildVoiceRegionsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IVoiceRegion >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWelcomeScreenAsync(Snowflake, CancellationToken) Gets the guild's welcome screen. Declaration public async Task<Result<IWelcomeScreen>> GetGuildWelcomeScreenAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWelcomeScreen >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWidgetAsync(Snowflake, CancellationToken) Gets the status and invite widget for the guild. Declaration public Task<Result<IGuildWidget>> GetGuildWidgetAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildWidget >> A result which may or may not have succeeded. | Improve this Doc View Source GetGuildWidgetImageAsync(Snowflake, Optional<WidgetImageStyle>, CancellationToken) Gets the image for the guild widget. Declaration public Task<Result<Stream>> GetGuildWidgetImageAsync(Snowflake guildID, Optional<WidgetImageStyle> style = default(Optional<WidgetImageStyle>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < WidgetImageStyle > style The image style. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < Stream >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWidgetSettingsAsync(Snowflake, CancellationToken) Gets the guild widget. Declaration public async Task<Result<IGuildWidgetSettings>> GetGuildWidgetSettingsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildWidgetSettings >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListActiveGuildThreadsAsync(Snowflake, CancellationToken) Lists the active threads in the given guild. Declaration public Task<Result<IGuildThreadQueryResponse>> ListActiveGuildThreadsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildThreadQueryResponse >> A result which may or may not have succeeded. | Improve this Doc View Source ListGuildMembersAsync(Snowflake, Optional<Int32>, Optional<Snowflake>, CancellationToken) Gets a list of guild members. Declaration public async Task<Result<IReadOnlyList<IGuildMember>>> ListGuildMembersAsync(Snowflake guildID, Optional<int> limit = default(Optional<int>), Optional<Snowflake> after = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > limit The maximum number of guild members to return (1-1000). Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The highest user ID in the previously retrieved page. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildMember >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyCurrentMemberAsync(Snowflake, Optional<String>, Optional<String>, CancellationToken) Modifies the current member. Declaration public async Task<Result<IGuildMember>> ModifyCurrentMemberAsync(Snowflake guildID, Optional<string> nickname = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < String > nickname The new nickname. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A modification result which may or may not have succeeded, containing the updated member. | Improve this Doc View Source ModifyCurrentUserVoiceStateAsync(Snowflake, Snowflake, Optional<Boolean>, Optional<Nullable<DateTimeOffset>>, CancellationToken) Modifies the voice state of the current user. Declaration public Task<Result> ModifyCurrentUserVoiceStateAsync(Snowflake guildID, Snowflake channelID, Optional<bool> suppress = default(Optional<bool>), Optional<DateTimeOffset?> requestToSpeakTimestamp = default(Optional<DateTimeOffset?>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake channelID The ID of the voice channel the user is currently in. Remora.Rest.Core.Optional < Boolean > suppress Whether to toggle the user's suppression state. Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> requestToSpeakTimestamp The time when the user requested to speak. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildAsync(Snowflake, Optional<String>, Optional<Nullable<VerificationLevel>>, Optional<Nullable<MessageNotificationLevel>>, Optional<Nullable<ExplicitContentFilterLevel>>, Optional<Nullable<Snowflake>>, Optional<TimeSpan>, Optional<Stream>, Optional<Snowflake>, Optional<Stream>, Optional<Stream>, Optional<Stream>, Optional<Nullable<Snowflake>>, Optional<SystemChannelFlags>, Optional<Nullable<Snowflake>>, Optional<Nullable<Snowflake>>, Optional<String>, Optional<IReadOnlyList<GuildFeature>>, Optional<String>, Optional<Boolean>, Optional<String>, CancellationToken) Modifies the guild with the given ID. Declaration public async Task<Result<IGuild>> ModifyGuildAsync(Snowflake guildID, Optional<string> name = default(Optional<string>), Optional<VerificationLevel?> verificationLevel = default(Optional<VerificationLevel?>), Optional<MessageNotificationLevel?> defaultMessageNotifications = default(Optional<MessageNotificationLevel?>), Optional<ExplicitContentFilterLevel?> explicitContentFilter = default(Optional<ExplicitContentFilterLevel?>), Optional<Snowflake?> afkChannelID = default(Optional<Snowflake?>), Optional<TimeSpan> afkTimeout = default(Optional<TimeSpan>), Optional<Stream> icon = default(Optional<Stream>), Optional<Snowflake> ownerID = default(Optional<Snowflake>), Optional<Stream> splash = default(Optional<Stream>), Optional<Stream> discoverySplash = default(Optional<Stream>), Optional<Stream> banner = default(Optional<Stream>), Optional<Snowflake?> systemChannelID = default(Optional<Snowflake?>), Optional<SystemChannelFlags> systemChannelFlags = default(Optional<SystemChannelFlags>), Optional<Snowflake?> rulesChannelID = default(Optional<Snowflake?>), Optional<Snowflake?> publicUpdatesChannelID = default(Optional<Snowflake?>), Optional<string> preferredLocale = default(Optional<string>), Optional<IReadOnlyList<GuildFeature>> features = default(Optional<IReadOnlyList<GuildFeature>>), Optional<string> description = default(Optional<string>), Optional<bool> isPremiumProgressBarEnabled = default(Optional<bool>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < String > name The new name of the guild. Remora.Rest.Core.Optional < Nullable < VerificationLevel >> verificationLevel The new verification level of the guild. Remora.Rest.Core.Optional < Nullable < MessageNotificationLevel >> defaultMessageNotifications The new default notification level of the guild. Remora.Rest.Core.Optional < Nullable < ExplicitContentFilterLevel >> explicitContentFilter The new explicit filter level of the guild. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> afkChannelID The ID of the new AFK channel. Remora.Rest.Core.Optional < TimeSpan > afkTimeout The new AFK timeout. Remora.Rest.Core.Optional < Stream > icon The new icon. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ownerID The ID of the new owner. Remora.Rest.Core.Optional < Stream > splash The new splash. Remora.Rest.Core.Optional < Stream > discoverySplash The new discovery splash. Remora.Rest.Core.Optional < Stream > banner The new banner. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> systemChannelID The ID of the new channel for system messages. Remora.Rest.Core.Optional < SystemChannelFlags > systemChannelFlags The new system channel flags. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> rulesChannelID The ID of the new channel for rules. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> publicUpdatesChannelID The ID of the new channel for public updates. Remora.Rest.Core.Optional < String > preferredLocale The new preferred locale. Remora.Rest.Core.Optional < IReadOnlyList < GuildFeature >> features The new guild features. Remora.Rest.Core.Optional < String > description The new description. Remora.Rest.Core.Optional < Boolean > isPremiumProgressBarEnabled Whether the guild has the boost progress bar enabled. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGuildChannelPositionsAsync(Snowflake, IReadOnlyList<(Snowflake ChannelID, Nullable<Int32> Position, Nullable<Boolean> LockPermissions, Nullable<Snowflake> ParentID)>, Optional<String>, CancellationToken) Modifies the positions of a set of channels in the guild. Declaration public Task<Result> ModifyGuildChannelPositionsAsync(Snowflake guildID, IReadOnlyList<(Snowflake ChannelID, int? Position, bool? LockPermissions, Snowflake? ParentID)> positionModifications, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. IReadOnlyList < (T1, T2, T3, T4) < Remora.Rest.Core.Snowflake , Nullable < Int32 >, Nullable < Boolean >, Nullable < Remora.Rest.Core.Snowflake >>> positionModifications The new positions of the modified channels. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildMemberAsync(Snowflake, Snowflake, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<Nullable<Boolean>>, Optional<Nullable<Boolean>>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, CancellationToken) Modifies attributes of a guild member. Declaration public Task<Result> ModifyGuildMemberAsync(Snowflake guildID, Snowflake userID, Optional<string> nickname = default(Optional<string>), Optional<IReadOnlyList<Snowflake>> roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<bool?> isMuted = default(Optional<bool?>), Optional<bool?> isDeafened = default(Optional<bool?>), Optional<Snowflake?> channelID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> communicationDisabledUntil = default(Optional<DateTimeOffset?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < String > nickname The new nickname of the user. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> roles The new roles of the user. Remora.Rest.Core.Optional < Nullable < Boolean >> isMuted The new mute state of the user. Remora.Rest.Core.Optional < Nullable < Boolean >> isDeafened The new deaf state of the user. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> channelID The new voice channel of the user. Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> communicationDisabledUntil The DateTime until the user has communication disabled. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A rest result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildRoleAsync(Snowflake, Snowflake, Optional<String>, Optional<IDiscordPermissionSet>, Optional<Nullable<Color>>, Optional<Nullable<Boolean>>, Optional<Stream>, Optional<String>, Optional<Nullable<Boolean>>, Optional<String>, CancellationToken) Modifies the given role. Declaration public async Task<Result<IRole>> ModifyGuildRoleAsync(Snowflake guildID, Snowflake roleID, Optional<string> name = default(Optional<string>), Optional<IDiscordPermissionSet> permissions = default(Optional<IDiscordPermissionSet>), Optional<Color?> colour = default(Optional<Color?>), Optional<bool?> isHoisted = default(Optional<bool?>), Optional<Stream> icon = default(Optional<Stream>), Optional<string> unicodeEmoji = default(Optional<string>), Optional<bool?> isMentionable = default(Optional<bool?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > name The new name of the role. Remora.Rest.Core.Optional < IDiscordPermissionSet > permissions The new permissions of the role. Remora.Rest.Core.Optional < Nullable < Color >> colour Remora.Rest.Core.Optional < Nullable < Boolean >> isHoisted Whether the role is displayed separately in the sidebar. Remora.Rest.Core.Optional < Stream > icon The role's icon image. Remora.Rest.Core.Optional < String > unicodeEmoji The role's unicode emoji icon. Remora.Rest.Core.Optional < Nullable < Boolean >> isMentionable Whether the role is mentionable. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IRole >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGuildRolePositionsAsync(Snowflake, IReadOnlyList<(Snowflake RoleID, Optional<Nullable<Int32>> Position)>, Optional<String>, CancellationToken) Modifies the positions of a set of roles in the guild. Declaration public async Task<Result<IReadOnlyList<IRole>>> ModifyGuildRolePositionsAsync(Snowflake guildID, IReadOnlyList<(Snowflake RoleID, Optional<int?> Position)> modifiedPositions, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. IReadOnlyList < (T1, T2) < Remora.Rest.Core.Snowflake , Remora.Rest.Core.Optional < Nullable < Int32 >>>> modifiedPositions The modified role positions. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IRole >>> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildWelcomeScreenAsync(Snowflake, Optional<Nullable<Boolean>>, Optional<IReadOnlyList<IWelcomeScreenChannel>>, Optional<String>, Optional<String>, CancellationToken) Modifies the guild's welcome screen. Declaration public Task<Result<IWelcomeScreen>> ModifyGuildWelcomeScreenAsync(Snowflake guildID, Optional<bool?> isEnabled = default(Optional<bool?>), Optional<IReadOnlyList<IWelcomeScreenChannel>> welcomeChannels = default(Optional<IReadOnlyList<IWelcomeScreenChannel>>), Optional<string> description = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Nullable < Boolean >> isEnabled Whether the welcome screen is enabled. Remora.Rest.Core.Optional < IReadOnlyList < IWelcomeScreenChannel >> welcomeChannels The channels displayed. Remora.Rest.Core.Optional < String > description The guild's description. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWelcomeScreen >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildWidgetAsync(Snowflake, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<String>, CancellationToken) Modifies the guild widget for the guild. Declaration public async Task<Result<IGuildWidgetSettings>> ModifyGuildWidgetAsync(Snowflake guildID, Optional<bool> isEnabled = default(Optional<bool>), Optional<Snowflake?> channelID = default(Optional<Snowflake?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > isEnabled Whether the widget is enabled. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> channelID The ID of the channel invites will be generated for. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildWidgetSettings >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyUserVoiceStateAsync(Snowflake, Snowflake, Snowflake, Optional<Boolean>, CancellationToken) Modifies the voice state of another user. Declaration public Task<Result<IVoiceState>> ModifyUserVoiceStateAsync(Snowflake guildID, Snowflake userID, Snowflake channelID, Optional<bool> suppress = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Snowflake channelID The ID of the voice channel the user is currently in. Remora.Rest.Core.Optional < Boolean > suppress Whether to toggle the user's suppression state. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IVoiceState >> A modification result which may or may not have succeeded. | Improve this Doc View Source RemoveGuildBanAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Unbans the given user. Declaration public async Task<Result> RemoveGuildBanAsync(Snowflake guildID, Snowflake userID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source RemoveGuildMemberAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Removes a member from the guild. Declaration public async Task<Result> RemoveGuildMemberAsync(Snowflake guildID, Snowflake userID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source RemoveGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional<String>, CancellationToken) Removes a role from a guild member. Declaration public Task<Result> RemoveGuildMemberRoleAsync(Snowflake guildID, Snowflake userID, Snowflake roleID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source SearchGuildMembersAsync(Snowflake, String, Optional<Int32>, CancellationToken) Gets a list of guild members whose username or nickname start with the query string. Declaration public async Task<Result<IReadOnlyList<IGuildMember>>> SearchGuildMembersAsync(Snowflake guildID, string query, Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String query The query string. Remora.Rest.Core.Optional < Int32 > limit The maximum number of members to return (1-1000). CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildMember >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements IDiscordRestGuildAPI Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Caching.API.CachingDiscordRestInteractionAPI.html": {
    "href": "api/Remora.Discord.Caching.API.CachingDiscordRestInteractionAPI.html",
    "title": "Class CachingDiscordRestInteractionAPI | Remora.Discord",
    "keywords": "Class CachingDiscordRestInteractionAPI Decorates the registered interaction API with caching functionality. Inheritance Object CachingDiscordRestInteractionAPI Implements IDiscordRestInteractionAPI Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.API Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CachingDiscordRestInteractionAPI : IDiscordRestInteractionAPI, IRestCustomizable Constructors | Improve this Doc View Source CachingDiscordRestInteractionAPI(IDiscordRestInteractionAPI, CacheService) Initializes a new instance of the CachingDiscordRestInteractionAPI class. Declaration public CachingDiscordRestInteractionAPI(IDiscordRestInteractionAPI actual, CacheService cacheService) Parameters Type Name Description IDiscordRestInteractionAPI actual The decorated instance. CacheService cacheService The cache service. Methods | Improve this Doc View Source CreateFollowupMessageAsync(Snowflake, String, Optional<String>, Optional<Boolean>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<MessageFlags>, CancellationToken) Creates a followup message. Declaration public async Task<Result<IMessage>> CreateFollowupMessageAsync(Snowflake applicationID, string token, Optional<string> content = default(Optional<string>), Optional<bool> isTTS = default(Optional<bool>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<MessageFlags> flags = default(Optional<MessageFlags>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < Boolean > isTTS Whether this message is a TTS message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The embeds in the message. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The set of allowed mentions of the message. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components that should be included with the message. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < MessageFlags > flags The message flags to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source CreateInteractionResponseAsync(Snowflake, String, IInteractionResponse, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Creates a response to an interaction from the gateway. Declaration public Task<Result> CreateInteractionResponseAsync(Snowflake interactionID, string interactionToken, IInteractionResponse response, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake interactionID The ID of the interaction. String interactionToken The interaction token. IInteractionResponse response The response. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteFollowupMessageAsync(Snowflake, String, Snowflake, CancellationToken) Deletes an interaction followup message. Declaration public async Task<Result> DeleteFollowupMessageAsync(Snowflake applicationID, string token, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A modification result which may or may not have succeeded. | Improve this Doc View Source DeleteOriginalInteractionResponseAsync(Snowflake, String, CancellationToken) Deletes the original interaction response. Declaration public async Task<Result> DeleteOriginalInteractionResponseAsync(Snowflake applicationID, string token, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditFollowupMessageAsync(Snowflake, String, Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Edits an interaction followup message. Declaration public async Task<Result<IMessage>> EditFollowupMessageAsync(Snowflake applicationID, string token, Snowflake messageID, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > content The new content, if any. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds, if any. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The new allowed mentions, if any. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components, if any. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source EditOriginalInteractionResponseAsync(Snowflake, String, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Edits the initial interaction response. Declaration public async Task<Result<IMessage>> EditOriginalInteractionResponseAsync(Snowflake applicationID, string token, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Optional < String > content The new content, if any. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds, if any. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The new allowed mentions, if any. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components, if any. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source GetFollowupMessageAsync(Snowflake, String, Snowflake, CancellationToken) Gets a followup message associated with the given interaction. Declaration public async Task<Result<IMessage>> GetFollowupMessageAsync(Snowflake applicationID, string token, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. | Improve this Doc View Source GetOriginalInteractionResponseAsync(Snowflake, String, CancellationToken) Gets the message object of the original interaction response. Declaration public async Task<Result<IMessage>> GetOriginalInteractionResponseAsync(Snowflake applicationID, string interactionToken, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. String interactionToken The interaction token. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements IDiscordRestInteractionAPI Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Caching.API.CachingDiscordRestInviteAPI.html": {
    "href": "api/Remora.Discord.Caching.API.CachingDiscordRestInviteAPI.html",
    "title": "Class CachingDiscordRestInviteAPI | Remora.Discord",
    "keywords": "Class CachingDiscordRestInviteAPI Decorates the registered invite API with caching functionality. Inheritance Object CachingDiscordRestInviteAPI Implements IDiscordRestInviteAPI Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.API Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CachingDiscordRestInviteAPI : IDiscordRestInviteAPI, IRestCustomizable Constructors | Improve this Doc View Source CachingDiscordRestInviteAPI(IDiscordRestInviteAPI, CacheService) Initializes a new instance of the CachingDiscordRestInviteAPI class. Declaration public CachingDiscordRestInviteAPI(IDiscordRestInviteAPI actual, CacheService cacheService) Parameters Type Name Description IDiscordRestInviteAPI actual The decorated instance. CacheService cacheService The cache service. Methods | Improve this Doc View Source DeleteInviteAsync(String, Optional<String>, CancellationToken) Deletes the given invite code. Declaration public async Task<Result<IInvite>> DeleteInviteAsync(string inviteCode, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String inviteCode The invite code. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IInvite >> A deletion result which may or may not have succeeded. | Improve this Doc View Source GetInviteAsync(String, Optional<Boolean>, Optional<Boolean>, Optional<Snowflake>, CancellationToken) Gets an invite object for the given code. Declaration public async Task<Result<IInvite>> GetInviteAsync(string inviteCode, Optional<bool> withCounts = default(Optional<bool>), Optional<bool> withExpiration = default(Optional<bool>), Optional<Snowflake> guildScheduledEventID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String inviteCode The invite code. Remora.Rest.Core.Optional < Boolean > withCounts Whether the invite should contain approximate member counts. Remora.Rest.Core.Optional < Boolean > withExpiration Whether the invite should contain the expiration date. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > guildScheduledEventID The scheduled event to include with the invite. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IInvite >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements IDiscordRestInviteAPI Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Caching.API.CachingDiscordRestOAuth2API.html": {
    "href": "api/Remora.Discord.Caching.API.CachingDiscordRestOAuth2API.html",
    "title": "Class CachingDiscordRestOAuth2API | Remora.Discord",
    "keywords": "Class CachingDiscordRestOAuth2API Decorates the registered OAuth2 API with caching functionality. Inheritance Object CachingDiscordRestOAuth2API Implements IDiscordRestOAuth2API Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.API Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CachingDiscordRestOAuth2API : IDiscordRestOAuth2API, IRestCustomizable Constructors | Improve this Doc View Source CachingDiscordRestOAuth2API(IDiscordRestOAuth2API, CacheService) Initializes a new instance of the CachingDiscordRestOAuth2API class. Declaration public CachingDiscordRestOAuth2API(IDiscordRestOAuth2API actual, CacheService cacheService) Parameters Type Name Description IDiscordRestOAuth2API actual The decorated instance. CacheService cacheService The cache service. Methods | Improve this Doc View Source GetCurrentAuthorizationInformationAsync(CancellationToken) Gets information about the bot's current authorizations. Declaration public async Task<Result<IAuthorizationInformation>> GetCurrentAuthorizationInformationAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IAuthorizationInformation >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetCurrentBotApplicationInformationAsync(CancellationToken) Gets the bot's OAuth2 application object. Flags are typically not included. Declaration public async Task<Result<IApplication>> GetCurrentBotApplicationInformationAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplication >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements IDiscordRestOAuth2API Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Caching.API.CachingDiscordRestTemplateAPI.html": {
    "href": "api/Remora.Discord.Caching.API.CachingDiscordRestTemplateAPI.html",
    "title": "Class CachingDiscordRestTemplateAPI | Remora.Discord",
    "keywords": "Class CachingDiscordRestTemplateAPI Decorates the registered template API with caching functionality. Inheritance Object CachingDiscordRestTemplateAPI Implements IDiscordRestTemplateAPI Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.API Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CachingDiscordRestTemplateAPI : IDiscordRestTemplateAPI, IRestCustomizable Constructors | Improve this Doc View Source CachingDiscordRestTemplateAPI(IDiscordRestTemplateAPI, CacheService) Initializes a new instance of the CachingDiscordRestTemplateAPI class. Declaration public CachingDiscordRestTemplateAPI(IDiscordRestTemplateAPI actual, CacheService cacheService) Parameters Type Name Description IDiscordRestTemplateAPI actual The decorated instance. CacheService cacheService The cache service. Methods | Improve this Doc View Source CreateGuildFromTemplateAsync(String, String, Optional<Stream>, CancellationToken) Creates a new guild from the given template. Declaration public async Task<Result<IGuild>> CreateGuildFromTemplateAsync(string templateCode, string name, Optional<Stream> icon = default(Optional<Stream>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String templateCode The template code. String name The name of the new guild. Remora.Rest.Core.Optional < Stream > icon The icon of the new guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source CreateGuildTemplateAsync(Snowflake, String, Optional<String>, CancellationToken) Creates a new guild template from the given guild. Declaration public async Task<Result<ITemplate>> CreateGuildTemplateAsync(Snowflake guildID, string name, Optional<string> description = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the template. Remora.Rest.Core.Optional < String > description The description of the template. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A creation result which may or may not have succeeded. | Improve this Doc View Source DeleteGuildTemplateAsync(Snowflake, String, CancellationToken) Deletes the given guild template. Declaration public async Task<Result<ITemplate>> DeleteGuildTemplateAsync(Snowflake guildID, string templateCode, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String templateCode The template code. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A retrieval result which may or may not have succeeded. This contains the deleted template. | Improve this Doc View Source GetGuildTemplatesAsync(Snowflake, CancellationToken) Gets the template for the given guild. Declaration public async Task<Result<IReadOnlyList<ITemplate>>> GetGuildTemplatesAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < ITemplate >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetTemplateAsync(String, CancellationToken) Gets the template object for the given code. Declaration public async Task<Result<ITemplate>> GetTemplateAsync(string templateCode, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String templateCode The template code. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildTemplateAsync(Snowflake, String, String, Optional<String>, CancellationToken) Modifies the template's metadata. Declaration public async Task<Result<ITemplate>> ModifyGuildTemplateAsync(Snowflake guildID, string templateCode, string name, Optional<string> description, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String templateCode The template code. String name The new name of the template. Remora.Rest.Core.Optional < String > description The new description of the template. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A modification result which may or may not have succeeded. | Improve this Doc View Source SyncGuildTemplateAsync(Snowflake, String, CancellationToken) Synchronized the template to the guild's current state. Declaration public async Task<Result<ITemplate>> SyncGuildTemplateAsync(Snowflake guildID, string templateCode, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String templateCode The template code. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements IDiscordRestTemplateAPI Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Caching.API.CachingDiscordRestUserAPI.html": {
    "href": "api/Remora.Discord.Caching.API.CachingDiscordRestUserAPI.html",
    "title": "Class CachingDiscordRestUserAPI | Remora.Discord",
    "keywords": "Class CachingDiscordRestUserAPI Decorates the registered user API with caching functionality. Inheritance Object CachingDiscordRestUserAPI Implements IDiscordRestUserAPI Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.API Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CachingDiscordRestUserAPI : IDiscordRestUserAPI, IRestCustomizable Constructors | Improve this Doc View Source CachingDiscordRestUserAPI(IDiscordRestUserAPI, CacheService) Initializes a new instance of the CachingDiscordRestUserAPI class. Declaration public CachingDiscordRestUserAPI(IDiscordRestUserAPI actual, CacheService cacheService) Parameters Type Name Description IDiscordRestUserAPI actual The decorated instance. CacheService cacheService The cache service. Methods | Improve this Doc View Source CreateDMAsync(Snowflake, CancellationToken) Creates a new DM channel with the given user. Declaration public async Task<Result<IChannel>> CreateDMAsync(Snowflake recipientID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake recipientID The ID of the recipient. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A creation result which may or may not have succeeded. | Improve this Doc View Source GetCurrentUserAsync(CancellationToken) Gets the user object of the requester's account. Declaration public async Task<Result<IUser>> GetCurrentUserAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IUser >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetCurrentUserGuildMemberAsync(Snowflake, CancellationToken) Gets a guild member object for the current user. Declaration public async Task<Result<IGuildMember>> GetCurrentUserGuildMemberAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A retrieval result which may or may not have succeeded. Remarks Requires the \"guild.members.read\" OAuth\" scope. | Improve this Doc View Source GetCurrentUserGuildsAsync(Optional<Snowflake>, Optional<Snowflake>, Optional<Int32>, CancellationToken) Gets the guilds the user is in. Declaration public Task<Result<IReadOnlyList<IPartialGuild>>> GetCurrentUserGuildsAsync(Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before Get guilds before this guild ID. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after Get guilds after this guild ID. Remora.Rest.Core.Optional < Int32 > limit The maximum number of guilds to get (1-200). Defaults to 200. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IPartialGuild >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetUserAsync(Snowflake, CancellationToken) Gets the user with the given ID. Declaration public async Task<Result<IUser>> GetUserAsync(Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IUser >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetUserConnectionsAsync(CancellationToken) Gets a list of connection objects. Declaration public async Task<Result<IReadOnlyList<IConnection>>> GetUserConnectionsAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IConnection >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetUserDMsAsync(CancellationToken) Gets a list of DM channels the user has. This always returns an empty array for bots. Declaration public async Task<Result<IReadOnlyList<IChannel>>> GetUserDMsAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IChannel >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source LeaveGuildAsync(Snowflake, CancellationToken) Leaves the given guild. Declaration public Task<Result> LeaveGuildAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source ModifyCurrentUserAsync(Optional<String>, Optional<Stream>, CancellationToken) Modifies the current user. Declaration public async Task<Result<IUser>> ModifyCurrentUserAsync(Optional<string> username, Optional<Stream> avatar = default(Optional<Stream>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Optional < String > username The new username. Remora.Rest.Core.Optional < Stream > avatar The new avatar. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IUser >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements IDiscordRestUserAPI Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Caching.API.CachingDiscordRestVoiceAPI.html": {
    "href": "api/Remora.Discord.Caching.API.CachingDiscordRestVoiceAPI.html",
    "title": "Class CachingDiscordRestVoiceAPI | Remora.Discord",
    "keywords": "Class CachingDiscordRestVoiceAPI Decorates the registered voice API with caching functionality. Inheritance Object CachingDiscordRestVoiceAPI Implements IDiscordRestVoiceAPI Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.API Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CachingDiscordRestVoiceAPI : IDiscordRestVoiceAPI, IRestCustomizable Constructors | Improve this Doc View Source CachingDiscordRestVoiceAPI(IDiscordRestVoiceAPI, CacheService) Initializes a new instance of the CachingDiscordRestVoiceAPI class. Declaration public CachingDiscordRestVoiceAPI(IDiscordRestVoiceAPI actual, CacheService cacheService) Parameters Type Name Description IDiscordRestVoiceAPI actual The decorated instance. CacheService cacheService The cache service. Methods | Improve this Doc View Source ListVoiceRegionsAsync(CancellationToken) Gets the available voice regions. Declaration public async Task<Result<IReadOnlyList<IVoiceRegion>>> ListVoiceRegionsAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IVoiceRegion >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements IDiscordRestVoiceAPI Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Caching.API.CachingDiscordRestWebhookAPI.html": {
    "href": "api/Remora.Discord.Caching.API.CachingDiscordRestWebhookAPI.html",
    "title": "Class CachingDiscordRestWebhookAPI | Remora.Discord",
    "keywords": "Class CachingDiscordRestWebhookAPI Decorates the registered webhook API with caching functionality. Inheritance Object CachingDiscordRestWebhookAPI Implements IDiscordRestWebhookAPI Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.API Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CachingDiscordRestWebhookAPI : IDiscordRestWebhookAPI, IRestCustomizable Constructors | Improve this Doc View Source CachingDiscordRestWebhookAPI(IDiscordRestWebhookAPI, CacheService) Initializes a new instance of the CachingDiscordRestWebhookAPI class. Declaration public CachingDiscordRestWebhookAPI(IDiscordRestWebhookAPI actual, CacheService cacheService) Parameters Type Name Description IDiscordRestWebhookAPI actual The decorated instance. CacheService cacheService The cache service. Methods | Improve this Doc View Source CreateWebhookAsync(Snowflake, String, Optional<Stream>, Optional<String>, CancellationToken) Creates a new webhook. Declaration public async Task<Result<IWebhook>> CreateWebhookAsync(Snowflake channelID, string name, Optional<Stream> avatar, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the webhook is for. String name The name of the webhook. Remora.Rest.Core.Optional < Stream > avatar The avatar of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteWebhookAsync(Snowflake, Optional<String>, CancellationToken) Deletes the given webhook. Declaration public async Task<Result> DeleteWebhookAsync(Snowflake webhookID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteWebhookMessageAsync(Snowflake, String, Snowflake, Optional<Snowflake>, CancellationToken) Deletes a message posted by a webhook. Declaration public async Task<Result> DeleteWebhookMessageAsync(Snowflake webhookID, string token, Snowflake messageID, Optional<Snowflake> threadID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID The ID of the thread the message is in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source DeleteWebhookWithTokenAsync(Snowflake, String, Optional<String>, CancellationToken) Deletes the given webhook. Declaration public async Task<Result> DeleteWebhookWithTokenAsync(Snowflake webhookID, string token, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditWebhookMessageAsync(Snowflake, String, Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<Snowflake>, CancellationToken) Edits a message posted by a webhook. Declaration public async Task<Result<IMessage>> EditWebhookMessageAsync(Snowflake webhookID, string token, Snowflake messageID, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<Snowflake> threadID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > content The new content, if any. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds, if any. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The new allowed mentions, if any. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components that should be included with the message. The webhook must be application-owned to use this parameter. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID The ID of the thread the message is in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ExecuteWebhookAsync(Snowflake, String, Optional<Boolean>, Optional<String>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<Snowflake>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<MessageFlags>, Optional<String>, CancellationToken) Executes the given webhook. Declaration public async Task<Result<IMessage>> ExecuteWebhookAsync(Snowflake webhookID, string token, Optional<bool> shouldWait = default(Optional<bool>), Optional<string> content = default(Optional<string>), Optional<string> username = default(Optional<string>), Optional<string> avatarUrl = default(Optional<string>), Optional<bool> isTTS = default(Optional<bool>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<Snowflake> threadID = default(Optional<Snowflake>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<MessageFlags> flags = default(Optional<MessageFlags>), Optional<string> threadName = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Optional < Boolean > shouldWait Whether the call should block until the server has confirmed that the message was sent. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < String > username The username to use for this message. Note that Discord places some restrictions on valid usernames in order to prevent spam and abuse - check the Discord documentation for up-to-date information on allowed usernames. Remora.Rest.Core.Optional < String > avatarUrl The avatar to use for this message. Remora.Rest.Core.Optional < Boolean > isTTS Whether this message is a TTS message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The embeds in the message. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The set of allowed mentions of the message. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID Send a message to the specified thread within a webhook's channel. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components that should be included with the message. The webhook must be application-owned to use this parameter. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < MessageFlags > flags The message flags. Remora.Rest.Core.Optional < String > threadName The name of the forum thread to create. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. The returned message is null if shouldWait is false. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source GetChannelWebhooksAsync(Snowflake, CancellationToken) Gets the webhooks for a channel. Declaration public async Task<Result<IReadOnlyList<IWebhook>>> GetChannelWebhooksAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IWebhook >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWebhooksAsync(Snowflake, CancellationToken) Gets the webhooks for a guild. Declaration public async Task<Result<IReadOnlyList<IWebhook>>> GetGuildWebhooksAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IWebhook >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetWebhookAsync(Snowflake, CancellationToken) Gets the webhook with the given ID. Declaration public async Task<Result<IWebhook>> GetWebhookAsync(Snowflake webhookID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetWebhookMessageAsync(Snowflake, String, Snowflake, Optional<Snowflake>, CancellationToken) Gets a previously-sent webhook message. Declaration public async Task<Result<IMessage>> GetWebhookMessageAsync(Snowflake webhookID, string webhookToken, Snowflake messageID, Optional<Snowflake> threadID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String webhookToken The webhook token. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID The ID of the thread the message is in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. | Improve this Doc View Source GetWebhookWithTokenAsync(Snowflake, String, CancellationToken) Gets the webhook with the given ID and token. Declaration public async Task<Result<IWebhook>> GetWebhookWithTokenAsync(Snowflake webhookID, string token, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyWebhookAsync(Snowflake, Optional<String>, Optional<Stream>, Optional<Snowflake>, Optional<String>, CancellationToken) Modifies the given webhook. Declaration public async Task<Result<IWebhook>> ModifyWebhookAsync(Snowflake webhookID, Optional<string> name = default(Optional<string>), Optional<Stream> avatar = default(Optional<Stream>), Optional<Snowflake> channelID = default(Optional<Snowflake>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. Remora.Rest.Core.Optional < String > name The new name of the webhook. Remora.Rest.Core.Optional < Stream > avatar The new avatar of the webhook. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > channelID The new channel of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyWebhookWithTokenAsync(Snowflake, String, Optional<String>, Optional<Stream>, Optional<String>, CancellationToken) Modifies the given webhook. Declaration public async Task<Result<IWebhook>> ModifyWebhookWithTokenAsync(Snowflake webhookID, string token, Optional<string> name = default(Optional<string>), Optional<Stream> avatar = default(Optional<Stream>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Optional < String > name The new name of the webhook. Remora.Rest.Core.Optional < Stream > avatar The new avatar of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements IDiscordRestWebhookAPI Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Caching.API.html": {
    "href": "api/Remora.Discord.Caching.API.html",
    "title": "Namespace Remora.Discord.Caching.API | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Caching.API Classes CachingDiscordRestChannelAPI Decorates the registered channel API with caching functionality. CachingDiscordRestEmojiAPI Decorates the registered emoji API with caching functionality. CachingDiscordRestGuildAPI Decorates the registered guild API with caching functionality. CachingDiscordRestInteractionAPI Decorates the registered interaction API with caching functionality. CachingDiscordRestInviteAPI Decorates the registered invite API with caching functionality. CachingDiscordRestOAuth2API Decorates the registered OAuth2 API with caching functionality. CachingDiscordRestTemplateAPI Decorates the registered template API with caching functionality. CachingDiscordRestUserAPI Decorates the registered user API with caching functionality. CachingDiscordRestVoiceAPI Decorates the registered voice API with caching functionality. CachingDiscordRestWebhookAPI Decorates the registered webhook API with caching functionality."
  },
  "api/Remora.Discord.Caching.Extensions.html": {
    "href": "api/Remora.Discord.Caching.Extensions.html",
    "title": "Namespace Remora.Discord.Caching.Extensions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Caching.Extensions Classes ServiceCollectionExtensions Defines extension methods for the IServiceCollection interface."
  },
  "api/Remora.Discord.Caching.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Remora.Discord.Caching.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Remora.Discord",
    "keywords": "Class ServiceCollectionExtensions Defines extension methods for the IServiceCollection interface. Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.Extensions Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddDiscordCaching(IServiceCollection) Adds caching implementations of various API types, overriding the normally non-caching versions. Declaration public static IServiceCollection AddDiscordCaching(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The services. Returns Type Description IServiceCollection The services, with caching enabled. Remarks The cache uses a run-of-the-mill IMemoryCache . Cache entry options for any cached type can be configured using IOptions<TOptions> . When choosing a cache implementation, it should be noted that choosing this will override the backing store for caching REST clients and responders."
  },
  "api/Remora.Discord.Caching.html": {
    "href": "api/Remora.Discord.Caching.html",
    "title": "Namespace Remora.Discord.Caching | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Caching Classes KeyHelpers Contains methods that create cache keys for various identified entities."
  },
  "api/Remora.Discord.Caching.KeyHelpers.html": {
    "href": "api/Remora.Discord.Caching.KeyHelpers.html",
    "title": "Class KeyHelpers | Remora.Discord",
    "keywords": "Class KeyHelpers Contains methods that create cache keys for various identified entities. Inheritance Object KeyHelpers Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public static class KeyHelpers Methods | Improve this Doc View Source CreateChannelCacheKey(in Snowflake) Creates a cache key for an IChannel instance. Declaration public static string CreateChannelCacheKey(in Snowflake channelID) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Returns Type Description String The cache key. | Improve this Doc View Source CreateChannelInvitesCacheKey(in Snowflake) Creates a cache key for a set of channel-scoped IInvite instances. Declaration public static string CreateChannelInvitesCacheKey(in Snowflake channelID) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the queried channel. Returns Type Description String The cache key. | Improve this Doc View Source CreateChannelPermissionCacheKey(in Snowflake, in Snowflake) Creates a cache key for an IPermissionOverwrite instance. Declaration public static string CreateChannelPermissionCacheKey(in Snowflake channelID, in Snowflake overwriteID) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the overwrite is for. Remora.Rest.Core.Snowflake overwriteID The ID of the overwrite. Returns Type Description String The cache key. | Improve this Doc View Source CreateChannelWebhooksCacheKey(in Snowflake) Creates a cache key for a set of IWebhook instances belonging to a channel. Declaration public static string CreateChannelWebhooksCacheKey(in Snowflake channelID) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The channel ID. Returns Type Description String The cache key. | Improve this Doc View Source CreateConnectionCacheKey(String) Creates a cache key for an IConnection instance. Declaration public static string CreateConnectionCacheKey(string connectionID) Parameters Type Name Description String connectionID The ID of the connection. Returns Type Description String The cache key. | Improve this Doc View Source CreateCurrentApplicationCacheKey() Creates a cache key for the current IApplication instance. Declaration public static string CreateCurrentApplicationCacheKey() Returns Type Description String The cache key. | Improve this Doc View Source CreateCurrentAuthorizationInformationCacheKey() Creates a cache key for a IAuthorizationInformation instance. Declaration public static string CreateCurrentAuthorizationInformationCacheKey() Returns Type Description String The cache key. | Improve this Doc View Source CreateCurrentUserCacheKey() Creates a cache key for the current IUser instance. Declaration public static string CreateCurrentUserCacheKey() Returns Type Description String The cache key. | Improve this Doc View Source CreateCurrentUserConnectionsCacheKey() Creates a cache key for the IConnection objects of the current IUser instance. Declaration public static string CreateCurrentUserConnectionsCacheKey() Returns Type Description String The cache key. | Improve this Doc View Source CreateCurrentUserDMsCacheKey() Creates a cache key for the IChannel DM objects of the current IUser instance. Declaration public static string CreateCurrentUserDMsCacheKey() Returns Type Description String The cache key. | Improve this Doc View Source CreateEmojiCacheKey(in Snowflake, in Snowflake) Creates a cache key for an IEmoji instance. Declaration public static string CreateEmojiCacheKey(in Snowflake guildID, in Snowflake emojiID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild the emoji is in. Remora.Rest.Core.Snowflake emojiID The ID of the emoji. Returns Type Description String The cache key. | Improve this Doc View Source CreateEvictionCacheKey(String) Creates a cache key for an evicted entity, identified by the given key. Declaration public static string CreateEvictionCacheKey(string key) Parameters Type Name Description String key The original key. Returns Type Description String The eviction key. | Improve this Doc View Source CreateFollowupMessageCacheKey(String, in Snowflake) Creates a cache key for an interaction followup IMessage instance. Declaration public static string CreateFollowupMessageCacheKey(string token, in Snowflake messageID) Parameters Type Name Description String token The interaction token. Remora.Rest.Core.Snowflake messageID The message ID. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildBanCacheKey(in Snowflake, in Snowflake) Creates a cache key for an IBan instance. Declaration public static string CreateGuildBanCacheKey(in Snowflake guildID, in Snowflake userID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild the ban is in. Remora.Rest.Core.Snowflake userID The ID of the banned user. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildBansCacheKey(in Snowflake) Creates a cache key for a collection of IBan instances from a guild. Declaration public static string CreateGuildBansCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildCacheKey(in Snowflake) Creates a cache key for an IGuild instance. Declaration public static string CreateGuildCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildChannelsCacheKey(in Snowflake) Creates a cache key for a collection of IChannel instances from a guild. Declaration public static string CreateGuildChannelsCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildEmojisCacheKey(Snowflake) Creates a cache key for a set of guild-scoped IEmoji instances. Declaration public static string CreateGuildEmojisCacheKey(Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildIntegrationCacheKey(in Snowflake, in Snowflake) Creates a cache key for an IIntegration instance. Declaration public static string CreateGuildIntegrationCacheKey(in Snowflake guildID, in Snowflake integrationID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild the integration is in. Remora.Rest.Core.Snowflake integrationID The ID of the integration. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildIntegrationsCacheKey(in Snowflake) Creates a cache key for a collection of IIntegration instances from a guild. Declaration public static string CreateGuildIntegrationsCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildInvitesCacheKey(in Snowflake) Creates a cache key for a collection of IInvite instances from a guild. Declaration public static string CreateGuildInvitesCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildMemberKey(in Snowflake, in Snowflake) Creates a cache key for an IGuildMember instance. Declaration public static string CreateGuildMemberKey(in Snowflake guildID, in Snowflake userID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild the member is in. Remora.Rest.Core.Snowflake userID The ID of the member. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildMembersKey(in Snowflake, in Optional<Int32>, in Optional<Snowflake>) Creates a cache key for a collection of IGuildMember instances from a guild, constrained by the given input parameters. The parameters are used as components for the cache key. Declaration public static string CreateGuildMembersKey(in Snowflake guildID, in Optional<int> limit, in Optional<Snowflake> after) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild the members are in. Remora.Rest.Core.Optional < Int32 > limit The limit parameter. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The after parameter. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildPreviewCacheKey(in Snowflake) Creates a cache key for an IGuildPreview instance. Declaration public static string CreateGuildPreviewCacheKey(in Snowflake guildPreviewID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildPreviewID The ID of the guild preview. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildRoleCacheKey(in Snowflake, in Snowflake) Creates a cache key for an IRole instance. Declaration public static string CreateGuildRoleCacheKey(in Snowflake guildID, in Snowflake roleID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild the role is in. Remora.Rest.Core.Snowflake roleID The ID of the role. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildRolesCacheKey(in Snowflake) Creates a cache key for a collection of IRole instances from a guild. Declaration public static string CreateGuildRolesCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildTemplatesCacheKey(in Snowflake) Creates a cache key for a set of ITemplate instances belonging to a guild. Declaration public static string CreateGuildTemplatesCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild.. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildVoiceRegionCacheKey(in Snowflake, String) Creates a cache key for an IVoiceRegion instance. Declaration public static string CreateGuildVoiceRegionCacheKey(in Snowflake guildID, string voiceRegionID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guildID the voice region is for. String voiceRegionID The voice region ID. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildVoiceRegionsCacheKey(in Snowflake) Creates a cache key for a collection of IVoiceRegion instances from a guild. Declaration public static string CreateGuildVoiceRegionsCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildWebhooksCacheKey(in Snowflake) Creates a cache key for a set of IWebhook instances belonging to a guild. Declaration public static string CreateGuildWebhooksCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The guild ID. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildWelcomeScreenCacheKey(in Snowflake) Creates a cache key for a IWelcomeScreen instance. Declaration public static string CreateGuildWelcomeScreenCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The guild ID. Returns Type Description String The cache key. | Improve this Doc View Source CreateGuildWidgetSettingsCacheKey(in Snowflake) Creates a cache key for an IGuildWidgetSettings instance. Declaration public static string CreateGuildWidgetSettingsCacheKey(in Snowflake guildID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Returns Type Description String The cache key. | Improve this Doc View Source CreateInviteCacheKey(String) Creates a cache key for an IInvite instance. Declaration public static string CreateInviteCacheKey(string code) Parameters Type Name Description String code The invite code. Returns Type Description String The cache key. | Improve this Doc View Source CreateMessageCacheKey(in Snowflake, in Snowflake) Creates a cache key for an IMessage instance. Declaration public static string CreateMessageCacheKey(in Snowflake channelID, in Snowflake messageID) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. Returns Type Description String The cache key. | Improve this Doc View Source CreateOriginalInteractionMessageCacheKey(String) Creates a cache key for an original interaction IMessage instance. Declaration public static string CreateOriginalInteractionMessageCacheKey(string token) Parameters Type Name Description String token The interaction token. Returns Type Description String The cache key. | Improve this Doc View Source CreatePinnedMessagesCacheKey(in Snowflake) Creates a cache key for a list of pinned IMessage instances. Declaration public static string CreatePinnedMessagesCacheKey(in Snowflake channelID) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Returns Type Description String The cache key. | Improve this Doc View Source CreatePresenceCacheKey(in Snowflake, in Snowflake) Creates a cache key for a IPresence instance. Declaration public static string CreatePresenceCacheKey(in Snowflake guildID, in Snowflake userID) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The guild ID. Remora.Rest.Core.Snowflake userID The user ID. Returns Type Description String The cache key. | Improve this Doc View Source CreateTemplateCacheKey(String) Creates a cache key for an ITemplate instance. Declaration public static string CreateTemplateCacheKey(string templateCode) Parameters Type Name Description String templateCode The template code. Returns Type Description String The cache key. | Improve this Doc View Source CreateThreadMemberCacheKey(in Snowflake, in Snowflake) Creates a cache key for a IThreadMember instance. Declaration public static string CreateThreadMemberCacheKey(in Snowflake threadID, in Snowflake userID) Parameters Type Name Description Remora.Rest.Core.Snowflake threadID The ID of the thread. Remora.Rest.Core.Snowflake userID The ID of the user. Returns Type Description String The cache key. | Improve this Doc View Source CreateThreadMembersCacheKey(Snowflake) Creates a cache key for a set of IThreadMember instances. Declaration public static string CreateThreadMembersCacheKey(Snowflake channelID) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the queried channel. Returns Type Description String The cache key. | Improve this Doc View Source CreateUserCacheKey(in Snowflake) Creates a cache key for an IUser instance. Declaration public static string CreateUserCacheKey(in Snowflake userID) Parameters Type Name Description Remora.Rest.Core.Snowflake userID The ID of the user. Returns Type Description String The cache key. | Improve this Doc View Source CreateVoiceRegionCacheKey(String) Creates a cache key for an IVoiceRegion instance. Declaration public static string CreateVoiceRegionCacheKey(string voiceRegionID) Parameters Type Name Description String voiceRegionID The voice region ID. Returns Type Description String The cache key. | Improve this Doc View Source CreateVoiceRegionsCacheKey() Creates a cache key for a set of available IVoiceRegion instances. Declaration public static string CreateVoiceRegionsCacheKey() Returns Type Description String The cache key. | Improve this Doc View Source CreateWebhookCacheKey(in Snowflake) Creates a cache key for an IWebhook instance. Declaration public static string CreateWebhookCacheKey(in Snowflake webhookID) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The webhook ID. Returns Type Description String The cache key. | Improve this Doc View Source CreateWebhookMessageCacheKey(String, in Snowflake) Creates a cache key for a webhook IMessage instance. Declaration public static string CreateWebhookMessageCacheKey(string token, in Snowflake messageID) Parameters Type Name Description String token The webhook token. Remora.Rest.Core.Snowflake messageID The message ID. Returns Type Description String The cache key."
  },
  "api/Remora.Discord.Caching.Redis.Extensions.html": {
    "href": "api/Remora.Discord.Caching.Redis.Extensions.html",
    "title": "Namespace Remora.Discord.Caching.Redis.Extensions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Caching.Redis.Extensions Classes ServiceCollectionExtensions Defines extension methods for the IServiceCollection interface."
  },
  "api/Remora.Discord.Caching.Redis.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Remora.Discord.Caching.Redis.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Remora.Discord",
    "keywords": "Class ServiceCollectionExtensions Defines extension methods for the IServiceCollection interface. Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.Redis.Extensions Assembly : Remora.Discord.Caching.Redis.dll Syntax [PublicAPI] public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddDiscordRedisCaching(IServiceCollection, Action<RedisCacheOptions>) Adds a redis-backed caching implementations of various API types, overriding the normally non-caching versions. Declaration public static IServiceCollection AddDiscordRedisCaching(this IServiceCollection services, Action<RedisCacheOptions> configureRedisAction = null) Parameters Type Name Description IServiceCollection services The services. Action < RedisCacheOptions > configureRedisAction An action to configure the redis cache. If none is specified, a default connection of localhost:6379 will be used. Returns Type Description IServiceCollection The services, with caching enabled. Remarks The cache uses a run-of-the-mill IDistributedCache . Cache entry options for any cached type can be configured using IOptions<TOptions> . When choosing a cache implementation, it should be noted that choosing this will override the backing store for caching REST clients and responders. It is also very important to know that the stock implementation of ICacheProvider that this method adds uses JSON to store values for convenience and consistency with Remora's entities. If JSON is not a desirable format, the caching methods in RedisCacheProvider can be provided, or a custom implementation of ICacheProvider can be added to the container. If using a custom cache provider, it is necessary to add it after calling this method, or it will be overridden by the provider implementation this method adds."
  },
  "api/Remora.Discord.Caching.Redis.Services.html": {
    "href": "api/Remora.Discord.Caching.Redis.Services.html",
    "title": "Namespace Remora.Discord.Caching.Redis.Services | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Caching.Redis.Services Classes RedisCacheProvider Handles cache insert/evict operations for various types, using Redis as a backing-store."
  },
  "api/Remora.Discord.Caching.Redis.Services.RedisCacheProvider.html": {
    "href": "api/Remora.Discord.Caching.Redis.Services.RedisCacheProvider.html",
    "title": "Class RedisCacheProvider | Remora.Discord",
    "keywords": "Class RedisCacheProvider Handles cache insert/evict operations for various types, using Redis as a backing-store. Inheritance Object RedisCacheProvider Implements ICacheProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.Redis.Services Assembly : Remora.Discord.Caching.Redis.dll Syntax [PublicAPI] public class RedisCacheProvider : ICacheProvider Constructors | Improve this Doc View Source RedisCacheProvider(IDistributedCache, IOptionsMonitor<JsonSerializerOptions>) Initializes a new instance of the RedisCacheProvider class. Declaration public RedisCacheProvider(IDistributedCache cache, IOptionsMonitor<JsonSerializerOptions> jsonOptions) Parameters Type Name Description IDistributedCache cache The redis cache. IOptionsMonitor < JsonSerializerOptions > jsonOptions The JSON options. Methods | Improve this Doc View Source CacheAsync<TInstance>(String, TInstance, Nullable<DateTimeOffset>, Nullable<TimeSpan>, CancellationToken) Caches a value in the backing store. Declaration public virtual async ValueTask CacheAsync<TInstance>(string key, TInstance instance, DateTimeOffset? absoluteExpiration = null, TimeSpan? slidingExpiration = null, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The key to cache the value with. TInstance instance The instance of the object ot cache. Nullable < DateTimeOffset > absoluteExpiration The absolute expiration of the value to cache. Nullable < TimeSpan > slidingExpiration The sliding expiration of the value to cache. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask A ValueTask representing the result of the potentially asynchronous operation. Type Parameters Name Description TInstance The type to cache. Remarks It should be noted that in this implementation of CacheAsync<TInstance>(String, TInstance, Nullable<DateTimeOffset>, Nullable<TimeSpan>, CancellationToken) , there is a strong reliance on the fact that the entity being cached is trivially serializable to JSON. In the event that this is not the case, this method can be overriden in a derived class to provide a more apt transformation of incoming data. | Improve this Doc View Source EvictAsync(String, CancellationToken) Evicts a key from the backing store. Declaration public async ValueTask<Result> EvictAsync(string key, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String key The key to evict from the backing store. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result > A ValueTask representing the result of the potentially asynchronous action. | Improve this Doc View Source EvictAsync<TInstance>(String, CancellationToken) Evicts a key from the backing store, returning its current value if it exists. Declaration public virtual async ValueTask<Result<TInstance>> EvictAsync<TInstance>(string key, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The key to evict from the backing store. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result <TInstance>> A ValueTask representing the result of the potentially asynchronous action. Type Parameters Name Description TInstance The type to return from the backing store, if it exists. Remarks It should be noted that in this implementation of EvictAsync<TInstance>(String, CancellationToken) , there is a strong reliance on the fact that the entity being cached is trivially deserializable from JSON. In the event that this is not the case, this method can be overriden in a derived class to provide a more apt transformation of evicted data. | Improve this Doc View Source RetrieveAsync<TInstance>(String, CancellationToken) Retrieves a value from the backing store. Declaration public virtual async ValueTask<Result<TInstance>> RetrieveAsync<TInstance>(string key, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The key to retrieve a potential value from the backing store. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result <TInstance>> A ValueTask representing the result of the potentially asynchronous action. Type Parameters Name Description TInstance The type to return from the backing store, if it exists. Remarks It should be noted that in this implementation of RetrieveAsync<TInstance>(String, CancellationToken) , there is a strong reliance on the fact that the entity being cached is trivially deserializable from JSON. In the event that this is not the case, this method can be overriden in a derived class to provide a more apt transformation of outgoing data. Implements ICacheProvider"
  },
  "api/Remora.Discord.Caching.Responders.EarlyCacheResponder.html": {
    "href": "api/Remora.Discord.Caching.Responders.EarlyCacheResponder.html",
    "title": "Class EarlyCacheResponder | Remora.Discord",
    "keywords": "Class EarlyCacheResponder Caches incoming data from the gateway. Inheritance Object EarlyCacheResponder Implements IResponder < IChannelCreate > IResponder < IChannelUpdate > IResponder < IGuildBanAdd > IResponder < IGuildCreate > IResponder < IGuildEmojisUpdate > IResponder < IGuildMemberAdd > IResponder < IGuildMembersChunk > IResponder < IGuildMemberUpdate > IResponder < IGuildRoleCreate > IResponder < IGuildRoleUpdate > IResponder < IMessageCreate > IResponder < IMessageReactionAdd > IResponder < IUserUpdate > IResponder < IInteractionCreate > IResponder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.Responders Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class EarlyCacheResponder : IResponder<IChannelCreate>, IResponder<IChannelUpdate>, IResponder<IGuildBanAdd>, IResponder<IGuildCreate>, IResponder<IGuildEmojisUpdate>, IResponder<IGuildMemberAdd>, IResponder<IGuildMembersChunk>, IResponder<IGuildMemberUpdate>, IResponder<IGuildRoleCreate>, IResponder<IGuildRoleUpdate>, IResponder<IMessageCreate>, IResponder<IMessageReactionAdd>, IResponder<IUserUpdate>, IResponder<IInteractionCreate>, IResponder Constructors | Improve this Doc View Source EarlyCacheResponder(CacheService) Initializes a new instance of the EarlyCacheResponder class. Declaration public EarlyCacheResponder(CacheService cacheService) Parameters Type Name Description CacheService cacheService The cache service. Methods | Improve this Doc View Source RespondAsync(IChannelCreate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IChannelCreate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IChannelCreate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IChannelUpdate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IChannelUpdate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IChannelUpdate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildBanAdd, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildBanAdd gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildBanAdd gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildCreate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildCreate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildCreate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildEmojisUpdate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildEmojisUpdate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildEmojisUpdate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildMemberAdd, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildMemberAdd gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildMemberAdd gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildMembersChunk, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildMembersChunk gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildMembersChunk gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildMemberUpdate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildMemberUpdate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildMemberUpdate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildRoleCreate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildRoleCreate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildRoleCreate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildRoleUpdate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildRoleUpdate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildRoleUpdate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IInteractionCreate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IInteractionCreate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IInteractionCreate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IMessageCreate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IMessageCreate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IMessageCreate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IMessageReactionAdd, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IMessageReactionAdd gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IMessageReactionAdd gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IUserUpdate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IUserUpdate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IUserUpdate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. Implements IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder"
  },
  "api/Remora.Discord.Caching.Responders.html": {
    "href": "api/Remora.Discord.Caching.Responders.html",
    "title": "Namespace Remora.Discord.Caching.Responders | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Caching.Responders Classes EarlyCacheResponder Caches incoming data from the gateway. LateCacheResponder Evicts explicitly deleted data from the cache."
  },
  "api/Remora.Discord.Caching.Responders.LateCacheResponder.html": {
    "href": "api/Remora.Discord.Caching.Responders.LateCacheResponder.html",
    "title": "Class LateCacheResponder | Remora.Discord",
    "keywords": "Class LateCacheResponder Evicts explicitly deleted data from the cache. Inheritance Object LateCacheResponder Implements IResponder < IChannelDelete > IResponder < IGuildBanRemove > IResponder < IGuildDelete > IResponder < IGuildMemberRemove > IResponder < IGuildRoleDelete > IResponder < IInviteDelete > IResponder < IMessageDelete > IResponder < IMessageDeleteBulk > IResponder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.Responders Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class LateCacheResponder : IResponder<IChannelDelete>, IResponder<IGuildBanRemove>, IResponder<IGuildDelete>, IResponder<IGuildMemberRemove>, IResponder<IGuildRoleDelete>, IResponder<IInviteDelete>, IResponder<IMessageDelete>, IResponder<IMessageDeleteBulk>, IResponder Constructors | Improve this Doc View Source LateCacheResponder(CacheService) Initializes a new instance of the LateCacheResponder class. Declaration public LateCacheResponder(CacheService cacheService) Parameters Type Name Description CacheService cacheService The cache service. Methods | Improve this Doc View Source RespondAsync(IChannelDelete, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IChannelDelete gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IChannelDelete gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildBanRemove, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildBanRemove gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildBanRemove gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildDelete, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildDelete gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildDelete gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildMemberRemove, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildMemberRemove gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildMemberRemove gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IGuildRoleDelete, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IGuildRoleDelete gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IGuildRoleDelete gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IInviteDelete, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IInviteDelete gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IInviteDelete gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IMessageDelete, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IMessageDelete gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IMessageDelete gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IMessageDeleteBulk, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IMessageDeleteBulk gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IMessageDeleteBulk gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. Implements IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder"
  },
  "api/Remora.Discord.Caching.Services.CacheService.html": {
    "href": "api/Remora.Discord.Caching.Services.CacheService.html",
    "title": "Class CacheService | Remora.Discord",
    "keywords": "Class CacheService Handles cache insert/evict operations for various types. Inheritance Object CacheService Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.Services Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CacheService Constructors | Improve this Doc View Source CacheService(ICacheProvider, IOptions<CacheSettings>) Initializes a new instance of the CacheService class. Declaration public CacheService(ICacheProvider cacheProvider, IOptions<CacheSettings> cacheSettings) Parameters Type Name Description ICacheProvider cacheProvider The cache provider. IOptions < CacheSettings > cacheSettings The cache settings. Methods | Improve this Doc View Source CacheAsync<TInstance>(String, TInstance, CancellationToken) Caches a value. Certain instance types may have specializations which cache more than one value from the instance. Declaration public async ValueTask CacheAsync<TInstance>(string key, TInstance instance, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The cache key. TInstance instance The instance. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask A ValueTask representing the potentially asynchronous operation. Type Parameters Name Description TInstance The instance type. | Improve this Doc View Source EvictAsync<TInstance>(String, CancellationToken) Evicts the instance with the given key from the cache. Declaration public async ValueTask<Result<TInstance>> EvictAsync<TInstance>(string key, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The cache key. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result <TInstance>> A ValueTask representing the potentially asynchronous operation. Type Parameters Name Description TInstance The type of the value. | Improve this Doc View Source TryGetPreviousValueAsync<TInstance>(String) Attempts to retrieve the previous value of the given key from the eviction cache. Declaration public ValueTask<Result<TInstance>> TryGetPreviousValueAsync<TInstance>(string key) where TInstance : class Parameters Type Name Description String key The cache key. Returns Type Description ValueTask < Remora.Results.Result <TInstance>> A Remora.Results.Result that may or not have succeeded. Type Parameters Name Description TInstance The instance type. | Improve this Doc View Source TryGetValueAsync<TInstance>(String, CancellationToken) Attempts to retrieve a value from the cache. Declaration public ValueTask<Result<TInstance>> TryGetValueAsync<TInstance>(string key, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The cache key. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result <TInstance>> A Remora.Results.Result that may or not have succeeded. Type Parameters Name Description TInstance The instance type."
  },
  "api/Remora.Discord.Caching.Services.CacheSettings.html": {
    "href": "api/Remora.Discord.Caching.Services.CacheSettings.html",
    "title": "Class CacheSettings | Remora.Discord",
    "keywords": "Class CacheSettings Holds various settings for individual cache objects. Inheritance Object CacheSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Caching.Services Assembly : Remora.Discord.Caching.dll Syntax [PublicAPI] public class CacheSettings Methods | Improve this Doc View Source GetAbsoluteExpirationOrDefault(Type, Nullable<TimeSpan>) Gets the absolute expiration time in the cache for the given type, or a default value if one does not exist. Declaration public TimeSpan? GetAbsoluteExpirationOrDefault(Type cachedType, TimeSpan? defaultExpiration = null) Parameters Type Name Description Type cachedType The cached type. Nullable < TimeSpan > defaultExpiration The default expiration. Defaults to 30 seconds. Returns Type Description Nullable < TimeSpan > The absolute expiration time. | Improve this Doc View Source GetAbsoluteExpirationOrDefault<T>(Nullable<TimeSpan>) Gets the absolute expiration time in the cache for the given type, or a default value if one does not exist. Declaration public TimeSpan? GetAbsoluteExpirationOrDefault<T>(TimeSpan? defaultExpiration = null) Parameters Type Name Description Nullable < TimeSpan > defaultExpiration The default expiration. Defaults to 30 seconds. Returns Type Description Nullable < TimeSpan > The absolute expiration time. Type Parameters Name Description T The cached type. | Improve this Doc View Source GetDistributedEntryOptions<T>() Gets a set of distributed cache options, with expirations relative to now. Declaration public DistributedCacheEntryOptions GetDistributedEntryOptions<T>() Returns Type Description DistributedCacheEntryOptions The entry options. Type Parameters Name Description T The cache entry type. | Improve this Doc View Source GetEntryOptions<T>() Gets a set of cache options, with expirations relative to now. Declaration public MemoryCacheEntryOptions GetEntryOptions<T>() Returns Type Description MemoryCacheEntryOptions The entry options. Type Parameters Name Description T The cache entry type. | Improve this Doc View Source GetEvictionAbsoluteExpirationOrDefault(Type, Nullable<TimeSpan>) Gets the absolute expiration time in the cache for the given type when it has been evicted from the primary cache, or a default value if one does not exist. Declaration public TimeSpan? GetEvictionAbsoluteExpirationOrDefault(Type cachedType, TimeSpan? defaultExpiration = null) Parameters Type Name Description Type cachedType The cached type. Nullable < TimeSpan > defaultExpiration The default expiration. Defaults to 30 seconds. Returns Type Description Nullable < TimeSpan > The absolute expiration time. | Improve this Doc View Source GetEvictionAbsoluteExpirationOrDefault<T>(Nullable<TimeSpan>) Gets the absolute expiration time in the cache for the given type when it has been evicted from the primary cache, or a default value if one does not exist. Declaration public TimeSpan? GetEvictionAbsoluteExpirationOrDefault<T>(TimeSpan? defaultExpiration = null) Parameters Type Name Description Nullable < TimeSpan > defaultExpiration The default expiration. Defaults to 30 seconds. Returns Type Description Nullable < TimeSpan > The absolute expiration time. Type Parameters Name Description T The cached type. | Improve this Doc View Source GetEvictionDistributedEntryOptions<T>() Gets a set of distributed cache options for an evicted value, with expirations relative to now. Declaration public DistributedCacheEntryOptions GetEvictionDistributedEntryOptions<T>() Returns Type Description DistributedCacheEntryOptions The entry options. Type Parameters Name Description T The cache entry type. | Improve this Doc View Source GetEvictionEntryOptions<T>() Gets a set of cache options for an evicted value, with expirations relative to now. Declaration public MemoryCacheEntryOptions GetEvictionEntryOptions<T>() Returns Type Description MemoryCacheEntryOptions The entry options. Type Parameters Name Description T The cache entry type. | Improve this Doc View Source GetEvictionSlidingExpirationOrDefault(Type, Nullable<TimeSpan>) Gets the sliding expiration time in the cache for the given type when it has been evicted from the primary cache, or a default value if one does not exist. Declaration public TimeSpan? GetEvictionSlidingExpirationOrDefault(Type cachedType, TimeSpan? defaultExpiration = null) Parameters Type Name Description Type cachedType The cached type. Nullable < TimeSpan > defaultExpiration The default expiration. Defaults to 10 seconds. Returns Type Description Nullable < TimeSpan > The sliding expiration time. | Improve this Doc View Source GetEvictionSlidingExpirationOrDefault<T>(Nullable<TimeSpan>) Gets the sliding expiration time in the cache for the given type when it has been evicted from the primary cache, or a default value if one does not exist. Declaration public TimeSpan? GetEvictionSlidingExpirationOrDefault<T>(TimeSpan? defaultExpiration = null) Parameters Type Name Description Nullable < TimeSpan > defaultExpiration The default expiration. Defaults to 10 seconds. Returns Type Description Nullable < TimeSpan > The sliding expiration time. Type Parameters Name Description T The cached type. | Improve this Doc View Source GetRedisEntryOptions<T>() Gets a set of distributed cache options, with expirations relative to now. Declaration [Obsolete(\"Use GetDistributedEntryOptions instead.\")] public DistributedCacheEntryOptions GetRedisEntryOptions<T>() Returns Type Description DistributedCacheEntryOptions The entry options. Type Parameters Name Description T The cache entry type. | Improve this Doc View Source GetSlidingExpirationOrDefault(Type, Nullable<TimeSpan>) Gets the sliding expiration time in the cache for the given type, or a default value if one does not exist. Declaration public TimeSpan? GetSlidingExpirationOrDefault(Type cachedType, TimeSpan? defaultExpiration = null) Parameters Type Name Description Type cachedType The cached type. Nullable < TimeSpan > defaultExpiration The default expiration. Defaults to 10 seconds. Returns Type Description Nullable < TimeSpan > The sliding expiration time. | Improve this Doc View Source GetSlidingExpirationOrDefault<T>(Nullable<TimeSpan>) Gets the sliding expiration time in the cache for the given type, or a default value if one does not exist. Declaration public TimeSpan? GetSlidingExpirationOrDefault<T>(TimeSpan? defaultExpiration = null) Parameters Type Name Description Nullable < TimeSpan > defaultExpiration The default expiration. Defaults to 10 seconds. Returns Type Description Nullable < TimeSpan > The sliding expiration time. Type Parameters Name Description T The cached type. | Improve this Doc View Source SetAbsoluteExpiration<TCachedType>(Nullable<TimeSpan>) Sets the absolute cache expiration for the given type. Declaration public CacheSettings SetAbsoluteExpiration<TCachedType>(TimeSpan? absoluteExpiration) Parameters Type Name Description Nullable < TimeSpan > absoluteExpiration The absolute expiration value. If the value is null, cached values will be kept indefinitely. Returns Type Description CacheSettings The settings. Type Parameters Name Description TCachedType The cached type. Remarks This method also sets the expiration time for evicted values to the same value, provided no other expiration time has already been set. | Improve this Doc View Source SetDefaultAbsoluteExpiration(Nullable<TimeSpan>) Sets the default absolute expiration value for types. Declaration public CacheSettings SetDefaultAbsoluteExpiration(TimeSpan? defaultAbsoluteExpiration) Parameters Type Name Description Nullable < TimeSpan > defaultAbsoluteExpiration The default value. Returns Type Description CacheSettings The settings. | Improve this Doc View Source SetDefaultEvictionAbsoluteExpiration(Nullable<TimeSpan>) Sets the default absolute expiration value for types when they have been evicted from the primary cache. Declaration public CacheSettings SetDefaultEvictionAbsoluteExpiration(TimeSpan? defaultAbsoluteExpiration) Parameters Type Name Description Nullable < TimeSpan > defaultAbsoluteExpiration The default value. Returns Type Description CacheSettings The settings. | Improve this Doc View Source SetDefaultEvictionSlidingExpiration(Nullable<TimeSpan>) Sets the default sliding expiration value for types when they have been evicted from the primary cache. Declaration public CacheSettings SetDefaultEvictionSlidingExpiration(TimeSpan? defaultSlidingExpiration) Parameters Type Name Description Nullable < TimeSpan > defaultSlidingExpiration The default value. Returns Type Description CacheSettings The settings. | Improve this Doc View Source SetDefaultSlidingExpiration(Nullable<TimeSpan>) Sets the default sliding expiration value for types. Declaration public CacheSettings SetDefaultSlidingExpiration(TimeSpan? defaultSlidingExpiration) Parameters Type Name Description Nullable < TimeSpan > defaultSlidingExpiration The default value. Returns Type Description CacheSettings The settings. | Improve this Doc View Source SetEvictionAbsoluteExpiration<TCachedType>(Nullable<TimeSpan>) Sets the absolute cache expiration for the given type when it has been evicted from the primary cache. Declaration public CacheSettings SetEvictionAbsoluteExpiration<TCachedType>(TimeSpan? absoluteExpiration) Parameters Type Name Description Nullable < TimeSpan > absoluteExpiration The absolute expiration value. If the value is null, cached values will be kept indefinitely. Returns Type Description CacheSettings The settings. Type Parameters Name Description TCachedType The cached type. | Improve this Doc View Source SetEvictionSlidingExpiration<TCachedType>(Nullable<TimeSpan>) Sets the sliding cache expiration for the given type when it has been evicted from the primary cache. Declaration public CacheSettings SetEvictionSlidingExpiration<TCachedType>(TimeSpan? slidingExpiration) Parameters Type Name Description Nullable < TimeSpan > slidingExpiration The sliding expiration value. If the value is null, cached values will be kept indefinitely. Returns Type Description CacheSettings The settings. Type Parameters Name Description TCachedType The cached type. | Improve this Doc View Source SetSlidingExpiration<TCachedType>(Nullable<TimeSpan>) Sets the sliding cache expiration for the given type. Declaration public CacheSettings SetSlidingExpiration<TCachedType>(TimeSpan? slidingExpiration) Parameters Type Name Description Nullable < TimeSpan > slidingExpiration The sliding expiration value. If the value is null, cached values will be kept indefinitely. Returns Type Description CacheSettings The settings. Type Parameters Name Description TCachedType The cached type. Remarks This method also sets the expiration time for evicted values to the same value, provided no other expiration time has already been set."
  },
  "api/Remora.Discord.Caching.Services.html": {
    "href": "api/Remora.Discord.Caching.Services.html",
    "title": "Namespace Remora.Discord.Caching.Services | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Caching.Services Classes CacheService Handles cache insert/evict operations for various types. CacheSettings Holds various settings for individual cache objects."
  },
  "api/Remora.Discord.Commands.Attributes.AutocompleteAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.AutocompleteAttribute.html",
    "title": "Class AutocompleteAttribute | Remora.Discord",
    "keywords": "Class AutocompleteAttribute Marks a parameter as being considered for autocompletion. Inheritance Object Attribute AutocompleteAttribute AutocompleteProviderAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class AutocompleteAttribute : Attribute"
  },
  "api/Remora.Discord.Commands.Attributes.AutocompleteProviderAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.AutocompleteProviderAttribute.html",
    "title": "Class AutocompleteProviderAttribute | Remora.Discord",
    "keywords": "Class AutocompleteProviderAttribute Marks a parameter as having an associated autocomplete provider, which will dynamically suggest values as the user is typing. Inheritance Object Attribute AutocompleteAttribute AutocompleteProviderAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class AutocompleteProviderAttribute : AutocompleteAttribute Constructors | Improve this Doc View Source AutocompleteProviderAttribute(String) Initializes a new instance of the AutocompleteProviderAttribute class. Declaration public AutocompleteProviderAttribute(string providerIdentity) Parameters Type Name Description String providerIdentity The identity string of the provider. Properties | Improve this Doc View Source ProviderIdentity Gets the desired autocomplete provider's identity. Declaration public string ProviderIdentity { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.Commands.Attributes.ChannelTypesAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.ChannelTypesAttribute.html",
    "title": "Class ChannelTypesAttribute | Remora.Discord",
    "keywords": "Class ChannelTypesAttribute Marks a channel parameter with type requirements for Discord slash commands, controlling what channel autocompletion is presented to the user. Inheritance Object Attribute ChannelTypesAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Parameter)] public class ChannelTypesAttribute : Attribute Constructors | Improve this Doc View Source ChannelTypesAttribute(ChannelType[]) Initializes a new instance of the ChannelTypesAttribute class. Declaration public ChannelTypesAttribute(params ChannelType[] types) Parameters Type Name Description ChannelType [] types The types of channel that are allowed to be presented as an autocomplete option. Properties | Improve this Doc View Source Types Gets the types of channel that are allowed to be presented as an autocomplete option. Declaration public IReadOnlyList<ChannelType> Types { get; } Property Value Type Description IReadOnlyList < ChannelType >"
  },
  "api/Remora.Discord.Commands.Attributes.CommandTypeAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.CommandTypeAttribute.html",
    "title": "Class CommandTypeAttribute | Remora.Discord",
    "keywords": "Class CommandTypeAttribute Marks a command as being of a specific type (chat input, context menu, etc). Inheritance Object Attribute CommandTypeAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Method)] public class CommandTypeAttribute : Attribute Constructors | Improve this Doc View Source CommandTypeAttribute(ApplicationCommandType) Initializes a new instance of the CommandTypeAttribute class. Declaration public CommandTypeAttribute(ApplicationCommandType type) Parameters Type Name Description ApplicationCommandType type The command type. Properties | Improve this Doc View Source Type Gets the command type. Declaration public ApplicationCommandType Type { get; } Property Value Type Description ApplicationCommandType"
  },
  "api/Remora.Discord.Commands.Attributes.DiscordDefaultDMPermissionAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.DiscordDefaultDMPermissionAttribute.html",
    "title": "Class DiscordDefaultDMPermissionAttribute | Remora.Discord",
    "keywords": "Class DiscordDefaultDMPermissionAttribute Marks a command or group as being either accessible or inaccessible in a DM. Inheritance Object Attribute DiscordDefaultDMPermissionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false)] public class DiscordDefaultDMPermissionAttribute : Attribute Constructors | Improve this Doc View Source DiscordDefaultDMPermissionAttribute(Boolean) Initializes a new instance of the DiscordDefaultDMPermissionAttribute class. Declaration public DiscordDefaultDMPermissionAttribute(bool isExecutableInDMs = true) Parameters Type Name Description Boolean isExecutableInDMs Whether this command group is executable in a DM. Properties | Improve this Doc View Source IsExecutableInDMs Gets a value indicating whether the command group is executable in a DM. Declaration public bool IsExecutableInDMs { get; } Property Value Type Description Boolean"
  },
  "api/Remora.Discord.Commands.Attributes.DiscordDefaultMemberPermissionsAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.DiscordDefaultMemberPermissionsAttribute.html",
    "title": "Class DiscordDefaultMemberPermissionsAttribute | Remora.Discord",
    "keywords": "Class DiscordDefaultMemberPermissionsAttribute Marks a command as requiring the executor of the command to have the specified permissions. Specifying no permissions will make the command or group inaccessible to anyone. Inheritance Object Attribute DiscordDefaultMemberPermissionsAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)] public class DiscordDefaultMemberPermissionsAttribute : Attribute Remarks Permissions serve as a base for command access, however moderators with the appropriate permissions can add additional filters to the command, either adding or removing applicable users. Constructors | Improve this Doc View Source DiscordDefaultMemberPermissionsAttribute(DiscordPermission[]) Initializes a new instance of the DiscordDefaultMemberPermissionsAttribute class. Declaration public DiscordDefaultMemberPermissionsAttribute(params DiscordPermission[] permissions) Parameters Type Name Description DiscordPermission [] permissions The permissions required for executing the application command. Properties | Improve this Doc View Source Permissions Gets the required permissions to execute the command. Declaration public IReadOnlyList<DiscordPermission> Permissions { get; } Property Value Type Description IReadOnlyList < DiscordPermission >"
  },
  "api/Remora.Discord.Commands.Attributes.DiscordTypeHintAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.DiscordTypeHintAttribute.html",
    "title": "Class DiscordTypeHintAttribute | Remora.Discord",
    "keywords": "Class DiscordTypeHintAttribute Marks a parameter with type hinting for Discord slash commands, controlling what kind of autocompletion is used. Inheritance Object Attribute DiscordTypeHintAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Parameter)] public class DiscordTypeHintAttribute : Attribute Constructors | Improve this Doc View Source DiscordTypeHintAttribute(TypeHint) Initializes a new instance of the DiscordTypeHintAttribute class. Declaration public DiscordTypeHintAttribute(TypeHint typeHint) Parameters Type Name Description TypeHint typeHint The type hint. Properties | Improve this Doc View Source TypeHint Gets the configured type hint. Declaration public TypeHint TypeHint { get; } Property Value Type Description TypeHint"
  },
  "api/Remora.Discord.Commands.Attributes.EphemeralAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.EphemeralAttribute.html",
    "title": "Class EphemeralAttribute | Remora.Discord",
    "keywords": "Class EphemeralAttribute Marks a command as requiring an ephemeral response, when invoked by an interaction. Inheritance Object Attribute EphemeralAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)] public class EphemeralAttribute : Attribute Constructors | Improve this Doc View Source EphemeralAttribute(Boolean) Initializes a new instance of the EphemeralAttribute class. Declaration public EphemeralAttribute(bool isEphemeral = true) Parameters Type Name Description Boolean isEphemeral A value indicating whether this command should send ephemeral responses. Set this to override group-level EphemeralAttribute s. Properties | Improve this Doc View Source IsEphemeral Gets a value indicating whether this command should send ephemeral responses. Declaration public bool IsEphemeral { get; } Property Value Type Description Boolean"
  },
  "api/Remora.Discord.Commands.Attributes.ExcludeFromChoicesAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.ExcludeFromChoicesAttribute.html",
    "title": "Class ExcludeFromChoicesAttribute | Remora.Discord",
    "keywords": "Class ExcludeFromChoicesAttribute Marks an enumeration member as being excluded from slash command autocomplete options. Inheritance Object Attribute ExcludeFromChoicesAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [AttributeUsage(AttributeTargets.Field)] public class ExcludeFromChoicesAttribute : Attribute"
  },
  "api/Remora.Discord.Commands.Attributes.ExcludeFromSlashCommandsAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.ExcludeFromSlashCommandsAttribute.html",
    "title": "Class ExcludeFromSlashCommandsAttribute | Remora.Discord",
    "keywords": "Class ExcludeFromSlashCommandsAttribute Marks a command group or individual command as being excluded from slash command generation. Inheritance Object Attribute ExcludeFromSlashCommandsAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)] public class ExcludeFromSlashCommandsAttribute : Attribute"
  },
  "api/Remora.Discord.Commands.Attributes.html": {
    "href": "api/Remora.Discord.Commands.Attributes.html",
    "title": "Namespace Remora.Discord.Commands.Attributes | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Attributes Classes AutocompleteAttribute Marks a parameter as being considered for autocompletion. AutocompleteProviderAttribute Marks a parameter as having an associated autocomplete provider, which will dynamically suggest values as the user is typing. ChannelTypesAttribute Marks a channel parameter with type requirements for Discord slash commands, controlling what channel autocompletion is presented to the user. CommandTypeAttribute Marks a command as being of a specific type (chat input, context menu, etc). DiscordDefaultDMPermissionAttribute Marks a command or group as being either accessible or inaccessible in a DM. DiscordDefaultMemberPermissionsAttribute Marks a command as requiring the executor of the command to have the specified permissions. Specifying no permissions will make the command or group inaccessible to anyone. DiscordTypeHintAttribute Marks a parameter with type hinting for Discord slash commands, controlling what kind of autocompletion is used. EphemeralAttribute Marks a command as requiring an ephemeral response, when invoked by an interaction. ExcludeFromChoicesAttribute Marks an enumeration member as being excluded from slash command autocomplete options. ExcludeFromSlashCommandsAttribute Marks a command group or individual command as being excluded from slash command generation. MaxValueAttribute Defines an allowed range for a marked parameter. MinValueAttribute Defines an allowed range for a marked parameter. SuppressInteractionResponseAttribute Marks a command group or individual command with a desired response behaviour for interactions. Enums TypeHint Enumerates supported type hints for slash command parameters. The values in this enum map to ApplicationCommandOptionType , and can be considered a subset of that enum."
  },
  "api/Remora.Discord.Commands.Attributes.MaxValueAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.MaxValueAttribute.html",
    "title": "Class MaxValueAttribute | Remora.Discord",
    "keywords": "Class MaxValueAttribute Defines an allowed range for a marked parameter. Inheritance Object Attribute MaxValueAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Parameter)] public class MaxValueAttribute : Attribute Constructors | Improve this Doc View Source MaxValueAttribute(Double) Initializes a new instance of the MaxValueAttribute class. Declaration public MaxValueAttribute(double maxValue = 0) Parameters Type Name Description Double maxValue The maximum value. | Improve this Doc View Source MaxValueAttribute(Int64) Initializes a new instance of the MaxValueAttribute class. Declaration public MaxValueAttribute(long maxValue = 0L) Parameters Type Name Description Int64 maxValue The maximum value. | Improve this Doc View Source MaxValueAttribute(Single) Initializes a new instance of the MaxValueAttribute class. Declaration public MaxValueAttribute(float maxValue = 0F) Parameters Type Name Description Single maxValue The maximum value. | Improve this Doc View Source MaxValueAttribute(UInt64) Initializes a new instance of the MaxValueAttribute class. Declaration public MaxValueAttribute(ulong maxValue = 0UL) Parameters Type Name Description UInt64 maxValue The maximum value. Properties | Improve this Doc View Source Value Gets the maximum allowed value. Declaration public OneOf<ulong, long, float, double> Value { get; } Property Value Type Description OneOf.OneOf < UInt64 , Int64 , Single , Double >"
  },
  "api/Remora.Discord.Commands.Attributes.MinValueAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.MinValueAttribute.html",
    "title": "Class MinValueAttribute | Remora.Discord",
    "keywords": "Class MinValueAttribute Defines an allowed range for a marked parameter. Inheritance Object Attribute MinValueAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Parameter)] public class MinValueAttribute : Attribute Constructors | Improve this Doc View Source MinValueAttribute(Double) Initializes a new instance of the MinValueAttribute class. Declaration public MinValueAttribute(double minValue = 0) Parameters Type Name Description Double minValue The minimum value. | Improve this Doc View Source MinValueAttribute(Int64) Initializes a new instance of the MinValueAttribute class. Declaration public MinValueAttribute(long minValue = 0L) Parameters Type Name Description Int64 minValue The minimum value. | Improve this Doc View Source MinValueAttribute(Single) Initializes a new instance of the MinValueAttribute class. Declaration public MinValueAttribute(float minValue = 0F) Parameters Type Name Description Single minValue The minimum value. | Improve this Doc View Source MinValueAttribute(UInt64) Initializes a new instance of the MinValueAttribute class. Declaration public MinValueAttribute(ulong minValue = 0UL) Parameters Type Name Description UInt64 minValue The minimum value. Properties | Improve this Doc View Source Value Gets the minimum allowed value. Declaration public OneOf<ulong, long, float, double> Value { get; } Property Value Type Description OneOf.OneOf < UInt64 , Int64 , Single , Double >"
  },
  "api/Remora.Discord.Commands.Attributes.SuppressInteractionResponseAttribute.html": {
    "href": "api/Remora.Discord.Commands.Attributes.SuppressInteractionResponseAttribute.html",
    "title": "Class SuppressInteractionResponseAttribute | Remora.Discord",
    "keywords": "Class SuppressInteractionResponseAttribute Marks a command group or individual command with a desired response behaviour for interactions. Inheritance Object Attribute SuppressInteractionResponseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)] public class SuppressInteractionResponseAttribute : Attribute Constructors | Improve this Doc View Source SuppressInteractionResponseAttribute(Boolean) Initializes a new instance of the SuppressInteractionResponseAttribute class. Declaration public SuppressInteractionResponseAttribute(bool suppress) Parameters Type Name Description Boolean suppress true of the response should be suppressed; otherwise, false. Properties | Improve this Doc View Source Suppress Gets a value indicating whether an automatic response should be suppressed. Declaration public bool Suppress { get; } Property Value Type Description Boolean"
  },
  "api/Remora.Discord.Commands.Attributes.TypeHint.html": {
    "href": "api/Remora.Discord.Commands.Attributes.TypeHint.html",
    "title": "Enum TypeHint | Remora.Discord",
    "keywords": "Enum TypeHint Enumerates supported type hints for slash command parameters. The values in this enum map to ApplicationCommandOptionType , and can be considered a subset of that enum. Namespace : Remora.Discord.Commands.Attributes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public enum TypeHint Fields Name Description Boolean The option is a boolean. Channel The option is a channel reference. Integer The option is an integer. Mentionable The option is some type of mentionable object (member, role, channel, etc). Number The option is a floating-point number (double precision). Role The option is a role reference. String The option is a string. User The option is a user reference."
  },
  "api/Remora.Discord.Commands.Autocomplete.EnumAutocompleteProvider-1.html": {
    "href": "api/Remora.Discord.Commands.Autocomplete.EnumAutocompleteProvider-1.html",
    "title": "Class EnumAutocompleteProvider<TEnum> | Remora.Discord",
    "keywords": "Class EnumAutocompleteProvider<TEnum> Provides autocompletion suggestions for enums. Inheritance Object EnumAutocompleteProvider<TEnum> Implements IAutocompleteProvider <TEnum> IAutocompleteProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Autocomplete Assembly : Remora.Discord.Commands.dll Syntax public class EnumAutocompleteProvider<TEnum> : IAutocompleteProvider<TEnum>, IAutocompleteProvider where TEnum : struct, Enum Type Parameters Name Description TEnum The enumeration type. Constructors | Improve this Doc View Source EnumAutocompleteProvider(ILogger<EnumAutocompleteProvider<TEnum>>, ILocalizationProvider) Initializes a new instance of the EnumAutocompleteProvider<TEnum> class. Declaration public EnumAutocompleteProvider(ILogger<EnumAutocompleteProvider<TEnum>> logger, ILocalizationProvider localizationProvider) Parameters Type Name Description ILogger < EnumAutocompleteProvider <TEnum>> logger The logging instance for this type. ILocalizationProvider localizationProvider The localization provider. Methods | Improve this Doc View Source GetSuggestionsAsync(IReadOnlyList<IApplicationCommandInteractionDataOption>, String, CancellationToken) Gets a set of autocomplete suggestions based on provided user input. Declaration public ValueTask<IReadOnlyList<IApplicationCommandOptionChoice>> GetSuggestionsAsync(IReadOnlyList<IApplicationCommandInteractionDataOption> options, string userInput, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IReadOnlyList < IApplicationCommandInteractionDataOption > options The other options in the command being invoked. String userInput The user's current input. CancellationToken ct The cancellation token for this operation. Returns Type Description ValueTask < IReadOnlyList < IApplicationCommandOptionChoice >> The suggested options. Implements IAutocompleteProvider<T> IAutocompleteProvider"
  },
  "api/Remora.Discord.Commands.Autocomplete.html": {
    "href": "api/Remora.Discord.Commands.Autocomplete.html",
    "title": "Namespace Remora.Discord.Commands.Autocomplete | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Autocomplete Classes EnumAutocompleteProvider<TEnum> Provides autocompletion suggestions for enums. Interfaces IAutocompleteProvider Represents the public interface of an autocomplete provider. IAutocompleteProvider<T> Glue interface for type-specific autocomplete providers."
  },
  "api/Remora.Discord.Commands.Autocomplete.IAutocompleteProvider.html": {
    "href": "api/Remora.Discord.Commands.Autocomplete.IAutocompleteProvider.html",
    "title": "Interface IAutocompleteProvider | Remora.Discord",
    "keywords": "Interface IAutocompleteProvider Represents the public interface of an autocomplete provider. Namespace : Remora.Discord.Commands.Autocomplete Assembly : Remora.Discord.Commands.dll Syntax public interface IAutocompleteProvider Properties | Improve this Doc View Source Identity Gets the identity of the autocomplete provider. Declaration string Identity { get; } Property Value Type Description String Methods | Improve this Doc View Source GetSuggestionsAsync(IReadOnlyList<IApplicationCommandInteractionDataOption>, String, CancellationToken) Gets a set of autocomplete suggestions based on provided user input. Declaration ValueTask<IReadOnlyList<IApplicationCommandOptionChoice>> GetSuggestionsAsync(IReadOnlyList<IApplicationCommandInteractionDataOption> options, string userInput, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IReadOnlyList < IApplicationCommandInteractionDataOption > options The other options in the command being invoked. String userInput The user's current input. CancellationToken ct The cancellation token for this operation. Returns Type Description ValueTask < IReadOnlyList < IApplicationCommandOptionChoice >> The suggested options."
  },
  "api/Remora.Discord.Commands.Autocomplete.IAutocompleteProvider-1.html": {
    "href": "api/Remora.Discord.Commands.Autocomplete.IAutocompleteProvider-1.html",
    "title": "Interface IAutocompleteProvider<T> | Remora.Discord",
    "keywords": "Interface IAutocompleteProvider<T> Glue interface for type-specific autocomplete providers. Inherited Members IAutocompleteProvider.Identity IAutocompleteProvider.GetSuggestionsAsync(IReadOnlyList<IApplicationCommandInteractionDataOption>, String, CancellationToken) Namespace : Remora.Discord.Commands.Autocomplete Assembly : Remora.Discord.Commands.dll Syntax public interface IAutocompleteProvider<T> : IAutocompleteProvider Type Parameters Name Description T The type the provider suggests autocompletion for. Properties | Improve this Doc View Source Type Gets the type the provider suggests autocompletion for. Declaration virtual Type Type { get; } Property Value Type Description Type Explicit Interface Implementations | Improve this Doc View Source IAutocompleteProvider.Identity Gets the identity of the autocomplete provider. Declaration string IAutocompleteProvider.Identity { get; } Returns Type Description String"
  },
  "api/Remora.Discord.Commands.Conditions.ChannelContext.html": {
    "href": "api/Remora.Discord.Commands.Conditions.ChannelContext.html",
    "title": "Enum ChannelContext | Remora.Discord",
    "keywords": "Enum ChannelContext Enumerates various channel contexts. Namespace : Remora.Discord.Commands.Conditions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public enum ChannelContext Fields Name Description DM The command was executed in a DM. GroupDM The command was executed in a group DM. Guild The command was executed in a guild. Extension Methods ChannelContextExtensions.ToChannelTypes()"
  },
  "api/Remora.Discord.Commands.Conditions.html": {
    "href": "api/Remora.Discord.Commands.Conditions.html",
    "title": "Namespace Remora.Discord.Commands.Conditions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Conditions Classes RequireBotDiscordPermissionsAttribute Marks an entity as requiring a certain permission for the bot user (self/current user). RequireBotDiscordPermissionsCondition Determines whether the bot fulfills a set of requirements related to Discord permissions. RequireContextAttribute Marks a command as requiring execution within a particular context. RequireContextCondition Checks required contexts before allowing execution. RequireDiscordPermissionAttribute Marks an entity as requiring a certain permission. RequireDiscordPermissionCondition Determines whether the invoking user fulfills a set of requirements related to Discord permissions. RequireOwnerAttribute Marks a command as requiring the invoker to be the owner of the bot. RequireOwnerCondition Checks that the bot's owner is the same as the invoking user. Enums ChannelContext Enumerates various channel contexts. LogicalOperator Enumerates various logical operators."
  },
  "api/Remora.Discord.Commands.Conditions.LogicalOperator.html": {
    "href": "api/Remora.Discord.Commands.Conditions.LogicalOperator.html",
    "title": "Enum LogicalOperator | Remora.Discord",
    "keywords": "Enum LogicalOperator Enumerates various logical operators. Namespace : Remora.Discord.Commands.Conditions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public enum LogicalOperator Fields Name Description And AND, that is, all of the inputs must be logically true. Not NOT, that is, all of the inputs must be logically false. Or OR, that is, one or more of the inputs must be logically true. Xor XOR, that is, one and only one of the inputs must be logically true."
  },
  "api/Remora.Discord.Commands.Conditions.RequireBotDiscordPermissionsAttribute.html": {
    "href": "api/Remora.Discord.Commands.Conditions.RequireBotDiscordPermissionsAttribute.html",
    "title": "Class RequireBotDiscordPermissionsAttribute | Remora.Discord",
    "keywords": "Class RequireBotDiscordPermissionsAttribute Marks an entity as requiring a certain permission for the bot user (self/current user). Inheritance Object Attribute Remora.Commands.Conditions.ConditionAttribute RequireBotDiscordPermissionsAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Conditions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Parameter)] public class RequireBotDiscordPermissionsAttribute : ConditionAttribute Remarks Supported entities include the following: Command groups (which require the bot to have the specified permission(s)). Commands (which require the bot to have the specified permission(s)). IChannels (which require the bot to have the specified permission(s) in the channel). More than one permission may be specified, in which case the behaviour is controlled with Operator . Constructors | Improve this Doc View Source RequireBotDiscordPermissionsAttribute(DiscordPermission[]) Initializes a new instance of the RequireBotDiscordPermissionsAttribute class. Declaration public RequireBotDiscordPermissionsAttribute(params DiscordPermission[] permissions) Parameters Type Name Description DiscordPermission [] permissions The permissions to require. | Improve this Doc View Source RequireBotDiscordPermissionsAttribute(DiscordStagePermission[]) Initializes a new instance of the RequireBotDiscordPermissionsAttribute class. Declaration public RequireBotDiscordPermissionsAttribute(params DiscordStagePermission[] permissions) Parameters Type Name Description DiscordStagePermission [] permissions The permissions to require. | Improve this Doc View Source RequireBotDiscordPermissionsAttribute(DiscordTextPermission[]) Initializes a new instance of the RequireBotDiscordPermissionsAttribute class. Declaration public RequireBotDiscordPermissionsAttribute(params DiscordTextPermission[] permissions) Parameters Type Name Description DiscordTextPermission [] permissions The permissions to require. | Improve this Doc View Source RequireBotDiscordPermissionsAttribute(DiscordVoicePermission[]) Initializes a new instance of the RequireBotDiscordPermissionsAttribute class. Declaration public RequireBotDiscordPermissionsAttribute(params DiscordVoicePermission[] permissions) Parameters Type Name Description DiscordVoicePermission [] permissions The permissions to require. Properties | Improve this Doc View Source Operator Gets the logical operator used to combine the permissions. Declaration public LogicalOperator Operator { get; set; } Property Value Type Description LogicalOperator | Improve this Doc View Source Permissions Gets the permissions that should be checked. Declaration public IReadOnlyList<DiscordPermission> Permissions { get; } Property Value Type Description IReadOnlyList < DiscordPermission >"
  },
  "api/Remora.Discord.Commands.Conditions.RequireBotDiscordPermissionsCondition.html": {
    "href": "api/Remora.Discord.Commands.Conditions.RequireBotDiscordPermissionsCondition.html",
    "title": "Class RequireBotDiscordPermissionsCondition | Remora.Discord",
    "keywords": "Class RequireBotDiscordPermissionsCondition Determines whether the bot fulfills a set of requirements related to Discord permissions. Inheritance Object RequireBotDiscordPermissionsCondition Implements Remora.Commands.Conditions.ICondition < RequireBotDiscordPermissionsAttribute > Remora.Commands.Conditions.ICondition < RequireBotDiscordPermissionsAttribute , IChannel > Remora.Commands.Conditions.ICondition Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Conditions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class RequireBotDiscordPermissionsCondition : ICondition<RequireBotDiscordPermissionsAttribute>, ICondition<RequireBotDiscordPermissionsAttribute, IChannel>, ICondition Constructors | Improve this Doc View Source RequireBotDiscordPermissionsCondition(IDiscordRestUserAPI, IDiscordRestGuildAPI, IDiscordRestChannelAPI, ICommandContext) Initializes a new instance of the RequireBotDiscordPermissionsCondition class. Declaration public RequireBotDiscordPermissionsCondition(IDiscordRestUserAPI userAPI, IDiscordRestGuildAPI guildAPI, IDiscordRestChannelAPI channelAPI, ICommandContext context) Parameters Type Name Description IDiscordRestUserAPI userAPI The user API. IDiscordRestGuildAPI guildAPI The guild API. IDiscordRestChannelAPI channelAPI The channel API. ICommandContext context The command context. Methods | Improve this Doc View Source CheckAsync(RequireBotDiscordPermissionsAttribute, IChannel, CancellationToken) Declaration public async ValueTask<Result> CheckAsync(RequireBotDiscordPermissionsAttribute attribute, IChannel data, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description RequireBotDiscordPermissionsAttribute attribute IChannel data CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result > | Improve this Doc View Source CheckAsync(RequireBotDiscordPermissionsAttribute, CancellationToken) Declaration public async ValueTask<Result> CheckAsync(RequireBotDiscordPermissionsAttribute attribute, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description RequireBotDiscordPermissionsAttribute attribute CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result > Implements Remora.Commands.Conditions.ICondition<TAttribute> Remora.Commands.Conditions.ICondition<TAttribute, TData> Remora.Commands.Conditions.ICondition"
  },
  "api/Remora.Discord.Commands.Conditions.RequireContextAttribute.html": {
    "href": "api/Remora.Discord.Commands.Conditions.RequireContextAttribute.html",
    "title": "Class RequireContextAttribute | Remora.Discord",
    "keywords": "Class RequireContextAttribute Marks a command as requiring execution within a particular context. Inheritance Object Attribute Remora.Commands.Conditions.ConditionAttribute RequireContextAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Conditions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class RequireContextAttribute : ConditionAttribute Constructors | Improve this Doc View Source RequireContextAttribute(ChannelType[]) Initializes a new instance of the RequireContextAttribute class. Declaration public RequireContextAttribute(params ChannelType[] channelType) Parameters Type Name Description ChannelType [] channelType The individual channel types. | Improve this Doc View Source RequireContextAttribute(ChannelContext[]) Initializes a new instance of the RequireContextAttribute class. Declaration public RequireContextAttribute(params ChannelContext[] channelContexts) Parameters Type Name Description ChannelContext [] channelContexts The grouped channel contexts. Properties | Improve this Doc View Source ChannelTypes Gets the channel types command execution is permitted in. Declaration public ChannelType[] ChannelTypes { get; } Property Value Type Description ChannelType []"
  },
  "api/Remora.Discord.Commands.Conditions.RequireContextCondition.html": {
    "href": "api/Remora.Discord.Commands.Conditions.RequireContextCondition.html",
    "title": "Class RequireContextCondition | Remora.Discord",
    "keywords": "Class RequireContextCondition Checks required contexts before allowing execution. Inheritance Object RequireContextCondition Implements Remora.Commands.Conditions.ICondition < RequireContextAttribute > Remora.Commands.Conditions.ICondition Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Conditions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class RequireContextCondition : ICondition<RequireContextAttribute>, ICondition Constructors | Improve this Doc View Source RequireContextCondition(ICommandContext, IDiscordRestChannelAPI) Initializes a new instance of the RequireContextCondition class. Declaration public RequireContextCondition(ICommandContext context, IDiscordRestChannelAPI channelAPI) Parameters Type Name Description ICommandContext context The command context. IDiscordRestChannelAPI channelAPI The channel API. Methods | Improve this Doc View Source CheckAsync(RequireContextAttribute, CancellationToken) Declaration public async ValueTask<Result> CheckAsync(RequireContextAttribute attribute, CancellationToken ct) Parameters Type Name Description RequireContextAttribute attribute CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result > Implements Remora.Commands.Conditions.ICondition<TAttribute> Remora.Commands.Conditions.ICondition"
  },
  "api/Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html": {
    "href": "api/Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html",
    "title": "Class RequireDiscordPermissionAttribute | Remora.Discord",
    "keywords": "Class RequireDiscordPermissionAttribute Marks an entity as requiring a certain permission. Inheritance Object Attribute Remora.Commands.Conditions.ConditionAttribute RequireDiscordPermissionAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Conditions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Parameter)] public class RequireDiscordPermissionAttribute : ConditionAttribute Remarks Supported entities include the following: Command groups (which require the invoker to have the permission(s)) Commands (which require the invoker to have the permission(s)) IUser parameters (which require the target user to have the permission(s)) IGuildMember parameters (which require the target user to have the permission(s)) IRole parameters (which require the target role to have the permission(s)) More than one permission may be specified, in which case the behaviour is controlled with Operator . Constructors | Improve this Doc View Source RequireDiscordPermissionAttribute(DiscordPermission[]) Initializes a new instance of the RequireDiscordPermissionAttribute class. Declaration public RequireDiscordPermissionAttribute(params DiscordPermission[] permissions) Parameters Type Name Description DiscordPermission [] permissions The permissions to require. | Improve this Doc View Source RequireDiscordPermissionAttribute(DiscordStagePermission[]) Initializes a new instance of the RequireDiscordPermissionAttribute class. Declaration public RequireDiscordPermissionAttribute(params DiscordStagePermission[] permissions) Parameters Type Name Description DiscordStagePermission [] permissions The permissions to require. | Improve this Doc View Source RequireDiscordPermissionAttribute(DiscordTextPermission[]) Initializes a new instance of the RequireDiscordPermissionAttribute class. Declaration public RequireDiscordPermissionAttribute(params DiscordTextPermission[] permissions) Parameters Type Name Description DiscordTextPermission [] permissions The permissions to require. | Improve this Doc View Source RequireDiscordPermissionAttribute(DiscordVoicePermission[]) Initializes a new instance of the RequireDiscordPermissionAttribute class. Declaration public RequireDiscordPermissionAttribute(params DiscordVoicePermission[] permissions) Parameters Type Name Description DiscordVoicePermission [] permissions The permissions to require. Properties | Improve this Doc View Source Operator Gets the logical operator used to combine the permissions. Declaration public LogicalOperator Operator { get; set; } Property Value Type Description LogicalOperator | Improve this Doc View Source Permissions Gets the permissions that should be checked. Declaration public IReadOnlyList<DiscordPermission> Permissions { get; } Property Value Type Description IReadOnlyList < DiscordPermission >"
  },
  "api/Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.html": {
    "href": "api/Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.html",
    "title": "Class RequireDiscordPermissionCondition | Remora.Discord",
    "keywords": "Class RequireDiscordPermissionCondition Determines whether the invoking user fulfills a set of requirements related to Discord permissions. Inheritance Object RequireDiscordPermissionCondition Implements Remora.Commands.Conditions.ICondition < RequireDiscordPermissionAttribute > Remora.Commands.Conditions.ICondition < RequireDiscordPermissionAttribute , IUser > Remora.Commands.Conditions.ICondition < RequireDiscordPermissionAttribute , IGuildMember > Remora.Commands.Conditions.ICondition < RequireDiscordPermissionAttribute , IRole > Remora.Commands.Conditions.ICondition Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Conditions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class RequireDiscordPermissionCondition : ICondition<RequireDiscordPermissionAttribute>, ICondition<RequireDiscordPermissionAttribute, IUser>, ICondition<RequireDiscordPermissionAttribute, IGuildMember>, ICondition<RequireDiscordPermissionAttribute, IRole>, ICondition Constructors | Improve this Doc View Source RequireDiscordPermissionCondition(IDiscordRestGuildAPI, IDiscordRestChannelAPI, ICommandContext) Initializes a new instance of the RequireDiscordPermissionCondition class. Declaration public RequireDiscordPermissionCondition(IDiscordRestGuildAPI guildAPI, IDiscordRestChannelAPI channelAPI, ICommandContext context) Parameters Type Name Description IDiscordRestGuildAPI guildAPI The guild API. IDiscordRestChannelAPI channelAPI The channel API. ICommandContext context The command context. Methods | Improve this Doc View Source CheckAsync(RequireDiscordPermissionAttribute, IGuildMember, CancellationToken) Declaration public async ValueTask<Result> CheckAsync(RequireDiscordPermissionAttribute attribute, IGuildMember member, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description RequireDiscordPermissionAttribute attribute IGuildMember member CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result > Remarks This method checks the condition against the target member. | Improve this Doc View Source CheckAsync(RequireDiscordPermissionAttribute, IRole, CancellationToken) Declaration public async ValueTask<Result> CheckAsync(RequireDiscordPermissionAttribute attribute, IRole role, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description RequireDiscordPermissionAttribute attribute IRole role CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result > Remarks This method checks the condition against the target role. | Improve this Doc View Source CheckAsync(RequireDiscordPermissionAttribute, IUser, CancellationToken) Declaration public async ValueTask<Result> CheckAsync(RequireDiscordPermissionAttribute attribute, IUser user, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description RequireDiscordPermissionAttribute attribute IUser user CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result > Remarks This method checks the condition against the target user. | Improve this Doc View Source CheckAsync(RequireDiscordPermissionAttribute, CancellationToken) Declaration public async ValueTask<Result> CheckAsync(RequireDiscordPermissionAttribute attribute, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description RequireDiscordPermissionAttribute attribute CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result > Remarks This method checks the condition against the invoking user. Implements Remora.Commands.Conditions.ICondition<TAttribute> Remora.Commands.Conditions.ICondition<TAttribute, TData> Remora.Commands.Conditions.ICondition<TAttribute, TData> Remora.Commands.Conditions.ICondition<TAttribute, TData> Remora.Commands.Conditions.ICondition"
  },
  "api/Remora.Discord.Commands.Conditions.RequireOwnerAttribute.html": {
    "href": "api/Remora.Discord.Commands.Conditions.RequireOwnerAttribute.html",
    "title": "Class RequireOwnerAttribute | Remora.Discord",
    "keywords": "Class RequireOwnerAttribute Marks a command as requiring the invoker to be the owner of the bot. Inheritance Object Attribute Remora.Commands.Conditions.ConditionAttribute RequireOwnerAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Conditions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] [AttributeUsage(AttributeTargets.Method)] public class RequireOwnerAttribute : ConditionAttribute"
  },
  "api/Remora.Discord.Commands.Conditions.RequireOwnerCondition.html": {
    "href": "api/Remora.Discord.Commands.Conditions.RequireOwnerCondition.html",
    "title": "Class RequireOwnerCondition | Remora.Discord",
    "keywords": "Class RequireOwnerCondition Checks that the bot's owner is the same as the invoking user. Inheritance Object RequireOwnerCondition Implements Remora.Commands.Conditions.ICondition < RequireOwnerAttribute > Remora.Commands.Conditions.ICondition Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Conditions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class RequireOwnerCondition : ICondition<RequireOwnerAttribute>, ICondition Constructors | Improve this Doc View Source RequireOwnerCondition(ICommandContext, IDiscordRestOAuth2API) Initializes a new instance of the RequireOwnerCondition class. Declaration public RequireOwnerCondition(ICommandContext context, IDiscordRestOAuth2API oauth2API) Parameters Type Name Description ICommandContext context The command context. IDiscordRestOAuth2API oauth2API The OAuth2 API. Methods | Improve this Doc View Source CheckAsync(RequireOwnerAttribute, CancellationToken) Declaration public async ValueTask<Result> CheckAsync(RequireOwnerAttribute attribute, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description RequireOwnerAttribute attribute CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result > Implements Remora.Commands.Conditions.ICondition<TAttribute> Remora.Commands.Conditions.ICondition"
  },
  "api/Remora.Discord.Commands.Contexts.CommandContext.html": {
    "href": "api/Remora.Discord.Commands.Contexts.CommandContext.html",
    "title": "Class CommandContext | Remora.Discord",
    "keywords": "Class CommandContext Represents a command context. Inheritance Object CommandContext InteractionContext MessageContext Implements ICommandContext IEquatable < CommandContext > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Contexts Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class CommandContext : ICommandContext, IEquatable<CommandContext> Constructors | Improve this Doc View Source CommandContext(Optional<Snowflake>, Snowflake, IUser) Declaration public CommandContext(Optional<Snowflake> GuildID, Snowflake ChannelID, IUser User) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Snowflake ChannelID IUser User Properties | Improve this Doc View Source ChannelID Declaration public Snowflake ChannelID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Declaration public Optional<Snowflake> GuildID { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source User Declaration public IUser User { get; set; } Property Value Type Description IUser Implements ICommandContext System.IEquatable<T>"
  },
  "api/Remora.Discord.Commands.Contexts.html": {
    "href": "api/Remora.Discord.Commands.Contexts.html",
    "title": "Namespace Remora.Discord.Commands.Contexts | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Contexts Classes CommandContext Represents a command context. InteractionContext Represents contextual information about an interaction. MessageContext Represents contextual information about a message. Interfaces ICommandContext Represents a command context."
  },
  "api/Remora.Discord.Commands.Contexts.ICommandContext.html": {
    "href": "api/Remora.Discord.Commands.Contexts.ICommandContext.html",
    "title": "Interface ICommandContext | Remora.Discord",
    "keywords": "Interface ICommandContext Represents a command context. Namespace : Remora.Discord.Commands.Contexts Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public interface ICommandContext Properties | Improve this Doc View Source ChannelID Gets the ID of the channel the context refers to. Declaration Snowflake ChannelID { get; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source GuildID Gets the ID of the guild the context refers to, if any. Declaration Optional<Snowflake> GuildID { get; } Property Value Type Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > | Improve this Doc View Source User Gets the user that invoked the command. Declaration IUser User { get; } Property Value Type Description IUser"
  },
  "api/Remora.Discord.Commands.Contexts.InteractionContext.html": {
    "href": "api/Remora.Discord.Commands.Contexts.InteractionContext.html",
    "title": "Class InteractionContext | Remora.Discord",
    "keywords": "Class InteractionContext Represents contextual information about an interaction. Inheritance Object CommandContext InteractionContext Implements ICommandContext IEquatable < CommandContext > IEquatable < InteractionContext > Inherited Members CommandContext.GuildID CommandContext.ChannelID CommandContext.User Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Contexts Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class InteractionContext : CommandContext, ICommandContext, IEquatable<CommandContext>, IEquatable<InteractionContext> Constructors | Improve this Doc View Source InteractionContext(Optional<Snowflake>, Snowflake, IUser, Optional<IGuildMember>, String, Snowflake, Snowflake, IInteractionData, Optional<IMessage>, Optional<String>) Represents contextual information about an interaction. Declaration public InteractionContext(Optional<Snowflake> GuildID, Snowflake ChannelID, IUser User, Optional<IGuildMember> Member, string Token, Snowflake ID, Snowflake ApplicationID, IInteractionData Data, Optional<IMessage> Message, Optional<string> Locale) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > GuildID Remora.Rest.Core.Snowflake ChannelID IUser User Remora.Rest.Core.Optional < IGuildMember > Member String Token Remora.Rest.Core.Snowflake ID Remora.Rest.Core.Snowflake ApplicationID IInteractionData Data Remora.Rest.Core.Optional < IMessage > Message Remora.Rest.Core.Optional < String > Locale Properties | Improve this Doc View Source ApplicationID Declaration public Snowflake ApplicationID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Data Declaration public IInteractionData Data { get; set; } Property Value Type Description IInteractionData | Improve this Doc View Source HasRespondedToInteraction Gets a value indicating whether the interaction has been responded to. Declaration public bool HasRespondedToInteraction { get; } Property Value Type Description Boolean Remarks Note that this value is only updated if the response is created after the context is instantiated. | Improve this Doc View Source ID Declaration public Snowflake ID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake | Improve this Doc View Source Locale Declaration public Optional<string> Locale { get; set; } Property Value Type Description Remora.Rest.Core.Optional < String > | Improve this Doc View Source Member Declaration public Optional<IGuildMember> Member { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IGuildMember > | Improve this Doc View Source Message Declaration public Optional<IMessage> Message { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IMessage > | Improve this Doc View Source Token Declaration public string Token { get; set; } Property Value Type Description String Implements ICommandContext System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.Commands.Contexts.MessageContext.html": {
    "href": "api/Remora.Discord.Commands.Contexts.MessageContext.html",
    "title": "Class MessageContext | Remora.Discord",
    "keywords": "Class MessageContext Represents contextual information about a message. Inheritance Object CommandContext MessageContext Implements ICommandContext IEquatable < CommandContext > IEquatable < MessageContext > Inherited Members CommandContext.GuildID CommandContext.ChannelID CommandContext.User Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Contexts Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class MessageContext : CommandContext, ICommandContext, IEquatable<CommandContext>, IEquatable<MessageContext> Constructors | Improve this Doc View Source MessageContext(Snowflake, IUser, Snowflake, IPartialMessage) Represents contextual information about a message. Declaration public MessageContext(Snowflake ChannelID, IUser User, Snowflake MessageID, IPartialMessage Message) Parameters Type Name Description Remora.Rest.Core.Snowflake ChannelID IUser User Remora.Rest.Core.Snowflake MessageID IPartialMessage Message Properties | Improve this Doc View Source Message Declaration public IPartialMessage Message { get; set; } Property Value Type Description IPartialMessage | Improve this Doc View Source MessageID Declaration public Snowflake MessageID { get; set; } Property Value Type Description Remora.Rest.Core.Snowflake Implements ICommandContext System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.Commands.Extensions.ChannelContextExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.ChannelContextExtensions.html",
    "title": "Class ChannelContextExtensions | Remora.Discord",
    "keywords": "Class ChannelContextExtensions Defines extension methods for the ChannelContext class. Inheritance Object ChannelContextExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public static class ChannelContextExtensions Methods | Improve this Doc View Source ToChannelTypes(ChannelContext) Converts the general channel context into its constituent channel types. Declaration public static IReadOnlyList<ChannelType> ToChannelTypes(this ChannelContext channelContext) Parameters Type Name Description ChannelContext channelContext The channel context to retrieve the channel types from. Returns Type Description IReadOnlyList < ChannelType > The channel context's channels types."
  },
  "api/Remora.Discord.Commands.Extensions.CommandNodeExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.CommandNodeExtensions.html",
    "title": "Class CommandNodeExtensions | Remora.Discord",
    "keywords": "Class CommandNodeExtensions Defines extension methods for the Remora.Commands.Trees.Nodes.CommandNode type. Inheritance Object CommandNodeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax public static class CommandNodeExtensions Methods | Improve this Doc View Source FindCustomAttributeOnLocalTree<T>(CommandNode, Boolean) Finds the first custom attribute on the given command or any of its ancestors. Declaration public static T FindCustomAttributeOnLocalTree<T>(this CommandNode node, bool includeAncestors = true) where T : Attribute Parameters Type Name Description Remora.Commands.Trees.Nodes.CommandNode node The command node. Boolean includeAncestors Indicates that ancestors of the command should also be search for the attribute. Returns Type Description T A custom attribute that matches T , or null if no such attribute is found. Type Parameters Name Description T The type of attribute to search for. | Improve this Doc View Source GetCommandType(CommandNode) Gets the command type of the given node. Declaration public static ApplicationCommandType GetCommandType(this CommandNode node) Parameters Type Name Description Remora.Commands.Trees.Nodes.CommandNode node The node. Returns Type Description ApplicationCommandType The command type."
  },
  "api/Remora.Discord.Commands.Extensions.CommandTreeExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.CommandTreeExtensions.html",
    "title": "Class CommandTreeExtensions | Remora.Discord",
    "keywords": "Class CommandTreeExtensions Defines extension methods for the Remora.Commands.Trees.CommandTree class. Inheritance Object CommandTreeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public static class CommandTreeExtensions Methods | Improve this Doc View Source CreateApplicationCommands(CommandTree) Converts the command tree to a set of Discord application commands. Declaration public static Result<IReadOnlyList<IBulkApplicationCommandData>> CreateApplicationCommands(this CommandTree tree) Parameters Type Name Description Remora.Commands.Trees.CommandTree tree The command tree. Returns Type Description Remora.Results.Result < IReadOnlyList < IBulkApplicationCommandData >> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateApplicationCommands(CommandTree, ILocalizationProvider) Converts the command tree to a set of Discord application commands. Declaration public static Result<IReadOnlyList<IBulkApplicationCommandData>> CreateApplicationCommands(this CommandTree tree, ILocalizationProvider localizationProvider) Parameters Type Name Description Remora.Commands.Trees.CommandTree tree The command tree. ILocalizationProvider localizationProvider The localization provider. Returns Type Description Remora.Results.Result < IReadOnlyList < IBulkApplicationCommandData >> A creation result which may or may not have succeeded. | Improve this Doc View Source MapDiscordCommands(CommandTree, IReadOnlyList<IApplicationCommand>) Maps a set of Discord application commands to their respective command nodes. Declaration public static Dictionary<(Optional<Snowflake> GuildID, Snowflake CommandID), OneOf<IReadOnlyDictionary<string, CommandNode>, CommandNode>> MapDiscordCommands(this CommandTree commandTree, IReadOnlyList<IApplicationCommand> discordTree) Parameters Type Name Description Remora.Commands.Trees.CommandTree commandTree The command tree. IReadOnlyList < IApplicationCommand > discordTree The Discord commands. Returns Type Description Dictionary < (T1, T2) < Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake >, Remora.Rest.Core.Snowflake >, OneOf.OneOf < IReadOnlyDictionary < String , Remora.Commands.Trees.Nodes.CommandNode >, Remora.Commands.Trees.Nodes.CommandNode >> The node mapping."
  },
  "api/Remora.Discord.Commands.Extensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.html",
    "title": "Namespace Remora.Discord.Commands.Extensions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Extensions Classes ChannelContextExtensions Defines extension methods for the ChannelContext class. CommandNodeExtensions Defines extension methods for the Remora.Commands.Trees.Nodes.CommandNode type. CommandTreeExtensions Defines extension methods for the Remora.Commands.Trees.CommandTree class. InteractionCreateExtensions Defines extension methods for the IInteractionCreate interface. InteractionDataExtensions Defines extensions for the IInteractionData interface. LocalizationProviderExtensions Defines extension methods for the ILocalizationProvider interface. MessageCreateExtensions Defines extension methods for the IMessageCreate interface. MessageUpdateExtensions Defines extension methods for the IMessageUpdate interface. ParameterShapeExtensions Defines extension methods for the Remora.Commands.Signatures.IParameterShape interface. ServiceCollectionExtensions Defines extension methods for the IServiceCollection interface. StringExtensions Defines extension methods to the String type."
  },
  "api/Remora.Discord.Commands.Extensions.InteractionCreateExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.InteractionCreateExtensions.html",
    "title": "Class InteractionCreateExtensions | Remora.Discord",
    "keywords": "Class InteractionCreateExtensions Defines extension methods for the IInteractionCreate interface. Inheritance Object InteractionCreateExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax public static class InteractionCreateExtensions Methods | Improve this Doc View Source CreateContext(IInteractionCreate) Creates an interaction context from the given interaction. Declaration public static Result<InteractionContext> CreateContext(this IInteractionCreate interactionCreate) Parameters Type Name Description IInteractionCreate interactionCreate The interaction. Returns Type Description Remora.Results.Result < InteractionContext > A result which may or may not have succeeded."
  },
  "api/Remora.Discord.Commands.Extensions.InteractionDataExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.InteractionDataExtensions.html",
    "title": "Class InteractionDataExtensions | Remora.Discord",
    "keywords": "Class InteractionDataExtensions Defines extensions for the IInteractionData interface. Inheritance Object InteractionDataExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public static class InteractionDataExtensions Methods | Improve this Doc View Source UnpackInteraction(IInteractionData, out IReadOnlyList<String>, out IReadOnlyDictionary<String, IReadOnlyList<String>>) Unpacks an interaction into a command name string and a set of parameters. Declaration public static void UnpackInteraction(this IInteractionData commandData, out IReadOnlyList<string> commandPath, out IReadOnlyDictionary<string, IReadOnlyList<string>> parameters) Parameters Type Name Description IInteractionData commandData The interaction to unpack. IReadOnlyList < String > commandPath The command path, that is, the sequential components of the full command name. IReadOnlyDictionary < String , IReadOnlyList < String >> parameters The parameters supplied to the command."
  },
  "api/Remora.Discord.Commands.Extensions.LocalizationProviderExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.LocalizationProviderExtensions.html",
    "title": "Class LocalizationProviderExtensions | Remora.Discord",
    "keywords": "Class LocalizationProviderExtensions Defines extension methods for the ILocalizationProvider interface. Inheritance Object LocalizationProviderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax public static class LocalizationProviderExtensions Methods | Improve this Doc View Source GetStrings(ILocalizationProvider, String) Gets a mapping of all available localized values for the given input. Declaration public static IReadOnlyDictionary<string, string> GetStrings(this ILocalizationProvider provider, string value) Parameters Type Name Description ILocalizationProvider provider The localization provider. String value The input value. Returns Type Description IReadOnlyDictionary < String , String > The available localized strings, mapped to the names of their locales."
  },
  "api/Remora.Discord.Commands.Extensions.MessageCreateExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.MessageCreateExtensions.html",
    "title": "Class MessageCreateExtensions | Remora.Discord",
    "keywords": "Class MessageCreateExtensions Defines extension methods for the IMessageCreate interface. Inheritance Object MessageCreateExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax public static class MessageCreateExtensions Methods | Improve this Doc View Source CreateContext(IMessageCreate) Creates a message context from the given message creation. Declaration public static Result<MessageContext> CreateContext(this IMessageCreate messageCreate) Parameters Type Name Description IMessageCreate messageCreate The message creation. Returns Type Description Remora.Results.Result < MessageContext > A result which may or may not have succeeded."
  },
  "api/Remora.Discord.Commands.Extensions.MessageUpdateExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.MessageUpdateExtensions.html",
    "title": "Class MessageUpdateExtensions | Remora.Discord",
    "keywords": "Class MessageUpdateExtensions Defines extension methods for the IMessageUpdate interface. Inheritance Object MessageUpdateExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax public static class MessageUpdateExtensions Methods | Improve this Doc View Source CreateContext(IMessageUpdate) Creates a message context from the given message update. Declaration public static Result<MessageContext> CreateContext(this IMessageUpdate messageUpdate) Parameters Type Name Description IMessageUpdate messageUpdate The message update. Returns Type Description Remora.Results.Result < MessageContext > A result which may or may not have succeeded."
  },
  "api/Remora.Discord.Commands.Extensions.ParameterShapeExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.ParameterShapeExtensions.html",
    "title": "Class ParameterShapeExtensions | Remora.Discord",
    "keywords": "Class ParameterShapeExtensions Defines extension methods for the Remora.Commands.Signatures.IParameterShape interface. Inheritance Object ParameterShapeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public static class ParameterShapeExtensions Methods | Improve this Doc View Source GetActualParameterType(IParameterShape) Gets the actual underlying type of the parameter, unwrapping things like nullables and optionals. Declaration public static Type GetActualParameterType(this IParameterShape shape) Parameters Type Name Description Remora.Commands.Signatures.IParameterShape shape The parameter shape. Returns Type Description Type The actual type. | Improve this Doc View Source GetDiscordType(IParameterShape) Gets the application option type the parameter's type maps to. Declaration public static ApplicationCommandOptionType GetDiscordType(this IParameterShape shape) Parameters Type Name Description Remora.Commands.Signatures.IParameterShape shape The parameter shape. Returns Type Description ApplicationCommandOptionType The option type."
  },
  "api/Remora.Discord.Commands.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Remora.Discord",
    "keywords": "Class ServiceCollectionExtensions Defines extension methods for the IServiceCollection interface. Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddAutocompleteProvider(IServiceCollection, Type) Adds an autocomplete provider to the service collection. Declaration public static IServiceCollection AddAutocompleteProvider(this IServiceCollection serviceCollection, Type providerType) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Type providerType The autocomplete provider type. Returns Type Description IServiceCollection The collection, with the provider. | Improve this Doc View Source AddAutocompleteProvider<TProvider>(IServiceCollection) Adds an autocomplete provider to the service collection. Declaration public static IServiceCollection AddAutocompleteProvider<TProvider>(this IServiceCollection serviceCollection) where TProvider : class, IAutocompleteProvider Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The collection, with the provider. Type Parameters Name Description TProvider The autocomplete provider. | Improve this Doc View Source AddCommandResponder(IServiceCollection) Adds the command responder to the system. Declaration public static IServiceCollection AddCommandResponder(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The collection, with the command responder. | Improve this Doc View Source AddDiscordCommands(IServiceCollection, Boolean, Boolean, Boolean) Adds all services required for Discord-integrated commands. Declaration public static IServiceCollection AddDiscordCommands(this IServiceCollection serviceCollection, bool enableSlash = false, bool useDefaultCommandResponder = true, bool useDefaultInteractionResponder = true) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Boolean enableSlash Whether to enable slash commands. Boolean useDefaultCommandResponder Whether to add a default command responder. Boolean useDefaultInteractionResponder Whether to add a default interaction responder. Returns Type Description IServiceCollection The service collection, with slash commands. | Improve this Doc View Source AddExecutionEvent<TEvent>(IServiceCollection) Adds a pre- and post-execution event to the service collection. Declaration public static IServiceCollection AddExecutionEvent<TEvent>(this IServiceCollection serviceCollection) where TEvent : class, IPreExecutionEvent, IPostExecutionEvent Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The collection, with the event. Type Parameters Name Description TEvent The event type. | Improve this Doc View Source AddInteractionResponder(IServiceCollection, Action<InteractionResponderOptions>) Adds the interaction responder to the system. Declaration public static IServiceCollection AddInteractionResponder(this IServiceCollection serviceCollection, Action<InteractionResponderOptions> optionsConfigurator = null) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Action < InteractionResponderOptions > optionsConfigurator The option configurator. Returns Type Description IServiceCollection The collection, with the interaction responder. | Improve this Doc View Source AddNGetTextLocalizations(IServiceCollection, String, Assembly) Adds NGetText localization information from the given assembly to the service provider. Declaration public static IServiceCollection AddNGetTextLocalizations(this IServiceCollection serviceCollection, string localizationDirectory = \".remora.locales.\", Assembly localizationAssembly = null) Parameters Type Name Description IServiceCollection serviceCollection The service collection. String localizationDirectory The resource directory where localizations are stored. Assembly localizationAssembly The assembly to load localizations from. Returns Type Description IServiceCollection The service collection, with localizations added. | Improve this Doc View Source AddPostExecutionEvent<TEvent>(IServiceCollection) Adds a post-execution event to the service collection. Declaration public static IServiceCollection AddPostExecutionEvent<TEvent>(this IServiceCollection serviceCollection) where TEvent : class, IPostExecutionEvent Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The collection, with the event. Type Parameters Name Description TEvent The event type. | Improve this Doc View Source AddPreExecutionEvent<TEvent>(IServiceCollection) Adds a pre-execution event to the service collection. Declaration public static IServiceCollection AddPreExecutionEvent<TEvent>(this IServiceCollection serviceCollection) where TEvent : class, IPreExecutionEvent Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The collection, with the event. Type Parameters Name Description TEvent The event type."
  },
  "api/Remora.Discord.Commands.Extensions.StringExtensions.html": {
    "href": "api/Remora.Discord.Commands.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Remora.Discord",
    "keywords": "Class StringExtensions Defines extension methods to the String type. Inheritance Object StringExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Extensions Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public static class StringExtensions Methods | Improve this Doc View Source Unmention(String) Removes Discord mention markdown from a string. Declaration public static string Unmention(this string value) Parameters Type Name Description String value The value. Returns Type Description String The unmentioned string."
  },
  "api/Remora.Discord.Commands.Feedback.Messages.FeedbackMessage.html": {
    "href": "api/Remora.Discord.Commands.Feedback.Messages.FeedbackMessage.html",
    "title": "Class FeedbackMessage | Remora.Discord",
    "keywords": "Class FeedbackMessage Encapsulates a feedback message sent to a user. Inheritance Object FeedbackMessage Implements IEquatable < FeedbackMessage > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Feedback.Messages Assembly : Remora.Discord.Commands.dll Syntax public class FeedbackMessage : IEquatable<FeedbackMessage> Constructors | Improve this Doc View Source FeedbackMessage(String, Color) Encapsulates a feedback message sent to a user. Declaration public FeedbackMessage(string Message, Color Colour) Parameters Type Name Description String Message Color Colour Properties | Improve this Doc View Source Colour Declaration public Color Colour { get; set; } Property Value Type Description Color | Improve this Doc View Source Message Declaration public string Message { get; set; } Property Value Type Description String Implements System.IEquatable<T>"
  },
  "api/Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html": {
    "href": "api/Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html",
    "title": "Class FeedbackMessageOptions | Remora.Discord",
    "keywords": "Class FeedbackMessageOptions Defines options to customise a feedback message response. Inheritance Object FeedbackMessageOptions Implements IEquatable < FeedbackMessageOptions > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Feedback.Messages Assembly : Remora.Discord.Commands.dll Syntax public class FeedbackMessageOptions : IEquatable<FeedbackMessageOptions> Constructors | Improve this Doc View Source FeedbackMessageOptions(Optional<Boolean>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<MessageFlags>) Defines options to customise a feedback message response. Declaration public FeedbackMessageOptions(Optional<bool> IsTTS = default(Optional<bool>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> Attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<IAllowedMentions> AllowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> MessageComponents = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<MessageFlags> MessageFlags = default(Optional<MessageFlags>)) Parameters Type Name Description Remora.Rest.Core.Optional < Boolean > IsTTS Indicates whether the message should use text-to-speech. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> Attachments The attachments to send with the message. Remora.Rest.Core.Optional < IAllowedMentions > AllowedMentions The allowed mentions for the message. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> MessageComponents A list of message components to include with the message. Remora.Rest.Core.Optional < MessageFlags > MessageFlags The flags to set on the message. Properties | Improve this Doc View Source AllowedMentions Declaration public Optional<IAllowedMentions> AllowedMentions { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IAllowedMentions > | Improve this Doc View Source Attachments Declaration public Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> Attachments { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> | Improve this Doc View Source IsTTS Declaration public Optional<bool> IsTTS { get; set; } Property Value Type Description Remora.Rest.Core.Optional < Boolean > | Improve this Doc View Source MessageComponents Declaration public Optional<IReadOnlyList<IMessageComponent>> MessageComponents { get; set; } Property Value Type Description Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> | Improve this Doc View Source MessageFlags Declaration public Optional<MessageFlags> MessageFlags { get; set; } Property Value Type Description Remora.Rest.Core.Optional < MessageFlags > Implements System.IEquatable<T>"
  },
  "api/Remora.Discord.Commands.Feedback.Messages.html": {
    "href": "api/Remora.Discord.Commands.Feedback.Messages.html",
    "title": "Namespace Remora.Discord.Commands.Feedback.Messages | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Feedback.Messages Classes FeedbackMessage Encapsulates a feedback message sent to a user. FeedbackMessageOptions Defines options to customise a feedback message response."
  },
  "api/Remora.Discord.Commands.Feedback.Services.FeedbackService.html": {
    "href": "api/Remora.Discord.Commands.Feedback.Services.FeedbackService.html",
    "title": "Class FeedbackService | Remora.Discord",
    "keywords": "Class FeedbackService Handles sending formatted messages to the users. Inheritance Object FeedbackService Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Feedback.Services Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class FeedbackService Constructors | Improve this Doc View Source FeedbackService(IDiscordRestChannelAPI, IDiscordRestUserAPI, ContextInjectionService, IDiscordRestInteractionAPI, IFeedbackTheme) Initializes a new instance of the FeedbackService class. Declaration public FeedbackService(IDiscordRestChannelAPI channelAPI, IDiscordRestUserAPI userAPI, ContextInjectionService contextInjection, IDiscordRestInteractionAPI interactionAPI, IFeedbackTheme feedbackTheme) Parameters Type Name Description IDiscordRestChannelAPI channelAPI The channel API. IDiscordRestUserAPI userAPI The user API. ContextInjectionService contextInjection The context injection service. IDiscordRestInteractionAPI interactionAPI The webhook API. IFeedbackTheme feedbackTheme The feedback theme to use. Properties | Improve this Doc View Source HasEditedOriginalMessage Gets a value indicating whether the service, in the context of an interaction, has edited the original message. Declaration public bool HasEditedOriginalMessage { get; } Property Value Type Description Boolean Remarks This method always returns false in a message context. | Improve this Doc View Source Theme Gets the theme used by the feedback service. Declaration public IFeedbackTheme Theme { get; } Property Value Type Description IFeedbackTheme Methods | Improve this Doc View Source SendAsync(Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions, CancellationToken) Sends an unformatted message. Declaration public Task<Result<IMessage>> SendAsync(Snowflake channel, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the message to. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The embeds of the message. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> The created message. | Improve this Doc View Source SendContentAsync(Snowflake, String, Color, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Sends the given string as one or more sequential embeds, chunked into sets of 1024 characters. Declaration public async Task<Result<IReadOnlyList<IMessage>>> SendContentAsync(Snowflake channel, string contents, Color color, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the embed to. String contents The contents to send. Color color The embed colour. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendContextualAsync(Optional<String>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions, CancellationToken) Sends an unformatted message to the current context. Declaration public async Task<Result<IMessage>> SendContextualAsync(Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The embeds of the message. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> The created message. | Improve this Doc View Source SendContextualContentAsync(String, Color, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Sends the given string as one or more sequential embeds, chunked into sets of 1024 characters. Declaration public async Task<Result<IReadOnlyList<IMessage>>> SendContextualContentAsync(string contents, Color color, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String contents The contents to send. Color color The embed colour. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendContextualEmbedAsync(Embed, FeedbackMessageOptions, CancellationToken) Sends the given embed to current context. Declaration public Task<Result<IMessage>> SendContextualEmbedAsync(Embed embed, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Embed embed The embed. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A Task representing the asynchronous operation. | Improve this Doc View Source SendContextualErrorAsync(String, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send a negative error message wherever is most appropriate to the current context. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendContextualErrorAsync(string contents, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String contents The contents of the message. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. Remarks This method will either create a followup message (if the context is an interaction) or a normal channel message. | Improve this Doc View Source SendContextualInfoAsync(String, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send an informational message wherever is most appropriate to the current context. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendContextualInfoAsync(string contents, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String contents The contents of the message. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. Remarks This method will either create a followup message (if the context is an interaction) or a normal channel message. | Improve this Doc View Source SendContextualMessageAsync(FeedbackMessage, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send a contextual message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendContextualMessageAsync(FeedbackMessage message, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description FeedbackMessage message The message to send. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendContextualNeutralAsync(String, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send a neutral message wherever is most appropriate to the current context. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendContextualNeutralAsync(string contents, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String contents The contents of the message. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. Remarks This method will either create a followup message (if the context is an interaction) or a normal channel message. | Improve this Doc View Source SendContextualSuccessAsync(String, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send a positive, successful message wherever is most appropriate to the current context. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendContextualSuccessAsync(string contents, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String contents The contents of the message. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. Remarks This method will either create a followup message (if the context is an interaction) or a normal channel message. | Improve this Doc View Source SendContextualWarningAsync(String, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send a warning message wherever is most appropriate to the current context. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendContextualWarningAsync(string contents, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String contents The contents of the message. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. Remarks This method will either create a followup message (if the context is an interaction) or a normal channel message. | Improve this Doc View Source SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken) Sends the given embed to the given channel. Declaration public Task<Result<IMessage>> SendEmbedAsync(Snowflake channel, Embed embed, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the embed to. Embed embed The embed. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A Task representing the asynchronous operation. | Improve this Doc View Source SendErrorAsync(Snowflake, String, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send a negative error message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendErrorAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the message to. String contents The contents of the message. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendInfoAsync(Snowflake, String, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send an informational message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendInfoAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the message to. String contents The contents of the message. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendMessageAsync(Snowflake, FeedbackMessage, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send a message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendMessageAsync(Snowflake channel, FeedbackMessage message, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the message to. FeedbackMessage message The message to send. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendNeutralAsync(Snowflake, String, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send a neutral message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendNeutralAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the message to. String contents The contents of the message. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendPrivateAsync(Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions, CancellationToken) Sends an unformatted message to the given user in their private DM channel. Declaration public async Task<Result<IMessage>> SendPrivateAsync(Snowflake user, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake user The user to send the message to. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The embeds of the message. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> The created message. | Improve this Doc View Source SendPrivateContentAsync(Snowflake, String, Color, FeedbackMessageOptions, CancellationToken) Sends the given string as one or more sequential embeds to the given user over DM, chunked into sets of 1024 characters. Declaration public async Task<Result<IReadOnlyList<IMessage>>> SendPrivateContentAsync(Snowflake user, string contents, Color color, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake user The ID of the user to send the content to. String contents The contents to send. Color color The embed colour. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken) Sends the given embed to the given user in their private DM channel. Declaration public Task<Result<IMessage>> SendPrivateEmbedAsync(Snowflake user, Embed embed, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake user The ID of the user to send the embed to. Embed embed The embed. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A Task representing the asynchronous operation. | Improve this Doc View Source SendPrivateErrorAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken) Send a negative error message to the given user as a direct message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendPrivateErrorAsync(Snowflake user, string contents, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake user The user to send the message to. String contents The contents of the message. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendPrivateInfoAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken) Send an informational message to the given user as a direct message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendPrivateInfoAsync(Snowflake user, string contents, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake user The user to send the message to. String contents The contents of the message. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions, CancellationToken) Send a private message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendPrivateMessageAsync(Snowflake user, FeedbackMessage message, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake user The user to send the message to. FeedbackMessage message The message to send. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendPrivateNeutralAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken) Send a neutral message to the given user as a direct message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendPrivateNeutralAsync(Snowflake user, string contents, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake user The user to send the message to. String contents The contents of the message. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendPrivateSuccessAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken) Send a positive, successful message to the given user as a direct message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendPrivateSuccessAsync(Snowflake user, string contents, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake user The user to send the message to. String contents The contents of the message. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendPrivateWarningAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken) Send a warning message to the given user as a direct message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendPrivateWarningAsync(Snowflake user, string contents, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake user The user to send the message to. String contents The contents of the message. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendSuccessAsync(Snowflake, String, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send a positive, successful message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendSuccessAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the message to. String contents The contents of the message. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. | Improve this Doc View Source SendWarningAsync(Snowflake, String, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Send a warning message. Declaration public Task<Result<IReadOnlyList<IMessage>>> SendWarningAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the message to. String contents The contents of the message. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation."
  },
  "api/Remora.Discord.Commands.Feedback.Services.html": {
    "href": "api/Remora.Discord.Commands.Feedback.Services.html",
    "title": "Namespace Remora.Discord.Commands.Feedback.Services | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Feedback.Services Classes FeedbackService Handles sending formatted messages to the users."
  },
  "api/Remora.Discord.Commands.Feedback.Themes.FeedbackTheme.html": {
    "href": "api/Remora.Discord.Commands.Feedback.Themes.FeedbackTheme.html",
    "title": "Class FeedbackTheme | Remora.Discord",
    "keywords": "Class FeedbackTheme Represents a custom feedback theme. Inheritance Object FeedbackTheme Implements IFeedbackTheme IEquatable < FeedbackTheme > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Feedback.Themes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class FeedbackTheme : IFeedbackTheme, IEquatable<FeedbackTheme> Constructors | Improve this Doc View Source FeedbackTheme(Color, Color, Color, Color, Color, Color, Color, Color, Color, Color, Color, Color, Color, Color) Represents a custom feedback theme. Declaration public FeedbackTheme(Color Background, Color Text, Color TextSecondary, Color TextSecondaryDisabled, Color Primary, Color PrimaryDisabled, Color Secondary, Color SecondaryDisabled, Color Success, Color SuccessDisabled, Color Warning, Color WarningDisabled, Color FaultOrDanger, Color FaultOrDangerDisabled) Parameters Type Name Description Color Background Color Text Color TextSecondary Color TextSecondaryDisabled Color Primary Color PrimaryDisabled Color Secondary Color SecondaryDisabled Color Success Color SuccessDisabled Color Warning Color WarningDisabled Color FaultOrDanger Color FaultOrDangerDisabled Properties | Improve this Doc View Source Background Declaration public Color Background { get; set; } Property Value Type Description Color | Improve this Doc View Source DiscordDark Gets an instance that contains colours appropriate for Discord's dark theme. Declaration public static IFeedbackTheme DiscordDark { get; } Property Value Type Description IFeedbackTheme | Improve this Doc View Source DiscordLight Gets an instance that contains colours appropriate for Discord's light theme. Declaration public static IFeedbackTheme DiscordLight { get; } Property Value Type Description IFeedbackTheme | Improve this Doc View Source FaultOrDanger Declaration public Color FaultOrDanger { get; set; } Property Value Type Description Color | Improve this Doc View Source FaultOrDangerDisabled Declaration public Color FaultOrDangerDisabled { get; set; } Property Value Type Description Color | Improve this Doc View Source Primary Declaration public Color Primary { get; set; } Property Value Type Description Color | Improve this Doc View Source PrimaryDisabled Declaration public Color PrimaryDisabled { get; set; } Property Value Type Description Color | Improve this Doc View Source Secondary Declaration public Color Secondary { get; set; } Property Value Type Description Color | Improve this Doc View Source SecondaryDisabled Declaration public Color SecondaryDisabled { get; set; } Property Value Type Description Color | Improve this Doc View Source Success Declaration public Color Success { get; set; } Property Value Type Description Color | Improve this Doc View Source SuccessDisabled Declaration public Color SuccessDisabled { get; set; } Property Value Type Description Color | Improve this Doc View Source Text Declaration public Color Text { get; set; } Property Value Type Description Color | Improve this Doc View Source TextSecondary Declaration public Color TextSecondary { get; set; } Property Value Type Description Color | Improve this Doc View Source TextSecondaryDisabled Declaration public Color TextSecondaryDisabled { get; set; } Property Value Type Description Color | Improve this Doc View Source Warning Declaration public Color Warning { get; set; } Property Value Type Description Color | Improve this Doc View Source WarningDisabled Declaration public Color WarningDisabled { get; set; } Property Value Type Description Color Implements IFeedbackTheme System.IEquatable<T>"
  },
  "api/Remora.Discord.Commands.Feedback.Themes.html": {
    "href": "api/Remora.Discord.Commands.Feedback.Themes.html",
    "title": "Namespace Remora.Discord.Commands.Feedback.Themes | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Feedback.Themes Classes FeedbackTheme Represents a custom feedback theme. Interfaces IFeedbackTheme Represents the public API of a colour theme for feedback messages."
  },
  "api/Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme.html": {
    "href": "api/Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme.html",
    "title": "Interface IFeedbackTheme | Remora.Discord",
    "keywords": "Interface IFeedbackTheme Represents the public API of a colour theme for feedback messages. Namespace : Remora.Discord.Commands.Feedback.Themes Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public interface IFeedbackTheme Properties | Improve this Doc View Source Background Gets a colour used as a background for things interposed with each other; image backgrounds, text background, etc. Declaration Color Background { get; } Property Value Type Description Color | Improve this Doc View Source FaultOrDanger Gets a colour used to indicate a fault or a dangerous action; a failed request, interacting with the element will be destructive, etc. Declaration Color FaultOrDanger { get; } Property Value Type Description Color | Improve this Doc View Source FaultOrDangerDisabled Gets a variant of FaultOrDanger , which is used to indicate the associated element is currently non-interactive. Declaration Color FaultOrDangerDisabled { get; } Property Value Type Description Color | Improve this Doc View Source Primary Gets a colour used as a primary element colour; buttons, links, etc. Declaration Color Primary { get; } Property Value Type Description Color | Improve this Doc View Source PrimaryDisabled Gets a variant of Primary , which is used to indicate the associated element is currently non-interactive. Declaration Color PrimaryDisabled { get; } Property Value Type Description Color | Improve this Doc View Source Secondary Gets a colour used as a secondary element colour; less important buttons, bulk elements, etc. Declaration Color Secondary { get; } Property Value Type Description Color | Improve this Doc View Source SecondaryDisabled Gets a variant of Secondary , which is used to indicate the associated element is currently non-interactive. Declaration Color SecondaryDisabled { get; } Property Value Type Description Color | Improve this Doc View Source Success Gets a colour used to indicate success; positive actions, completed requests, etc. Declaration Color Success { get; } Property Value Type Description Color | Improve this Doc View Source SuccessDisabled Gets a variant of Success , which is used to indicate the associated element is currently non-interactive. Declaration Color SuccessDisabled { get; } Property Value Type Description Color | Improve this Doc View Source Text Gets a colour used for primary text elements superimposed on the Background colour. Declaration Color Text { get; } Property Value Type Description Color | Improve this Doc View Source TextSecondary Gets a colour used for secondary text elements superimposed on an element, such as Primary or Secondary . Declaration Color TextSecondary { get; } Property Value Type Description Color | Improve this Doc View Source TextSecondaryDisabled Gets a variant of TextSecondary , which is used to indicate the associated element is currently non-interactive. Declaration Color TextSecondaryDisabled { get; } Property Value Type Description Color | Improve this Doc View Source Warning Gets a colour used to indicate a warning; actions that partially succeeded, something a user has to take note of, etc. Declaration Color Warning { get; } Property Value Type Description Color | Improve this Doc View Source WarningDisabled Gets a variant of Warning , which is used to indicate the associated element is currently non-interactive. Declaration Color WarningDisabled { get; } Property Value Type Description Color"
  },
  "api/Remora.Discord.Commands.Parsers.AttachmentParser.html": {
    "href": "api/Remora.Discord.Commands.Parsers.AttachmentParser.html",
    "title": "Class AttachmentParser | Remora.Discord",
    "keywords": "Class AttachmentParser Parses instances of IAttachment from an interaction. Inheritance Object Remora.Commands.Parsers.AbstractTypeParser < IAttachment > AttachmentParser Implements Remora.Commands.Parsers.ITypeParser < IAttachment > Remora.Commands.Parsers.ITypeParser Inherited Members Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IAttachment>.Remora.Commands.Parsers.ITypeParser.CanParse(System.Type) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IAttachment>.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IAttachment>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.String, System.Type, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IAttachment>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Type, System.Threading.CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Parsers Assembly : Remora.Discord.Commands.dll Syntax public class AttachmentParser : AbstractTypeParser<IAttachment>, ITypeParser<IAttachment>, ITypeParser Constructors | Improve this Doc View Source AttachmentParser(ICommandContext) Initializes a new instance of the AttachmentParser class. Declaration public AttachmentParser(ICommandContext context) Parameters Type Name Description ICommandContext context The command context. Methods | Improve this Doc View Source TryParseAsync(String, CancellationToken) Declaration public override ValueTask<Result<IAttachment>> TryParseAsync(string token, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String token CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result < IAttachment >> Overrides Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IAttachment>.TryParseAsync(System.String, System.Threading.CancellationToken) Implements Remora.Commands.Parsers.ITypeParser<TType> Remora.Commands.Parsers.ITypeParser"
  },
  "api/Remora.Discord.Commands.Parsers.ChannelParser.html": {
    "href": "api/Remora.Discord.Commands.Parsers.ChannelParser.html",
    "title": "Class ChannelParser | Remora.Discord",
    "keywords": "Class ChannelParser Parses instances of IChannel from command-line inputs. Inheritance Object Remora.Commands.Parsers.AbstractTypeParser < IChannel > ChannelParser Implements Remora.Commands.Parsers.ITypeParser < IChannel > Remora.Commands.Parsers.ITypeParser Inherited Members Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IChannel>.Remora.Commands.Parsers.ITypeParser.CanParse(System.Type) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IChannel>.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IChannel>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.String, System.Type, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IChannel>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Type, System.Threading.CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Parsers Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class ChannelParser : AbstractTypeParser<IChannel>, ITypeParser<IChannel>, ITypeParser Constructors | Improve this Doc View Source ChannelParser(IDiscordRestChannelAPI) Initializes a new instance of the ChannelParser class. Declaration public ChannelParser(IDiscordRestChannelAPI channelAPI) Parameters Type Name Description IDiscordRestChannelAPI channelAPI The channel API. Methods | Improve this Doc View Source TryParseAsync(String, CancellationToken) Declaration public override async ValueTask<Result<IChannel>> TryParseAsync(string value, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String value CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result < IChannel >> Overrides Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IChannel>.TryParseAsync(System.String, System.Threading.CancellationToken) Implements Remora.Commands.Parsers.ITypeParser<TType> Remora.Commands.Parsers.ITypeParser"
  },
  "api/Remora.Discord.Commands.Parsers.EmojiParser.html": {
    "href": "api/Remora.Discord.Commands.Parsers.EmojiParser.html",
    "title": "Class EmojiParser | Remora.Discord",
    "keywords": "Class EmojiParser Parses IEmoji s. Inheritance Object Remora.Commands.Parsers.AbstractTypeParser < IEmoji > EmojiParser Implements Remora.Commands.Parsers.ITypeParser < IEmoji > Remora.Commands.Parsers.ITypeParser Inherited Members Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IEmoji>.Remora.Commands.Parsers.ITypeParser.CanParse(System.Type) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IEmoji>.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IEmoji>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.String, System.Type, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IEmoji>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Type, System.Threading.CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Parsers Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class EmojiParser : AbstractTypeParser<IEmoji>, ITypeParser<IEmoji>, ITypeParser Constructors | Improve this Doc View Source EmojiParser(IDiscordRestGuildAPI, ICommandContext) Initializes a new instance of the EmojiParser class. Declaration public EmojiParser(IDiscordRestGuildAPI guildAPI, ICommandContext context) Parameters Type Name Description IDiscordRestGuildAPI guildAPI The Discord guild API. ICommandContext context The command context. Methods | Improve this Doc View Source TryParseAsync(String, CancellationToken) Declaration public override async ValueTask<Result<IEmoji>> TryParseAsync(string value, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String value CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result < IEmoji >> Overrides Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IEmoji>.TryParseAsync(System.String, System.Threading.CancellationToken) Implements Remora.Commands.Parsers.ITypeParser<TType> Remora.Commands.Parsers.ITypeParser"
  },
  "api/Remora.Discord.Commands.Parsers.GuildMemberParser.html": {
    "href": "api/Remora.Discord.Commands.Parsers.GuildMemberParser.html",
    "title": "Class GuildMemberParser | Remora.Discord",
    "keywords": "Class GuildMemberParser Parses instances of IGuildMember from command-line inputs. Inheritance Object Remora.Commands.Parsers.AbstractTypeParser < IGuildMember > GuildMemberParser Implements Remora.Commands.Parsers.ITypeParser < IGuildMember > Remora.Commands.Parsers.ITypeParser Inherited Members Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IGuildMember>.Remora.Commands.Parsers.ITypeParser.CanParse(System.Type) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IGuildMember>.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IGuildMember>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.String, System.Type, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IGuildMember>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Type, System.Threading.CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Parsers Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class GuildMemberParser : AbstractTypeParser<IGuildMember>, ITypeParser<IGuildMember>, ITypeParser Constructors | Improve this Doc View Source GuildMemberParser(ICommandContext, IDiscordRestGuildAPI) Initializes a new instance of the GuildMemberParser class. Declaration public GuildMemberParser(ICommandContext context, IDiscordRestGuildAPI guildAPI) Parameters Type Name Description ICommandContext context The command context. IDiscordRestGuildAPI guildAPI The guild API. Methods | Improve this Doc View Source TryParseAsync(String, CancellationToken) Declaration public override async ValueTask<Result<IGuildMember>> TryParseAsync(string value, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String value CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result < IGuildMember >> Overrides Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IGuildMember>.TryParseAsync(System.String, System.Threading.CancellationToken) Implements Remora.Commands.Parsers.ITypeParser<TType> Remora.Commands.Parsers.ITypeParser"
  },
  "api/Remora.Discord.Commands.Parsers.html": {
    "href": "api/Remora.Discord.Commands.Parsers.html",
    "title": "Namespace Remora.Discord.Commands.Parsers | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Parsers Classes AttachmentParser Parses instances of IAttachment from an interaction. ChannelParser Parses instances of IChannel from command-line inputs. EmojiParser Parses IEmoji s. GuildMemberParser Parses instances of IGuildMember from command-line inputs. OneOfParser Parses various instances of the OneOf.OneOf`1 type. RoleParser Parses instances of IRole from command-line inputs. SnowflakeParser Parses instances of Remora.Rest.Core.Snowflake s. UserParser Parses instances of IUser from command-line inputs."
  },
  "api/Remora.Discord.Commands.Parsers.OneOfParser.html": {
    "href": "api/Remora.Discord.Commands.Parsers.OneOfParser.html",
    "title": "Class OneOfParser | Remora.Discord",
    "keywords": "Class OneOfParser Parses various instances of the OneOf.OneOf`1 type. Inheritance Object Remora.Commands.Parsers.AbstractTypeParser OneOfParser Implements Remora.Commands.Parsers.ITypeParser Inherited Members Remora.Commands.Parsers.AbstractTypeParser.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Type, System.Threading.CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Parsers Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class OneOfParser : AbstractTypeParser, ITypeParser Constructors | Improve this Doc View Source OneOfParser(TypeParserService, IServiceProvider) Initializes a new instance of the OneOfParser class. Declaration public OneOfParser(TypeParserService typeParserService, IServiceProvider services) Parameters Type Name Description Remora.Commands.Services.TypeParserService typeParserService The type parser service. IServiceProvider services The available services. Methods | Improve this Doc View Source CanParse(Type) Declaration public override bool CanParse(Type type) Parameters Type Name Description Type type Returns Type Description Boolean Overrides Remora.Commands.Parsers.AbstractTypeParser.CanParse(System.Type) | Improve this Doc View Source TryParseAsync(String, Type, CancellationToken) Declaration public override async ValueTask<Result<object>> TryParseAsync(string token, Type type, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String token Type type CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result < Object >> Overrides Remora.Commands.Parsers.AbstractTypeParser.TryParseAsync(System.String, System.Type, System.Threading.CancellationToken) Implements Remora.Commands.Parsers.ITypeParser"
  },
  "api/Remora.Discord.Commands.Parsers.RoleParser.html": {
    "href": "api/Remora.Discord.Commands.Parsers.RoleParser.html",
    "title": "Class RoleParser | Remora.Discord",
    "keywords": "Class RoleParser Parses instances of IRole from command-line inputs. Inheritance Object Remora.Commands.Parsers.AbstractTypeParser < IRole > RoleParser Implements Remora.Commands.Parsers.ITypeParser < IRole > Remora.Commands.Parsers.ITypeParser Inherited Members Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IRole>.Remora.Commands.Parsers.ITypeParser.CanParse(System.Type) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IRole>.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IRole>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.String, System.Type, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IRole>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Type, System.Threading.CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Parsers Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class RoleParser : AbstractTypeParser<IRole>, ITypeParser<IRole>, ITypeParser Constructors | Improve this Doc View Source RoleParser(ICommandContext, IDiscordRestGuildAPI) Initializes a new instance of the RoleParser class. Declaration public RoleParser(ICommandContext context, IDiscordRestGuildAPI guildAPI) Parameters Type Name Description ICommandContext context The command context. IDiscordRestGuildAPI guildAPI The guild API. Methods | Improve this Doc View Source TryParseAsync(String, CancellationToken) Declaration public override async ValueTask<Result<IRole>> TryParseAsync(string value, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String value CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result < IRole >> Overrides Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IRole>.TryParseAsync(System.String, System.Threading.CancellationToken) Implements Remora.Commands.Parsers.ITypeParser<TType> Remora.Commands.Parsers.ITypeParser"
  },
  "api/Remora.Discord.Commands.Parsers.SnowflakeParser.html": {
    "href": "api/Remora.Discord.Commands.Parsers.SnowflakeParser.html",
    "title": "Class SnowflakeParser | Remora.Discord",
    "keywords": "Class SnowflakeParser Parses instances of Remora.Rest.Core.Snowflake s. Inheritance Object Remora.Commands.Parsers.AbstractTypeParser < Remora.Rest.Core.Snowflake > SnowflakeParser Implements Remora.Commands.Parsers.ITypeParser < Remora.Rest.Core.Snowflake > Remora.Commands.Parsers.ITypeParser Inherited Members Remora.Commands.Parsers.AbstractTypeParser<Remora.Rest.Core.Snowflake>.Remora.Commands.Parsers.ITypeParser.CanParse(System.Type) Remora.Commands.Parsers.AbstractTypeParser<Remora.Rest.Core.Snowflake>.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Rest.Core.Snowflake>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.String, System.Type, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Rest.Core.Snowflake>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Type, System.Threading.CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Parsers Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class SnowflakeParser : AbstractTypeParser<Snowflake>, ITypeParser<Snowflake>, ITypeParser Methods | Improve this Doc View Source TryParseAsync(String, CancellationToken) Declaration public override ValueTask<Result<Snowflake>> TryParseAsync(string value, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String value CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result < Remora.Rest.Core.Snowflake >> Overrides Remora.Commands.Parsers.AbstractTypeParser<Remora.Rest.Core.Snowflake>.TryParseAsync(System.String, System.Threading.CancellationToken) Implements Remora.Commands.Parsers.ITypeParser<TType> Remora.Commands.Parsers.ITypeParser"
  },
  "api/Remora.Discord.Commands.Parsers.UserParser.html": {
    "href": "api/Remora.Discord.Commands.Parsers.UserParser.html",
    "title": "Class UserParser | Remora.Discord",
    "keywords": "Class UserParser Parses instances of IUser from command-line inputs. Inheritance Object Remora.Commands.Parsers.AbstractTypeParser < IUser > UserParser Implements Remora.Commands.Parsers.ITypeParser < IUser > Remora.Commands.Parsers.ITypeParser Inherited Members Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IUser>.Remora.Commands.Parsers.ITypeParser.CanParse(System.Type) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IUser>.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IUser>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.String, System.Type, System.Threading.CancellationToken) Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IUser>.Remora.Commands.Parsers.ITypeParser.TryParseAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.Type, System.Threading.CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Parsers Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class UserParser : AbstractTypeParser<IUser>, ITypeParser<IUser>, ITypeParser Constructors | Improve this Doc View Source UserParser(IDiscordRestUserAPI) Initializes a new instance of the UserParser class. Declaration public UserParser(IDiscordRestUserAPI userAPI) Parameters Type Name Description IDiscordRestUserAPI userAPI The user API. Methods | Improve this Doc View Source TryParseAsync(String, CancellationToken) Declaration public override async ValueTask<Result<IUser>> TryParseAsync(string value, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String value CancellationToken ct Returns Type Description ValueTask < Remora.Results.Result < IUser >> Overrides Remora.Commands.Parsers.AbstractTypeParser<Remora.Discord.API.Abstractions.Objects.IUser>.TryParseAsync(System.String, System.Threading.CancellationToken) Implements Remora.Commands.Parsers.ITypeParser<TType> Remora.Commands.Parsers.ITypeParser"
  },
  "api/Remora.Discord.Commands.Responders.AutocompleteResponder.html": {
    "href": "api/Remora.Discord.Commands.Responders.AutocompleteResponder.html",
    "title": "Class AutocompleteResponder | Remora.Discord",
    "keywords": "Class AutocompleteResponder Responds to autocompletion interactions, routing the request to the appropriate provider. Inheritance Object AutocompleteResponder Implements IResponder < IInteractionCreate > IResponder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Responders Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class AutocompleteResponder : IResponder<IInteractionCreate>, IResponder Constructors | Improve this Doc View Source AutocompleteResponder(SlashService, IServiceProvider, IDiscordRestInteractionAPI, ILogger<AutocompleteResponder>) Initializes a new instance of the AutocompleteResponder class. Declaration public AutocompleteResponder(SlashService slashService, IServiceProvider services, IDiscordRestInteractionAPI interactionAPI, ILogger<AutocompleteResponder> log) Parameters Type Name Description SlashService slashService The slash command service. IServiceProvider services The available services. IDiscordRestInteractionAPI interactionAPI The interaction API. ILogger < AutocompleteResponder > log The logging instance. Methods | Improve this Doc View Source RespondAsync(IInteractionCreate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public async Task<Result> RespondAsync(IInteractionCreate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IInteractionCreate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. Implements IResponder<TGatewayEvent> IResponder"
  },
  "api/Remora.Discord.Commands.Responders.CommandResponder.html": {
    "href": "api/Remora.Discord.Commands.Responders.CommandResponder.html",
    "title": "Class CommandResponder | Remora.Discord",
    "keywords": "Class CommandResponder Responds to commands. Inheritance Object CommandResponder Implements IResponder < IMessageCreate > IResponder < IMessageUpdate > IResponder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Responders Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class CommandResponder : IResponder<IMessageCreate>, IResponder<IMessageUpdate>, IResponder Constructors | Improve this Doc View Source CommandResponder(CommandService, IOptions<CommandResponderOptions>, ExecutionEventCollectorService, IServiceProvider, ContextInjectionService, IOptions<TokenizerOptions>, IOptions<TreeSearchOptions>, ITreeNameResolver) Initializes a new instance of the CommandResponder class. Declaration public CommandResponder(CommandService commandService, IOptions<CommandResponderOptions> options, ExecutionEventCollectorService eventCollector, IServiceProvider services, ContextInjectionService contextInjection, IOptions<TokenizerOptions> tokenizerOptions, IOptions<TreeSearchOptions> treeSearchOptions, ITreeNameResolver treeNameResolver = null) Parameters Type Name Description Remora.Commands.Services.CommandService commandService The command service. IOptions < CommandResponderOptions > options The command responder options. ExecutionEventCollectorService eventCollector The event collector. IServiceProvider services The available services. ContextInjectionService contextInjection The injection service. IOptions < Remora.Commands.Tokenization.TokenizerOptions > tokenizerOptions The tokenizer options. IOptions < Remora.Commands.Trees.TreeSearchOptions > treeSearchOptions The tree search options. ITreeNameResolver treeNameResolver The tree name resolver, if one is available. Methods | Improve this Doc View Source ExecuteCommandAsync(String, ICommandContext, CancellationToken) Executes the actual command. Declaration protected virtual async Task<Result> ExecuteCommandAsync(string content, ICommandContext commandContext, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String content The contents of the message. ICommandContext commandContext The command context. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IMessageCreate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public virtual async Task<Result> RespondAsync(IMessageCreate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IMessageCreate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. | Improve this Doc View Source RespondAsync(IMessageUpdate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public virtual async Task<Result> RespondAsync(IMessageUpdate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IMessageUpdate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. Implements IResponder<TGatewayEvent> IResponder<TGatewayEvent> IResponder"
  },
  "api/Remora.Discord.Commands.Responders.CommandResponderOptions.html": {
    "href": "api/Remora.Discord.Commands.Responders.CommandResponderOptions.html",
    "title": "Class CommandResponderOptions | Remora.Discord",
    "keywords": "Class CommandResponderOptions Represents a set of options relevant to a command responder. Inheritance Object CommandResponderOptions Implements ICommandResponderOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Responders Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class CommandResponderOptions : ICommandResponderOptions Properties | Improve this Doc View Source Prefix Gets the prefix that commands must start with. Declaration public string Prefix { get; set; } Property Value Type Description String Implements ICommandResponderOptions"
  },
  "api/Remora.Discord.Commands.Responders.html": {
    "href": "api/Remora.Discord.Commands.Responders.html",
    "title": "Namespace Remora.Discord.Commands.Responders | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Responders Classes AutocompleteResponder Responds to autocompletion interactions, routing the request to the appropriate provider. CommandResponder Responds to commands. CommandResponderOptions Represents a set of options relevant to a command responder. InteractionResponder Responds to interactions. InteractionResponderOptions Represents a set of options, controlling the behavior of a InteractionResponder instance. Interfaces ICommandResponderOptions Represents a read-only view of command responder options. IInteractionResponderOptions Represents a read-only view of a InteractionResponderOptions object."
  },
  "api/Remora.Discord.Commands.Responders.ICommandResponderOptions.html": {
    "href": "api/Remora.Discord.Commands.Responders.ICommandResponderOptions.html",
    "title": "Interface ICommandResponderOptions | Remora.Discord",
    "keywords": "Interface ICommandResponderOptions Represents a read-only view of command responder options. Namespace : Remora.Discord.Commands.Responders Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public interface ICommandResponderOptions Properties | Improve this Doc View Source Prefix Gets the prefix that commands must start with. Declaration string Prefix { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.Commands.Responders.IInteractionResponderOptions.html": {
    "href": "api/Remora.Discord.Commands.Responders.IInteractionResponderOptions.html",
    "title": "Interface IInteractionResponderOptions | Remora.Discord",
    "keywords": "Interface IInteractionResponderOptions Represents a read-only view of a InteractionResponderOptions object. Namespace : Remora.Discord.Commands.Responders Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public interface IInteractionResponderOptions Properties | Improve this Doc View Source SuppressAutomaticResponses Gets a value indicating whether InteractionResponder should automatically issue a DeferredChannelMessageWithSource response to interactions, before attempting to identify and invoke the command, or whether all interaction responses should be handled by the consumer. Declaration bool SuppressAutomaticResponses { get; } Property Value Type Description Boolean | Improve this Doc View Source UseEphemeralResponses Gets a value indicating whether the InteractionResponder should automatically respond to interactions with the Ephemeral flag. Ephemeral responses can still be explicitly disabled for a given command/group through use of EphemeralAttribute . Declaration bool UseEphemeralResponses { get; } Property Value Type Description Boolean"
  },
  "api/Remora.Discord.Commands.Responders.InteractionResponder.html": {
    "href": "api/Remora.Discord.Commands.Responders.InteractionResponder.html",
    "title": "Class InteractionResponder | Remora.Discord",
    "keywords": "Class InteractionResponder Responds to interactions. Inheritance Object InteractionResponder Implements IResponder < IInteractionCreate > IResponder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Responders Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class InteractionResponder : IResponder<IInteractionCreate>, IResponder Constructors | Improve this Doc View Source InteractionResponder(CommandService, IOptions<InteractionResponderOptions>, IDiscordRestInteractionAPI, ExecutionEventCollectorService, IServiceProvider, ContextInjectionService, IOptions<TokenizerOptions>, IOptions<TreeSearchOptions>, ITreeNameResolver) Initializes a new instance of the InteractionResponder class. Declaration public InteractionResponder(CommandService commandService, IOptions<InteractionResponderOptions> options, IDiscordRestInteractionAPI interactionAPI, ExecutionEventCollectorService eventCollector, IServiceProvider services, ContextInjectionService contextInjection, IOptions<TokenizerOptions> tokenizerOptions, IOptions<TreeSearchOptions> treeSearchOptions, ITreeNameResolver treeNameResolver = null) Parameters Type Name Description Remora.Commands.Services.CommandService commandService The command service. IOptions < InteractionResponderOptions > options The options. IDiscordRestInteractionAPI interactionAPI The interaction API. ExecutionEventCollectorService eventCollector The event collector. IServiceProvider services The available services. ContextInjectionService contextInjection The context injection service. IOptions < Remora.Commands.Tokenization.TokenizerOptions > tokenizerOptions The tokenizer options. IOptions < Remora.Commands.Trees.TreeSearchOptions > treeSearchOptions The tree search options. ITreeNameResolver treeNameResolver The tree name resolver, if available. Methods | Improve this Doc View Source RespondAsync(IInteractionCreate, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration public virtual async Task<Result> RespondAsync(IInteractionCreate gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IInteractionCreate gatewayEvent CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded. Implements IResponder<TGatewayEvent> IResponder"
  },
  "api/Remora.Discord.Commands.Responders.InteractionResponderOptions.html": {
    "href": "api/Remora.Discord.Commands.Responders.InteractionResponderOptions.html",
    "title": "Class InteractionResponderOptions | Remora.Discord",
    "keywords": "Class InteractionResponderOptions Represents a set of options, controlling the behavior of a InteractionResponder instance. Inheritance Object InteractionResponderOptions Implements IInteractionResponderOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Responders Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class InteractionResponderOptions : IInteractionResponderOptions Properties | Improve this Doc View Source SuppressAutomaticResponses Gets a value indicating whether InteractionResponder should automatically issue a DeferredChannelMessageWithSource response to interactions, before attempting to identify and invoke the command, or whether all interaction responses should be handled by the consumer. Declaration public bool SuppressAutomaticResponses { get; set; } Property Value Type Description Boolean | Improve this Doc View Source UseEphemeralResponses Gets a value indicating whether the InteractionResponder should automatically respond to interactions with the Ephemeral flag. Ephemeral responses can still be explicitly disabled for a given command/group through use of EphemeralAttribute . Declaration public bool UseEphemeralResponses { get; set; } Property Value Type Description Boolean Implements IInteractionResponderOptions"
  },
  "api/Remora.Discord.Commands.Results.html": {
    "href": "api/Remora.Discord.Commands.Results.html",
    "title": "Namespace Remora.Discord.Commands.Results | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Results Classes PermissionDeniedError Represents a failure to fulfill a set of requirements related to permissions. UnsupportedFeatureError Represents a failure to create a slash command based on an unsupported feature. UnsupportedParameterFeatureError Represents a failure to create a slash command based on an unsupported feature, specifically related to a parameter."
  },
  "api/Remora.Discord.Commands.Results.PermissionDeniedError.html": {
    "href": "api/Remora.Discord.Commands.Results.PermissionDeniedError.html",
    "title": "Class PermissionDeniedError | Remora.Discord",
    "keywords": "Class PermissionDeniedError Represents a failure to fulfill a set of requirements related to permissions. Inheritance Object Remora.Results.ResultError PermissionDeniedError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < PermissionDeniedError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.Commands.Results Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class PermissionDeniedError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<PermissionDeniedError> Constructors | Improve this Doc View Source PermissionDeniedError(String, DiscordPermission[]) Represents a failure to fulfill a set of requirements related to permissions. Declaration public PermissionDeniedError(string Message = \"Permission denied.\", params DiscordPermission[] Permissions) Parameters Type Name Description String Message The custom error message, if any. DiscordPermission [] Permissions The permissions which were checked. Properties | Improve this Doc View Source Permissions Declaration public DiscordPermission[] Permissions { get; set; } Property Value Type Description DiscordPermission [] Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.Commands.Results.UnsupportedFeatureError.html": {
    "href": "api/Remora.Discord.Commands.Results.UnsupportedFeatureError.html",
    "title": "Class UnsupportedFeatureError | Remora.Discord",
    "keywords": "Class UnsupportedFeatureError Represents a failure to create a slash command based on an unsupported feature. Inheritance Object Remora.Results.ResultError UnsupportedFeatureError UnsupportedParameterFeatureError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < UnsupportedFeatureError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.Commands.Results Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class UnsupportedFeatureError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<UnsupportedFeatureError> Constructors | Improve this Doc View Source UnsupportedFeatureError(String, IChildNode) Represents a failure to create a slash command based on an unsupported feature. Declaration public UnsupportedFeatureError(string Message, IChildNode Node = null) Parameters Type Name Description String Message Remora.Commands.Trees.Nodes.IChildNode Node Properties | Improve this Doc View Source Node Declaration public IChildNode Node { get; set; } Property Value Type Description Remora.Commands.Trees.Nodes.IChildNode Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.Commands.Results.UnsupportedParameterFeatureError.html": {
    "href": "api/Remora.Discord.Commands.Results.UnsupportedParameterFeatureError.html",
    "title": "Class UnsupportedParameterFeatureError | Remora.Discord",
    "keywords": "Class UnsupportedParameterFeatureError Represents a failure to create a slash command based on an unsupported feature, specifically related to a parameter. Inheritance Object Remora.Results.ResultError UnsupportedFeatureError UnsupportedParameterFeatureError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < UnsupportedFeatureError > IEquatable < UnsupportedParameterFeatureError > Inherited Members UnsupportedFeatureError.Node Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.Commands.Results Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class UnsupportedParameterFeatureError : UnsupportedFeatureError, IResultError, IEquatable<ResultError>, IEquatable<UnsupportedFeatureError>, IEquatable<UnsupportedParameterFeatureError> Constructors | Improve this Doc View Source UnsupportedParameterFeatureError(String, CommandNode, IParameterShape) Represents a failure to create a slash command based on an unsupported feature, specifically related to a parameter. Declaration public UnsupportedParameterFeatureError(string Message, CommandNode Command, IParameterShape Parameter) Parameters Type Name Description String Message Remora.Commands.Trees.Nodes.CommandNode Command Remora.Commands.Signatures.IParameterShape Parameter Properties | Improve this Doc View Source Command Declaration public CommandNode Command { get; set; } Property Value Type Description Remora.Commands.Trees.Nodes.CommandNode | Improve this Doc View Source Parameter Declaration public IParameterShape Parameter { get; set; } Property Value Type Description Remora.Commands.Signatures.IParameterShape Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.Commands.Services.ContextInjectionService.html": {
    "href": "api/Remora.Discord.Commands.Services.ContextInjectionService.html",
    "title": "Class ContextInjectionService | Remora.Discord",
    "keywords": "Class ContextInjectionService Assists with injection of an ICommandContext into a service provider. Inheritance Object ContextInjectionService Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Services Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class ContextInjectionService Properties | Improve this Doc View Source Context Gets or sets the command context. Declaration public ICommandContext Context { get; set; } Property Value Type Description ICommandContext"
  },
  "api/Remora.Discord.Commands.Services.ExecutionEventCollectorService.html": {
    "href": "api/Remora.Discord.Commands.Services.ExecutionEventCollectorService.html",
    "title": "Class ExecutionEventCollectorService | Remora.Discord",
    "keywords": "Class ExecutionEventCollectorService Collects execution event services for simpler conjoined execution. Inheritance Object ExecutionEventCollectorService Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Services Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class ExecutionEventCollectorService Methods | Improve this Doc View Source RunPostExecutionEvents(IServiceProvider, ICommandContext, IResult, CancellationToken) Runs all collected post-execution events. Declaration public async Task<Result> RunPostExecutionEvents(IServiceProvider services, ICommandContext commandContext, IResult commandResult, CancellationToken ct) Parameters Type Name Description IServiceProvider services The service provider. ICommandContext commandContext The command context. Remora.Results.IResult commandResult The result of the executed command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A Task representing the asynchronous operation. | Improve this Doc View Source RunPreExecutionEvents(IServiceProvider, ICommandContext, CancellationToken) Runs all collected pre-execution events. Declaration public async Task<Result> RunPreExecutionEvents(IServiceProvider services, ICommandContext commandContext, CancellationToken ct) Parameters Type Name Description IServiceProvider services The service provider. ICommandContext commandContext The command context. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A Task representing the asynchronous operation."
  },
  "api/Remora.Discord.Commands.Services.html": {
    "href": "api/Remora.Discord.Commands.Services.html",
    "title": "Namespace Remora.Discord.Commands.Services | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Commands.Services Classes ContextInjectionService Assists with injection of an ICommandContext into a service provider. ExecutionEventCollectorService Collects execution event services for simpler conjoined execution. SimplePrefixMatcher Provides simple static prefix matching. SlashService Handles updating and verifying of slash commands. Interfaces ICommandPrefixMatcher Provides matching logic for text-based command prefixes. ILocalizationProvider Represents the public API of a service that can provide translated strings. IPostExecutionEvent Represents the public interface of a service that can perform a post-execution event. IPreExecutionEvent Represents the public interface of a service that can perform a pre-execution event. ITreeNameResolver Resolves appropriate tree names for command execution based on a command context."
  },
  "api/Remora.Discord.Commands.Services.ICommandPrefixMatcher.html": {
    "href": "api/Remora.Discord.Commands.Services.ICommandPrefixMatcher.html",
    "title": "Interface ICommandPrefixMatcher | Remora.Discord",
    "keywords": "Interface ICommandPrefixMatcher Provides matching logic for text-based command prefixes. Namespace : Remora.Discord.Commands.Services Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public interface ICommandPrefixMatcher Methods | Improve this Doc View Source MatchesPrefixAsync(String, CancellationToken) Determines whether the message contents begin or match some accepted command prefix. Declaration ValueTask<Result<(bool Matches, int ContentStartIndex)>> MatchesPrefixAsync(string content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String content The message contents to check. CancellationToken ct The cancellation token for this operation. Returns Type Description ValueTask < Remora.Results.Result < (T1, T2) < Boolean , Int32 >>> A tuple which indicates whether the contents match an accepted prefix, and if so, the index at which the actual command contents start."
  },
  "api/Remora.Discord.Commands.Services.ILocalizationProvider.html": {
    "href": "api/Remora.Discord.Commands.Services.ILocalizationProvider.html",
    "title": "Interface ILocalizationProvider | Remora.Discord",
    "keywords": "Interface ILocalizationProvider Represents the public API of a service that can provide translated strings. Namespace : Remora.Discord.Commands.Services Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public interface ILocalizationProvider Methods | Improve this Doc View Source GetTranslation(CultureInfo, String) Gets the translated string for the given culture. Declaration string GetTranslation(CultureInfo cultureInfo, string value) Parameters Type Name Description CultureInfo cultureInfo The culture to get the translation for. String value The string to translate. Returns Type Description String The translated string, or the input if no translation exists. | Improve this Doc View Source GetTranslationOrDefault(CultureInfo, String, String) Gets the translated string for the given culture. Declaration string GetTranslationOrDefault(CultureInfo cultureInfo, string value, string defaultValue = null) Parameters Type Name Description CultureInfo cultureInfo The culture to get the translation for. String value The string to translate. String defaultValue The default value to return. If no value is provided, the original input will be used. Returns Type Description String The translated string, or the default if no translation exists. | Improve this Doc View Source GetTranslations(String) Gets a mapping of all available localized values for the given input. Declaration IReadOnlyDictionary<CultureInfo, string> GetTranslations(string value) Parameters Type Name Description String value The input value. Returns Type Description IReadOnlyDictionary < CultureInfo , String > The available localized strings, mapped to their locales. | Improve this Doc View Source GetTranslationsOrDefault(String, String) Gets a mapping of all available localized values for the given input, or the default value if no translation exists. Declaration IReadOnlyDictionary<CultureInfo, string> GetTranslationsOrDefault(string value, string defaultValue = null) Parameters Type Name Description String value The input value. String defaultValue The default value to return. If no value is provided, the original input will be used. Returns Type Description IReadOnlyDictionary < CultureInfo , String > The available localized strings, mapped to their locales. Extension Methods LocalizationProviderExtensions.GetStrings(ILocalizationProvider, String)"
  },
  "api/Remora.Discord.Commands.Services.IPostExecutionEvent.html": {
    "href": "api/Remora.Discord.Commands.Services.IPostExecutionEvent.html",
    "title": "Interface IPostExecutionEvent | Remora.Discord",
    "keywords": "Interface IPostExecutionEvent Represents the public interface of a service that can perform a post-execution event. Namespace : Remora.Discord.Commands.Services Assembly : Remora.Discord.Commands.dll Syntax public interface IPostExecutionEvent Methods | Improve this Doc View Source AfterExecutionAsync(ICommandContext, IResult, CancellationToken) Runs after a command has been executed, successfully or otherwise. Declaration Task<Result> AfterExecutionAsync(ICommandContext context, IResult commandResult, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description ICommandContext context The command context. Remora.Results.IResult commandResult The result returned by the command. CancellationToken ct The cancellation token of the current operation. Returns Type Description Task < Remora.Results.Result > A Task representing the asynchronous operation."
  },
  "api/Remora.Discord.Commands.Services.IPreExecutionEvent.html": {
    "href": "api/Remora.Discord.Commands.Services.IPreExecutionEvent.html",
    "title": "Interface IPreExecutionEvent | Remora.Discord",
    "keywords": "Interface IPreExecutionEvent Represents the public interface of a service that can perform a pre-execution event. Namespace : Remora.Discord.Commands.Services Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public interface IPreExecutionEvent Methods | Improve this Doc View Source BeforeExecutionAsync(ICommandContext, CancellationToken) Runs before the attempted execution of a command. Declaration Task<Result> BeforeExecutionAsync(ICommandContext context, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description ICommandContext context The command context. CancellationToken ct The cancellation token of the current operation. Returns Type Description Task < Remora.Results.Result > A Task representing the asynchronous operation."
  },
  "api/Remora.Discord.Commands.Services.ITreeNameResolver.html": {
    "href": "api/Remora.Discord.Commands.Services.ITreeNameResolver.html",
    "title": "Interface ITreeNameResolver | Remora.Discord",
    "keywords": "Interface ITreeNameResolver Resolves appropriate tree names for command execution based on a command context. Namespace : Remora.Discord.Commands.Services Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public interface ITreeNameResolver Methods | Improve this Doc View Source GetTreeNameAsync(ICommandContext, CancellationToken) Gets the name of the tree to run commands from, given the provided context. Declaration Task<Result<(string TreeName, bool AllowDefaultTree)>> GetTreeNameAsync(ICommandContext context, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description ICommandContext context The command context. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < (T1, T2) < String , Boolean >>> The name of the tree to run commands from, and a boolean indicating whether the command executor may try the default tree if no command can be executed from the named tree. Whether this actually happens is up to the implementation."
  },
  "api/Remora.Discord.Commands.Services.SimplePrefixMatcher.html": {
    "href": "api/Remora.Discord.Commands.Services.SimplePrefixMatcher.html",
    "title": "Class SimplePrefixMatcher | Remora.Discord",
    "keywords": "Class SimplePrefixMatcher Provides simple static prefix matching. Inheritance Object SimplePrefixMatcher Implements ICommandPrefixMatcher Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Services Assembly : Remora.Discord.Commands.dll Syntax public class SimplePrefixMatcher : ICommandPrefixMatcher Constructors | Improve this Doc View Source SimplePrefixMatcher(IOptions<CommandResponderOptions>) Initializes a new instance of the SimplePrefixMatcher class. Declaration public SimplePrefixMatcher(IOptions<CommandResponderOptions> options) Parameters Type Name Description IOptions < CommandResponderOptions > options The responder options. Methods | Improve this Doc View Source MatchesPrefixAsync(String, CancellationToken) Determines whether the message contents begin or match some accepted command prefix. Declaration public ValueTask<Result<(bool Matches, int ContentStartIndex)>> MatchesPrefixAsync(string content, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String content The message contents to check. CancellationToken ct The cancellation token for this operation. Returns Type Description ValueTask < Remora.Results.Result < (T1, T2) < Boolean , Int32 >>> A tuple which indicates whether the contents match an accepted prefix, and if so, the index at which the actual command contents start. Implements ICommandPrefixMatcher"
  },
  "api/Remora.Discord.Commands.Services.SlashService.html": {
    "href": "api/Remora.Discord.Commands.Services.SlashService.html",
    "title": "Class SlashService | Remora.Discord",
    "keywords": "Class SlashService Handles updating and verifying of slash commands. Inheritance Object SlashService Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Commands.Services Assembly : Remora.Discord.Commands.dll Syntax [PublicAPI] public class SlashService Constructors | Improve this Doc View Source SlashService(CommandTreeAccessor, IDiscordRestOAuth2API, IDiscordRestApplicationAPI, ILocalizationProvider) Initializes a new instance of the SlashService class. Declaration public SlashService(CommandTreeAccessor commandTreeAccessor, IDiscordRestOAuth2API oauth2API, IDiscordRestApplicationAPI applicationAPI, ILocalizationProvider localizationProvider) Parameters Type Name Description Remora.Commands.Services.CommandTreeAccessor commandTreeAccessor The command tree accessor. IDiscordRestOAuth2API oauth2API The OAuth2 API. IDiscordRestApplicationAPI applicationAPI The application API. ILocalizationProvider localizationProvider The localization provider. Properties | Improve this Doc View Source CommandMap Gets a mapping of Discord's assigned snowflakes to their corresponding command nodes. Declaration public IReadOnlyDictionary<(Optional<Snowflake> GuildID, Snowflake CommandID), OneOf<IReadOnlyDictionary<string, CommandNode>, CommandNode>> CommandMap { get; } Property Value Type Description IReadOnlyDictionary < (T1, T2) < Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake >, Remora.Rest.Core.Snowflake >, OneOf.OneOf < IReadOnlyDictionary < String , Remora.Commands.Trees.Nodes.CommandNode >, Remora.Commands.Trees.Nodes.CommandNode >> Remarks The snowflake maps to the top-level entity, which may be a group or a command. If the top-level entity is a group, then any subcommands in that group will be provided in a sub-dictionary, with keys in the form subgroup-name::command-name , nested as required. Methods | Improve this Doc View Source SupportsSlashCommands(String) Determines whether the application's commands support being bound to Discord slash commands. Declaration public Result SupportsSlashCommands(string treeName = null) Parameters Type Name Description String treeName The name of the tree to check. Returns Type Description Remora.Results.Result true if slash commands are supported; otherwise, false. | Improve this Doc View Source UpdateSlashCommandsAsync(Nullable<Snowflake>, String, CancellationToken) Updates the application's slash commands. Declaration public async Task<Result> UpdateSlashCommandsAsync(Snowflake? guildID = null, string treeName = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Nullable < Remora.Rest.Core.Snowflake > guildID The ID of the guild to update slash commands in, if any. String treeName The name of the tree to update Discord with. Note that whatever is currently configured (either globally or on the provided guild) will be completely replaced by this tree. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded."
  },
  "api/Remora.Discord.Extensions.Builder.BuilderBase-1.html": {
    "href": "api/Remora.Discord.Extensions.Builder.BuilderBase-1.html",
    "title": "Class BuilderBase<TEntity> | Remora.Discord",
    "keywords": "Class BuilderBase<TEntity> Represents an object responsible for constructing and validating a model. Inheritance Object BuilderBase<TEntity> EmbedAuthorBuilder EmbedBuilder EmbedFooterBuilder EmbedImageBuilder Implements IBuilder <TEntity> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Extensions.Builder Assembly : Remora.Discord.Extensions.dll Syntax public abstract class BuilderBase<TEntity> : IBuilder<TEntity> Type Parameters Name Description TEntity The type of model to build. Methods | Improve this Doc View Source Build() Validates and then builds the model. Declaration public abstract Result<TEntity> Build() Returns Type Description Remora.Results.Result <TEntity> Returns a Remora.Results.Result<TEntity> containing the result of the build or the reason for failure. | Improve this Doc View Source Validate() Validate the model within specifications described by the model. Declaration public abstract Result Validate() Returns Type Description Remora.Results.Result Returns a Remora.Results.Result indicating the result of validation. Implements IBuilder<TEntity>"
  },
  "api/Remora.Discord.Extensions.Builder.html": {
    "href": "api/Remora.Discord.Extensions.Builder.html",
    "title": "Namespace Remora.Discord.Extensions.Builder | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Extensions.Builder Classes BuilderBase<TEntity> Represents an object responsible for constructing and validating a model. Interfaces IBuilder<TEntity> Represents an object responsible for constructing and validating a model."
  },
  "api/Remora.Discord.Extensions.Builder.IBuilder-1.html": {
    "href": "api/Remora.Discord.Extensions.Builder.IBuilder-1.html",
    "title": "Interface IBuilder<TEntity> | Remora.Discord",
    "keywords": "Interface IBuilder<TEntity> Represents an object responsible for constructing and validating a model. Namespace : Remora.Discord.Extensions.Builder Assembly : Remora.Discord.Extensions.dll Syntax [PublicAPI] public interface IBuilder<TEntity> Type Parameters Name Description TEntity The type of model to build. Methods | Improve this Doc View Source Build() Validates and then builds the model. Declaration Result<TEntity> Build() Returns Type Description Remora.Results.Result <TEntity> Returns a Remora.Results.Result<TEntity> containing the result of the build or the reason for failure. | Improve this Doc View Source Validate() Validate the model within specifications described by the model. Declaration Result Validate() Returns Type Description Remora.Results.Result Returns a Remora.Results.Result indicating the result of validation."
  },
  "api/Remora.Discord.Extensions.Embeds.EmbedAuthorBuilder.html": {
    "href": "api/Remora.Discord.Extensions.Embeds.EmbedAuthorBuilder.html",
    "title": "Class EmbedAuthorBuilder | Remora.Discord",
    "keywords": "Class EmbedAuthorBuilder A builder which validates and builds an EmbedAuthor . Inheritance Object BuilderBase < EmbedAuthor > EmbedAuthorBuilder Implements IBuilder < EmbedAuthor > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Extensions.Embeds Assembly : Remora.Discord.Extensions.dll Syntax [PublicAPI] public sealed class EmbedAuthorBuilder : BuilderBase<EmbedAuthor>, IBuilder<EmbedAuthor> Constructors | Improve this Doc View Source EmbedAuthorBuilder(String, String, String) Initializes a new instance of the EmbedAuthorBuilder class. Declaration public EmbedAuthorBuilder(string name, string url = null, string iconUrl = null) Parameters Type Name Description String name The author's name. String url The author's website. String iconUrl The author's icon url. Properties | Improve this Doc View Source IconUrl Gets or sets the author's icon url. Provide null if no url is needed. Declaration public string IconUrl { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the author's name. Must be shorter than or equal to MaxAuthorNameLength in length. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Url Gets or sets the author's website. Provide null if no url is needed. Declaration public string Url { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build() Validates and then builds the model. Declaration public override Result<EmbedAuthor> Build() Returns Type Description Remora.Results.Result < EmbedAuthor > Returns a Remora.Results.Result<TEntity> containing the result of the build or the reason for failure. Overrides Remora.Discord.Extensions.Builder.BuilderBase<Remora.Discord.API.Objects.EmbedAuthor>.Build() | Improve this Doc View Source FromAuthor(IEmbedAuthor) Converts an existing embed author into an EmbedAuthorBuilder . Declaration public static EmbedAuthorBuilder FromAuthor(IEmbedAuthor author) Parameters Type Name Description IEmbedAuthor author The author of the embed. Returns Type Description EmbedAuthorBuilder A new EmbedAuthorBuilder based on the provided author. | Improve this Doc View Source Validate() Validate the model within specifications described by the model. Declaration public override Result Validate() Returns Type Description Remora.Results.Result Returns a Remora.Results.Result indicating the result of validation. Overrides Remora.Discord.Extensions.Builder.BuilderBase<Remora.Discord.API.Objects.EmbedAuthor>.Validate() Implements IBuilder<TEntity>"
  },
  "api/Remora.Discord.Extensions.Embeds.EmbedBuilder.html": {
    "href": "api/Remora.Discord.Extensions.Embeds.EmbedBuilder.html",
    "title": "Class EmbedBuilder | Remora.Discord",
    "keywords": "Class EmbedBuilder Provides utilities for building an embed. Inheritance Object BuilderBase < Embed > EmbedBuilder Implements IBuilder < Embed > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Extensions.Embeds Assembly : Remora.Discord.Extensions.dll Syntax [PublicAPI] public class EmbedBuilder : BuilderBase<Embed>, IBuilder<Embed> Constructors | Improve this Doc View Source EmbedBuilder() Initializes a new instance of the EmbedBuilder class. Declaration public EmbedBuilder() Properties | Improve this Doc View Source Author Gets or sets the author of the embed. Declaration public EmbedAuthorBuilder Author { get; set; } Property Value Type Description EmbedAuthorBuilder | Improve this Doc View Source Colour Gets or sets the color of this embed. Declaration public Color? Colour { get; set; } Property Value Type Description Nullable < Color > | Improve this Doc View Source Description Gets or sets the description of the embed. Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Fields Gets a read-only list of fields added to this embed. Declaration public IReadOnlyList<IEmbedField> Fields { get; } Property Value Type Description IReadOnlyList < IEmbedField > | Improve this Doc View Source Footer Gets or sets the footer of this embed. Declaration public EmbedFooterBuilder Footer { get; set; } Property Value Type Description EmbedFooterBuilder | Improve this Doc View Source ImageUrl Gets or sets the image added to this embed. Declaration public string ImageUrl { get; set; } Property Value Type Description String | Improve this Doc View Source Length Gets the overall length of this embed. Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source ThumbnailUrl Gets or sets the thumbnail added to this embed. Declaration public string ThumbnailUrl { get; set; } Property Value Type Description String | Improve this Doc View Source Timestamp Gets or sets the timestamp, if any, which should be displayed on the embed. Declaration public DateTimeOffset? Timestamp { get; set; } Property Value Type Description Nullable < DateTimeOffset > | Improve this Doc View Source Title Gets or sets the title of the embed. Declaration public string Title { get; set; } Property Value Type Description String | Improve this Doc View Source Url Gets or sets the url of the embed. Declaration public string Url { get; set; } Property Value Type Description String Methods | Improve this Doc View Source AddField(IEmbedField) Attempts to add the specified IEmbedField to the EmbedBuilder . Declaration public Result<EmbedBuilder> AddField(IEmbedField field) Parameters Type Name Description IEmbedField field The IEmbedField . Returns Type Description Remora.Results.Result < EmbedBuilder > A result indicating the success or failure of the operation. | Improve this Doc View Source AddField(String, String, Boolean) Attempts to add a field with the specified values to the EmbedBuilder . Declaration public Result<EmbedBuilder> AddField(string name, string value, bool inline = false) Parameters Type Name Description String name The name of the field. String value The value of the field. Boolean inline Whether the field should be shown inline. Returns Type Description Remora.Results.Result < EmbedBuilder > A result indicating the success or failure of the operation. | Improve this Doc View Source Build() Validates and builds the EmbedBuilder . Declaration public override Result<Embed> Build() Returns Type Description Remora.Results.Result < Embed > A result containing the built Embed or an error indicating failure. Overrides Remora.Discord.Extensions.Builder.BuilderBase<Remora.Discord.API.Objects.Embed>.Build() | Improve this Doc View Source FromEmbed(IEmbed) Converts the provided IEmbed to an instance of EmbedBuilder . Declaration public static EmbedBuilder FromEmbed(IEmbed embed) Parameters Type Name Description IEmbed embed The embed to convert. Returns Type Description EmbedBuilder An EmbedBuilder with the same properties as the provided embed, where present. The EmbedType will be overwritten to Rich . | Improve this Doc View Source SetFields(ICollection<IEmbedField>) Sets the internal field collection to the specified ICollection<T> . Declaration public Result<EmbedBuilder> SetFields(ICollection<IEmbedField> fields) Parameters Type Name Description ICollection < IEmbedField > fields The collection of fields to use. Returns Type Description Remora.Results.Result < EmbedBuilder > A result indicating the success or failure of the operation. | Improve this Doc View Source Validate() Ensures that the overall length of the embed is less than the value of MaxEmbedLength . Declaration public override Result Validate() Returns Type Description Remora.Results.Result Returns a Remora.Results.Result indicating success or failure of the validation. Overrides Remora.Discord.Extensions.Builder.BuilderBase<Remora.Discord.API.Objects.Embed>.Validate() | Improve this Doc View Source WithAuthor(IUser) Adds the specified IUser as the author of the EmbedBuilder . Declaration public EmbedBuilder WithAuthor(IUser user) Parameters Type Name Description IUser user The user. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithAuthor(String, String, String) Adds an EmbedAuthor the EmbedBuilder . Declaration public EmbedBuilder WithAuthor(string name, string url = null, string iconUrl = null) Parameters Type Name Description String name The author's name. String url The author's website. String iconUrl The url of the author's icon. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithColour(Color) Sets the color of the EmbedBuilder to the specified color. Declaration public EmbedBuilder WithColour(Color colour) Parameters Type Name Description Color colour The color. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithCurrentTimestamp() Sets the timestamp of the EmbedBuilder to UtcNow . Declaration public EmbedBuilder WithCurrentTimestamp() Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithDescription(String) Adds the specified description to this EmbedBuilder . Declaration public EmbedBuilder WithDescription(string description) Parameters Type Name Description String description The description. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithFooter(IEmbedFooter) Adds the specified footer to the EmbedBuilder . Declaration public EmbedBuilder WithFooter(IEmbedFooter footer) Parameters Type Name Description IEmbedFooter footer The footer. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithFooter(String, String) Adds an embed footer to the EmbedBuilder . Declaration public EmbedBuilder WithFooter(string text, string iconUrl = null) Parameters Type Name Description String text The text of the footer. String iconUrl The url of the icon. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithImageUrl(String) Adds an image with the specified url to this EmbedBuilder . Declaration public EmbedBuilder WithImageUrl(string imageUrl) Parameters Type Name Description String imageUrl The url of the thumbnail. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithThumbnailUrl(String) Adds a thumbnail with the specified url to this EmbedBuilder . Declaration public EmbedBuilder WithThumbnailUrl(string thumbnailUrl) Parameters Type Name Description String thumbnailUrl The url of the thumbnail. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithTimestamp(Snowflake) Sets the timestamp of the EmbedBuilder to the timestamp specified by the snowflake . Declaration public EmbedBuilder WithTimestamp(Snowflake snowflake) Parameters Type Name Description Remora.Rest.Core.Snowflake snowflake The snowflake. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithTimestamp(DateTimeOffset) Sets the timestamp of the EmbedBuilder to the specified timestamp. Declaration public EmbedBuilder WithTimestamp(DateTimeOffset timestamp) Parameters Type Name Description DateTimeOffset timestamp The timestamp. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithTitle(String) Adds the specified title to this EmbedBuilder . Declaration public EmbedBuilder WithTitle(string title) Parameters Type Name Description String title The title. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. | Improve this Doc View Source WithUrl(String) Adds the specified url to this EmbedBuilder . Declaration public EmbedBuilder WithUrl(string url) Parameters Type Name Description String url The url. Returns Type Description EmbedBuilder The current EmbedBuilder for chaining. Implements IBuilder<TEntity>"
  },
  "api/Remora.Discord.Extensions.Embeds.EmbedConstants.html": {
    "href": "api/Remora.Discord.Extensions.Embeds.EmbedConstants.html",
    "title": "Class EmbedConstants | Remora.Discord",
    "keywords": "Class EmbedConstants Provides a set of constant values for embed validation. Inheritance Object EmbedConstants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Extensions.Embeds Assembly : Remora.Discord.Extensions.dll Syntax [PublicAPI] public static class EmbedConstants Fields | Improve this Doc View Source DefaultColour The default embed color. Declaration public static readonly Color DefaultColour Field Value Type Description Color | Improve this Doc View Source MaxAuthorNameLength Gets the maximum length of an author's name. Declaration public const int MaxAuthorNameLength = 256 Field Value Type Description Int32 | Improve this Doc View Source MaxDescriptionLength Gets the maximum length of a description. Declaration public const int MaxDescriptionLength = 4096 Field Value Type Description Int32 | Improve this Doc View Source MaxEmbedLength Gets the maximum overall size of an embed. Declaration public const int MaxEmbedLength = 6000 Field Value Type Description Int32 | Improve this Doc View Source MaxFieldCount Gets the maximum number of fields. Declaration public const int MaxFieldCount = 25 Field Value Type Description Int32 | Improve this Doc View Source MaxFieldNameLength Gets the maximum length of a field name. Declaration public const int MaxFieldNameLength = 256 Field Value Type Description Int32 | Improve this Doc View Source MaxFieldValueLength Gets the maximum length of a field value. Declaration public const int MaxFieldValueLength = 1024 Field Value Type Description Int32 | Improve this Doc View Source MaxFooterTextLength Gets the maximum length of a footer. Declaration public const int MaxFooterTextLength = 2048 Field Value Type Description Int32 | Improve this Doc View Source MaxTitleLength Gets the maximum length of a title. Declaration public const int MaxTitleLength = 256 Field Value Type Description Int32"
  },
  "api/Remora.Discord.Extensions.Embeds.EmbedFooterBuilder.html": {
    "href": "api/Remora.Discord.Extensions.Embeds.EmbedFooterBuilder.html",
    "title": "Class EmbedFooterBuilder | Remora.Discord",
    "keywords": "Class EmbedFooterBuilder A builder which validates and builds an EmbedFooter . Inheritance Object BuilderBase < EmbedFooter > EmbedFooterBuilder Implements IBuilder < EmbedFooter > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Extensions.Embeds Assembly : Remora.Discord.Extensions.dll Syntax [PublicAPI] public sealed class EmbedFooterBuilder : BuilderBase<EmbedFooter>, IBuilder<EmbedFooter> Constructors | Improve this Doc View Source EmbedFooterBuilder(String, String) Initializes a new instance of the EmbedFooterBuilder class. Declaration public EmbedFooterBuilder(string text, string iconUrl = null) Parameters Type Name Description String text The text of the footer. String iconUrl The icon url of the footer. Properties | Improve this Doc View Source IconUrl Gets or sets the icon url of the footer. Provide null if no url is needed. Declaration public string IconUrl { get; set; } Property Value Type Description String | Improve this Doc View Source Text Gets or sets the text of the footer. Must be shorter than or equal to MaxFooterTextLength in length. Declaration public string Text { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build() Validates and then builds the model. Declaration public override Result<EmbedFooter> Build() Returns Type Description Remora.Results.Result < EmbedFooter > Returns a Remora.Results.Result<TEntity> containing the result of the build or the reason for failure. Overrides Remora.Discord.Extensions.Builder.BuilderBase<Remora.Discord.API.Objects.EmbedFooter>.Build() | Improve this Doc View Source FromFooter(IEmbedFooter) Converts an existing embed footer into a footer builder. Declaration public static EmbedFooterBuilder FromFooter(IEmbedFooter footer) Parameters Type Name Description IEmbedFooter footer The footer. Returns Type Description EmbedFooterBuilder A new EmbedFooterBuilder based on the provided footer. | Improve this Doc View Source Validate() Validate the model within specifications described by the model. Declaration public override Result Validate() Returns Type Description Remora.Results.Result Returns a Remora.Results.Result indicating the result of validation. Overrides Remora.Discord.Extensions.Builder.BuilderBase<Remora.Discord.API.Objects.EmbedFooter>.Validate() Implements IBuilder<TEntity>"
  },
  "api/Remora.Discord.Extensions.Embeds.EmbedImageBuilder.html": {
    "href": "api/Remora.Discord.Extensions.Embeds.EmbedImageBuilder.html",
    "title": "Class EmbedImageBuilder | Remora.Discord",
    "keywords": "Class EmbedImageBuilder A builder which validates and builds an EmbedImageBuilder . Inheritance Object BuilderBase < EmbedImage > EmbedImageBuilder Implements IBuilder < EmbedImage > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Extensions.Embeds Assembly : Remora.Discord.Extensions.dll Syntax [PublicAPI] public sealed class EmbedImageBuilder : BuilderBase<EmbedImage>, IBuilder<EmbedImage> Constructors | Improve this Doc View Source EmbedImageBuilder(String) Initializes a new instance of the EmbedImageBuilder class. Declaration public EmbedImageBuilder(string url) Parameters Type Name Description String url The url of the image. Properties | Improve this Doc View Source Url Gets or sets the url of the image. Must be a valid url. Null values are not allowed. Declaration public string Url { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build() Validates and then builds the model. Declaration public override Result<EmbedImage> Build() Returns Type Description Remora.Results.Result < EmbedImage > Returns a Remora.Results.Result<TEntity> containing the result of the build or the reason for failure. Overrides Remora.Discord.Extensions.Builder.BuilderBase<Remora.Discord.API.Objects.EmbedImage>.Build() | Improve this Doc View Source Validate() Validate the model within specifications described by the model. Declaration public override Result Validate() Returns Type Description Remora.Results.Result Returns a Remora.Results.Result indicating the result of validation. Overrides Remora.Discord.Extensions.Builder.BuilderBase<Remora.Discord.API.Objects.EmbedImage>.Validate() Implements IBuilder<TEntity>"
  },
  "api/Remora.Discord.Extensions.Embeds.html": {
    "href": "api/Remora.Discord.Extensions.Embeds.html",
    "title": "Namespace Remora.Discord.Extensions.Embeds | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Extensions.Embeds Classes EmbedAuthorBuilder A builder which validates and builds an EmbedAuthor . EmbedBuilder Provides utilities for building an embed. EmbedConstants Provides a set of constant values for embed validation. EmbedFooterBuilder A builder which validates and builds an EmbedFooter . EmbedImageBuilder A builder which validates and builds an EmbedImageBuilder ."
  },
  "api/Remora.Discord.Extensions.Errors.html": {
    "href": "api/Remora.Discord.Extensions.Errors.html",
    "title": "Namespace Remora.Discord.Extensions.Errors | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Extensions.Errors Classes ValidationError Represents an error which occurred while validating a property."
  },
  "api/Remora.Discord.Extensions.Errors.ValidationError.html": {
    "href": "api/Remora.Discord.Extensions.Errors.ValidationError.html",
    "title": "Class ValidationError | Remora.Discord",
    "keywords": "Class ValidationError Represents an error which occurred while validating a property. Inheritance Object Remora.Results.ResultError ValidationError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < ValidationError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.Extensions.Errors Assembly : Remora.Discord.Extensions.dll Syntax [PublicAPI] public class ValidationError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<ValidationError> Constructors | Improve this Doc View Source ValidationError(String, String) Represents an error which occurred while validating a property. Declaration public ValidationError([InvokerParameterName] string PropertyName, string Reason) Parameters Type Name Description String PropertyName The name of the argument. String Reason The reason validation failed. Properties | Improve this Doc View Source PropertyName Declaration public string PropertyName { get; set; } Property Value Type Description String | Improve this Doc View Source Reason Declaration public string Reason { get; set; } Property Value Type Description String Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.Extensions.Formatting.AnsiBackgroundColor.html": {
    "href": "api/Remora.Discord.Extensions.Formatting.AnsiBackgroundColor.html",
    "title": "Enum AnsiBackgroundColor | Remora.Discord",
    "keywords": "Enum AnsiBackgroundColor Discord supported ANSI background colors. Namespace : Remora.Discord.Extensions.Formatting Assembly : Remora.Discord.Extensions.dll Syntax public enum AnsiBackgroundColor Remarks Discord ANSI colors are based on Solarized palette. Fields Name Description Base0 A base0 background color from Solarized palette. Base00 A base00 background color from Solarized palette. Base01 A base01 background color from Solarized palette. Base03 A base03 background color from Solarized palette. Base1 A base1 background color from Solarized palette. Base3 A base3 background color from Solarized palette. None No background color. Orange A orange background color. Violet A violet background color."
  },
  "api/Remora.Discord.Extensions.Formatting.AnsiForegroundColor.html": {
    "href": "api/Remora.Discord.Extensions.Formatting.AnsiForegroundColor.html",
    "title": "Enum AnsiForegroundColor | Remora.Discord",
    "keywords": "Enum AnsiForegroundColor Discord supported ANSI foreground colors. Namespace : Remora.Discord.Extensions.Formatting Assembly : Remora.Discord.Extensions.dll Syntax public enum AnsiForegroundColor Remarks Discord ANSI colors are based on Solarized palette. Fields Name Description Black A black foreground color. Blue A blue foreground color. Cyan A cyan foreground color. Green A green foreground color. Magenta A magenta foreground color. None No foreground color. Red A red foreground color. White A white foreground color. Yellow A yellow foreground color."
  },
  "api/Remora.Discord.Extensions.Formatting.AnsiStringBuilder.html": {
    "href": "api/Remora.Discord.Extensions.Formatting.AnsiStringBuilder.html",
    "title": "Class AnsiStringBuilder | Remora.Discord",
    "keywords": "Class AnsiStringBuilder Provides a builder to build an ANSI formatted string. Inheritance Object AnsiStringBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Extensions.Formatting Assembly : Remora.Discord.Extensions.dll Syntax public class AnsiStringBuilder Constructors | Improve this Doc View Source AnsiStringBuilder() Initializes a new instance of the AnsiStringBuilder class. Declaration public AnsiStringBuilder() Methods | Improve this Doc View Source Append(String) Appends the text with the current styling. Declaration public AnsiStringBuilder Append(string text) Parameters Type Name Description String text The text to append. Returns Type Description AnsiStringBuilder The current AnsiStringBuilder for chaining. | Improve this Doc View Source AppendLine(String) Appends the text with the current styling and adds a new line to the end. Declaration public AnsiStringBuilder AppendLine(string text = null) Parameters Type Name Description String text The text to append. Returns Type Description AnsiStringBuilder The current AnsiStringBuilder for chaining. | Improve this Doc View Source Background(AnsiBackgroundColor) Sets the current background color of the AnsiStringBuilder to the specific background color. Declaration public AnsiStringBuilder Background(AnsiBackgroundColor backgroundColor = AnsiBackgroundColor.None) Parameters Type Name Description AnsiBackgroundColor backgroundColor The background color. Returns Type Description AnsiStringBuilder The current AnsiStringBuilder for chaining. | Improve this Doc View Source Bold(Boolean) Sets the current bold state of AnsiStringBuilder whether the upcoming the should be bold. Declaration public AnsiStringBuilder Bold(bool bold = true) Parameters Type Name Description Boolean bold Whether to upcoming text should be bold. Returns Type Description AnsiStringBuilder The current AnsiStringBuilder for chaining. | Improve this Doc View Source Build() Build the ansi formatted string. Declaration public string Build() Returns Type Description String Returns a string containing the ansi formatting codes. | Improve this Doc View Source Foreground(AnsiForegroundColor) Sets the current foreground color of the AnsiStringBuilder to the specific foreground color. Declaration public AnsiStringBuilder Foreground(AnsiForegroundColor foregroundColor = AnsiForegroundColor.None) Parameters Type Name Description AnsiForegroundColor foregroundColor The foreground color. Returns Type Description AnsiStringBuilder The current AnsiStringBuilder for chaining. | Improve this Doc View Source Reset() Resets all styling. Declaration public AnsiStringBuilder Reset() Returns Type Description AnsiStringBuilder The current AnsiStringBuilder for chaining. | Improve this Doc View Source Underline(Boolean) Sets the current underline state of AnsiStringBuilder whether the upcoming the should be underlined. Declaration public AnsiStringBuilder Underline(bool underline = true) Parameters Type Name Description Boolean underline Whether to upcoming text should be underlined. Returns Type Description AnsiStringBuilder The current AnsiStringBuilder for chaining."
  },
  "api/Remora.Discord.Extensions.Formatting.html": {
    "href": "api/Remora.Discord.Extensions.Formatting.html",
    "title": "Namespace Remora.Discord.Extensions.Formatting | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Extensions.Formatting Classes AnsiStringBuilder Provides a builder to build an ANSI formatted string. Markdown Provides helper methods to format strings into Discord Markdown. Mention Provides helper methods to mention various Discord objects. Enums AnsiBackgroundColor Discord supported ANSI background colors. AnsiForegroundColor Discord supported ANSI foreground colors. TimestampStyle Represents the possible display formats for Timestamp Markdown."
  },
  "api/Remora.Discord.Extensions.Formatting.Markdown.html": {
    "href": "api/Remora.Discord.Extensions.Formatting.Markdown.html",
    "title": "Class Markdown | Remora.Discord",
    "keywords": "Class Markdown Provides helper methods to format strings into Discord Markdown. Inheritance Object Markdown Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Extensions.Formatting Assembly : Remora.Discord.Extensions.dll Syntax [PublicAPI] public static class Markdown Methods | Improve this Doc View Source BlockCode(String) Formats a string to use Markdown Block Code formatting. Declaration public static string BlockCode(string text) Parameters Type Name Description String text The input text to format. Returns Type Description String A markdown-formatted block code string. | Improve this Doc View Source BlockCode(String, String) Formats a string to use Markdown Block Code formatting with a specified language for syntax highlighting. Declaration public static string BlockCode(string text, string language) Parameters Type Name Description String text The input text to format. String language The language. Returns Type Description String A markdown-formatted block code string. Remarks Discord supports the following languages: https://github.com/highlightjs/highlight.js/tree/main/src/languages . | Improve this Doc View Source BlockQuote(String) Formats a string to use Markdown Quote Block formatting. Declaration public static string BlockQuote(string text) Parameters Type Name Description String text The input text to format. Returns Type Description String A markdown-formatted block quote string. | Improve this Doc View Source Bold(String) Formats a string to use Markdown Bold formatting. Declaration public static string Bold(string text) Parameters Type Name Description String text The input text to format. Returns Type Description String A markdown-formatted bold string. | Improve this Doc View Source EscapeUrl(String) Escapes a URL to prevent embedding of its content. Declaration public static string EscapeUrl(string url) Parameters Type Name Description String url The URL to escape. Returns Type Description String A formatted URL string that will not embed its content. | Improve this Doc View Source EscapeUrl(Uri) Escapes a URL to prevent embedding of its content. Declaration public static string EscapeUrl(Uri uri) Parameters Type Name Description Uri uri The URI to escape. Returns Type Description String A formatted URL string that will not embed its content. | Improve this Doc View Source Hyperlink(String) Formats a string to contain a Markdown hyperlink of itself. The hyperlink will only hyperlink inside of Embed fields, excluding the Author and Footer properties. Declaration public static string Hyperlink(string url) Parameters Type Name Description String url The URL to hyperlink. Returns Type Description String A Markdown-formatted hyperlink string. | Improve this Doc View Source Hyperlink(String, String) Formats a string to contain a Markdown Hyperlink. The hyperlink will only appear inside of Embed fields, excluding the Author and Footer properties. Declaration public static string Hyperlink(string text, string url) Parameters Type Name Description String text The text to hyperlink. String url The URL to contain within the text. Returns Type Description String A Markdown-formatted hyperlink string. | Improve this Doc View Source Hyperlink(String, Uri) Formats a string to contain a Markdown Hyperlink. The hyperlink will only appear inside of Embed fields, excluding the Author and Footer properties. Declaration public static string Hyperlink(string text, Uri uri) Parameters Type Name Description String text The text to hyperlink. Uri uri The URI to contain within the text. Returns Type Description String A Markdown-formatted hyperlink string. | Improve this Doc View Source Hyperlink(Uri) Formats a string to contain a Markdown hyperlink of itself. The hyperlink will only hyperlink inside of Embed fields, excluding the Author and Footer properties. Declaration public static string Hyperlink(Uri uri) Parameters Type Name Description Uri uri The URL to hyperlink. Returns Type Description String A Markdown-formatted hyperlink string. | Improve this Doc View Source InlineCode(String) Formats a string to use Markdown Inline Code formatting. Declaration public static string InlineCode(string text) Parameters Type Name Description String text The input text to format. Returns Type Description String A markdown-formatted inline code string. | Improve this Doc View Source Italicise(String) Formats a string to use Markdown Italicised formatting. Declaration public static string Italicise(string text) Parameters Type Name Description String text The input text to format. Returns Type Description String A markdown-formatted italicised string. | Improve this Doc View Source Sanitize(String) Sanitizes a string of sensitive characters. Declaration public static string Sanitize(string text) Parameters Type Name Description String text The text to sanitize. Returns Type Description String A sanitized string. | Improve this Doc View Source Spoiler(String) Formats a string to use Markdown Spoiler formatting. Declaration public static string Spoiler(string text) Parameters Type Name Description String text The input text to format. Returns Type Description String A markdown-formatted spoilered string. | Improve this Doc View Source Strikethrough(String) Formats a string to use Markdown Strikethrough formatting. Declaration public static string Strikethrough(string text) Parameters Type Name Description String text The input text to format. Returns Type Description String A markdown-formatted strikethrough string. | Improve this Doc View Source Timestamp(DateTime, Nullable<TimestampStyle>) Formats a Unix timestamp value into Discord Markdown Timestamp. Declaration public static string Timestamp(DateTime dateTime, TimestampStyle? timestampStyle = null) Parameters Type Name Description DateTime dateTime The time to format. Nullable < TimestampStyle > timestampStyle The style to format into. Returns Type Description String A Discord markdown-formatted Timestamp string. | Improve this Doc View Source Timestamp(DateTimeOffset, Nullable<TimestampStyle>) Formats a Unix timestamp value into Discord Markdown Timestamp. Declaration public static string Timestamp(DateTimeOffset dateTimeOffset, TimestampStyle? timestampStyle = null) Parameters Type Name Description DateTimeOffset dateTimeOffset The time to format. Nullable < TimestampStyle > timestampStyle The style to format into. Returns Type Description String A Discord markdown-formatted Timestamp string. | Improve this Doc View Source Timestamp(Int64, Nullable<TimestampStyle>) Formats a Unix timestamp value into Discord Markdown Timestamp. Declaration public static string Timestamp(long unixTimestamp, TimestampStyle? timestampStyle = null) Parameters Type Name Description Int64 unixTimestamp The Unix timestamp to format. Nullable < TimestampStyle > timestampStyle The style to format into. Returns Type Description String A Discord markdown-formatted Timestamp string. | Improve this Doc View Source Underline(String) Formats a string to use Markdown Underlined formatting. Declaration public static string Underline(string text) Parameters Type Name Description String text The input text to format. Returns Type Description String A markdown-formatted underlined string."
  },
  "api/Remora.Discord.Extensions.Formatting.Mention.html": {
    "href": "api/Remora.Discord.Extensions.Formatting.Mention.html",
    "title": "Class Mention | Remora.Discord",
    "keywords": "Class Mention Provides helper methods to mention various Discord objects. Inheritance Object Mention Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Extensions.Formatting Assembly : Remora.Discord.Extensions.dll Syntax [PublicAPI] public static class Mention Methods | Improve this Doc View Source Channel(IChannel) Creates a mention string for a channel. Declaration public static string Channel(IChannel channel) Parameters Type Name Description IChannel channel The channel. Returns Type Description String A channel mention string. | Improve this Doc View Source Channel(Snowflake) Creates a mention string for a channel from its ID. Declaration public static string Channel(Snowflake snowflake) Parameters Type Name Description Remora.Rest.Core.Snowflake snowflake The channel Snowflake ID. Returns Type Description String A channel mention string. | Improve this Doc View Source Role(IRole) Creates a mention string for a role from its ID. Declaration public static string Role(IRole role) Parameters Type Name Description IRole role The role. Returns Type Description String A role mention string. | Improve this Doc View Source Role(Snowflake) Creates a mention string for a role. Declaration public static string Role(Snowflake snowflake) Parameters Type Name Description Remora.Rest.Core.Snowflake snowflake The role Snowflake ID. Returns Type Description String A role mention string. | Improve this Doc View Source User(IUser) Creates a mention string for a user, displaying their username. Declaration public static string User(IUser user) Parameters Type Name Description IUser user The user. Returns Type Description String A user mention string. | Improve this Doc View Source User(Snowflake) Creates a mention string for a user from their ID, displaying their username. Declaration public static string User(Snowflake snowflake) Parameters Type Name Description Remora.Rest.Core.Snowflake snowflake The user Snowflake ID. Returns Type Description String A user mention string."
  },
  "api/Remora.Discord.Extensions.Formatting.TimestampStyle.html": {
    "href": "api/Remora.Discord.Extensions.Formatting.TimestampStyle.html",
    "title": "Enum TimestampStyle | Remora.Discord",
    "keywords": "Enum TimestampStyle Represents the possible display formats for Timestamp Markdown. Namespace : Remora.Discord.Extensions.Formatting Assembly : Remora.Discord.Extensions.dll Syntax public enum TimestampStyle Fields Name Description LongDate 20 April 2021. LongDateTime Tuesday, 20 April 2021 16:20. LongTime 16:20:30. RelativeTime 2 months ago. ShortDate 20/04/2021. ShortDateTime 20 April 2021 16:20. ShortTime 16:20."
  },
  "api/Remora.Discord.Gateway.DiscordGatewayClient.html": {
    "href": "api/Remora.Discord.Gateway.DiscordGatewayClient.html",
    "title": "Class DiscordGatewayClient | Remora.Discord",
    "keywords": "Class DiscordGatewayClient Represents a Discord Gateway client. Inheritance Object DiscordGatewayClient Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Gateway Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public class DiscordGatewayClient : IDisposable Constructors | Improve this Doc View Source DiscordGatewayClient(IDiscordRestGatewayAPI, IPayloadTransportService, IOptions<DiscordGatewayClientOptions>, ITokenStore, Random, ILogger<DiscordGatewayClient>, IServiceProvider, ResponderDispatchService) Initializes a new instance of the DiscordGatewayClient class. Declaration public DiscordGatewayClient(IDiscordRestGatewayAPI gatewayAPI, IPayloadTransportService transportService, IOptions<DiscordGatewayClientOptions> gatewayOptions, ITokenStore tokenStore, Random random, ILogger<DiscordGatewayClient> log, IServiceProvider services, ResponderDispatchService responderDispatch) Parameters Type Name Description IDiscordRestGatewayAPI gatewayAPI The gateway API. IPayloadTransportService transportService The payload transport service. IOptions < DiscordGatewayClientOptions > gatewayOptions The gateway options. ITokenStore tokenStore The token store. Random random An entropy source. ILogger < DiscordGatewayClient > log The logging instance. IServiceProvider services The available services. ResponderDispatchService responderDispatch The responder dispatch service. Properties | Improve this Doc View Source Latency Gets the time taken for the gateway to respond to the last heartbeat, providing an estimate of round-trip latency. Will return zero until the first heartbeat has occured. Declaration public TimeSpan Latency { get; } Property Value Type Description TimeSpan Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source RunAsync(CancellationToken) Starts and connects the gateway client. Declaration public async Task<Result> RunAsync(CancellationToken stopRequested) Parameters Type Name Description CancellationToken stopRequested A token by which the caller can request this method to stop. Returns Type Description Task < Remora.Results.Result > A gateway connection result which may or may not have succeeded. Remarks This task will not complete until cancelled (or faulted), maintaining the connection for the duration of it. If the gateway client encounters a fatal problem during the execution of this task, it will return with a failed result. If a shutdown is requested, it will gracefully terminate the connection and return a successful result. | Improve this Doc View Source SubmitCommand<TCommand>(TCommand) Submits a command to the gateway, enqueueing it for sending. Declaration public void SubmitCommand<TCommand>(TCommand commandPayload) where TCommand : IGatewayCommand Parameters Type Name Description TCommand commandPayload The command to send. Type Parameters Name Description TCommand The type of command to send. Implements System.IDisposable"
  },
  "api/Remora.Discord.Gateway.DiscordGatewayClientOptions.html": {
    "href": "api/Remora.Discord.Gateway.DiscordGatewayClientOptions.html",
    "title": "Class DiscordGatewayClientOptions | Remora.Discord",
    "keywords": "Class DiscordGatewayClientOptions Holds various client options for use in the gateway client. Inheritance Object DiscordGatewayClientOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Gateway Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public class DiscordGatewayClientOptions Properties | Improve this Doc View Source ConnectionProperties Gets or sets the connection properties that identify the connecting client or library code. By default, this is the information about Remora.Discord itself. You may, optionally, override this to present your own information. Declaration public IConnectionProperties ConnectionProperties { get; set; } Property Value Type Description IConnectionProperties | Improve this Doc View Source HeartbeatSafetyMargin Gets or sets the safety margin for the heartbeat interval. The client will aim to send a heartbeat within this time before the actual interval. The actual safety margin will never exceed 10% of the total interval, and will never be less than MinimumSafetyMargin . Declaration public TimeSpan HeartbeatSafetyMargin { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source Intents Gets or sets the gateway intents to subscribe to. By default, this is a limited set of intents (guilds and their messages). Declaration public GatewayIntents Intents { get; set; } Property Value Type Description GatewayIntents | Improve this Doc View Source LargeThreshold Gets or sets the large threshold for the gateway. For guilds with members that exceed the threshold, offline members will be omitted. Declaration public byte LargeThreshold { get; set; } Property Value Type Description Byte Remarks Defaults to 50, max of 250. | Improve this Doc View Source MinimumSafetyMargin Gets or sets the minimum safety margin. Declaration public TimeSpan MinimumSafetyMargin { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source Presence Gets or sets the initial presence when the bot connects. Declaration public IUpdatePresence Presence { get; set; } Property Value Type Description IUpdatePresence | Improve this Doc View Source ShardIdentification Gets or sets the shard identification information. This is used to connect the client as a sharded connection, where events are distributed over a set of active connections. Declaration public IShardIdentification ShardIdentification { get; set; } Property Value Type Description IShardIdentification Methods | Improve this Doc View Source GetTrueHeartbeatSafetyMargin(TimeSpan) Calculates the true heartbeat safety margin, based on the heartbeat interval. Declaration public TimeSpan GetTrueHeartbeatSafetyMargin(TimeSpan heartbeatInterval) Parameters Type Name Description TimeSpan heartbeatInterval The heartbeat interval. Returns Type Description TimeSpan The true safety margin."
  },
  "api/Remora.Discord.Gateway.Extensions.html": {
    "href": "api/Remora.Discord.Gateway.Extensions.html",
    "title": "Namespace Remora.Discord.Gateway.Extensions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Gateway.Extensions Classes ServiceCollectionExtensions Defines extension methods for the IServiceCollection class. TypeExtensions Defines extension methods for the Type class."
  },
  "api/Remora.Discord.Gateway.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Remora.Discord.Gateway.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Remora.Discord",
    "keywords": "Class ServiceCollectionExtensions Defines extension methods for the IServiceCollection class. Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Gateway.Extensions Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddDiscordGateway(IServiceCollection, Func<IServiceProvider, String>) Adds services required by the Discord Gateway system. Declaration public static IServiceCollection AddDiscordGateway(this IServiceCollection serviceCollection, Func<IServiceProvider, string> tokenFactory) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Func < IServiceProvider , String > tokenFactory A function that retrieves the bot token. Returns Type Description IServiceCollection The service collection, with the services added. | Improve this Doc View Source AddResponder(IServiceCollection, Type, ResponderGroup) Adds a responder to the service collection. This method registers the responder as being available for all IResponder<TGatewayEvent> implementations it supports. Declaration public static IServiceCollection AddResponder(this IServiceCollection serviceCollection, Type responderType, ResponderGroup group = ResponderGroup.Normal) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Type responderType The type implementing IResponder . ResponderGroup group The group the responder belongs to. Returns Type Description IServiceCollection The service collection, with the responder added. Exceptions Type Condition ArgumentException Throws if responderType does not implement IResponder . | Improve this Doc View Source AddResponder<TResponder>(IServiceCollection, ResponderGroup) Adds a responder to the service collection. This method registers the responder as being available for all IResponder<TGatewayEvent> implementations it supports. Declaration public static IServiceCollection AddResponder<TResponder>(this IServiceCollection serviceCollection, ResponderGroup group = ResponderGroup.Normal) where TResponder : IResponder Parameters Type Name Description IServiceCollection serviceCollection The service collection. ResponderGroup group The group the responder belongs to. Returns Type Description IServiceCollection The service collection, with the responder added. Type Parameters Name Description TResponder The concrete responder type."
  },
  "api/Remora.Discord.Gateway.Extensions.TypeExtensions.html": {
    "href": "api/Remora.Discord.Gateway.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | Remora.Discord",
    "keywords": "Class TypeExtensions Defines extension methods for the Type class. Inheritance Object TypeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Gateway.Extensions Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public static class TypeExtensions Methods | Improve this Doc View Source IsResponder(Type) Checks if the Type implements IResponder<TGatewayEvent> . Declaration public static bool IsResponder(this Type type) Parameters Type Name Description Type type The Type to check against. Returns Type Description Boolean True if the type implements IResponder<TGatewayEvent> ."
  },
  "api/Remora.Discord.Gateway.GatewayConnectionStatus.html": {
    "href": "api/Remora.Discord.Gateway.GatewayConnectionStatus.html",
    "title": "Enum GatewayConnectionStatus | Remora.Discord",
    "keywords": "Enum GatewayConnectionStatus Enumerates the various states the gateway client can be in. Namespace : Remora.Discord.Gateway Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public enum GatewayConnectionStatus Fields Name Description Connected The client is connected and handling events. Disconnected The client is disconnected, but active. Offline The client is completely offline."
  },
  "api/Remora.Discord.Gateway.html": {
    "href": "api/Remora.Discord.Gateway.html",
    "title": "Namespace Remora.Discord.Gateway | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Gateway Classes DiscordGatewayClient Represents a Discord Gateway client. DiscordGatewayClientOptions Holds various client options for use in the gateway client. Enums GatewayConnectionStatus Enumerates the various states the gateway client can be in."
  },
  "api/Remora.Discord.Gateway.Responders.html": {
    "href": "api/Remora.Discord.Gateway.Responders.html",
    "title": "Namespace Remora.Discord.Gateway.Responders | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Gateway.Responders Interfaces IResponder Represents a marker interface for event responders. IResponder<TGatewayEvent> Represents a type that can respond to certain gateway events. Enums ResponderGroup Enumerates various responder groups. Responders registered within a group run in parallel, but are ordered among the groups."
  },
  "api/Remora.Discord.Gateway.Responders.IResponder.html": {
    "href": "api/Remora.Discord.Gateway.Responders.IResponder.html",
    "title": "Interface IResponder | Remora.Discord",
    "keywords": "Interface IResponder Represents a marker interface for event responders. Namespace : Remora.Discord.Gateway.Responders Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public interface IResponder"
  },
  "api/Remora.Discord.Gateway.Responders.IResponder-1.html": {
    "href": "api/Remora.Discord.Gateway.Responders.IResponder-1.html",
    "title": "Interface IResponder<TGatewayEvent> | Remora.Discord",
    "keywords": "Interface IResponder<TGatewayEvent> Represents a type that can respond to certain gateway events. Namespace : Remora.Discord.Gateway.Responders Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public interface IResponder<in TGatewayEvent> : IResponder where TGatewayEvent : IGatewayEvent Type Parameters Name Description TGatewayEvent The gateway event. Methods | Improve this Doc View Source RespondAsync(TGatewayEvent, CancellationToken) Responds to the given gateway event, handling it asynchronously. Declaration Task<Result> RespondAsync(TGatewayEvent gatewayEvent, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description TGatewayEvent gatewayEvent The event to respond to. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A response result which may or may not have succeeded."
  },
  "api/Remora.Discord.Gateway.Responders.ResponderGroup.html": {
    "href": "api/Remora.Discord.Gateway.Responders.ResponderGroup.html",
    "title": "Enum ResponderGroup | Remora.Discord",
    "keywords": "Enum ResponderGroup Enumerates various responder groups. Responders registered within a group run in parallel, but are ordered among the groups. Namespace : Remora.Discord.Gateway.Responders Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public enum ResponderGroup Fields Name Description Early This responder runs before all other groups. Late This responder runs after all other groups. Normal This responder runs when responders normally run."
  },
  "api/Remora.Discord.Gateway.Results.GatewayDiscordError.html": {
    "href": "api/Remora.Discord.Gateway.Results.GatewayDiscordError.html",
    "title": "Class GatewayDiscordError | Remora.Discord",
    "keywords": "Class GatewayDiscordError Represents an unexpected closing of the gateway by Discord. Inheritance Object Remora.Results.ResultError GatewayDiscordError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < GatewayDiscordError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.Gateway.Results Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public class GatewayDiscordError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<GatewayDiscordError> Constructors | Improve this Doc View Source GatewayDiscordError(GatewayCloseStatus) Represents an unexpected closing of the gateway by Discord. Declaration public GatewayDiscordError(GatewayCloseStatus CloseStatus) Parameters Type Name Description GatewayCloseStatus CloseStatus Properties | Improve this Doc View Source CloseStatus Declaration public GatewayCloseStatus CloseStatus { get; set; } Property Value Type Description GatewayCloseStatus Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.Gateway.Results.GatewayError.html": {
    "href": "api/Remora.Discord.Gateway.Results.GatewayError.html",
    "title": "Class GatewayError | Remora.Discord",
    "keywords": "Class GatewayError Represents a clientside gateway error. Inheritance Object Remora.Results.ResultError GatewayError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < GatewayError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.Gateway.Results Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public class GatewayError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<GatewayError> Constructors | Improve this Doc View Source GatewayError(String, Boolean, Boolean) Represents a clientside gateway error. Declaration public GatewayError(string Message, bool IsSessionResumable, bool IsCritical) Parameters Type Name Description String Message Boolean IsSessionResumable Boolean IsCritical Properties | Improve this Doc View Source IsCritical Declaration public bool IsCritical { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSessionResumable Declaration public bool IsSessionResumable { get; set; } Property Value Type Description Boolean Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.Gateway.Results.GatewayWebSocketError.html": {
    "href": "api/Remora.Discord.Gateway.Results.GatewayWebSocketError.html",
    "title": "Class GatewayWebSocketError | Remora.Discord",
    "keywords": "Class GatewayWebSocketError Represents an unexpected closing of the gateway on the websocket layer. Inheritance Object Remora.Results.ResultError GatewayWebSocketError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < GatewayWebSocketError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.Gateway.Results Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public class GatewayWebSocketError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<GatewayWebSocketError> Constructors | Improve this Doc View Source GatewayWebSocketError(WebSocketCloseStatus) Represents an unexpected closing of the gateway on the websocket layer. Declaration public GatewayWebSocketError(WebSocketCloseStatus CloseStatus) Parameters Type Name Description WebSocketCloseStatus CloseStatus Properties | Improve this Doc View Source CloseStatus Declaration public WebSocketCloseStatus CloseStatus { get; set; } Property Value Type Description WebSocketCloseStatus Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.Gateway.Results.html": {
    "href": "api/Remora.Discord.Gateway.Results.html",
    "title": "Namespace Remora.Discord.Gateway.Results | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Gateway.Results Classes GatewayDiscordError Represents an unexpected closing of the gateway by Discord. GatewayError Represents a clientside gateway error. GatewayWebSocketError Represents an unexpected closing of the gateway on the websocket layer. WebSocketError Represents a failure to perform a websocket action."
  },
  "api/Remora.Discord.Gateway.Results.WebSocketError.html": {
    "href": "api/Remora.Discord.Gateway.Results.WebSocketError.html",
    "title": "Class WebSocketError | Remora.Discord",
    "keywords": "Class WebSocketError Represents a failure to perform a websocket action. Inheritance Object Remora.Results.ResultError WebSocketError Implements Remora.Results.IResultError IEquatable < Remora.Results.ResultError > IEquatable < WebSocketError > Inherited Members Remora.Results.ResultError.ToString() Remora.Results.ResultError.PrintMembers(System.Text.StringBuilder) Remora.Results.ResultError.GetHashCode() Remora.Results.ResultError.Equals(System.Object) Remora.Results.ResultError.Equals(Remora.Results.ResultError) Remora.Results.ResultError.<Clone>$() Remora.Results.ResultError.Deconstruct(System.String) Remora.Results.ResultError.EqualityContract Remora.Results.ResultError.Message Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Remora.Discord.Gateway.Results Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public class WebSocketError : ResultError, IResultError, IEquatable<ResultError>, IEquatable<WebSocketError> Constructors | Improve this Doc View Source WebSocketError(WebSocketState, String) Represents a failure to perform a websocket action. Declaration public WebSocketError(WebSocketState State, string Message = \"The requested websocket operation failed.\") Parameters Type Name Description WebSocketState State The state the socket ended up in. String Message The custom message, if any. Properties | Improve this Doc View Source State Declaration public WebSocketState State { get; set; } Property Value Type Description WebSocketState Implements Remora.Results.IResultError System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Remora.Discord.Gateway.Services.html": {
    "href": "api/Remora.Discord.Gateway.Services.html",
    "title": "Namespace Remora.Discord.Gateway.Services | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Gateway.Services Classes ResponderDispatchService Manages dispatch and processing of gateway payloads. ResponderService Handles introspection of registered responders. Interfaces IResponderTypeRepository Represents a type that can serve lists of registered responder types for gateway events."
  },
  "api/Remora.Discord.Gateway.Services.IResponderTypeRepository.html": {
    "href": "api/Remora.Discord.Gateway.Services.IResponderTypeRepository.html",
    "title": "Interface IResponderTypeRepository | Remora.Discord",
    "keywords": "Interface IResponderTypeRepository Represents a type that can serve lists of registered responder types for gateway events. Namespace : Remora.Discord.Gateway.Services Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public interface IResponderTypeRepository Methods | Improve this Doc View Source GetEarlyResponderTypes<TGatewayEvent>() Gets all responder types that are relevant for the given event, and should run before any other responders. Declaration IReadOnlyList<Type> GetEarlyResponderTypes<TGatewayEvent>() where TGatewayEvent : IGatewayEvent Returns Type Description IReadOnlyList < Type > A list of responder types. Type Parameters Name Description TGatewayEvent The event type. | Improve this Doc View Source GetLateResponderTypes<TGatewayEvent>() Gets all responder types that are relevant for the given event, and should run after any other responders. Declaration IReadOnlyList<Type> GetLateResponderTypes<TGatewayEvent>() where TGatewayEvent : IGatewayEvent Returns Type Description IReadOnlyList < Type > A list of responder types. Type Parameters Name Description TGatewayEvent The event type. | Improve this Doc View Source GetResponderTypes<TGatewayEvent>() Gets all responder types that are relevant for the given event. Declaration IReadOnlyList<Type> GetResponderTypes<TGatewayEvent>() where TGatewayEvent : IGatewayEvent Returns Type Description IReadOnlyList < Type > A list of responder types. Type Parameters Name Description TGatewayEvent The event type."
  },
  "api/Remora.Discord.Gateway.Services.ResponderDispatchService.html": {
    "href": "api/Remora.Discord.Gateway.Services.ResponderDispatchService.html",
    "title": "Class ResponderDispatchService | Remora.Discord",
    "keywords": "Class ResponderDispatchService Manages dispatch and processing of gateway payloads. Inheritance Object ResponderDispatchService Implements IAsyncDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Gateway.Services Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public class ResponderDispatchService : IAsyncDisposable Constructors | Improve this Doc View Source ResponderDispatchService(IServiceProvider, IResponderTypeRepository, ILogger<ResponderDispatchService>) Initializes a new instance of the ResponderDispatchService class. Declaration public ResponderDispatchService(IServiceProvider services, IResponderTypeRepository responderTypeRepository, ILogger<ResponderDispatchService> log) Parameters Type Name Description IServiceProvider services The available services. IResponderTypeRepository responderTypeRepository The responder type repository. ILogger < ResponderDispatchService > log The logging instance for this type. Properties | Improve this Doc View Source IsRunning Gets a value indicating whether the dispatch service is currently running. Declaration public bool IsRunning { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source DispatchAsync(IPayload, CancellationToken) Dispatches the given payload to interested responders. If the service is stopped with pending dispatches, the pending payloads will be dropped. Any payloads that have been dispatched (that is, a call to this method has returned a successful result) will be allowed to run to completion. Declaration public async Task<Result> DispatchAsync(IPayload payload, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IPayload payload The payload to dispatch. CancellationToken ct The cancellation token for this operation. Note that this is not the cancellation token which will be passed to any instantiated responders. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source DisposeAsync() Declaration public async ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source Start() Starts the dispatch service, beginning acceptance of payloads for dispatch. Declaration public void Start() | Improve this Doc View Source StopAsync() Stops the dispatch service, finishing any pending payloads. Declaration public async Task StopAsync() Returns Type Description Task A result which may or may not have succeeded. Implements System.IAsyncDisposable"
  },
  "api/Remora.Discord.Gateway.Services.ResponderService.html": {
    "href": "api/Remora.Discord.Gateway.Services.ResponderService.html",
    "title": "Class ResponderService | Remora.Discord",
    "keywords": "Class ResponderService Handles introspection of registered responders. Inheritance Object ResponderService Implements IResponderTypeRepository Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Gateway.Services Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public class ResponderService : IResponderTypeRepository Methods | Improve this Doc View Source GetEarlyResponderTypes<TGatewayEvent>() Gets all responder types that are relevant for the given event, and should run before any other responders. Declaration public IReadOnlyList<Type> GetEarlyResponderTypes<TGatewayEvent>() where TGatewayEvent : IGatewayEvent Returns Type Description IReadOnlyList < Type > A list of responder types. Type Parameters Name Description TGatewayEvent The event type. | Improve this Doc View Source GetLateResponderTypes<TGatewayEvent>() Gets all responder types that are relevant for the given event, and should run after any other responders. Declaration public IReadOnlyList<Type> GetLateResponderTypes<TGatewayEvent>() where TGatewayEvent : IGatewayEvent Returns Type Description IReadOnlyList < Type > A list of responder types. Type Parameters Name Description TGatewayEvent The event type. | Improve this Doc View Source GetResponderTypes<TGatewayEvent>() Gets all responder types that are relevant for the given event. Declaration public IReadOnlyList<Type> GetResponderTypes<TGatewayEvent>() where TGatewayEvent : IGatewayEvent Returns Type Description IReadOnlyList < Type > A list of responder types. Type Parameters Name Description TGatewayEvent The event type. | Improve this Doc View Source GetResponderTypes<TGatewayEvent>(IReadOnlyDictionary<Type, List<Type>>) Gets all responder types that are relevant for the given event. Declaration public static IReadOnlyList<Type> GetResponderTypes<TGatewayEvent>(IReadOnlyDictionary<Type, List<Type>> responderGroup) where TGatewayEvent : IGatewayEvent Parameters Type Name Description IReadOnlyDictionary < Type , List < Type >> responderGroup The responder group that responders should be retrieved from. Returns Type Description IReadOnlyList < Type > A list of responder types. Type Parameters Name Description TGatewayEvent The event type. Implements IResponderTypeRepository"
  },
  "api/Remora.Discord.Gateway.Transport.html": {
    "href": "api/Remora.Discord.Gateway.Transport.html",
    "title": "Namespace Remora.Discord.Gateway.Transport | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Gateway.Transport Classes WebSocketPayloadTransportService Represents a websocket-based transport service. Interfaces IPayloadTransportService Represents an arbitrary transport service for IPayload instances."
  },
  "api/Remora.Discord.Gateway.Transport.IPayloadTransportService.html": {
    "href": "api/Remora.Discord.Gateway.Transport.IPayloadTransportService.html",
    "title": "Interface IPayloadTransportService | Remora.Discord",
    "keywords": "Interface IPayloadTransportService Represents an arbitrary transport service for IPayload instances. Namespace : Remora.Discord.Gateway.Transport Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public interface IPayloadTransportService Remarks This interface defines the public API surface for a type that the gateway client can use to send and receive payloads from the Discord gateway. It is not specifically concerned with the actual protocol used underneath the hood, and instead only presents abstract I/O operations. Some assumptions are made in regards to endpoints and availability of operations (one is expected to be able to connect and disconnect separately from sending and receiving, for example), but generally, it is kept to a minimum. Properties | Improve this Doc View Source IsConnected Gets a value indicating whether the service has successfully connected. Declaration bool IsConnected { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ConnectAsync(Uri, CancellationToken) Connects to the transport endpoint, enabling I/O operations. Declaration Task<Result> ConnectAsync(Uri endpoint, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Uri endpoint The endpoint to connect to. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A connection result which may or may not have succeeded. | Improve this Doc View Source DisconnectAsync(Boolean, CancellationToken) Disconnects from the transport endpoint. Declaration Task<Result> DisconnectAsync(bool reconnectionIntended, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Boolean reconnectionIntended Whether reconnection is intended. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A connection result which may or may not have succeeded. | Improve this Doc View Source ReceivePayloadAsync(CancellationToken) Asynchronously receives a payload. Declaration Task<Result<IPayload>> ReceivePayloadAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPayload >> A receive result which may or may not have succeeded. Remarks This method should be thread-safe in conjunction with SendPayloadAsync(IPayload, CancellationToken) . | Improve this Doc View Source SendPayloadAsync(IPayload, CancellationToken) Asynchronously sends a payload. Declaration Task<Result> SendPayloadAsync(IPayload payload, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IPayload payload The payload. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A send result which may or may not have succeeded. Remarks This method should be thread-safe in conjunction with ReceivePayloadAsync(CancellationToken) ."
  },
  "api/Remora.Discord.Gateway.Transport.WebSocketPayloadTransportService.html": {
    "href": "api/Remora.Discord.Gateway.Transport.WebSocketPayloadTransportService.html",
    "title": "Class WebSocketPayloadTransportService | Remora.Discord",
    "keywords": "Class WebSocketPayloadTransportService Represents a websocket-based transport service. Inheritance Object WebSocketPayloadTransportService Implements IPayloadTransportService IAsyncDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Gateway.Transport Assembly : Remora.Discord.Gateway.dll Syntax [PublicAPI] public class WebSocketPayloadTransportService : IPayloadTransportService, IAsyncDisposable Constructors | Improve this Doc View Source WebSocketPayloadTransportService(IServiceProvider, JsonSerializerOptions, ILogger<WebSocketPayloadTransportService>) Initializes a new instance of the WebSocketPayloadTransportService class. Declaration public WebSocketPayloadTransportService(IServiceProvider services, JsonSerializerOptions jsonOptions, ILogger<WebSocketPayloadTransportService> log) Parameters Type Name Description IServiceProvider services The services available to the application. JsonSerializerOptions jsonOptions The JSON options. ILogger < WebSocketPayloadTransportService > log The logging instance for this class. Properties | Improve this Doc View Source IsConnected Gets a value indicating whether the service has successfully connected. Declaration public bool IsConnected { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ConnectAsync(Uri, CancellationToken) Connects to the transport endpoint, enabling I/O operations. Declaration public async Task<Result> ConnectAsync(Uri endpoint, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Uri endpoint The endpoint to connect to. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A connection result which may or may not have succeeded. | Improve this Doc View Source DisconnectAsync(Boolean, CancellationToken) Disconnects from the transport endpoint. Declaration public async Task<Result> DisconnectAsync(bool reconnectionIntended, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Boolean reconnectionIntended Whether reconnection is intended. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A connection result which may or may not have succeeded. | Improve this Doc View Source DisposeAsync() Declaration public async ValueTask DisposeAsync() Returns Type Description ValueTask | Improve this Doc View Source ReceivePayloadAsync(CancellationToken) Asynchronously receives a payload. Declaration public async Task<Result<IPayload>> ReceivePayloadAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPayload >> A receive result which may or may not have succeeded. Remarks This method should be thread-safe in conjunction with SendPayloadAsync(IPayload, CancellationToken) . | Improve this Doc View Source SendPayloadAsync(IPayload, CancellationToken) Asynchronously sends a payload. Declaration public async Task<Result> SendPayloadAsync(IPayload payload, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IPayload payload The payload. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A send result which may or may not have succeeded. Remarks This method should be thread-safe in conjunction with ReceivePayloadAsync(CancellationToken) . Implements IPayloadTransportService System.IAsyncDisposable"
  },
  "api/Remora.Discord.Hosting.Extensions.HostBuilderExtensions.html": {
    "href": "api/Remora.Discord.Hosting.Extensions.HostBuilderExtensions.html",
    "title": "Class HostBuilderExtensions | Remora.Discord",
    "keywords": "Class HostBuilderExtensions Defines extension methods for the IHostBuilder interface. Inheritance Object HostBuilderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Hosting.Extensions Assembly : Remora.Discord.Hosting.dll Syntax [PublicAPI] public static class HostBuilderExtensions Methods | Improve this Doc View Source AddDiscordService(IHostBuilder, Func<IServiceProvider, String>) Adds the required services for Remora Discord and a IHostedService implementation. Declaration public static IHostBuilder AddDiscordService(this IHostBuilder hostBuilder, Func<IServiceProvider, string> tokenFactory) Parameters Type Name Description IHostBuilder hostBuilder The host builder. Func < IServiceProvider , String > tokenFactory A function that retrieves the bot token. Returns Type Description IHostBuilder The service collection, with the services added."
  },
  "api/Remora.Discord.Hosting.Extensions.html": {
    "href": "api/Remora.Discord.Hosting.Extensions.html",
    "title": "Namespace Remora.Discord.Hosting.Extensions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Hosting.Extensions Classes HostBuilderExtensions Defines extension methods for the IHostBuilder interface."
  },
  "api/Remora.Discord.Hosting.Options.DiscordServiceOptions.html": {
    "href": "api/Remora.Discord.Hosting.Options.DiscordServiceOptions.html",
    "title": "Class DiscordServiceOptions | Remora.Discord",
    "keywords": "Class DiscordServiceOptions Defines a set of options used by the background gateway service. Inheritance Object DiscordServiceOptions Implements IEquatable < DiscordServiceOptions > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Hosting.Options Assembly : Remora.Discord.Hosting.dll Syntax public class DiscordServiceOptions : IEquatable<DiscordServiceOptions> Constructors | Improve this Doc View Source DiscordServiceOptions(Boolean) Defines a set of options used by the background gateway service. Declaration public DiscordServiceOptions(bool TerminateApplicationOnCriticalGatewayErrors = true) Parameters Type Name Description Boolean TerminateApplicationOnCriticalGatewayErrors Whether the service should stop the application if a critical gateway error is encountered. Properties | Improve this Doc View Source TerminateApplicationOnCriticalGatewayErrors Declaration public bool TerminateApplicationOnCriticalGatewayErrors { get; set; } Property Value Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Remora.Discord.Hosting.Options.html": {
    "href": "api/Remora.Discord.Hosting.Options.html",
    "title": "Namespace Remora.Discord.Hosting.Options | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Hosting.Options Classes DiscordServiceOptions Defines a set of options used by the background gateway service."
  },
  "api/Remora.Discord.Hosting.Services.DiscordService.html": {
    "href": "api/Remora.Discord.Hosting.Services.DiscordService.html",
    "title": "Class DiscordService | Remora.Discord",
    "keywords": "Class DiscordService The IHostedService that will run discord in the background. Inheritance Object BackgroundService DiscordService Implements IHostedService IDisposable Inherited Members BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.Dispose() BackgroundService.ExecuteTask Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Hosting.Services Assembly : Remora.Discord.Hosting.dll Syntax [PublicAPI] public class DiscordService : BackgroundService, IHostedService, IDisposable Constructors | Improve this Doc View Source DiscordService(DiscordGatewayClient, IHostApplicationLifetime, IOptions<DiscordServiceOptions>, ILogger<DiscordService>) Initializes a new instance of the DiscordService class. Declaration public DiscordService(DiscordGatewayClient gatewayClient, IHostApplicationLifetime lifetime, IOptions<DiscordServiceOptions> options, ILogger<DiscordService> logger) Parameters Type Name Description DiscordGatewayClient gatewayClient The gateway client. IHostApplicationLifetime lifetime The application lifetime. IOptions < DiscordServiceOptions > options The service options. ILogger < DiscordService > logger The ILogger . Methods | Improve this Doc View Source ExecuteAsync(CancellationToken) Declaration protected override async Task ExecuteAsync(CancellationToken stoppingToken) Parameters Type Name Description CancellationToken stoppingToken Returns Type Description Task Overrides BackgroundService.ExecuteAsync(CancellationToken) Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable"
  },
  "api/Remora.Discord.Hosting.Services.html": {
    "href": "api/Remora.Discord.Hosting.Services.html",
    "title": "Namespace Remora.Discord.Hosting.Services | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Hosting.Services Classes DiscordService The IHostedService that will run discord in the background."
  },
  "api/Remora.Discord.Interactivity.Extensions.html": {
    "href": "api/Remora.Discord.Interactivity.Extensions.html",
    "title": "Namespace Remora.Discord.Interactivity.Extensions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Interactivity.Extensions Classes ServiceCollectionExtensions Provides extension methods for the IServiceCollection interface."
  },
  "api/Remora.Discord.Interactivity.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Remora.Discord.Interactivity.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Remora.Discord",
    "keywords": "Class ServiceCollectionExtensions Provides extension methods for the IServiceCollection interface. Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Interactivity.Extensions Assembly : Remora.Discord.Interactivity.dll Syntax [PublicAPI] public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddInteractiveEntity(IServiceCollection, Type) Adds an interactive entity to the service collection. Declaration public static IServiceCollection AddInteractiveEntity(this IServiceCollection serviceCollection, Type entityType) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Type entityType The entity type. Returns Type Description IServiceCollection The collection, with the entity added. | Improve this Doc View Source AddInteractiveEntity<TEntity>(IServiceCollection) Adds an interactive entity to the service collection. Declaration public static IServiceCollection AddInteractiveEntity<TEntity>(this IServiceCollection serviceCollection) where TEntity : class, IInteractiveEntity Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The collection, with the entity added. Type Parameters Name Description TEntity The entity type. | Improve this Doc View Source AddInteractivity(IServiceCollection) Adds the services required for interactivity. Declaration public static IServiceCollection AddInteractivity(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The collection, with the added services."
  },
  "api/Remora.Discord.Interactivity.html": {
    "href": "api/Remora.Discord.Interactivity.html",
    "title": "Namespace Remora.Discord.Interactivity | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Interactivity Classes InMemoryPersistenceHelpers Defines various helper methods for working with in-memory persistence. InMemoryPersistentInteractiveEntity Represents an interactive entity with in-memory persistent data. InMemoryPersistentInteractiveEntity<TEntityData> Represents an interactive entity with strongly typed in-memory persistent data. Interfaces IButtonInteractiveEntity Represents an entity that responds to button interactions. IInteractiveEntity Marker interface for interactive entities. IModalInteractiveEntity Represents an entity that responds to modal submissions. ISelectMenuInteractiveEntity Represents an entity that responds to selection menu interactions."
  },
  "api/Remora.Discord.Interactivity.IButtonInteractiveEntity.html": {
    "href": "api/Remora.Discord.Interactivity.IButtonInteractiveEntity.html",
    "title": "Interface IButtonInteractiveEntity | Remora.Discord",
    "keywords": "Interface IButtonInteractiveEntity Represents an entity that responds to button interactions. Inherited Members IInteractiveEntity.IsInterestedAsync(Nullable<ComponentType>, String, CancellationToken) Namespace : Remora.Discord.Interactivity Assembly : Remora.Discord.Interactivity.dll Syntax [PublicAPI] public interface IButtonInteractiveEntity : IInteractiveEntity Methods | Improve this Doc View Source HandleInteractionAsync(IUser, String, CancellationToken) Handles a button interaction; that is, a user pressed a button attached to a message. Declaration Task<Result> HandleInteractionAsync(IUser user, string customID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IUser user The user who pressed the button. String customID The button's own unique ID. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded."
  },
  "api/Remora.Discord.Interactivity.IInteractiveEntity.html": {
    "href": "api/Remora.Discord.Interactivity.IInteractiveEntity.html",
    "title": "Interface IInteractiveEntity | Remora.Discord",
    "keywords": "Interface IInteractiveEntity Marker interface for interactive entities. Namespace : Remora.Discord.Interactivity Assembly : Remora.Discord.Interactivity.dll Syntax [PublicAPI] public interface IInteractiveEntity Methods | Improve this Doc View Source IsInterestedAsync(Nullable<ComponentType>, String, CancellationToken) Determines if the entity is interested in an interaction for the given component type and custom ID. Declaration Task<Result<bool>> IsInterestedAsync(ComponentType? componentType, string customID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Nullable < ComponentType > componentType The component type, or null if the interaction is not bound to a particular component type. This is generally the case for modal interactions. String customID The custom ID. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < Boolean >> true if the entity is interested; otherwise, false. Remarks An interested entity will be allowed to handle the interaction, and more than one entity may indicate interest for a single interaction. Multiple interested entities will run in parallel, though access to persistent in-memory entity data will be synchronized."
  },
  "api/Remora.Discord.Interactivity.IModalInteractiveEntity.html": {
    "href": "api/Remora.Discord.Interactivity.IModalInteractiveEntity.html",
    "title": "Interface IModalInteractiveEntity | Remora.Discord",
    "keywords": "Interface IModalInteractiveEntity Represents an entity that responds to modal submissions. Inherited Members IInteractiveEntity.IsInterestedAsync(Nullable<ComponentType>, String, CancellationToken) Namespace : Remora.Discord.Interactivity Assembly : Remora.Discord.Interactivity.dll Syntax public interface IModalInteractiveEntity : IInteractiveEntity Methods | Improve this Doc View Source HandleInteractionAsync(IUser, String, IReadOnlyList<IPartialMessageComponent>, CancellationToken) Handles a modal submission; that is, a user submitted a modal form. Declaration Task<Result> HandleInteractionAsync(IUser user, string customID, IReadOnlyList<IPartialMessageComponent> components, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IUser user The user who submitted the modal. String customID The modal's own unique ID. IReadOnlyList < IPartialMessageComponent > components The components submitted with the modal. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded."
  },
  "api/Remora.Discord.Interactivity.InMemoryPersistenceHelpers.html": {
    "href": "api/Remora.Discord.Interactivity.InMemoryPersistenceHelpers.html",
    "title": "Class InMemoryPersistenceHelpers | Remora.Discord",
    "keywords": "Class InMemoryPersistenceHelpers Defines various helper methods for working with in-memory persistence. Inheritance Object InMemoryPersistenceHelpers Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Interactivity Assembly : Remora.Discord.Interactivity.dll Syntax [PublicAPI] public static class InMemoryPersistenceHelpers Methods | Improve this Doc View Source CreateNonceKey(String) Creates a cache key for the specified nonce. Declaration public static object CreateNonceKey(string nonce) Parameters Type Name Description String nonce The nonce. Returns Type Description Object The cache key."
  },
  "api/Remora.Discord.Interactivity.InMemoryPersistentInteractiveEntity.html": {
    "href": "api/Remora.Discord.Interactivity.InMemoryPersistentInteractiveEntity.html",
    "title": "Class InMemoryPersistentInteractiveEntity | Remora.Discord",
    "keywords": "Class InMemoryPersistentInteractiveEntity Represents an interactive entity with in-memory persistent data. Inheritance Object InMemoryPersistentInteractiveEntity InMemoryPersistentInteractiveEntity<TEntityData> Implements IInteractiveEntity Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Interactivity Assembly : Remora.Discord.Interactivity.dll Syntax [PublicAPI] public abstract class InMemoryPersistentInteractiveEntity : IInteractiveEntity Properties | Improve this Doc View Source DeleteData Gets or sets a value indicating whether the persistent data should be deleted after the entity finishes using it. Declaration public bool DeleteData { get; protected set; } Property Value Type Description Boolean | Improve this Doc View Source Nonce Gets the nonce used to look up the data object. Declaration public abstract string Nonce { get; } Property Value Type Description String Methods | Improve this Doc View Source IsInterestedAsync(Nullable<ComponentType>, String, CancellationToken) Determines if the entity is interested in an interaction for the given component type and custom ID. Declaration public abstract Task<Result<bool>> IsInterestedAsync(ComponentType? componentType, string customID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Nullable < ComponentType > componentType The component type, or null if the interaction is not bound to a particular component type. This is generally the case for modal interactions. String customID The custom ID. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < Boolean >> true if the entity is interested; otherwise, false. Remarks An interested entity will be allowed to handle the interaction, and more than one entity may indicate interest for a single interaction. Multiple interested entities will run in parallel, though access to persistent in-memory entity data will be synchronized. Implements IInteractiveEntity"
  },
  "api/Remora.Discord.Interactivity.InMemoryPersistentInteractiveEntity-1.html": {
    "href": "api/Remora.Discord.Interactivity.InMemoryPersistentInteractiveEntity-1.html",
    "title": "Class InMemoryPersistentInteractiveEntity<TEntityData> | Remora.Discord",
    "keywords": "Class InMemoryPersistentInteractiveEntity<TEntityData> Represents an interactive entity with strongly typed in-memory persistent data. Inheritance Object InMemoryPersistentInteractiveEntity InMemoryPersistentInteractiveEntity<TEntityData> Implements IInteractiveEntity Inherited Members InMemoryPersistentInteractiveEntity.Nonce InMemoryPersistentInteractiveEntity.DeleteData InMemoryPersistentInteractiveEntity.IsInterestedAsync(Nullable<ComponentType>, String, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Interactivity Assembly : Remora.Discord.Interactivity.dll Syntax [PublicAPI] public abstract class InMemoryPersistentInteractiveEntity<TEntityData> : InMemoryPersistentInteractiveEntity, IInteractiveEntity Type Parameters Name Description TEntityData The type of entity data. Properties | Improve this Doc View Source Data Declaration protected TEntityData Data { get; set; } Property Value Type Description TEntityData Implements IInteractiveEntity"
  },
  "api/Remora.Discord.Interactivity.ISelectMenuInteractiveEntity.html": {
    "href": "api/Remora.Discord.Interactivity.ISelectMenuInteractiveEntity.html",
    "title": "Interface ISelectMenuInteractiveEntity | Remora.Discord",
    "keywords": "Interface ISelectMenuInteractiveEntity Represents an entity that responds to selection menu interactions. Inherited Members IInteractiveEntity.IsInterestedAsync(Nullable<ComponentType>, String, CancellationToken) Namespace : Remora.Discord.Interactivity Assembly : Remora.Discord.Interactivity.dll Syntax [PublicAPI] public interface ISelectMenuInteractiveEntity : IInteractiveEntity Methods | Improve this Doc View Source HandleInteractionAsync(IUser, String, IReadOnlyList<String>, CancellationToken) Handles a selection menu interaction; that is, a user selected a set of options from a menu attached to a message. Declaration Task<Result> HandleInteractionAsync(IUser user, string customID, IReadOnlyList<string> values, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description IUser user The user who pressed the button. String customID The button's own custom ID. IReadOnlyList < String > values The selected values. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded."
  },
  "api/Remora.Discord.Interactivity.Responders.html": {
    "href": "api/Remora.Discord.Interactivity.Responders.html",
    "title": "Namespace Remora.Discord.Interactivity.Responders | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Interactivity.Responders Classes InteractivityResponderOptions Defines various options for the interactivity responder."
  },
  "api/Remora.Discord.Interactivity.Responders.InteractivityResponderOptions.html": {
    "href": "api/Remora.Discord.Interactivity.Responders.InteractivityResponderOptions.html",
    "title": "Class InteractivityResponderOptions | Remora.Discord",
    "keywords": "Class InteractivityResponderOptions Defines various options for the interactivity responder. Inheritance Object InteractivityResponderOptions Implements IEquatable < InteractivityResponderOptions > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Interactivity.Responders Assembly : Remora.Discord.Interactivity.dll Syntax public class InteractivityResponderOptions : IEquatable<InteractivityResponderOptions> Constructors | Improve this Doc View Source InteractivityResponderOptions(Boolean) Defines various options for the interactivity responder. Declaration public InteractivityResponderOptions(bool SuppressAutomaticResponses = false) Parameters Type Name Description Boolean SuppressAutomaticResponses true if the responder shouldn't automatically create interaction responses; otherwise, false. Properties | Improve this Doc View Source SuppressAutomaticResponses Declaration public bool SuppressAutomaticResponses { get; set; } Property Value Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Remora.Discord.Interactivity.Services.html": {
    "href": "api/Remora.Discord.Interactivity.Services.html",
    "title": "Namespace Remora.Discord.Interactivity.Services | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Interactivity.Services Classes InteractiveMessageService Defines functionality for sending interactive messages."
  },
  "api/Remora.Discord.Interactivity.Services.InteractiveMessageService.html": {
    "href": "api/Remora.Discord.Interactivity.Services.InteractiveMessageService.html",
    "title": "Class InteractiveMessageService | Remora.Discord",
    "keywords": "Class InteractiveMessageService Defines functionality for sending interactive messages. Inheritance Object InteractiveMessageService Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Interactivity.Services Assembly : Remora.Discord.Interactivity.dll Syntax [PublicAPI] public class InteractiveMessageService Constructors | Improve this Doc View Source InteractiveMessageService(IMemoryCache, FeedbackService) Initializes a new instance of the InteractiveMessageService class. Declaration public InteractiveMessageService(IMemoryCache memoryCache, FeedbackService feedback) Parameters Type Name Description IMemoryCache memoryCache The memory cache. FeedbackService feedback The feedback service. Methods | Improve this Doc View Source SendInteractiveContentsWithPersistentDataAsync<TData>(Snowflake, String, Color, Func<IMessage, String>, Func<IMessage, TData>, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Sends the given embed to the given channel, and creates a piece of in-memory persistent data that will be associated with the created nonce. One nonce and one data instance will be created for each message, and will be associated with each other. Declaration public async Task<Result<IReadOnlyList<IMessage>>> SendInteractiveContentsWithPersistentDataAsync<TData>(Snowflake channel, string contents, Color color, Func<IMessage, string> nonceFactory, Func<IMessage, TData> dataFactory, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) where TData : class Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the embed to. String contents The contents to send. Color color The embed colour. Func < IMessage , String > nonceFactory A factory function to create the nonce which will be used to associate the data with interactive entities. Func < IMessage , TData> dataFactory A factory function to create the data to associate with the nonce. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. Type Parameters Name Description TData The data type. | Improve this Doc View Source SendInteractiveContextualContentWithPersistentDataAsync<TData>(String, Color, Func<IMessage, String>, Func<IMessage, TData>, Nullable<Snowflake>, FeedbackMessageOptions, CancellationToken) Sends the given embed to the current context, and creates a piece of in-memory persistent data that will be associated with the created nonce. One nonce will be created for each message, and the data will be associated with each nonce. Declaration public async Task<Result<IReadOnlyList<IMessage>>> SendInteractiveContextualContentWithPersistentDataAsync<TData>(string contents, Color color, Func<IMessage, string> nonceFactory, Func<IMessage, TData> dataFactory, Snowflake? target = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) where TData : class Parameters Type Name Description String contents The contents to send. Color color The embed colour. Func < IMessage , String > nonceFactory A factory function to create the nonce which will be used to associate the data with interactive entities. Func < IMessage , TData> dataFactory A factory function to create the data to associate with the nonce. Nullable < Remora.Rest.Core.Snowflake > target The target user to mention, if any. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. Type Parameters Name Description TData The data type. | Improve this Doc View Source SendInteractiveContextualEmbedWithPersistentDataAsync<TData>(Embed, Func<IMessage, String>, Func<IMessage, TData>, FeedbackMessageOptions, CancellationToken) Sends the given embed to the current context, and creates a piece of in-memory persistent data that will be associated with the created nonce. Declaration public async Task<Result<IMessage>> SendInteractiveContextualEmbedWithPersistentDataAsync<TData>(Embed embed, Func<IMessage, string> nonceFactory, Func<IMessage, TData> dataFactory, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) where TData : class Parameters Type Name Description Embed embed The embed. Func < IMessage , String > nonceFactory A factory function to create the nonce which will be used to associate the data with interactive entities. Func < IMessage , TData> dataFactory A factory function to create the data to associate with the nonce. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A Task representing the asynchronous operation. Type Parameters Name Description TData The data type. | Improve this Doc View Source SendInteractiveEmbedWithPersistentDataAsync<TData>(Snowflake, Embed, Func<IMessage, String>, Func<IMessage, TData>, FeedbackMessageOptions, CancellationToken) Sends the given embed to the given channel, and creates a piece of in-memory persistent data that will be associated with the created nonce. Declaration public async Task<Result<IMessage>> SendInteractiveEmbedWithPersistentDataAsync<TData>(Snowflake channel, Embed embed, Func<IMessage, string> nonceFactory, Func<IMessage, TData> dataFactory, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) where TData : class Parameters Type Name Description Remora.Rest.Core.Snowflake channel The channel to send the embed to. Embed embed The embed. Func < IMessage , String > nonceFactory A factory function to create the nonce which will be used to associate the data with interactive entities. Func < IMessage , TData> dataFactory A factory function to create the data to associate with the nonce. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A Task representing the asynchronous operation. Type Parameters Name Description TData The data type. | Improve this Doc View Source SendInteractivePrivateContentWithPersistentDataAsync<TData>(Snowflake, String, Color, Func<IMessage, String>, Func<IMessage, TData>, FeedbackMessageOptions, CancellationToken) Sends the given string to the given user in their private DM channel, and creates a piece of in-memory persistent data that will be associated with the created nonce. One nonce will be created for each message, and the data will be associated with each nonce. Declaration public async Task<Result<IReadOnlyList<IMessage>>> SendInteractivePrivateContentWithPersistentDataAsync<TData>(Snowflake user, string contents, Color color, Func<IMessage, string> nonceFactory, Func<IMessage, TData> dataFactory, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) where TData : class Parameters Type Name Description Remora.Rest.Core.Snowflake user The ID of the user to send the string to. String contents The contents to send. Color color The embed colour. Func < IMessage , String > nonceFactory A factory function to create the nonce which will be used to associate the data with interactive entities. Func < IMessage , TData> dataFactory A factory function to create the data to associate with the nonce. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A Task representing the asynchronous operation. Type Parameters Name Description TData The data type. | Improve this Doc View Source SendInteractivePrivateEmbedWithPersistentDataAsync<TData>(Snowflake, Embed, Func<IMessage, String>, Func<IMessage, TData>, FeedbackMessageOptions, CancellationToken) Sends the given embed to the he given user in their private DM channel, and creates a piece of in-memory persistent data that will be associated with the created nonce. Declaration public async Task<Result<IMessage>> SendInteractivePrivateEmbedWithPersistentDataAsync<TData>(Snowflake user, Embed embed, Func<IMessage, string> nonceFactory, Func<IMessage, TData> dataFactory, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) where TData : class Parameters Type Name Description Remora.Rest.Core.Snowflake user The ID of the user to send the embed to. Embed embed The embed. Func < IMessage , String > nonceFactory A factory function to create the nonce which will be used to associate the data with interactive entities. Func < IMessage , TData> dataFactory A factory function to create the data to associate with the nonce. FeedbackMessageOptions options The message options to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A Task representing the asynchronous operation. Type Parameters Name Description TData The data type. Extension Methods InteractiveMessageServiceExtensions.SendPaginatedMessageAsync(InteractiveMessageService, Snowflake, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken) InteractiveMessageServiceExtensions.SendContextualPaginatedMessageAsync(InteractiveMessageService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken) InteractiveMessageServiceExtensions.SendPrivatePaginatedMessageAsync(InteractiveMessageService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)"
  },
  "api/Remora.Discord.Pagination.Extensions.html": {
    "href": "api/Remora.Discord.Pagination.Extensions.html",
    "title": "Namespace Remora.Discord.Pagination.Extensions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Pagination.Extensions Classes InteractiveMessageServiceExtensions Defines extension methods to the InteractiveMessageService class. ServiceCollectionExtensions Defines extension methods for the IServiceCollection interface."
  },
  "api/Remora.Discord.Pagination.Extensions.InteractiveMessageServiceExtensions.html": {
    "href": "api/Remora.Discord.Pagination.Extensions.InteractiveMessageServiceExtensions.html",
    "title": "Class InteractiveMessageServiceExtensions | Remora.Discord",
    "keywords": "Class InteractiveMessageServiceExtensions Defines extension methods to the InteractiveMessageService class. Inheritance Object InteractiveMessageServiceExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Pagination.Extensions Assembly : Remora.Discord.Pagination.dll Syntax [PublicAPI] public static class InteractiveMessageServiceExtensions Methods | Improve this Doc View Source SendContextualPaginatedMessageAsync(InteractiveMessageService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken) Sends a paginated message to the current context. Declaration public static async Task<Result<IMessage>> SendContextualPaginatedMessageAsync(this InteractiveMessageService interactiveMessages, Snowflake sourceUser, IReadOnlyList<Embed> pages, PaginatedAppearanceOptions appearance = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description InteractiveMessageService interactiveMessages The interactive message service. Remora.Rest.Core.Snowflake sourceUser The ID of the user that requested the paginated message. Only this user will be able to change page. IReadOnlyList < Embed > pages The pages in the message. PaginatedAppearanceOptions appearance The appearance options for the paginated message. FeedbackMessageOptions options The message options to use. Any provided message components will be included in addition to the pagination's navigation buttons at the root of the component set. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A Task representing the asynchronous operation. | Improve this Doc View Source SendPaginatedMessageAsync(InteractiveMessageService, Snowflake, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken) Sends a paginated message to the given channel. Declaration public static async Task<Result<IMessage>> SendPaginatedMessageAsync(this InteractiveMessageService interactiveMessages, Snowflake channel, Snowflake sourceUser, IReadOnlyList<Embed> pages, PaginatedAppearanceOptions appearance = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description InteractiveMessageService interactiveMessages The interactive message service. Remora.Rest.Core.Snowflake channel The channel. Remora.Rest.Core.Snowflake sourceUser The ID of the user that requested the paginated message. Only this user will be able to change page. IReadOnlyList < Embed > pages The pages in the message. PaginatedAppearanceOptions appearance The appearance options for the paginated message. FeedbackMessageOptions options The message options to use. Any provided message components will be included in addition to the pagination's navigation buttons at the root of the component set. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A Task representing the asynchronous operation. | Improve this Doc View Source SendPrivatePaginatedMessageAsync(InteractiveMessageService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken) Sends a paginated message to the given user in their private DN channel. Declaration public static async Task<Result<IMessage>> SendPrivatePaginatedMessageAsync(this InteractiveMessageService interactiveMessages, Snowflake user, IReadOnlyList<Embed> pages, PaginatedAppearanceOptions appearance = null, FeedbackMessageOptions options = null, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description InteractiveMessageService interactiveMessages The interactive message service. Remora.Rest.Core.Snowflake user The ID of the user to send the embed to. IReadOnlyList < Embed > pages The pages in the message. PaginatedAppearanceOptions appearance The appearance options for the paginated message. FeedbackMessageOptions options The message options to use. Any provided message components will be included in addition to the pagination's navigation buttons at the root of the component set. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A Task representing the asynchronous operation."
  },
  "api/Remora.Discord.Pagination.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Remora.Discord.Pagination.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Remora.Discord",
    "keywords": "Class ServiceCollectionExtensions Defines extension methods for the IServiceCollection interface. Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Pagination.Extensions Assembly : Remora.Discord.Pagination.dll Syntax [PublicAPI] public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddPagination(IServiceCollection) Adds the services required for paginated messages. Declaration public static IServiceCollection AddPagination(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Returns Type Description IServiceCollection The service collection, with pagination."
  },
  "api/Remora.Discord.Pagination.html": {
    "href": "api/Remora.Discord.Pagination.html",
    "title": "Namespace Remora.Discord.Pagination | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Pagination Classes PageFactory Factory class for creating page collections from various sources. PaginatedAppearanceOptions Represents a set of appearance options for a paginated message. PaginatedEmbedFactory Factory class for creating paginated embeds from various sources."
  },
  "api/Remora.Discord.Pagination.PageFactory.html": {
    "href": "api/Remora.Discord.Pagination.PageFactory.html",
    "title": "Class PageFactory | Remora.Discord",
    "keywords": "Class PageFactory Factory class for creating page collections from various sources. Inheritance Object PageFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Pagination Assembly : Remora.Discord.Pagination.dll Syntax [PublicAPI] public static class PageFactory Methods | Improve this Doc View Source FromFields(IEnumerable<IEmbedField>, UInt32, String, Embed) Creates a set of embed pages from a collection of embed fields. Declaration public static List<Embed> FromFields(IEnumerable<IEmbedField> fields, uint maxFieldsPerPage = 5U, string description = \"\", Embed pageBase = null) Parameters Type Name Description IEnumerable < IEmbedField > fields The fields to paginate. UInt32 maxFieldsPerPage The maximum number of embed fields per page. String description The description to display on each page. Embed pageBase The base layout for the page. Returns Type Description List < Embed > The paginated embed."
  },
  "api/Remora.Discord.Pagination.PaginatedAppearanceOptions.html": {
    "href": "api/Remora.Discord.Pagination.PaginatedAppearanceOptions.html",
    "title": "Class PaginatedAppearanceOptions | Remora.Discord",
    "keywords": "Class PaginatedAppearanceOptions Represents a set of appearance options for a paginated message. Inheritance Object PaginatedAppearanceOptions Implements IEquatable < PaginatedAppearanceOptions > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Pagination Assembly : Remora.Discord.Pagination.dll Syntax [PublicAPI] public sealed class PaginatedAppearanceOptions : IEquatable<PaginatedAppearanceOptions> Constructors | Improve this Doc View Source PaginatedAppearanceOptions(ButtonComponent, ButtonComponent, ButtonComponent, ButtonComponent, ButtonComponent, ButtonComponent, String, String) Represents a set of appearance options for a paginated message. Declaration public PaginatedAppearanceOptions(ButtonComponent First, ButtonComponent Previous, ButtonComponent Next, ButtonComponent Last, ButtonComponent Close, ButtonComponent Help, string FooterFormat = \"Page {0}/{1}\", string HelpText = \"This is a paginated message. Use the buttons to change page.\") Parameters Type Name Description ButtonComponent First ButtonComponent Previous ButtonComponent Next ButtonComponent Last ButtonComponent Close ButtonComponent Help String FooterFormat String HelpText Fields | Improve this Doc View Source Default Holds the default appearance instance. Declaration public static readonly PaginatedAppearanceOptions Default Field Value Type Description PaginatedAppearanceOptions Properties | Improve this Doc View Source Buttons Gets the appearance options' configured buttons as an array. Declaration public IReadOnlyList<ButtonComponent> Buttons { get; } Property Value Type Description IReadOnlyList < ButtonComponent > | Improve this Doc View Source Close Declaration public ButtonComponent Close { get; set; } Property Value Type Description ButtonComponent | Improve this Doc View Source First Declaration public ButtonComponent First { get; set; } Property Value Type Description ButtonComponent | Improve this Doc View Source FooterFormat Declaration public string FooterFormat { get; set; } Property Value Type Description String | Improve this Doc View Source Help Declaration public ButtonComponent Help { get; set; } Property Value Type Description ButtonComponent | Improve this Doc View Source HelpText Declaration public string HelpText { get; set; } Property Value Type Description String | Improve this Doc View Source Last Declaration public ButtonComponent Last { get; set; } Property Value Type Description ButtonComponent | Improve this Doc View Source Next Declaration public ButtonComponent Next { get; set; } Property Value Type Description ButtonComponent | Improve this Doc View Source Previous Declaration public ButtonComponent Previous { get; set; } Property Value Type Description ButtonComponent Implements System.IEquatable<T>"
  },
  "api/Remora.Discord.Pagination.PaginatedEmbedFactory.html": {
    "href": "api/Remora.Discord.Pagination.PaginatedEmbedFactory.html",
    "title": "Class PaginatedEmbedFactory | Remora.Discord",
    "keywords": "Class PaginatedEmbedFactory Factory class for creating paginated embeds from various sources. Inheritance Object PaginatedEmbedFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Pagination Assembly : Remora.Discord.Pagination.dll Syntax [PublicAPI] public static class PaginatedEmbedFactory Methods | Improve this Doc View Source PagesFromCollection<TItem>(IReadOnlyList<TItem>, Func<TItem, Embed>, String) Creates a simple paginated list from a collection of items. Declaration public static IReadOnlyList<IEmbed> PagesFromCollection<TItem>(IReadOnlyList<TItem> items, Func<TItem, Embed> pageBuilder, string emptyCollectionDescription = \"There's nothing here.\") Parameters Type Name Description IReadOnlyList <TItem> items The items. Func <TItem, Embed > pageBuilder A function that builds a page for a single value in the collection. String emptyCollectionDescription The description to use when the collection is empty. Returns Type Description IReadOnlyList < IEmbed > The paginated embed. Type Parameters Name Description TItem The type of the items in the collection. | Improve this Doc View Source PagesFromCollectionAsync<TItem>(IReadOnlyList<TItem>, Func<TItem, Task<Result<Embed>>>, String) Creates a simple paginated list from a collection of items. Declaration public static async Task<IReadOnlyList<Result<Embed>>> PagesFromCollectionAsync<TItem>(IReadOnlyList<TItem> items, Func<TItem, Task<Result<Embed>>> pageBuilder, string emptyCollectionDescription = \"There's nothing here.\") Parameters Type Name Description IReadOnlyList <TItem> items The items. Func <TItem, Task < Remora.Results.Result < Embed >>> pageBuilder A function that builds a page for a single value in the collection. String emptyCollectionDescription The description to use when the collection is empty. Returns Type Description Task < IReadOnlyList < Remora.Results.Result < Embed >>> The paginated embed. Type Parameters Name Description TItem The type of the items in the collection. | Improve this Doc View Source SimpleFieldsFromCollection<TItem>(IReadOnlyList<TItem>, Func<TItem, String>, Func<TItem, String>, String) Creates a simple paginated list from a collection of items. Declaration public static IReadOnlyList<Embed> SimpleFieldsFromCollection<TItem>(IReadOnlyList<TItem> items, Func<TItem, string> titleSelector, Func<TItem, string> valueSelector, string emptyCollectionDescription = \"There's nothing here.\") Parameters Type Name Description IReadOnlyList <TItem> items The items. Func <TItem, String > titleSelector A function that selects the title for each field. Func <TItem, String > valueSelector A function that selects the value for each field. String emptyCollectionDescription The description to use when the collection is empty. Returns Type Description IReadOnlyList < Embed > The paginated embed. Type Parameters Name Description TItem The type of the items in the collection."
  },
  "api/Remora.Discord.Rest.API.AbstractDiscordRestAPI.html": {
    "href": "api/Remora.Discord.Rest.API.AbstractDiscordRestAPI.html",
    "title": "Class AbstractDiscordRestAPI | Remora.Discord",
    "keywords": "Class AbstractDiscordRestAPI Acts as an abstract base for REST API instances. Inheritance Object AbstractDiscordRestAPI DiscordRestApplicationAPI DiscordRestAuditLogAPI DiscordRestChannelAPI DiscordRestEmojiAPI DiscordRestGatewayAPI DiscordRestGuildAPI DiscordRestGuildScheduledEventAPI DiscordRestInteractionAPI DiscordRestInviteAPI DiscordRestOAuth2API DiscordRestStageInstanceAPI DiscordRestStickerAPI DiscordRestTemplateAPI DiscordRestUserAPI DiscordRestVoiceAPI DiscordRestWebhookAPI Implements Remora.Rest.IRestCustomizable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public abstract class AbstractDiscordRestAPI : IRestCustomizable Constructors | Improve this Doc View Source AbstractDiscordRestAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the AbstractDiscordRestAPI class. Declaration protected AbstractDiscordRestAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord-specialized Http client. JsonSerializerOptions jsonOptions The Remora-specialized JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Properties | Improve this Doc View Source JsonOptions Gets the JsonSerializerOptions available to the API instance. Declaration protected JsonSerializerOptions JsonOptions { get; } Property Value Type Description JsonSerializerOptions | Improve this Doc View Source RateLimitCache Gets the rate limit memory cache. Declaration protected ICacheProvider RateLimitCache { get; } Property Value Type Description ICacheProvider | Improve this Doc View Source RestHttpClient Gets the Remora.Rest.RestHttpClient`1 available to the API instance. Declaration protected IRestHttpClient RestHttpClient { get; } Property Value Type Description Remora.Rest.IRestHttpClient Methods | Improve this Doc View Source WithCustomization(Action<RestRequestBuilder>) Declaration public RestRequestCustomization WithCustomization(Action<RestRequestBuilder> requestCustomizer) Parameters Type Name Description Action < Remora.Rest.RestRequestBuilder > requestCustomizer Returns Type Description Remora.Rest.RestRequestCustomization Explicit Interface Implementations | Improve this Doc View Source IRestCustomizable.RemoveCustomization(RestRequestCustomization) Declaration void IRestCustomizable.RemoveCustomization(RestRequestCustomization customization) Parameters Type Name Description Remora.Rest.RestRequestCustomization customization Implements Remora.Rest.IRestCustomizable"
  },
  "api/Remora.Discord.Rest.API.DiscordRestApplicationAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestApplicationAPI.html",
    "title": "Class DiscordRestApplicationAPI | Remora.Discord",
    "keywords": "Class DiscordRestApplicationAPI Represents the Discord application API. Inheritance Object AbstractDiscordRestAPI DiscordRestApplicationAPI Implements Remora.Rest.IRestCustomizable IDiscordRestApplicationAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestApplicationAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestApplicationAPI Constructors | Improve this Doc View Source DiscordRestApplicationAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestApplicationAPI class. Declaration public DiscordRestApplicationAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source BulkOverwriteGlobalApplicationCommandsAsync(Snowflake, IReadOnlyList<IBulkApplicationCommandData>, CancellationToken) Overwrites all global commands with the given command set. Any commands not in the set will be deleted. Declaration public virtual async Task<Result<IReadOnlyList<IApplicationCommand>>> BulkOverwriteGlobalApplicationCommandsAsync(Snowflake applicationID, IReadOnlyList<IBulkApplicationCommandData> commands, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. IReadOnlyList < IBulkApplicationCommandData > commands The commands. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IApplicationCommand >>> A creation result which may or may not have succeeded. | Improve this Doc View Source BulkOverwriteGuildApplicationCommandsAsync(Snowflake, Snowflake, IReadOnlyList<IBulkApplicationCommandData>, CancellationToken) Overwrites all guild commands with the given command set. Any commands not in the set will be deleted. Declaration public virtual async Task<Result<IReadOnlyList<IApplicationCommand>>> BulkOverwriteGuildApplicationCommandsAsync(Snowflake applicationID, Snowflake guildID, IReadOnlyList<IBulkApplicationCommandData> commands, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. IReadOnlyList < IBulkApplicationCommandData > commands The commands. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IApplicationCommand >>> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateGlobalApplicationCommandAsync(Snowflake, String, String, Optional<IReadOnlyList<IApplicationCommandOption>>, Optional<ApplicationCommandType>, Optional<IReadOnlyDictionary<String, String>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IDiscordPermissionSet>, Optional<Nullable<Boolean>>, CancellationToken) Creates a new global command. Declaration public virtual async Task<Result<IApplicationCommand>> CreateGlobalApplicationCommandAsync(Snowflake applicationID, string name, string description, Optional<IReadOnlyList<IApplicationCommandOption>> options = default(Optional<IReadOnlyList<IApplicationCommandOption>>), Optional<ApplicationCommandType> type = default(Optional<ApplicationCommandType>), Optional<IReadOnlyDictionary<string, string>> nameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IReadOnlyDictionary<string, string>> descriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IDiscordPermissionSet> defaultMemberPermissions = default(Optional<IDiscordPermissionSet>), Optional<bool?> dmPermission = default(Optional<bool?>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String name The name of the command. 3-32 characters. String description The description of the command. 1-100 characters. Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> options The parameters for the command. Remora.Rest.Core.Optional < ApplicationCommandType > type The type of the application command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> nameLocalizations The localized names of the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> descriptionLocalizations The localized descriptions of the command. Remora.Rest.Core.Optional < IDiscordPermissionSet > defaultMemberPermissions The permissions required to execute the command. Remora.Rest.Core.Optional < Nullable < Boolean >> dmPermission Whether this command is executable in DMs. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A creation result which may or may not have succeeded. Remarks Creating a new command with the same name as an existing command will overwrite the old command. | Improve this Doc View Source CreateGuildApplicationCommandAsync(Snowflake, Snowflake, String, String, Optional<IReadOnlyList<IApplicationCommandOption>>, Optional<ApplicationCommandType>, Optional<IReadOnlyDictionary<String, String>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IDiscordPermissionSet>, CancellationToken) Creates a new guild command. Declaration public virtual async Task<Result<IApplicationCommand>> CreateGuildApplicationCommandAsync(Snowflake applicationID, Snowflake guildID, string name, string description, Optional<IReadOnlyList<IApplicationCommandOption>> options = default(Optional<IReadOnlyList<IApplicationCommandOption>>), Optional<ApplicationCommandType> type = default(Optional<ApplicationCommandType>), Optional<IReadOnlyDictionary<string, string>> nameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IReadOnlyDictionary<string, string>> descriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IDiscordPermissionSet> defaultMemberPermissions = default(Optional<IDiscordPermissionSet>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the command. 3-32 characters. String description The description of the command. 1-100 characters. Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> options The parameters for the command. Remora.Rest.Core.Optional < ApplicationCommandType > type The type of the application command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> nameLocalizations The localized names of the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> descriptionLocalizations The localized descriptions of the command. Remora.Rest.Core.Optional < IDiscordPermissionSet > defaultMemberPermissions The permissions required to execute the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A creation result which may or may not have succeeded. Remarks Creating a new command with the same name as an existing command will overwrite the old command. | Improve this Doc View Source DeleteGlobalApplicationCommandAsync(Snowflake, Snowflake, CancellationToken) Deletes the given global command. Declaration public virtual Task<Result> DeleteGlobalApplicationCommandAsync(Snowflake applicationID, Snowflake commandID, CancellationToken ct) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake commandID The ID of the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteGuildApplicationCommandAsync(Snowflake, Snowflake, Snowflake, CancellationToken) Deletes the given guild command. Declaration public virtual Task<Result> DeleteGuildApplicationCommandAsync(Snowflake applicationID, Snowflake guildID, Snowflake commandID, CancellationToken ct) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake commandID The ID of the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditApplicationCommandPermissionsAsync(Snowflake, Snowflake, Snowflake, IReadOnlyList<IApplicationCommandPermissions>, CancellationToken) Edits command permissions for a specific command in a guild. Declaration public virtual Task<Result<IGuildApplicationCommandPermissions>> EditApplicationCommandPermissionsAsync(Snowflake applicationID, Snowflake guildID, Snowflake commandID, IReadOnlyList<IApplicationCommandPermissions> permissions, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake commandID The ID of the command. IReadOnlyList < IApplicationCommandPermissions > permissions The permissions to overwrite the existing ones with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildApplicationCommandPermissions >> An edit result which may or may not have succeeded. Remarks This method requires a bearer token authorized with the applications.commands.permissions.update scope. | Improve this Doc View Source EditGlobalApplicationCommandAsync(Snowflake, Snowflake, Optional<String>, Optional<String>, Optional<IReadOnlyList<IApplicationCommandOption>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IDiscordPermissionSet>, Optional<Nullable<Boolean>>, CancellationToken) Edits a new global command. Declaration public virtual async Task<Result<IApplicationCommand>> EditGlobalApplicationCommandAsync(Snowflake applicationID, Snowflake commandID, Optional<string> name = default(Optional<string>), Optional<string> description = default(Optional<string>), Optional<IReadOnlyList<IApplicationCommandOption>> options = default(Optional<IReadOnlyList<IApplicationCommandOption>>), Optional<IReadOnlyDictionary<string, string>> nameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IReadOnlyDictionary<string, string>> descriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IDiscordPermissionSet> defaultMemberPermissions = default(Optional<IDiscordPermissionSet>), Optional<bool?> dmPermission = default(Optional<bool?>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake commandID The ID of the command. Remora.Rest.Core.Optional < String > name The name of the command. 3-32 characters. Remora.Rest.Core.Optional < String > description The description of the command. 1-100 characters. Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> options The parameters for the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> nameLocalizations The localized names of the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> descriptionLocalizations The localized descriptions of the command. Remora.Rest.Core.Optional < IDiscordPermissionSet > defaultMemberPermissions The permissions required to execute the command. Remora.Rest.Core.Optional < Nullable < Boolean >> dmPermission Whether this command is executable in DMs. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A creation result which may or may not have succeeded. | Improve this Doc View Source EditGuildApplicationCommandAsync(Snowflake, Snowflake, Snowflake, Optional<String>, Optional<String>, Optional<IReadOnlyList<IApplicationCommandOption>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IReadOnlyDictionary<String, String>>, Optional<IDiscordPermissionSet>, CancellationToken) Edits a new guild command. Declaration public virtual async Task<Result<IApplicationCommand>> EditGuildApplicationCommandAsync(Snowflake applicationID, Snowflake guildID, Snowflake commandID, Optional<string> name = default(Optional<string>), Optional<string> description = default(Optional<string>), Optional<IReadOnlyList<IApplicationCommandOption>> options = default(Optional<IReadOnlyList<IApplicationCommandOption>>), Optional<IReadOnlyDictionary<string, string>> nameLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IReadOnlyDictionary<string, string>> descriptionLocalizations = default(Optional<IReadOnlyDictionary<string, string>>), Optional<IDiscordPermissionSet> defaultMemberPermissions = default(Optional<IDiscordPermissionSet>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake commandID The ID of the command. Remora.Rest.Core.Optional < String > name The name of the command. 3-32 characters. Remora.Rest.Core.Optional < String > description The description of the command. 1-100 characters. Remora.Rest.Core.Optional < IReadOnlyList < IApplicationCommandOption >> options The parameters for the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> nameLocalizations The localized names of the command. Remora.Rest.Core.Optional < IReadOnlyDictionary < String , String >> descriptionLocalizations The localized descriptions of the command. Remora.Rest.Core.Optional < IDiscordPermissionSet > defaultMemberPermissions The permissions required to execute the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A creation result which may or may not have succeeded. Remarks This method requires a bearer token authorized with the applications.commands.permissions.update scope. | Improve this Doc View Source GetApplicationCommandPermissionsAsync(Snowflake, Snowflake, Snowflake, CancellationToken) Gets the permissions for a specific command in a guild. Declaration public virtual Task<Result<IGuildApplicationCommandPermissions>> GetApplicationCommandPermissionsAsync(Snowflake applicationID, Snowflake guildID, Snowflake commandID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake commandID The ID of the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildApplicationCommandPermissions >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGlobalApplicationCommandAsync(Snowflake, Snowflake, CancellationToken) Gets a global command. Declaration public virtual Task<Result<IApplicationCommand>> GetGlobalApplicationCommandAsync(Snowflake applicationID, Snowflake commandID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake commandID The ID of the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGlobalApplicationCommandsAsync(Snowflake, Optional<Boolean>, Optional<String>, CancellationToken) Gets the global commands for the application. Declaration public virtual Task<Result<IReadOnlyList<IApplicationCommand>>> GetGlobalApplicationCommandsAsync(Snowflake applicationID, Optional<bool> withLocalizations = default(Optional<bool>), Optional<string> locale = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Optional < Boolean > withLocalizations Indicates whether the full localization dictionaries should be returned, instead of just the requested locale. Remora.Rest.Core.Optional < String > locale The locale to request the response in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IApplicationCommand >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildApplicationCommandAsync(Snowflake, Snowflake, Snowflake, CancellationToken) Gets a guild command. Declaration public virtual Task<Result<IApplicationCommand>> GetGuildApplicationCommandAsync(Snowflake applicationID, Snowflake guildID, Snowflake commandID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake commandID The ID of the command. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplicationCommand >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildApplicationCommandPermissionsAsync(Snowflake, Snowflake, CancellationToken) Gets the permissions for all of the application's commands in a guild. Declaration public virtual Task<Result<IReadOnlyList<IGuildApplicationCommandPermissions>>> GetGuildApplicationCommandPermissionsAsync(Snowflake applicationID, Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildApplicationCommandPermissions >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildApplicationCommandsAsync(Snowflake, Snowflake, Optional<Boolean>, Optional<String>, CancellationToken) Gets the guild commands for the application. Declaration public virtual Task<Result<IReadOnlyList<IApplicationCommand>>> GetGuildApplicationCommandsAsync(Snowflake applicationID, Snowflake guildID, Optional<bool> withLocalizations = default(Optional<bool>), Optional<string> locale = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > withLocalizations Indicates whether the full localization dictionaries should be returned, instead of just the requested locale. Remora.Rest.Core.Optional < String > locale The locale to request the response in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IApplicationCommand >>> A retrieval result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestApplicationAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestAuditLogAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestAuditLogAPI.html",
    "title": "Class DiscordRestAuditLogAPI | Remora.Discord",
    "keywords": "Class DiscordRestAuditLogAPI Represents the Discord Audit Log API. Inheritance Object AbstractDiscordRestAPI DiscordRestAuditLogAPI Implements Remora.Rest.IRestCustomizable IDiscordRestAuditLogAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestAuditLogAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestAuditLogAPI Constructors | Improve this Doc View Source DiscordRestAuditLogAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestAuditLogAPI class. Declaration public DiscordRestAuditLogAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source GetAuditLogAsync(Snowflake, Optional<Snowflake>, Optional<AuditLogEvent>, Optional<Snowflake>, Optional<Byte>, CancellationToken) Gets an audit log page for the given guild. Declaration public virtual async Task<Result<IAuditLog>> GetAuditLogAsync(Snowflake guildID, Optional<Snowflake> userID = default(Optional<Snowflake>), Optional<AuditLogEvent> actionType = default(Optional<AuditLogEvent>), Optional<Snowflake> before = default(Optional<Snowflake>), Optional<byte> limit = default(Optional<byte>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > userID The ID of the user to filter on. Remora.Rest.Core.Optional < AuditLogEvent > actionType The action type to filter on. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before The ID of the audit log entry to limit searches before. Remora.Rest.Core.Optional < Byte > limit The number of log entries to limit the request to. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IAuditLog >> A retrieval result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestAuditLogAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestChannelAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestChannelAPI.html",
    "title": "Class DiscordRestChannelAPI | Remora.Discord",
    "keywords": "Class DiscordRestChannelAPI Represents the Discord Channel API. Inheritance Object AbstractDiscordRestAPI DiscordRestChannelAPI Implements Remora.Rest.IRestCustomizable IDiscordRestChannelAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestChannelAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestChannelAPI Constructors | Improve this Doc View Source DiscordRestChannelAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestChannelAPI class. Declaration public DiscordRestChannelAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source AddThreadMemberAsync(Snowflake, Snowflake, CancellationToken) Adds the given user to the given thread. Declaration public virtual Task<Result> AddThreadMemberAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to add the user to. Remora.Rest.Core.Snowflake userID The user to add to the thread. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source BulkDeleteMessagesAsync(Snowflake, IReadOnlyList<Snowflake>, Optional<String>, CancellationToken) Bulk deletes a set of messages. Declaration public virtual async Task<Result> BulkDeleteMessagesAsync(Snowflake channelID, IReadOnlyList<Snowflake> messageIDs, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel to delete messages in. IReadOnlyList < Remora.Rest.Core.Snowflake > messageIDs The IDs of the messages to delete. Messages older than 2 weeks may not be deleted in this manner. Any invalid message IDs will count towards the minimum and maximum number of messages to deleted (currently 2 and 100, respectively). Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source CreateChannelInviteAsync(Snowflake, Optional<TimeSpan>, Optional<Int32>, Optional<Boolean>, Optional<Boolean>, Optional<InviteTarget>, Optional<Snowflake>, Optional<Snowflake>, Optional<String>, CancellationToken) Creates an invite to the given channel. Declaration public virtual async Task<Result<IInvite>> CreateChannelInviteAsync(Snowflake channelID, Optional<TimeSpan> maxAge = default(Optional<TimeSpan>), Optional<int> maxUses = default(Optional<int>), Optional<bool> isTemporary = default(Optional<bool>), Optional<bool> isUnique = default(Optional<bool>), Optional<InviteTarget> targetType = default(Optional<InviteTarget>), Optional<Snowflake> targetUserID = default(Optional<Snowflake>), Optional<Snowflake> targetApplicationID = default(Optional<Snowflake>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < TimeSpan > maxAge The duration of the invite before expiry, or 0 for never. Remora.Rest.Core.Optional < Int32 > maxUses The max number of uses, or 0 for unlimited. Remora.Rest.Core.Optional < Boolean > isTemporary Whether this invite grants temporary membership. Remora.Rest.Core.Optional < Boolean > isUnique If true, don't try to reuse an existing invite with the same settings. Remora.Rest.Core.Optional < InviteTarget > targetType The target type for this invite. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > targetUserID The target user ID for this invite. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > targetApplicationID The ID of the application to open for this invite. Required if targetType is EmbeddedApplication . Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IInvite >> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateMessageAsync(Snowflake, Optional<String>, Optional<String>, Optional<Boolean>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IMessageReference>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<Snowflake>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<MessageFlags>, CancellationToken) Posts a message to the given channel. At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. Declaration public virtual async Task<Result<IMessage>> CreateMessageAsync(Snowflake channelID, Optional<string> content = default(Optional<string>), Optional<string> nonce = default(Optional<string>), Optional<bool> isTTS = default(Optional<bool>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IMessageReference> messageReference = default(Optional<IMessageReference>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<Snowflake>> stickerIds = default(Optional<IReadOnlyList<Snowflake>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<MessageFlags> flags = default(Optional<MessageFlags>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < String > nonce A nonce that can be used for optimistic message sending. Remora.Rest.Core.Optional < Boolean > isTTS Whether the message is a TTS message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The rich embeds in the message. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions An object describing the allowed mention types. Remora.Rest.Core.Optional < IMessageReference > messageReference A reference to another message. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components of the message. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> stickerIds The stickers to send with the message (max 3). Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < MessageFlags > flags The message flags. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateReactionAsync(Snowflake, Snowflake, String, CancellationToken) Adds a reaction to the given message. Declaration public virtual Task<Result> CreateReactionAsync(Snowflake channelID, Snowflake messageID, string emoji, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to react with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A creation result which may or may not have succeeded. | Improve this Doc View Source CrosspostMessageAsync(Snowflake, Snowflake, CancellationToken) Crosspost a message otherwise known as \"publishing\" a message from a announcement channel that other guilds can follow. Declaration public virtual async Task<Result<IMessage>> CrosspostMessageAsync(Snowflake channelID, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. | Improve this Doc View Source DeleteAllReactionsAsync(Snowflake, Snowflake, CancellationToken) Deletes all reactions from the given message. Declaration public virtual Task<Result> DeleteAllReactionsAsync(Snowflake channelID, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteAllReactionsForEmojiAsync(Snowflake, Snowflake, String, CancellationToken) Deletes all reactions from the given message. Declaration public virtual Task<Result> DeleteAllReactionsForEmojiAsync(Snowflake channelID, Snowflake messageID, string emoji, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to delete. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteChannelAsync(Snowflake, Optional<String>, CancellationToken) Deletes a channel by its ID. Declaration public virtual Task<Result> DeleteChannelAsync(Snowflake channelID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A retrieval result which may or may not have succeeded. | Improve this Doc View Source DeleteChannelPermissionAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given permission overwrite from the given channel. Declaration public virtual Task<Result> DeleteChannelPermissionAsync(Snowflake channelID, Snowflake overwriteID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake overwriteID The ID of the permission overwrite. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteMessageAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given message. Declaration public virtual Task<Result> DeleteMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteOwnReactionAsync(Snowflake, Snowflake, String, CancellationToken) Deletes a reaction from the given message. Declaration public virtual Task<Result> DeleteOwnReactionAsync(Snowflake channelID, Snowflake messageID, string emoji, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to remove. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteUserReactionAsync(Snowflake, Snowflake, String, Snowflake, CancellationToken) Deletes a reaction from the given message. Declaration public virtual Task<Result> DeleteUserReactionAsync(Snowflake channelID, Snowflake messageID, string emoji, Snowflake user, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to remove. Remora.Rest.Core.Snowflake user The user that has reacted with the emoji. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditChannelPermissionsAsync(Snowflake, Snowflake, Optional<IDiscordPermissionSet>, Optional<IDiscordPermissionSet>, Optional<PermissionOverwriteType>, Optional<String>, CancellationToken) Edits a permission overwrite on the given channel. Declaration public virtual Task<Result> EditChannelPermissionsAsync(Snowflake channelID, Snowflake overwriteID, Optional<IDiscordPermissionSet> allow = default(Optional<IDiscordPermissionSet>), Optional<IDiscordPermissionSet> deny = default(Optional<IDiscordPermissionSet>), Optional<PermissionOverwriteType> type = default(Optional<PermissionOverwriteType>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake overwriteID The ID of the overwrite. Remora.Rest.Core.Optional < IDiscordPermissionSet > allow The permissions to allow. Remora.Rest.Core.Optional < IDiscordPermissionSet > deny The permissions to deny. Remora.Rest.Core.Optional < PermissionOverwriteType > type The new type of the overwrite. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A modification result which may or may not have succeeded. | Improve this Doc View Source EditMessageAsync(Snowflake, Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<Nullable<MessageFlags>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Edits a previously sent message. Declaration public virtual async Task<Result<IMessage>> EditMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<MessageFlags?> flags = default(Optional<MessageFlags?>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > content The new content of the message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds associated with the message. Remora.Rest.Core.Optional < Nullable < MessageFlags >> flags The new message flags. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The allowed mentions for the message. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components of the message. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A modification result which may or may not have succeeded. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source FollowNewsChannelAsync(Snowflake, Snowflake, CancellationToken) Follows a news channel to send messages to a target channel. Declaration public virtual Task<Result<IFollowedChannel>> FollowNewsChannelAsync(Snowflake channelID, Snowflake webhookChannelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the news channel. Remora.Rest.Core.Snowflake webhookChannelID The ID of the channel to send news to. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IFollowedChannel >> A creation result which may or may not have succeeded. | Improve this Doc View Source GetChannelAsync(Snowflake, CancellationToken) Gets a channel by its ID. Declaration public virtual Task<Result<IChannel>> GetChannelAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetChannelInvitesAsync(Snowflake, CancellationToken) Gets the invites for a given channel. Declaration public virtual Task<Result<IReadOnlyList<IInvite>>> GetChannelInvitesAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IInvite >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetChannelMessageAsync(Snowflake, Snowflake, CancellationToken) Gets a message from a channel by its ID. Declaration public virtual Task<Result<IMessage>> GetChannelMessageAsync(Snowflake channelID, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The channel ID. Remora.Rest.Core.Snowflake messageID The message ID. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetChannelMessagesAsync(Snowflake, Optional<Snowflake>, Optional<Snowflake>, Optional<Snowflake>, Optional<Int32>, CancellationToken) Gets the messages for a channel. Declaration public virtual async Task<Result<IReadOnlyList<IMessage>>> GetChannelMessagesAsync(Snowflake channelID, Optional<Snowflake> around = default(Optional<Snowflake>), Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > around The ID of the message to get messages around. This is a mutually exclusive option with before and after . Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before The ID of the message to get messages before. This is a mutually exclusive option with around and after . Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The ID of the message to get messages after. This is a mutually exclusive option with before and around . Remora.Rest.Core.Optional < Int32 > limit The maximum number of messages to retrieve. Ranges between 1 and 100. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetPinnedMessagesAsync(Snowflake, CancellationToken) Gets the pinned messages in the given channel. Declaration public virtual Task<Result<IReadOnlyList<IMessage>>> GetPinnedMessagesAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IMessage >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetReactionsAsync(Snowflake, Snowflake, String, Optional<Snowflake>, Optional<Int32>, CancellationToken) Gets a list of users that have reacted with the given emoji. Declaration public virtual async Task<Result<IReadOnlyList<IUser>>> GetReactionsAsync(Snowflake channelID, Snowflake messageID, string emoji, Optional<Snowflake> after = default(Optional<Snowflake>), Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the message is in. Remora.Rest.Core.Snowflake messageID The ID of the message. String emoji The emoji to filter on. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The users to get after this user ID. Remora.Rest.Core.Optional < Int32 > limit The maximum page size. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IUser >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetThreadMemberAsync(Snowflake, Snowflake, CancellationToken) Gets a thread member object for the specified user if they're a member of the thread. Declaration public virtual Task<Result<IThreadMember>> GetThreadMemberAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the thread. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IThreadMember >> A result which may or may not have succeeded. | Improve this Doc View Source GroupDMAddRecipientAsync(Snowflake, Snowflake, String, Optional<String>, CancellationToken) Adds a recipient to a group DM using their access token. Declaration public virtual Task<Result> GroupDMAddRecipientAsync(Snowflake channelID, Snowflake userID, string accessToken, Optional<string> nickname = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake userID The ID of the user. String accessToken The access token. Remora.Rest.Core.Optional < String > nickname The nickname of the user to use in the group DM. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source GroupDMRemoveRecipientAsync(Snowflake, Snowflake, CancellationToken) Removes a recipient from a group DM. Declaration public virtual Task<Result> GroupDMRemoveRecipientAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source JoinThreadAsync(Snowflake, CancellationToken) Joins the given thread. Declaration public virtual Task<Result> JoinThreadAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to join. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source LeaveThreadAsync(Snowflake, CancellationToken) Leaves the given thread. Declaration public virtual Task<Result> LeaveThreadAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to leave. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source ListThreadMembersAsync(Snowflake, CancellationToken) Lists the members of the given thread. Restricted to bots with with GuildMembers intent. Declaration public virtual Task<Result<IReadOnlyList<IThreadMember>>> ListThreadMembersAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to list the members of. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IThreadMember >>> A result which may or may not have succeeded. | Improve this Doc View Source ModifyChannelAsync(Snowflake, Optional<String>, Optional<Stream>, Optional<ChannelType>, Optional<Nullable<Int32>>, Optional<String>, Optional<Nullable<Boolean>>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<Nullable<VideoQualityMode>>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<String>, Optional<ChannelFlags>, Optional<String>, CancellationToken) Modifies the given channel. Declaration public virtual async Task<Result<IChannel>> ModifyChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<Stream> icon = default(Optional<Stream>), Optional<ChannelType> type = default(Optional<ChannelType>), Optional<int?> position = default(Optional<int?>), Optional<string> topic = default(Optional<string>), Optional<bool?> isNsfw = default(Optional<bool?>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<int?> bitrate = default(Optional<int?>), Optional<int?> userLimit = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<VideoQualityMode?> videoQualityMode = default(Optional<VideoQualityMode?>), Optional<bool> isArchived = default(Optional<bool>), Optional<AutoArchiveDuration> autoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<bool> isLocked = default(Optional<bool>), Optional<AutoArchiveDuration> defaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<string> rtcRegion = default(Optional<string>), Optional<ChannelFlags> flags = default(Optional<ChannelFlags>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Stream > icon The new icon. Remora.Rest.Core.Optional < ChannelType > type The new type of the channel. Only conversions between GuildText and GuildNews are supported. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < String > topic The new topic of the channel. Remora.Rest.Core.Optional < Nullable < Boolean >> isNsfw The new NSFW status of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The new rate limit per user. Remora.Rest.Core.Optional < Nullable < Int32 >> bitrate The new bitrate. Remora.Rest.Core.Optional < Nullable < Int32 >> userLimit The new user limit. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < Nullable < VideoQualityMode >> videoQualityMode The new video quality mode. Remora.Rest.Core.Optional < Boolean > isArchived Whether the thread is archived. Remora.Rest.Core.Optional < AutoArchiveDuration > autoArchiveDuration The time of inactivity after which the thread is archived. Remora.Rest.Core.Optional < Boolean > isLocked Whether the thread is locked. Remora.Rest.Core.Optional < AutoArchiveDuration > defaultAutoArchiveDuration The default time of inactivity after which threads in the channel are archived. Remora.Rest.Core.Optional < String > rtcRegion The channel's voice region. Automatic when null. Remora.Rest.Core.Optional < ChannelFlags > flags The channel flags to use. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGroupDMChannelAsync(Snowflake, Optional<String>, Optional<Stream>, CancellationToken) Modifies the given group DM channel. Declaration public virtual Task<Result<IChannel>> ModifyGroupDMChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<Stream> icon = default(Optional<Stream>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Stream > icon The new icon. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGuildNewsChannelAsync(Snowflake, Optional<String>, Optional<ChannelType>, Optional<Nullable<Int32>>, Optional<String>, Optional<Nullable<Boolean>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<String>, CancellationToken) Modifies the given guild news channel. Declaration public virtual Task<Result<IChannel>> ModifyGuildNewsChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<ChannelType> type = default(Optional<ChannelType>), Optional<int?> position = default(Optional<int?>), Optional<string> topic = default(Optional<string>), Optional<bool?> isNsfw = default(Optional<bool?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < ChannelType > type The new type of the channel. Only conversions between GuildText and GuildNews are supported. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < String > topic The new topic of the channel. Remora.Rest.Core.Optional < Nullable < Boolean >> isNsfw The new NSFW status of the channel. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildStageChannelAsync(Snowflake, Optional<String>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<String>, Optional<String>, CancellationToken) Modifies the given guild stage channel. Declaration public virtual Task<Result<IChannel>> ModifyGuildStageChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<int?> position = default(Optional<int?>), Optional<int?> bitrate = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<string> rtcRegion = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < Nullable < Int32 >> bitrate The new bitrate. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < String > rtcRegion The channel's voice region. Automatic when null. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildTextChannelAsync(Snowflake, Optional<String>, Optional<ChannelType>, Optional<Nullable<Int32>>, Optional<String>, Optional<Nullable<Boolean>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<AutoArchiveDuration>, Optional<String>, CancellationToken) Modifies the given guild text channel. Declaration public virtual Task<Result<IChannel>> ModifyGuildTextChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<ChannelType> type = default(Optional<ChannelType>), Optional<int?> position = default(Optional<int?>), Optional<string> topic = default(Optional<string>), Optional<bool?> isNsfw = default(Optional<bool?>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<AutoArchiveDuration> defaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < ChannelType > type The new type of the channel. Only conversions between GuildText and GuildNews are supported. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < String > topic The new topic of the channel. Remora.Rest.Core.Optional < Nullable < Boolean >> isNsfw The new NSFW status of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The new rate limit per user. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < AutoArchiveDuration > defaultAutoArchiveDuration The default time of inactivity after which threads in the channel are archived. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildVoiceChannelAsync(Snowflake, Optional<String>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<Nullable<Int32>>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Nullable<Snowflake>>, Optional<String>, Optional<Nullable<VideoQualityMode>>, Optional<String>, CancellationToken) Modifies the given guild voice channel. Declaration public virtual Task<Result<IChannel>> ModifyGuildVoiceChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<int?> position = default(Optional<int?>), Optional<int?> bitrate = default(Optional<int?>), Optional<int?> userLimit = default(Optional<int?>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake?> parentId = default(Optional<Snowflake?>), Optional<string> rtcRegion = default(Optional<string>), Optional<VideoQualityMode?> videoQualityMode = default(Optional<VideoQualityMode?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Nullable < Int32 >> position The new position of the channel in the listing. Remora.Rest.Core.Optional < Nullable < Int32 >> bitrate The new bitrate. Remora.Rest.Core.Optional < Nullable < Int32 >> userLimit The new user limit. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The new permission overwrites. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> parentId The new parent category ID. Remora.Rest.Core.Optional < String > rtcRegion The channel's voice region. Automatic when null. Remora.Rest.Core.Optional < Nullable < VideoQualityMode >> videoQualityMode The new video quality mode. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyThreadChannelAsync(Snowflake, Optional<String>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<Boolean>, Optional<Nullable<Int32>>, Optional<ChannelFlags>, Optional<String>, CancellationToken) Modifies the given channel. Declaration public virtual Task<Result<IChannel>> ModifyThreadChannelAsync(Snowflake channelID, Optional<string> name = default(Optional<string>), Optional<bool> isArchived = default(Optional<bool>), Optional<AutoArchiveDuration> autoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<bool> isLocked = default(Optional<bool>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<ChannelFlags> flags = default(Optional<ChannelFlags>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Optional < String > name The new name of the channel. Remora.Rest.Core.Optional < Boolean > isArchived Whether the thread is archived. Remora.Rest.Core.Optional < AutoArchiveDuration > autoArchiveDuration The time of inactivity after which the thread is archived. Remora.Rest.Core.Optional < Boolean > isLocked Whether the thread is locked. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The new rate limit per user. Remora.Rest.Core.Optional < ChannelFlags > flags The channel flags to use. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A modification result which may or may not have succeeded. | Improve this Doc View Source PinMessageAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Pins the given message in the channel. Declaration public virtual Task<Result> PinMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source RemoveThreadMemberAsync(Snowflake, Snowflake, CancellationToken) Removes the given user from the given thread. Declaration public virtual Task<Result> RemoveThreadMemberAsync(Snowflake channelID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The thread to remove the user from. Remora.Rest.Core.Snowflake userID The user to remove from the thread. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source StartThreadWithMessageAsync(Snowflake, Snowflake, String, Optional<AutoArchiveDuration>, Optional<Nullable<Int32>>, Optional<String>, CancellationToken) Starts a new public thread from an existing message. Declaration public virtual async Task<Result<IChannel>> StartThreadWithMessageAsync(Snowflake channelID, Snowflake messageID, string name, Optional<AutoArchiveDuration> autoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The channel to start the thread in. Remora.Rest.Core.Snowflake messageID The message to start the thread from. String name The name of the thread. Remora.Rest.Core.Optional < AutoArchiveDuration > autoArchiveDuration The time of inactivity after which to archive the thread. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The message rate limit per user, that is, the number of seconds they have to wait between sending messages. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A result which may or may not have succeeded. | Improve this Doc View Source StartThreadWithoutMessageAsync(Snowflake, String, AutoArchiveDuration, ChannelType, Optional<Boolean>, Optional<Nullable<Int32>>, Optional<String>, CancellationToken) Starts a new private thread. Declaration public virtual async Task<Result<IChannel>> StartThreadWithoutMessageAsync(Snowflake channelID, string name, AutoArchiveDuration autoArchiveDuration, ChannelType type, Optional<bool> isInvitable = default(Optional<bool>), Optional<int?> rateLimitPerUser = default(Optional<int?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The channel to start the thread in. String name The name of the thread. AutoArchiveDuration autoArchiveDuration The time of inactivity after which to archive the thread. ChannelType type The thread type to create. Discord defaults to creating a GuildPrivateThread , but this is likely to change in a future API version. Prefer always setting this explicitly. Remora.Rest.Core.Optional < Boolean > isInvitable The value indicating whether non-moderators can add other non-moderators to the thread. Remora.Rest.Core.Optional < Nullable < Int32 >> rateLimitPerUser The message rate limit per user, that is, the number of seconds they have to wait between sending messages. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A result which may or may not have succeeded. | Improve this Doc View Source TriggerTypingIndicatorAsync(Snowflake, CancellationToken) Triggers the typing indicator for the current user in the given channel. Declaration public virtual Task<Result> TriggerTypingIndicatorAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source UnpinMessageAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Unpins the given message in the channel. Declaration public virtual Task<Result> UnpinMessageAsync(Snowflake channelID, Snowflake messageID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestChannelAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestEmojiAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestEmojiAPI.html",
    "title": "Class DiscordRestEmojiAPI | Remora.Discord",
    "keywords": "Class DiscordRestEmojiAPI Represents the Discord Emoji API. Inheritance Object AbstractDiscordRestAPI DiscordRestEmojiAPI Implements Remora.Rest.IRestCustomizable IDiscordRestEmojiAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestEmojiAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestEmojiAPI Constructors | Improve this Doc View Source DiscordRestEmojiAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestEmojiAPI class. Declaration public DiscordRestEmojiAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source CreateGuildEmojiAsync(Snowflake, String, Stream, IReadOnlyList<Snowflake>, Optional<String>, CancellationToken) Creates a new emoji for the given guild with the given parameters. Declaration public virtual async Task<Result<IEmoji>> CreateGuildEmojiAsync(Snowflake guildID, string name, Stream image, IReadOnlyList<Snowflake> roles, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the new emoji. Stream image The image data. IReadOnlyList < Remora.Rest.Core.Snowflake > roles The roles that the emoji will be restricted to. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IEmoji >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteGuildEmojiAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given emoji. Declaration public virtual Task<Result> DeleteGuildEmojiAsync(Snowflake guildID, Snowflake emojiID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake emojiID The ID of the emoji. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source GetGuildEmojiAsync(Snowflake, Snowflake, CancellationToken) Gets the emoji on the given guild with the given ID. Declaration public virtual Task<Result<IEmoji>> GetGuildEmojiAsync(Snowflake guildID, Snowflake emojiID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake emojiID The ID of the emoji. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IEmoji >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListGuildEmojisAsync(Snowflake, CancellationToken) Gets a list of emojis for the given guild. Declaration public virtual Task<Result<IReadOnlyList<IEmoji>>> ListGuildEmojisAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IEmoji >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildEmojiAsync(Snowflake, Snowflake, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<String>, CancellationToken) Modifies the given emoji. Declaration public virtual Task<Result<IEmoji>> ModifyGuildEmojiAsync(Snowflake guildID, Snowflake emojiID, Optional<string> name = default(Optional<string>), Optional<IReadOnlyList<Snowflake>> roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake emojiID The ID of the emoji. Remora.Rest.Core.Optional < String > name The new name of the emoji. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> roles The new restricted roles. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IEmoji >> A modification result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestEmojiAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestGatewayAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestGatewayAPI.html",
    "title": "Class DiscordRestGatewayAPI | Remora.Discord",
    "keywords": "Class DiscordRestGatewayAPI Represents the Discord Gateway REST API. Inheritance Object AbstractDiscordRestAPI DiscordRestGatewayAPI Implements Remora.Rest.IRestCustomizable IDiscordRestGatewayAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestGatewayAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestGatewayAPI Constructors | Improve this Doc View Source DiscordRestGatewayAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestGatewayAPI class. Declaration public DiscordRestGatewayAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source GetGatewayAsync(CancellationToken) Gets a gateway endpoint. Declaration public virtual Task<Result<IGatewayEndpoint>> GetGatewayAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGatewayEndpoint >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGatewayBotAsync(CancellationToken) Gets a gateway endpoint for bots. Declaration public virtual Task<Result<IGatewayEndpoint>> GetGatewayBotAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGatewayEndpoint >> A retrieval result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestGatewayAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestGuildAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestGuildAPI.html",
    "title": "Class DiscordRestGuildAPI | Remora.Discord",
    "keywords": "Class DiscordRestGuildAPI Represents the Discord Guild API. Inheritance Object AbstractDiscordRestAPI DiscordRestGuildAPI Implements Remora.Rest.IRestCustomizable IDiscordRestGuildAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestGuildAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestGuildAPI Constructors | Improve this Doc View Source DiscordRestGuildAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestGuildAPI class. Declaration public DiscordRestGuildAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source AddGuildMemberAsync(Snowflake, Snowflake, String, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<Boolean>, Optional<Boolean>, CancellationToken) Adds a user to the guild using their OAuth2 access token. Declaration public virtual Task<Result<IGuildMember>> AddGuildMemberAsync(Snowflake guildID, Snowflake userID, string accessToken, Optional<string> nickname = default(Optional<string>), Optional<IReadOnlyList<Snowflake>> roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<bool> isMuted = default(Optional<bool>), Optional<bool> isDeafened = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user to add. String accessToken The OAuth2 access token. Remora.Rest.Core.Optional < String > nickname The user's new nickname. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> roles The roles the user should have. Remora.Rest.Core.Optional < Boolean > isMuted Whether the user should be muted in voice channels. Remora.Rest.Core.Optional < Boolean > isDeafened Whether the user should be deafened in voice channels. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A creation result that may or may not have succeeded. Remarks The returned value will be null if the user is already in the guild. | Improve this Doc View Source AddGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional<String>, CancellationToken) Adds a role to a guild member. Declaration public virtual Task<Result> AddGuildMemberRoleAsync(Snowflake guildID, Snowflake userID, Snowflake roleID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source BeginGuildPruneAsync(Snowflake, Optional<Int32>, Optional<Boolean>, Optional<IReadOnlyList<Snowflake>>, Optional<String>, CancellationToken) Initiates a prune of the guild members. Declaration public virtual async Task<Result<IPruneCount>> BeginGuildPruneAsync(Snowflake guildID, Optional<int> days = default(Optional<int>), Optional<bool> computePruneCount = default(Optional<bool>), Optional<IReadOnlyList<Snowflake>> includeRoles = default(Optional<IReadOnlyList<Snowflake>>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > days The days a user needs to have been inactive for them to be pruned. Remora.Rest.Core.Optional < Boolean > computePruneCount Whether the number of pruned users should be computed and returned. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> includeRoles The roles that should be included in a prune operation. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPruneCount >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source CreateGuildAsync(String, Optional<Stream>, Optional<VerificationLevel>, Optional<MessageNotificationLevel>, Optional<ExplicitContentFilterLevel>, Optional<IReadOnlyList<IRole>>, Optional<IReadOnlyList<IPartialChannel>>, Optional<Snowflake>, Optional<TimeSpan>, Optional<Snowflake>, Optional<SystemChannelFlags>, CancellationToken) Creates a new guild. This can only by used by bots in less than 10 guilds. Declaration public virtual async Task<Result<IGuild>> CreateGuildAsync(string name, Optional<Stream> icon = default(Optional<Stream>), Optional<VerificationLevel> verificationLevel = default(Optional<VerificationLevel>), Optional<MessageNotificationLevel> defaultMessageNotifications = default(Optional<MessageNotificationLevel>), Optional<ExplicitContentFilterLevel> explicitContentFilter = default(Optional<ExplicitContentFilterLevel>), Optional<IReadOnlyList<IRole>> roles = default(Optional<IReadOnlyList<IRole>>), Optional<IReadOnlyList<IPartialChannel>> channels = default(Optional<IReadOnlyList<IPartialChannel>>), Optional<Snowflake> afkChannelID = default(Optional<Snowflake>), Optional<TimeSpan> afkTimeout = default(Optional<TimeSpan>), Optional<Snowflake> systemChannelID = default(Optional<Snowflake>), Optional<SystemChannelFlags> systemChannelFlags = default(Optional<SystemChannelFlags>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String name The name of the guild (2-100 characters). Remora.Rest.Core.Optional < Stream > icon The icon. Remora.Rest.Core.Optional < VerificationLevel > verificationLevel The verification level. Remora.Rest.Core.Optional < MessageNotificationLevel > defaultMessageNotifications The default message notification level. Remora.Rest.Core.Optional < ExplicitContentFilterLevel > explicitContentFilter The explicit content filter level. Remora.Rest.Core.Optional < IReadOnlyList < IRole >> roles The new guild roles. Remora.Rest.Core.Optional < IReadOnlyList < IPartialChannel >> channels The new guild channels. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > afkChannelID The ID of the AFK channel. Remora.Rest.Core.Optional < TimeSpan > afkTimeout The number of seconds until AFK timeout. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > systemChannelID The ID of the system message channel. Remora.Rest.Core.Optional < SystemChannelFlags > systemChannelFlags The channel flags to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source CreateGuildBanAsync(Snowflake, Snowflake, Optional<Int32>, Optional<String>, CancellationToken) Bans the given user. Declaration public virtual Task<Result> CreateGuildBanAsync(Snowflake guildID, Snowflake userID, Optional<int> deleteMessageDays = default(Optional<int>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < Int32 > deleteMessageDays The number of days to delete messages for (0-7). Defaults to 0. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source CreateGuildChannelAsync(Snowflake, String, Optional<ChannelType>, Optional<String>, Optional<Int32>, Optional<Int32>, Optional<Int32>, Optional<Int32>, Optional<IReadOnlyList<IPartialPermissionOverwrite>>, Optional<Snowflake>, Optional<Boolean>, Optional<AutoArchiveDuration>, Optional<String>, CancellationToken) Creates a new channel for the guild. Declaration public virtual Task<Result<IChannel>> CreateGuildChannelAsync(Snowflake guildID, string name, Optional<ChannelType> type = default(Optional<ChannelType>), Optional<string> topic = default(Optional<string>), Optional<int> bitrate = default(Optional<int>), Optional<int> userLimit = default(Optional<int>), Optional<int> rateLimitPerUser = default(Optional<int>), Optional<int> position = default(Optional<int>), Optional<IReadOnlyList<IPartialPermissionOverwrite>> permissionOverwrites = default(Optional<IReadOnlyList<IPartialPermissionOverwrite>>), Optional<Snowflake> parentID = default(Optional<Snowflake>), Optional<bool> isNsfw = default(Optional<bool>), Optional<AutoArchiveDuration> defaultAutoArchiveDuration = default(Optional<AutoArchiveDuration>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the new channel. Remora.Rest.Core.Optional < ChannelType > type The type of the new channel. Remora.Rest.Core.Optional < String > topic The topic of the new channel. Remora.Rest.Core.Optional < Int32 > bitrate The bitrate of the new channel, if it is a voice channel. Remora.Rest.Core.Optional < Int32 > userLimit The maximum number of users in the channel, if it is a voice channel. Remora.Rest.Core.Optional < Int32 > rateLimitPerUser The number of seconds a user has to wait between messages. Remora.Rest.Core.Optional < Int32 > position The sorting position of the new channel. Remora.Rest.Core.Optional < IReadOnlyList < IPartialPermissionOverwrite >> permissionOverwrites The permission overwrites of the new channel. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > parentID The ID of the parent category of the new channel. Remora.Rest.Core.Optional < Boolean > isNsfw Whether the new channel is NSFW. Remora.Rest.Core.Optional < AutoArchiveDuration > defaultAutoArchiveDuration The default auto archival duration for threads. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A creation result which may or may not have succeeded. | Improve this Doc View Source CreateGuildRoleAsync(Snowflake, Optional<String>, Optional<IDiscordPermissionSet>, Optional<Color>, Optional<Boolean>, Optional<Stream>, Optional<String>, Optional<Boolean>, Optional<String>, CancellationToken) Creates a new guild role. Declaration public virtual async Task<Result<IRole>> CreateGuildRoleAsync(Snowflake guildID, Optional<string> name = default(Optional<string>), Optional<IDiscordPermissionSet> permissions = default(Optional<IDiscordPermissionSet>), Optional<Color> colour = default(Optional<Color>), Optional<bool> isHoisted = default(Optional<bool>), Optional<Stream> icon = default(Optional<Stream>), Optional<string> unicodeEmoji = default(Optional<string>), Optional<bool> isMentionable = default(Optional<bool>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < String > name The name of the new role. Remora.Rest.Core.Optional < IDiscordPermissionSet > permissions The permissions of the new role. Remora.Rest.Core.Optional < Color > colour The colour of the new role. Remora.Rest.Core.Optional < Boolean > isHoisted Whether the new role is displayed separately in the sidebar. Remora.Rest.Core.Optional < Stream > icon The role's icon image. Remora.Rest.Core.Optional < String > unicodeEmoji The role's unicode emoji icon. Remora.Rest.Core.Optional < Boolean > isMentionable Whether the new role is mentionable. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IRole >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteGuildAsync(Snowflake, CancellationToken) Deletes the guild with the given ID. Declaration public virtual Task<Result> DeleteGuildAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteGuildRoleAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given role. Declaration public virtual Task<Result> DeleteGuildRoleAsync(Snowflake guildId, Snowflake roleID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source GetGuildAsync(Snowflake, Optional<Boolean>, CancellationToken) Gets the guild with the given ID. Declaration public virtual Task<Result<IGuild>> GetGuildAsync(Snowflake guildID, Optional<bool> withCounts = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > withCounts Whether member and presence counts should be included. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildBanAsync(Snowflake, Snowflake, CancellationToken) Gets a ban object for the given user. Declaration public virtual Task<Result<IBan>> GetGuildBanAsync(Snowflake guildID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IBan >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildBansAsync(Snowflake, Optional<Int32>, Optional<Snowflake>, Optional<Snowflake>, CancellationToken) Gets a list of bans. Declaration public virtual Task<Result<IReadOnlyList<IBan>>> GetGuildBansAsync(Snowflake guildID, Optional<int> limit = default(Optional<int>), Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > limit The maximum number of bans to return (max 1000). Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before The ID of the ban to get bans before. This is a mutually exclusive option with after , though Discord accepts both at the same time. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The ID of the ban to get bans after. This is a mutually exclusive option with before , though Discord accepts both at the same time. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IBan >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildChannelsAsync(Snowflake, CancellationToken) Gets the channels of the given guild. Declaration public virtual Task<Result<IReadOnlyList<IChannel>>> GetGuildChannelsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IChannel >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildIntegrationsAsync(Snowflake, Optional<Boolean>, CancellationToken) Gets the integrations for the guild. Declaration public virtual Task<Result<IReadOnlyList<IIntegration>>> GetGuildIntegrationsAsync(Snowflake guildID, Optional<bool> includeApplications = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > includeApplications Whether bot and OAuth2 webhook integrations should be included. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IIntegration >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildInvitesAsync(Snowflake, CancellationToken) Gets the invites for the guild. Declaration public virtual Task<Result<IReadOnlyList<IInvite>>> GetGuildInvitesAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IInvite >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildMemberAsync(Snowflake, Snowflake, CancellationToken) Gets member information about the given user. Declaration public virtual Task<Result<IGuildMember>> GetGuildMemberAsync(Snowflake guildID, Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildPreviewAsync(Snowflake, CancellationToken) Gets a preview of the guild with the given ID. This is only for public guilds. Declaration public virtual Task<Result<IGuildPreview>> GetGuildPreviewAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildPreview >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildPruneCountAsync(Snowflake, Optional<Int32>, Optional<IReadOnlyList<Snowflake>>, CancellationToken) Gets the number of users that would br pruned in a prune operation. Declaration public virtual async Task<Result<IPruneCount>> GetGuildPruneCountAsync(Snowflake guildID, Optional<int> days = default(Optional<int>), Optional<IReadOnlyList<Snowflake>> includeRoles = default(Optional<IReadOnlyList<Snowflake>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > days The days a user needs to have been inactive for them to be pruned. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> includeRoles The roles that should be included in a prune operation. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPruneCount >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildRolesAsync(Snowflake, CancellationToken) Gets the roles in the guild. Declaration public virtual Task<Result<IReadOnlyList<IRole>>> GetGuildRolesAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IRole >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildVanityUrlAsync(Snowflake, CancellationToken) Gets the vanity invite for the given guild. Declaration public virtual Task<Result<IPartialInvite>> GetGuildVanityUrlAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IPartialInvite >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildVoiceRegionsAsync(Snowflake, CancellationToken) Gets the voice regions for the guild. Declaration public virtual Task<Result<IReadOnlyList<IVoiceRegion>>> GetGuildVoiceRegionsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IVoiceRegion >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWelcomeScreenAsync(Snowflake, CancellationToken) Gets the guild's welcome screen. Declaration public virtual Task<Result<IWelcomeScreen>> GetGuildWelcomeScreenAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWelcomeScreen >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWidgetAsync(Snowflake, CancellationToken) Gets the status and invite widget for the guild. Declaration public Task<Result<IGuildWidget>> GetGuildWidgetAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildWidget >> A result which may or may not have succeeded. | Improve this Doc View Source GetGuildWidgetImageAsync(Snowflake, Optional<WidgetImageStyle>, CancellationToken) Gets the image for the guild widget. Declaration public virtual Task<Result<Stream>> GetGuildWidgetImageAsync(Snowflake guildID, Optional<WidgetImageStyle> style = default(Optional<WidgetImageStyle>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < WidgetImageStyle > style The image style. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < Stream >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWidgetSettingsAsync(Snowflake, CancellationToken) Gets the guild widget. Declaration public virtual Task<Result<IGuildWidgetSettings>> GetGuildWidgetSettingsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildWidgetSettings >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListActiveGuildThreadsAsync(Snowflake, CancellationToken) Lists the active threads in the given guild. Declaration public Task<Result<IGuildThreadQueryResponse>> ListActiveGuildThreadsAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildThreadQueryResponse >> A result which may or may not have succeeded. | Improve this Doc View Source ListGuildMembersAsync(Snowflake, Optional<Int32>, Optional<Snowflake>, CancellationToken) Gets a list of guild members. Declaration public virtual async Task<Result<IReadOnlyList<IGuildMember>>> ListGuildMembersAsync(Snowflake guildID, Optional<int> limit = default(Optional<int>), Optional<Snowflake> after = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Int32 > limit The maximum number of guild members to return (1-1000). Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after The highest user ID in the previously retrieved page. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildMember >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyCurrentMemberAsync(Snowflake, Optional<String>, Optional<String>, CancellationToken) Modifies the current member. Declaration public virtual Task<Result<IGuildMember>> ModifyCurrentMemberAsync(Snowflake guildID, Optional<string> nickname = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < String > nickname The new nickname. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A modification result which may or may not have succeeded, containing the updated member. | Improve this Doc View Source ModifyCurrentUserVoiceStateAsync(Snowflake, Snowflake, Optional<Boolean>, Optional<Nullable<DateTimeOffset>>, CancellationToken) Modifies the voice state of the current user. Declaration public virtual Task<Result> ModifyCurrentUserVoiceStateAsync(Snowflake guildID, Snowflake channelID, Optional<bool> suppress = default(Optional<bool>), Optional<DateTimeOffset?> requestToSpeakTimestamp = default(Optional<DateTimeOffset?>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake channelID The ID of the voice channel the user is currently in. Remora.Rest.Core.Optional < Boolean > suppress Whether to toggle the user's suppression state. Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> requestToSpeakTimestamp The time when the user requested to speak. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildAsync(Snowflake, Optional<String>, Optional<Nullable<VerificationLevel>>, Optional<Nullable<MessageNotificationLevel>>, Optional<Nullable<ExplicitContentFilterLevel>>, Optional<Nullable<Snowflake>>, Optional<TimeSpan>, Optional<Stream>, Optional<Snowflake>, Optional<Stream>, Optional<Stream>, Optional<Stream>, Optional<Nullable<Snowflake>>, Optional<SystemChannelFlags>, Optional<Nullable<Snowflake>>, Optional<Nullable<Snowflake>>, Optional<String>, Optional<IReadOnlyList<GuildFeature>>, Optional<String>, Optional<Boolean>, Optional<String>, CancellationToken) Modifies the guild with the given ID. Declaration public virtual async Task<Result<IGuild>> ModifyGuildAsync(Snowflake guildID, Optional<string> name = default(Optional<string>), Optional<VerificationLevel?> verificationLevel = default(Optional<VerificationLevel?>), Optional<MessageNotificationLevel?> defaultMessageNotifications = default(Optional<MessageNotificationLevel?>), Optional<ExplicitContentFilterLevel?> explicitContentFilter = default(Optional<ExplicitContentFilterLevel?>), Optional<Snowflake?> afkChannelID = default(Optional<Snowflake?>), Optional<TimeSpan> afkTimeout = default(Optional<TimeSpan>), Optional<Stream> icon = default(Optional<Stream>), Optional<Snowflake> ownerID = default(Optional<Snowflake>), Optional<Stream> splash = default(Optional<Stream>), Optional<Stream> discoverySplash = default(Optional<Stream>), Optional<Stream> banner = default(Optional<Stream>), Optional<Snowflake?> systemChannelID = default(Optional<Snowflake?>), Optional<SystemChannelFlags> systemChannelFlags = default(Optional<SystemChannelFlags>), Optional<Snowflake?> rulesChannelID = default(Optional<Snowflake?>), Optional<Snowflake?> publicUpdatesChannelID = default(Optional<Snowflake?>), Optional<string> preferredLocale = default(Optional<string>), Optional<IReadOnlyList<GuildFeature>> features = default(Optional<IReadOnlyList<GuildFeature>>), Optional<string> description = default(Optional<string>), Optional<bool> isPremiumProgressBarEnabled = default(Optional<bool>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < String > name The new name of the guild. Remora.Rest.Core.Optional < Nullable < VerificationLevel >> verificationLevel The new verification level of the guild. Remora.Rest.Core.Optional < Nullable < MessageNotificationLevel >> defaultMessageNotifications The new default notification level of the guild. Remora.Rest.Core.Optional < Nullable < ExplicitContentFilterLevel >> explicitContentFilter The new explicit filter level of the guild. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> afkChannelID The ID of the new AFK channel. Remora.Rest.Core.Optional < TimeSpan > afkTimeout The new AFK timeout. Remora.Rest.Core.Optional < Stream > icon The new icon. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > ownerID The ID of the new owner. Remora.Rest.Core.Optional < Stream > splash The new splash. Remora.Rest.Core.Optional < Stream > discoverySplash The new discovery splash. Remora.Rest.Core.Optional < Stream > banner The new banner. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> systemChannelID The ID of the new channel for system messages. Remora.Rest.Core.Optional < SystemChannelFlags > systemChannelFlags The new system channel flags. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> rulesChannelID The ID of the new channel for rules. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> publicUpdatesChannelID The ID of the new channel for public updates. Remora.Rest.Core.Optional < String > preferredLocale The new preferred locale. Remora.Rest.Core.Optional < IReadOnlyList < GuildFeature >> features The new guild features. Remora.Rest.Core.Optional < String > description The new description. Remora.Rest.Core.Optional < Boolean > isPremiumProgressBarEnabled Whether the guild has the boost progress bar enabled. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGuildChannelPositionsAsync(Snowflake, IReadOnlyList<(Snowflake ChannelID, Nullable<Int32> Position, Nullable<Boolean> LockPermissions, Nullable<Snowflake> ParentID)>, Optional<String>, CancellationToken) Modifies the positions of a set of channels in the guild. Declaration public virtual Task<Result> ModifyGuildChannelPositionsAsync(Snowflake guildID, IReadOnlyList<(Snowflake ChannelID, int? Position, bool? LockPermissions, Snowflake? ParentID)> positionModifications, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. IReadOnlyList < (T1, T2, T3, T4) < Remora.Rest.Core.Snowflake , Nullable < Int32 >, Nullable < Boolean >, Nullable < Remora.Rest.Core.Snowflake >>> positionModifications The new positions of the modified channels. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildMemberAsync(Snowflake, Snowflake, Optional<String>, Optional<IReadOnlyList<Snowflake>>, Optional<Nullable<Boolean>>, Optional<Nullable<Boolean>>, Optional<Nullable<Snowflake>>, Optional<Nullable<DateTimeOffset>>, Optional<String>, CancellationToken) Modifies attributes of a guild member. Declaration public virtual Task<Result> ModifyGuildMemberAsync(Snowflake guildID, Snowflake userID, Optional<string> nickname = default(Optional<string>), Optional<IReadOnlyList<Snowflake>> roles = default(Optional<IReadOnlyList<Snowflake>>), Optional<bool?> isMuted = default(Optional<bool?>), Optional<bool?> isDeafened = default(Optional<bool?>), Optional<Snowflake?> channelID = default(Optional<Snowflake?>), Optional<DateTimeOffset?> communicationDisabledUntil = default(Optional<DateTimeOffset?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < String > nickname The new nickname of the user. Remora.Rest.Core.Optional < IReadOnlyList < Remora.Rest.Core.Snowflake >> roles The new roles of the user. Remora.Rest.Core.Optional < Nullable < Boolean >> isMuted The new mute state of the user. Remora.Rest.Core.Optional < Nullable < Boolean >> isDeafened The new deaf state of the user. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> channelID The new voice channel of the user. Remora.Rest.Core.Optional < Nullable < DateTimeOffset >> communicationDisabledUntil The DateTime until the user has communication disabled. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A rest result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildRoleAsync(Snowflake, Snowflake, Optional<String>, Optional<IDiscordPermissionSet>, Optional<Nullable<Color>>, Optional<Nullable<Boolean>>, Optional<Stream>, Optional<String>, Optional<Nullable<Boolean>>, Optional<String>, CancellationToken) Modifies the given role. Declaration public virtual async Task<Result<IRole>> ModifyGuildRoleAsync(Snowflake guildID, Snowflake roleID, Optional<string> name = default(Optional<string>), Optional<IDiscordPermissionSet> permissions = default(Optional<IDiscordPermissionSet>), Optional<Color?> colour = default(Optional<Color?>), Optional<bool?> isHoisted = default(Optional<bool?>), Optional<Stream> icon = default(Optional<Stream>), Optional<string> unicodeEmoji = default(Optional<string>), Optional<bool?> isMentionable = default(Optional<bool?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > name The new name of the role. Remora.Rest.Core.Optional < IDiscordPermissionSet > permissions The new permissions of the role. Remora.Rest.Core.Optional < Nullable < Color >> colour Remora.Rest.Core.Optional < Nullable < Boolean >> isHoisted Whether the role is displayed separately in the sidebar. Remora.Rest.Core.Optional < Stream > icon The role's icon image. Remora.Rest.Core.Optional < String > unicodeEmoji The role's unicode emoji icon. Remora.Rest.Core.Optional < Nullable < Boolean >> isMentionable Whether the role is mentionable. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IRole >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyGuildRolePositionsAsync(Snowflake, IReadOnlyList<(Snowflake RoleID, Optional<Nullable<Int32>> Position)>, Optional<String>, CancellationToken) Modifies the positions of a set of roles in the guild. Declaration public virtual Task<Result<IReadOnlyList<IRole>>> ModifyGuildRolePositionsAsync(Snowflake guildID, IReadOnlyList<(Snowflake RoleID, Optional<int?> Position)> modifiedPositions, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. IReadOnlyList < (T1, T2) < Remora.Rest.Core.Snowflake , Remora.Rest.Core.Optional < Nullable < Int32 >>>> modifiedPositions The modified role positions. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IRole >>> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildWelcomeScreenAsync(Snowflake, Optional<Nullable<Boolean>>, Optional<IReadOnlyList<IWelcomeScreenChannel>>, Optional<String>, Optional<String>, CancellationToken) Modifies the guild's welcome screen. Declaration public virtual Task<Result<IWelcomeScreen>> ModifyGuildWelcomeScreenAsync(Snowflake guildID, Optional<bool?> isEnabled = default(Optional<bool?>), Optional<IReadOnlyList<IWelcomeScreenChannel>> welcomeChannels = default(Optional<IReadOnlyList<IWelcomeScreenChannel>>), Optional<string> description = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Nullable < Boolean >> isEnabled Whether the welcome screen is enabled. Remora.Rest.Core.Optional < IReadOnlyList < IWelcomeScreenChannel >> welcomeChannels The channels displayed. Remora.Rest.Core.Optional < String > description The guild's description. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWelcomeScreen >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildWidgetAsync(Snowflake, Optional<Boolean>, Optional<Nullable<Snowflake>>, Optional<String>, CancellationToken) Modifies the guild widget for the guild. Declaration public virtual Task<Result<IGuildWidgetSettings>> ModifyGuildWidgetAsync(Snowflake guildID, Optional<bool> isEnabled = default(Optional<bool>), Optional<Snowflake?> channelID = default(Optional<Snowflake?>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > isEnabled Whether the widget is enabled. Remora.Rest.Core.Optional < Nullable < Remora.Rest.Core.Snowflake >> channelID The ID of the channel invites will be generated for. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildWidgetSettings >> A modification result which may or may not have succeeded. | Improve this Doc View Source ModifyUserVoiceStateAsync(Snowflake, Snowflake, Snowflake, Optional<Boolean>, CancellationToken) Modifies the voice state of another user. Declaration public virtual Task<Result<IVoiceState>> ModifyUserVoiceStateAsync(Snowflake guildID, Snowflake userID, Snowflake channelID, Optional<bool> suppress = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Snowflake channelID The ID of the voice channel the user is currently in. Remora.Rest.Core.Optional < Boolean > suppress Whether to toggle the user's suppression state. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IVoiceState >> A modification result which may or may not have succeeded. | Improve this Doc View Source RemoveGuildBanAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Unbans the given user. Declaration public virtual Task<Result> RemoveGuildBanAsync(Snowflake guildID, Snowflake userID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source RemoveGuildMemberAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Removes a member from the guild. Declaration public virtual Task<Result> RemoveGuildMemberAsync(Snowflake guildID, Snowflake userID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source RemoveGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional<String>, CancellationToken) Removes a role from a guild member. Declaration public virtual Task<Result> RemoveGuildMemberRoleAsync(Snowflake guildID, Snowflake userID, Snowflake roleID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake userID The ID of the user. Remora.Rest.Core.Snowflake roleID The ID of the role. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source SearchGuildMembersAsync(Snowflake, String, Optional<Int32>, CancellationToken) Gets a list of guild members whose username or nickname start with the query string. Declaration public virtual async Task<Result<IReadOnlyList<IGuildMember>>> SearchGuildMembersAsync(Snowflake guildID, string query, Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String query The query string. Remora.Rest.Core.Optional < Int32 > limit The maximum number of members to return (1-1000). CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildMember >>> A retrieval result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestGuildAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestGuildScheduledEventAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestGuildScheduledEventAPI.html",
    "title": "Class DiscordRestGuildScheduledEventAPI | Remora.Discord",
    "keywords": "Class DiscordRestGuildScheduledEventAPI Represents the Discord Guild Scheduled Event API. Inheritance Object AbstractDiscordRestAPI DiscordRestGuildScheduledEventAPI Implements Remora.Rest.IRestCustomizable IDiscordRestGuildScheduledEventAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax public class DiscordRestGuildScheduledEventAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestGuildScheduledEventAPI Constructors | Improve this Doc View Source DiscordRestGuildScheduledEventAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestGuildScheduledEventAPI class. Declaration public DiscordRestGuildScheduledEventAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source CreateGuildScheduledEventAsync(Snowflake, Optional<Snowflake>, Optional<IGuildScheduledEventEntityMetadata>, String, GuildScheduledEventPrivacyLevel, DateTimeOffset, Optional<DateTimeOffset>, Optional<String>, GuildScheduledEventEntityType, Optional<Stream>, Optional<String>, CancellationToken) Creates a new scheduled event in the guild. Declaration public async Task<Result<IGuildScheduledEvent>> CreateGuildScheduledEventAsync(Snowflake guildID, Optional<Snowflake> channelID, Optional<IGuildScheduledEventEntityMetadata> entityMetadata, string name, GuildScheduledEventPrivacyLevel privacyLevel, DateTimeOffset scheduledStartTime, Optional<DateTimeOffset> scheduledEndTime, Optional<string> description, GuildScheduledEventEntityType entityType, Optional<Stream> image, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild to create the event in. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > channelID The channel ID of the scheduled event, if it is for a stage instance or voice channel. Remora.Rest.Core.Optional < IGuildScheduledEventEntityMetadata > entityMetadata The entity metadata, if any. String name The name of the event (1-100 characters). GuildScheduledEventPrivacyLevel privacyLevel The privacy level of the event. DateTimeOffset scheduledStartTime The time at which the event is scheduled to start. Remora.Rest.Core.Optional < DateTimeOffset > scheduledEndTime The time at which the event is scheduled to end, if any. Remora.Rest.Core.Optional < String > description The description of the event, if any (1-100 characters). GuildScheduledEventEntityType entityType The entity type of the event. Remora.Rest.Core.Optional < Stream > image The image of the event, displayed above the information. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildScheduledEvent >> A creation result which may or may not have succeeded. | Improve this Doc View Source DeleteGuildScheduledEventAsync(Snowflake, Snowflake, CancellationToken) Deletes the given event. Declaration public Task<Result> DeleteGuildScheduledEventAsync(Snowflake guildID, Snowflake eventID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake eventID The ID of the event. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source GetGuildScheduledEventAsync(Snowflake, Snowflake, Optional<Boolean>, CancellationToken) Gets a specific scheduled event in the given guild. Declaration public Task<Result<IGuildScheduledEvent>> GetGuildScheduledEventAsync(Snowflake guildID, Snowflake eventID, Optional<bool> withUserCount = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake eventID The ID of the event. Remora.Rest.Core.Optional < Boolean > withUserCount Whether to include user counts. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildScheduledEvent >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildScheduledEventUsersAsync(Snowflake, Snowflake, Optional<Int32>, Optional<Boolean>, Optional<Snowflake>, Optional<Snowflake>, CancellationToken) Gets a list of users subscribed to an event. Declaration public async Task<Result<IReadOnlyList<IGuildScheduledEventUser>>> GetGuildScheduledEventUsersAsync(Snowflake guildID, Snowflake eventID, Optional<int> limit = default(Optional<int>), Optional<bool> withMember = default(Optional<bool>), Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake eventID The ID of the event. Remora.Rest.Core.Optional < Int32 > limit The maximum number of users to return (max 100). Remora.Rest.Core.Optional < Boolean > withMember Whether member information should be included. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before Restrict the returned users to ones before this ID. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after Restrict the returned users to ones after this ID. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildScheduledEventUser >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListScheduledEventsForGuildAsync(Snowflake, Optional<Boolean>, CancellationToken) Gets a list of scheduled events for the given guild. Declaration public Task<Result<IReadOnlyList<IGuildScheduledEvent>>> ListScheduledEventsForGuildAsync(Snowflake guildID, Optional<bool> withUserCount = default(Optional<bool>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Optional < Boolean > withUserCount Whether subscribed user counts should be included. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IGuildScheduledEvent >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildScheduledEventAsync(Snowflake, Snowflake, Optional<Snowflake>, Optional<IGuildScheduledEventEntityMetadata>, Optional<String>, Optional<GuildScheduledEventPrivacyLevel>, Optional<DateTimeOffset>, Optional<DateTimeOffset>, Optional<String>, Optional<GuildScheduledEventEntityType>, Optional<GuildScheduledEventStatus>, Optional<Stream>, Optional<String>, CancellationToken) Modifies the given scheduled event. Declaration public async Task<Result<IGuildScheduledEvent>> ModifyGuildScheduledEventAsync(Snowflake guildID, Snowflake eventID, Optional<Snowflake> channelID = default(Optional<Snowflake>), Optional<IGuildScheduledEventEntityMetadata> entityMetadata = default(Optional<IGuildScheduledEventEntityMetadata>), Optional<string> name = default(Optional<string>), Optional<GuildScheduledEventPrivacyLevel> privacyLevel = default(Optional<GuildScheduledEventPrivacyLevel>), Optional<DateTimeOffset> scheduledStartTime = default(Optional<DateTimeOffset>), Optional<DateTimeOffset> scheduledEndTime = default(Optional<DateTimeOffset>), Optional<string> description = default(Optional<string>), Optional<GuildScheduledEventEntityType> entityType = default(Optional<GuildScheduledEventEntityType>), Optional<GuildScheduledEventStatus> status = default(Optional<GuildScheduledEventStatus>), Optional<Stream> image = default(Optional<Stream>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. Remora.Rest.Core.Snowflake eventID The ID of the event. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > channelID The new channel ID associated with the event. Remora.Rest.Core.Optional < IGuildScheduledEventEntityMetadata > entityMetadata The new entity metadata. Remora.Rest.Core.Optional < String > name The new name of the event (1-100 characters). Remora.Rest.Core.Optional < GuildScheduledEventPrivacyLevel > privacyLevel The new privacy level of the event. Remora.Rest.Core.Optional < DateTimeOffset > scheduledStartTime The new start time of the event. Remora.Rest.Core.Optional < DateTimeOffset > scheduledEndTime The new end time of the event. Remora.Rest.Core.Optional < String > description The new description of the event (1-100 characters). Remora.Rest.Core.Optional < GuildScheduledEventEntityType > entityType The new entity type associated with the event. Remora.Rest.Core.Optional < GuildScheduledEventStatus > status The new status of the event. Remora.Rest.Core.Optional < Stream > image The new image of the event, displayed above the information. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildScheduledEvent >> A modification result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestGuildScheduledEventAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestInteractionAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestInteractionAPI.html",
    "title": "Class DiscordRestInteractionAPI | Remora.Discord",
    "keywords": "Class DiscordRestInteractionAPI Represents the Discord interaction API. Inheritance Object AbstractDiscordRestAPI DiscordRestInteractionAPI Implements Remora.Rest.IRestCustomizable IDiscordRestInteractionAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestInteractionAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestInteractionAPI Constructors | Improve this Doc View Source DiscordRestInteractionAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestInteractionAPI class. Declaration public DiscordRestInteractionAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source CreateFollowupMessageAsync(Snowflake, String, Optional<String>, Optional<Boolean>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<MessageFlags>, CancellationToken) Creates a followup message. Declaration public virtual Task<Result<IMessage>> CreateFollowupMessageAsync(Snowflake applicationID, string token, Optional<string> content = default(Optional<string>), Optional<bool> isTTS = default(Optional<bool>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<MessageFlags> flags = default(Optional<MessageFlags>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < Boolean > isTTS Whether this message is a TTS message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The embeds in the message. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The set of allowed mentions of the message. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components that should be included with the message. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < MessageFlags > flags The message flags to use. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source CreateInteractionResponseAsync(Snowflake, String, IInteractionResponse, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Creates a response to an interaction from the gateway. Declaration public virtual async Task<Result> CreateInteractionResponseAsync(Snowflake interactionID, string interactionToken, IInteractionResponse response, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake interactionID The ID of the interaction. String interactionToken The interaction token. IInteractionResponse response The response. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteFollowupMessageAsync(Snowflake, String, Snowflake, CancellationToken) Deletes an interaction followup message. Declaration public virtual Task<Result> DeleteFollowupMessageAsync(Snowflake applicationID, string token, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A modification result which may or may not have succeeded. | Improve this Doc View Source DeleteOriginalInteractionResponseAsync(Snowflake, String, CancellationToken) Deletes the original interaction response. Declaration public virtual Task<Result> DeleteOriginalInteractionResponseAsync(Snowflake applicationID, string token, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditFollowupMessageAsync(Snowflake, String, Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Edits an interaction followup message. Declaration public virtual async Task<Result<IMessage>> EditFollowupMessageAsync(Snowflake applicationID, string token, Snowflake messageID, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > content The new content, if any. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds, if any. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The new allowed mentions, if any. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components, if any. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source EditOriginalInteractionResponseAsync(Snowflake, String, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, CancellationToken) Edits the initial interaction response. Declaration public virtual async Task<Result<IMessage>> EditOriginalInteractionResponseAsync(Snowflake applicationID, string token, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Optional < String > content The new content, if any. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds, if any. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The new allowed mentions, if any. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components, if any. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source GetFollowupMessageAsync(Snowflake, String, Snowflake, CancellationToken) Gets a followup message associated with the given interaction. Declaration public virtual Task<Result<IMessage>> GetFollowupMessageAsync(Snowflake applicationID, string token, Snowflake messageID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the bot application. String token The interaction token. Remora.Rest.Core.Snowflake messageID The ID of the message. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. | Improve this Doc View Source GetOriginalInteractionResponseAsync(Snowflake, String, CancellationToken) Gets the message object of the original interaction response. Declaration public virtual Task<Result<IMessage>> GetOriginalInteractionResponseAsync(Snowflake applicationID, string interactionToken, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake applicationID The ID of the application. String interactionToken The interaction token. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestInteractionAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestInviteAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestInviteAPI.html",
    "title": "Class DiscordRestInviteAPI | Remora.Discord",
    "keywords": "Class DiscordRestInviteAPI Represents the Discord Invite API. Inheritance Object AbstractDiscordRestAPI DiscordRestInviteAPI Implements Remora.Rest.IRestCustomizable IDiscordRestInviteAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestInviteAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestInviteAPI Constructors | Improve this Doc View Source DiscordRestInviteAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestInviteAPI class. Declaration public DiscordRestInviteAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source DeleteInviteAsync(String, Optional<String>, CancellationToken) Deletes the given invite code. Declaration public virtual Task<Result<IInvite>> DeleteInviteAsync(string inviteCode, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String inviteCode The invite code. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IInvite >> A deletion result which may or may not have succeeded. | Improve this Doc View Source GetInviteAsync(String, Optional<Boolean>, Optional<Boolean>, Optional<Snowflake>, CancellationToken) Gets an invite object for the given code. Declaration public virtual Task<Result<IInvite>> GetInviteAsync(string inviteCode, Optional<bool> withCounts = default(Optional<bool>), Optional<bool> withExpiration = default(Optional<bool>), Optional<Snowflake> guildScheduledEventID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String inviteCode The invite code. Remora.Rest.Core.Optional < Boolean > withCounts Whether the invite should contain approximate member counts. Remora.Rest.Core.Optional < Boolean > withExpiration Whether the invite should contain the expiration date. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > guildScheduledEventID The scheduled event to include with the invite. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IInvite >> A retrieval result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestInviteAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestOAuth2API.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestOAuth2API.html",
    "title": "Class DiscordRestOAuth2API | Remora.Discord",
    "keywords": "Class DiscordRestOAuth2API Represents the Discord Emoji API. Inheritance Object AbstractDiscordRestAPI DiscordRestOAuth2API Implements Remora.Rest.IRestCustomizable IDiscordRestOAuth2API Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestOAuth2API : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestOAuth2API Constructors | Improve this Doc View Source DiscordRestOAuth2API(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestOAuth2API class. Declaration public DiscordRestOAuth2API(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source GetCurrentAuthorizationInformationAsync(CancellationToken) Gets information about the bot's current authorizations. Declaration public virtual Task<Result<IAuthorizationInformation>> GetCurrentAuthorizationInformationAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IAuthorizationInformation >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetCurrentBotApplicationInformationAsync(CancellationToken) Gets the bot's OAuth2 application object. Flags are typically not included. Declaration public virtual Task<Result<IApplication>> GetCurrentBotApplicationInformationAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IApplication >> A retrieval result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestOAuth2API"
  },
  "api/Remora.Discord.Rest.API.DiscordRestStageInstanceAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestStageInstanceAPI.html",
    "title": "Class DiscordRestStageInstanceAPI | Remora.Discord",
    "keywords": "Class DiscordRestStageInstanceAPI Represents the Discord Stage Instance REST API. Inheritance Object AbstractDiscordRestAPI DiscordRestStageInstanceAPI Implements Remora.Rest.IRestCustomizable IDiscordRestStageInstanceAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestStageInstanceAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestStageInstanceAPI Constructors | Improve this Doc View Source DiscordRestStageInstanceAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestStageInstanceAPI class. Declaration public DiscordRestStageInstanceAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source CreateStageInstanceAsync(Snowflake, String, Optional<StagePrivacyLevel>, Optional<Boolean>, Optional<String>, CancellationToken) Creates a new stage instance associated with the given stage channel. Declaration public virtual Task<Result<IStageInstance>> CreateStageInstanceAsync(Snowflake channelID, string topic, Optional<StagePrivacyLevel> privacyLevel = default(Optional<StagePrivacyLevel>), Optional<bool> sendStartNotification = default(Optional<bool>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the stage channel. String topic The topic of the stage instance (1-120 characters). Remora.Rest.Core.Optional < StagePrivacyLevel > privacyLevel The privacy level of the stage instance. Remora.Rest.Core.Optional < Boolean > sendStartNotification Indicates whether @everyone should be notified that a stage instance has started. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IStageInstance >> A result which may or may not have succeeded. | Improve this Doc View Source DeleteStageInstance(Snowflake, Optional<String>, CancellationToken) Deletes the stage instance associated with the given stage channel. Declaration public virtual Task<Result> DeleteStageInstance(Snowflake channelID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the stage channel. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source GetStageInstanceAsync(Snowflake, CancellationToken) Gets the stage instance associated with the given stage channel. Declaration public virtual Task<Result<IStageInstance>> GetStageInstanceAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the stage channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IStageInstance >> A result which may or may not have succeeded. | Improve this Doc View Source ModifyStageInstanceAsync(Snowflake, Optional<String>, Optional<StagePrivacyLevel>, Optional<String>, CancellationToken) Modifies the stage instance of the given stage channel. Declaration public virtual Task<Result<IStageInstance>> ModifyStageInstanceAsync(Snowflake channelID, Optional<string> topic = default(Optional<string>), Optional<StagePrivacyLevel> privacyLevel = default(Optional<StagePrivacyLevel>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the stage channel. Remora.Rest.Core.Optional < String > topic The topic of the stage instance (1-120 characters). Remora.Rest.Core.Optional < StagePrivacyLevel > privacyLevel The privacy level of the stage instance. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IStageInstance >> A result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestStageInstanceAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestStickerAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestStickerAPI.html",
    "title": "Class DiscordRestStickerAPI | Remora.Discord",
    "keywords": "Class DiscordRestStickerAPI Represents the Discord Sticker API. Inheritance Object AbstractDiscordRestAPI DiscordRestStickerAPI Implements Remora.Rest.IRestCustomizable IDiscordRestStickerAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestStickerAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestStickerAPI Constructors | Improve this Doc View Source DiscordRestStickerAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestStickerAPI class. Declaration public DiscordRestStickerAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source CreateGuildStickerAsync(Snowflake, String, String, String, FileData, Optional<String>, CancellationToken) Creates a new sticker in the given guild. Declaration public virtual async Task<Result<ISticker>> CreateGuildStickerAsync(Snowflake guildId, string name, string description, string tags, FileData file, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. String name The name of the new sticker. String description The description of the new sticker. String tags The tags related to the expression of the sticker. Typically, one would use a single unicode emoji. FileData file The file contents. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < ISticker >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteGuildStickerAsync(Snowflake, Snowflake, Optional<String>, CancellationToken) Deletes the given sticker in the given guild. Declaration public virtual Task<Result> DeleteGuildStickerAsync(Snowflake guildId, Snowflake stickerId, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. Remora.Rest.Core.Snowflake stickerId The ID of the sticker. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source GetGuildStickerAsync(Snowflake, Snowflake, CancellationToken) Gets a specific sticker from a guild. Declaration public virtual Task<Result<ISticker>> GetGuildStickerAsync(Snowflake guildId, Snowflake stickerId, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. Remora.Rest.Core.Snowflake stickerId The ID of the sticker. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < ISticker >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetStickerAsync(Snowflake, CancellationToken) Gets the sticker for the given ID. Declaration public virtual Task<Result<ISticker>> GetStickerAsync(Snowflake id, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake id The ID of the sticker. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < ISticker >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListGuildStickersAsync(Snowflake, CancellationToken) Gets a list of stickers belonging to the given guild. Declaration public virtual Task<Result<IReadOnlyList<ISticker>>> ListGuildStickersAsync(Snowflake guildId, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < ISticker >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ListNitroStickerPacksAsync(CancellationToken) Gets a list of sticker packs available to Nitro subscribers. Declaration public virtual Task<Result<INitroStickerPacks>> ListNitroStickerPacksAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < INitroStickerPacks >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildStickerAsync(Snowflake, Snowflake, Optional<String>, Optional<String>, Optional<String>, Optional<String>, CancellationToken) Modifies the given sticker in the given guild. Declaration public virtual async Task<Result<ISticker>> ModifyGuildStickerAsync(Snowflake guildId, Snowflake stickerId, Optional<string> name = default(Optional<string>), Optional<string> description = default(Optional<string>), Optional<string> tags = default(Optional<string>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildId The ID of the guild. Remora.Rest.Core.Snowflake stickerId The ID of the sticker. Remora.Rest.Core.Optional < String > name The new name, if any. Remora.Rest.Core.Optional < String > description The new description, if any. Remora.Rest.Core.Optional < String > tags The new tags, if any. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for the operation. Returns Type Description Task < Remora.Results.Result < ISticker >> A modification result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestStickerAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestTemplateAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestTemplateAPI.html",
    "title": "Class DiscordRestTemplateAPI | Remora.Discord",
    "keywords": "Class DiscordRestTemplateAPI Represents the Discord REST template API. Inheritance Object AbstractDiscordRestAPI DiscordRestTemplateAPI Implements Remora.Rest.IRestCustomizable IDiscordRestTemplateAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestTemplateAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestTemplateAPI Constructors | Improve this Doc View Source DiscordRestTemplateAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestTemplateAPI class. Declaration public DiscordRestTemplateAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source CreateGuildFromTemplateAsync(String, String, Optional<Stream>, CancellationToken) Creates a new guild from the given template. Declaration public virtual async Task<Result<IGuild>> CreateGuildFromTemplateAsync(string templateCode, string name, Optional<Stream> icon = default(Optional<Stream>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String templateCode The template code. String name The name of the new guild. Remora.Rest.Core.Optional < Stream > icon The icon of the new guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuild >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source CreateGuildTemplateAsync(Snowflake, String, Optional<String>, CancellationToken) Creates a new guild template from the given guild. Declaration public virtual Task<Result<ITemplate>> CreateGuildTemplateAsync(Snowflake guildID, string name, Optional<string> description = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String name The name of the template. Remora.Rest.Core.Optional < String > description The description of the template. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A creation result which may or may not have succeeded. | Improve this Doc View Source DeleteGuildTemplateAsync(Snowflake, String, CancellationToken) Deletes the given guild template. Declaration public virtual Task<Result<ITemplate>> DeleteGuildTemplateAsync(Snowflake guildID, string templateCode, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String templateCode The template code. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A retrieval result which may or may not have succeeded. This contains the deleted template. | Improve this Doc View Source GetGuildTemplatesAsync(Snowflake, CancellationToken) Gets the template for the given guild. Declaration public virtual Task<Result<IReadOnlyList<ITemplate>>> GetGuildTemplatesAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < ITemplate >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetTemplateAsync(String, CancellationToken) Gets the template object for the given code. Declaration public virtual Task<Result<ITemplate>> GetTemplateAsync(string templateCode, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String templateCode The template code. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyGuildTemplateAsync(Snowflake, String, String, Optional<String>, CancellationToken) Modifies the template's metadata. Declaration public virtual Task<Result<ITemplate>> ModifyGuildTemplateAsync(Snowflake guildID, string templateCode, string name, Optional<string> description, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String templateCode The template code. String name The new name of the template. Remora.Rest.Core.Optional < String > description The new description of the template. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A modification result which may or may not have succeeded. | Improve this Doc View Source SyncGuildTemplateAsync(Snowflake, String, CancellationToken) Synchronized the template to the guild's current state. Declaration public virtual Task<Result<ITemplate>> SyncGuildTemplateAsync(Snowflake guildID, string templateCode, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. String templateCode The template code. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < ITemplate >> A retrieval result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestTemplateAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestUserAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestUserAPI.html",
    "title": "Class DiscordRestUserAPI | Remora.Discord",
    "keywords": "Class DiscordRestUserAPI Represents the Discord User API. Inheritance Object AbstractDiscordRestAPI DiscordRestUserAPI Implements Remora.Rest.IRestCustomizable IDiscordRestUserAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestUserAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestUserAPI Constructors | Improve this Doc View Source DiscordRestUserAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestUserAPI class. Declaration public DiscordRestUserAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source CreateDMAsync(Snowflake, CancellationToken) Creates a new DM channel with the given user. Declaration public virtual Task<Result<IChannel>> CreateDMAsync(Snowflake recipientID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake recipientID The ID of the recipient. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IChannel >> A creation result which may or may not have succeeded. | Improve this Doc View Source GetCurrentUserAsync(CancellationToken) Gets the user object of the requester's account. Declaration public virtual Task<Result<IUser>> GetCurrentUserAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IUser >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetCurrentUserGuildMemberAsync(Snowflake, CancellationToken) Gets a guild member object for the current user. Declaration public virtual Task<Result<IGuildMember>> GetCurrentUserGuildMemberAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IGuildMember >> A retrieval result which may or may not have succeeded. Remarks Requires the \"guild.members.read\" OAuth\" scope. | Improve this Doc View Source GetCurrentUserGuildsAsync(Optional<Snowflake>, Optional<Snowflake>, Optional<Int32>, CancellationToken) Gets the guilds the user is in. Declaration public virtual async Task<Result<IReadOnlyList<IPartialGuild>>> GetCurrentUserGuildsAsync(Optional<Snowflake> before = default(Optional<Snowflake>), Optional<Snowflake> after = default(Optional<Snowflake>), Optional<int> limit = default(Optional<int>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > before Get guilds before this guild ID. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > after Get guilds after this guild ID. Remora.Rest.Core.Optional < Int32 > limit The maximum number of guilds to get (1-200). Defaults to 200. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IPartialGuild >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetUserAsync(Snowflake, CancellationToken) Gets the user with the given ID. Declaration public virtual Task<Result<IUser>> GetUserAsync(Snowflake userID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake userID The ID of the user. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IUser >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetUserConnectionsAsync(CancellationToken) Gets a list of connection objects. Declaration public virtual Task<Result<IReadOnlyList<IConnection>>> GetUserConnectionsAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IConnection >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetUserDMsAsync(CancellationToken) Gets a list of DM channels the user has. This always returns an empty array for bots. Declaration public virtual Task<Result<IReadOnlyList<IChannel>>> GetUserDMsAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IChannel >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source LeaveGuildAsync(Snowflake, CancellationToken) Leaves the given guild. Declaration public virtual Task<Result> LeaveGuildAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source ModifyCurrentUserAsync(Optional<String>, Optional<Stream>, CancellationToken) Modifies the current user. Declaration public virtual async Task<Result<IUser>> ModifyCurrentUserAsync(Optional<string> username, Optional<Stream> avatar = default(Optional<Stream>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Optional < String > username The new username. Remora.Rest.Core.Optional < Stream > avatar The new avatar. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IUser >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. Implements Remora.Rest.IRestCustomizable IDiscordRestUserAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestVoiceAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestVoiceAPI.html",
    "title": "Class DiscordRestVoiceAPI | Remora.Discord",
    "keywords": "Class DiscordRestVoiceAPI Represents the Discord Voice API. Inheritance Object AbstractDiscordRestAPI DiscordRestVoiceAPI Implements Remora.Rest.IRestCustomizable IDiscordRestVoiceAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestVoiceAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestVoiceAPI Constructors | Improve this Doc View Source DiscordRestVoiceAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestVoiceAPI class. Declaration public DiscordRestVoiceAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source ListVoiceRegionsAsync(CancellationToken) Gets the available voice regions. Declaration public virtual Task<Result<IReadOnlyList<IVoiceRegion>>> ListVoiceRegionsAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IVoiceRegion >>> A retrieval result which may or may not have succeeded. Implements Remora.Rest.IRestCustomizable IDiscordRestVoiceAPI"
  },
  "api/Remora.Discord.Rest.API.DiscordRestWebhookAPI.html": {
    "href": "api/Remora.Discord.Rest.API.DiscordRestWebhookAPI.html",
    "title": "Class DiscordRestWebhookAPI | Remora.Discord",
    "keywords": "Class DiscordRestWebhookAPI Represents the Discord Webhook API. Inheritance Object AbstractDiscordRestAPI DiscordRestWebhookAPI Implements Remora.Rest.IRestCustomizable IDiscordRestWebhookAPI Inherited Members AbstractDiscordRestAPI.RestHttpClient AbstractDiscordRestAPI.JsonOptions AbstractDiscordRestAPI.RateLimitCache AbstractDiscordRestAPI.WithCustomization(Action<RestRequestBuilder>) AbstractDiscordRestAPI.IRestCustomizable.RemoveCustomization(RestRequestCustomization) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.API Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class DiscordRestWebhookAPI : AbstractDiscordRestAPI, IRestCustomizable, IDiscordRestWebhookAPI Constructors | Improve this Doc View Source DiscordRestWebhookAPI(IRestHttpClient, JsonSerializerOptions, ICacheProvider) Initializes a new instance of the DiscordRestWebhookAPI class. Declaration public DiscordRestWebhookAPI(IRestHttpClient restHttpClient, JsonSerializerOptions jsonOptions, ICacheProvider rateLimitCache) Parameters Type Name Description Remora.Rest.IRestHttpClient restHttpClient The Discord HTTP client. JsonSerializerOptions jsonOptions The JSON options. ICacheProvider rateLimitCache The memory cache used for rate limits. Methods | Improve this Doc View Source CreateWebhookAsync(Snowflake, String, Optional<Stream>, Optional<String>, CancellationToken) Creates a new webhook. Declaration public virtual async Task<Result<IWebhook>> CreateWebhookAsync(Snowflake channelID, string name, Optional<Stream> avatar, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel the webhook is for. String name The name of the webhook. Remora.Rest.Core.Optional < Stream > avatar The avatar of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A creation result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source DeleteWebhookAsync(Snowflake, Optional<String>, CancellationToken) Deletes the given webhook. Declaration public virtual Task<Result> DeleteWebhookAsync(Snowflake webhookID, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source DeleteWebhookMessageAsync(Snowflake, String, Snowflake, Optional<Snowflake>, CancellationToken) Deletes a message posted by a webhook. Declaration public virtual Task<Result> DeleteWebhookMessageAsync(Snowflake webhookID, string token, Snowflake messageID, Optional<Snowflake> threadID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID The ID of the thread the message is in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A result which may or may not have succeeded. | Improve this Doc View Source DeleteWebhookWithTokenAsync(Snowflake, String, Optional<String>, CancellationToken) Deletes the given webhook. Declaration public virtual Task<Result> DeleteWebhookWithTokenAsync(Snowflake webhookID, string token, Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result > A deletion result which may or may not have succeeded. | Improve this Doc View Source EditWebhookMessageAsync(Snowflake, String, Snowflake, Optional<String>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<Snowflake>, CancellationToken) Edits a message posted by a webhook. Declaration public virtual async Task<Result<IMessage>> EditWebhookMessageAsync(Snowflake webhookID, string token, Snowflake messageID, Optional<string> content = default(Optional<string>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<Snowflake> threadID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < String > content The new content, if any. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The new embeds, if any. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The new allowed mentions, if any. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components that should be included with the message. The webhook must be application-owned to use this parameter. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID The ID of the thread the message is in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ExecuteWebhookAsync(Snowflake, String, Optional<Boolean>, Optional<String>, Optional<String>, Optional<String>, Optional<Boolean>, Optional<IReadOnlyList<IEmbed>>, Optional<IAllowedMentions>, Optional<Snowflake>, Optional<IReadOnlyList<IMessageComponent>>, Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>, Optional<MessageFlags>, Optional<String>, CancellationToken) Executes the given webhook. Declaration public virtual Task<Result<IMessage>> ExecuteWebhookAsync(Snowflake webhookID, string token, Optional<bool> shouldWait = default(Optional<bool>), Optional<string> content = default(Optional<string>), Optional<string> username = default(Optional<string>), Optional<string> avatarUrl = default(Optional<string>), Optional<bool> isTTS = default(Optional<bool>), Optional<IReadOnlyList<IEmbed>> embeds = default(Optional<IReadOnlyList<IEmbed>>), Optional<IAllowedMentions> allowedMentions = default(Optional<IAllowedMentions>), Optional<Snowflake> threadID = default(Optional<Snowflake>), Optional<IReadOnlyList<IMessageComponent>> components = default(Optional<IReadOnlyList<IMessageComponent>>), Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>> attachments = default(Optional<IReadOnlyList<OneOf<FileData, IPartialAttachment>>>), Optional<MessageFlags> flags = default(Optional<MessageFlags>), Optional<string> threadName = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Optional < Boolean > shouldWait Whether the call should block until the server has confirmed that the message was sent. Remora.Rest.Core.Optional < String > content The content of the message. Remora.Rest.Core.Optional < String > username The username to use for this message. Note that Discord places some restrictions on valid usernames in order to prevent spam and abuse - check the Discord documentation for up-to-date information on allowed usernames. Remora.Rest.Core.Optional < String > avatarUrl The avatar to use for this message. Remora.Rest.Core.Optional < Boolean > isTTS Whether this message is a TTS message. Remora.Rest.Core.Optional < IReadOnlyList < IEmbed >> embeds The embeds in the message. Remora.Rest.Core.Optional < IAllowedMentions > allowedMentions The set of allowed mentions of the message. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID Send a message to the specified thread within a webhook's channel. Remora.Rest.Core.Optional < IReadOnlyList < IMessageComponent >> components The components that should be included with the message. The webhook must be application-owned to use this parameter. Remora.Rest.Core.Optional < IReadOnlyList < OneOf.OneOf < FileData , IPartialAttachment >>> attachments The attachments to associate with the response. Each file may be a new file in the form of FileData , or an existing one that should be retained in the form of a IPartialAttachment . If this request edits the original message, then any attachments not mentioned in this parameter will be deleted. Remora.Rest.Core.Optional < MessageFlags > flags The message flags. Remora.Rest.Core.Optional < String > threadName The name of the forum thread to create. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. The returned message is null if shouldWait is false. Remarks At least one of content , embeds , or attachments must be present. Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source GetChannelWebhooksAsync(Snowflake, CancellationToken) Gets the webhooks for a channel. Declaration public virtual Task<Result<IReadOnlyList<IWebhook>>> GetChannelWebhooksAsync(Snowflake channelID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake channelID The ID of the channel. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IWebhook >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetGuildWebhooksAsync(Snowflake, CancellationToken) Gets the webhooks for a guild. Declaration public virtual Task<Result<IReadOnlyList<IWebhook>>> GetGuildWebhooksAsync(Snowflake guildID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake guildID The ID of the guild. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IReadOnlyList < IWebhook >>> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetWebhookAsync(Snowflake, CancellationToken) Gets the webhook with the given ID. Declaration public virtual Task<Result<IWebhook>> GetWebhookAsync(Snowflake webhookID, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source GetWebhookMessageAsync(Snowflake, String, Snowflake, Optional<Snowflake>, CancellationToken) Gets a previously-sent webhook message. Declaration public virtual Task<Result<IMessage>> GetWebhookMessageAsync(Snowflake webhookID, string webhookToken, Snowflake messageID, Optional<Snowflake> threadID = default(Optional<Snowflake>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String webhookToken The webhook token. Remora.Rest.Core.Snowflake messageID The ID of the message. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > threadID The ID of the thread the message is in. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IMessage >> A result which may or may not have succeeded. | Improve this Doc View Source GetWebhookWithTokenAsync(Snowflake, String, CancellationToken) Gets the webhook with the given ID and token. Declaration public virtual Task<Result<IWebhook>> GetWebhookWithTokenAsync(Snowflake webhookID, string token, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A retrieval result which may or may not have succeeded. | Improve this Doc View Source ModifyWebhookAsync(Snowflake, Optional<String>, Optional<Stream>, Optional<Snowflake>, Optional<String>, CancellationToken) Modifies the given webhook. Declaration public virtual async Task<Result<IWebhook>> ModifyWebhookAsync(Snowflake webhookID, Optional<string> name = default(Optional<string>), Optional<Stream> avatar = default(Optional<Stream>), Optional<Snowflake> channelID = default(Optional<Snowflake>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. Remora.Rest.Core.Optional < String > name The new name of the webhook. Remora.Rest.Core.Optional < Stream > avatar The new avatar of the webhook. Remora.Rest.Core.Optional < Remora.Rest.Core.Snowflake > channelID The new channel of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. | Improve this Doc View Source ModifyWebhookWithTokenAsync(Snowflake, String, Optional<String>, Optional<Stream>, Optional<String>, CancellationToken) Modifies the given webhook. Declaration public virtual async Task<Result<IWebhook>> ModifyWebhookWithTokenAsync(Snowflake webhookID, string token, Optional<string> name = default(Optional<string>), Optional<Stream> avatar = default(Optional<Stream>), Optional<string> reason = default(Optional<string>), CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Snowflake webhookID The ID of the webhook. String token The token for the webhook. Remora.Rest.Core.Optional < String > name The new name of the webhook. Remora.Rest.Core.Optional < Stream > avatar The new avatar of the webhook. Remora.Rest.Core.Optional < String > reason The reason to mark the action in the audit log with. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < IWebhook >> A modification result which may or may not have succeeded. Remarks Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams afterwards, ensure that what you pass is a copy that the method can take ownership of. Implements Remora.Rest.IRestCustomizable IDiscordRestWebhookAPI"
  },
  "api/Remora.Discord.Rest.API.html": {
    "href": "api/Remora.Discord.Rest.API.html",
    "title": "Namespace Remora.Discord.Rest.API | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Rest.API Classes AbstractDiscordRestAPI Acts as an abstract base for REST API instances. DiscordRestApplicationAPI Represents the Discord application API. DiscordRestAuditLogAPI Represents the Discord Audit Log API. DiscordRestChannelAPI Represents the Discord Channel API. DiscordRestEmojiAPI Represents the Discord Emoji API. DiscordRestGatewayAPI Represents the Discord Gateway REST API. DiscordRestGuildAPI Represents the Discord Guild API. DiscordRestGuildScheduledEventAPI Represents the Discord Guild Scheduled Event API. DiscordRestInteractionAPI Represents the Discord interaction API. DiscordRestInviteAPI Represents the Discord Invite API. DiscordRestOAuth2API Represents the Discord Emoji API. DiscordRestStageInstanceAPI Represents the Discord Stage Instance REST API. DiscordRestStickerAPI Represents the Discord Sticker API. DiscordRestTemplateAPI Represents the Discord REST template API. DiscordRestUserAPI Represents the Discord User API. DiscordRestVoiceAPI Represents the Discord Voice API. DiscordRestWebhookAPI Represents the Discord Webhook API."
  },
  "api/Remora.Discord.Rest.Caching.html": {
    "href": "api/Remora.Discord.Rest.Caching.html",
    "title": "Namespace Remora.Discord.Rest.Caching | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Rest.Caching Classes MemoryCacheProvider An IMemoryCache -backed cache provider."
  },
  "api/Remora.Discord.Rest.Caching.MemoryCacheProvider.html": {
    "href": "api/Remora.Discord.Rest.Caching.MemoryCacheProvider.html",
    "title": "Class MemoryCacheProvider | Remora.Discord",
    "keywords": "Class MemoryCacheProvider An IMemoryCache -backed cache provider. Inheritance Object MemoryCacheProvider Implements ICacheProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.Caching Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class MemoryCacheProvider : ICacheProvider Constructors | Improve this Doc View Source MemoryCacheProvider(IMemoryCache) Initializes a new instance of the MemoryCacheProvider class. Declaration public MemoryCacheProvider(IMemoryCache memoryCache) Parameters Type Name Description IMemoryCache memoryCache The memory cache. Methods | Improve this Doc View Source CacheAsync<TInstance>(String, TInstance, Nullable<DateTimeOffset>, Nullable<TimeSpan>, CancellationToken) Caches a value in the backing store. Declaration public ValueTask CacheAsync<TInstance>(string key, TInstance instance, DateTimeOffset? absoluteExpiration = null, TimeSpan? slidingExpiration = null, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The key to cache the value with. TInstance instance The instance of the object ot cache. Nullable < DateTimeOffset > absoluteExpiration The absolute expiration of the value to cache. Nullable < TimeSpan > slidingExpiration The sliding expiration of the value to cache. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask A ValueTask representing the result of the potentially asynchronous operation. Type Parameters Name Description TInstance The type to cache. Remarks Absolute and sliding expirations may be handled differently (or not at all) depending on the implementation, and are simply a hint to the implementation that the value should have a pre-determined lifetime in it's backing-store. | Improve this Doc View Source EvictAsync(String, CancellationToken) Evicts a key from the backing store. Declaration public ValueTask<Result> EvictAsync(string key, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description String key The key to evict from the backing store. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result > A ValueTask representing the result of the potentially asynchronous action. | Improve this Doc View Source EvictAsync<TInstance>(String, CancellationToken) Evicts a key from the backing store, returning its current value if it exists. Declaration public ValueTask<Result<TInstance>> EvictAsync<TInstance>(string key, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The key to evict from the backing store. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result <TInstance>> A ValueTask representing the result of the potentially asynchronous action. Type Parameters Name Description TInstance The type to return from the backing store, if it exists. | Improve this Doc View Source RetrieveAsync<TInstance>(String, CancellationToken) Retrieves a value from the backing store. Declaration public ValueTask<Result<TInstance>> RetrieveAsync<TInstance>(string key, CancellationToken ct = default(CancellationToken)) where TInstance : class Parameters Type Name Description String key The key to retrieve a potential value from the backing store. CancellationToken ct A cancellation token to cancel the operation. Returns Type Description ValueTask < Remora.Results.Result <TInstance>> A ValueTask representing the result of the potentially asynchronous action. Type Parameters Name Description TInstance The type to return from the backing store, if it exists. Implements ICacheProvider"
  },
  "api/Remora.Discord.Rest.Constants.html": {
    "href": "api/Remora.Discord.Rest.Constants.html",
    "title": "Class Constants | Remora.Discord",
    "keywords": "Class Constants Holds various constants. Inheritance Object Constants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public static class Constants Properties | Improve this Doc View Source AuditLogHeaderName Gets the name of the audit log reason header. Declaration public static string AuditLogHeaderName { get; } Property Value Type Description String | Improve this Doc View Source BaseURL Gets the base API URL. Declaration public static Uri BaseURL { get; } Property Value Type Description Uri | Improve this Doc View Source LocaleHeaderName Gets the name of the locale header, used when requesting localized objects. Declaration public static string LocaleHeaderName { get; } Property Value Type Description String | Improve this Doc View Source RateLimitBucketHeaderName Gets the name of the rate limit bucket header. Declaration public static string RateLimitBucketHeaderName { get; } Property Value Type Description String | Improve this Doc View Source RateLimitHeaderName Gets the name of the rate limit header. Declaration public static string RateLimitHeaderName { get; } Property Value Type Description String | Improve this Doc View Source RateLimitRemainingHeaderName Gets the name of the remaining rate limit token header. Declaration public static string RateLimitRemainingHeaderName { get; } Property Value Type Description String | Improve this Doc View Source RateLimitResetHeaderName Gets the name of the rate limit reset time header. Declaration public static string RateLimitResetHeaderName { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.Rest.Extensions.html": {
    "href": "api/Remora.Discord.Rest.Extensions.html",
    "title": "Namespace Remora.Discord.Rest.Extensions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Rest.Extensions Classes RestRequestBuilderExtensions Defines extensions to the Remora.Rest.RestRequestBuilder class. ServiceCollectionExtensions Defines various extension methods for the IServiceCollection interface."
  },
  "api/Remora.Discord.Rest.Extensions.RestRequestBuilderExtensions.html": {
    "href": "api/Remora.Discord.Rest.Extensions.RestRequestBuilderExtensions.html",
    "title": "Class RestRequestBuilderExtensions | Remora.Discord",
    "keywords": "Class RestRequestBuilderExtensions Defines extensions to the Remora.Rest.RestRequestBuilder class. Inheritance Object RestRequestBuilderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.Extensions Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public static class RestRequestBuilderExtensions Methods | Improve this Doc View Source AddAuditLogReason(RestRequestBuilder, Optional<String>) Adds an audit log reason header to the request, provided the value is defined. Declaration public static RestRequestBuilder AddAuditLogReason(this RestRequestBuilder builder, Optional<string> value) Parameters Type Name Description Remora.Rest.RestRequestBuilder builder The request builder. Remora.Rest.Core.Optional < String > value The value of the header. Returns Type Description Remora.Rest.RestRequestBuilder The builder, potentially with the header. | Improve this Doc View Source WithRateLimitContext(RestRequestBuilder, ICacheProvider, Boolean) Sets up a Polly context with an endpoint for rate limiting purposes. Declaration public static RestRequestBuilder WithRateLimitContext(this RestRequestBuilder builder, ICacheProvider cache, bool isExemptFromGlobalLimits = false) Parameters Type Name Description Remora.Rest.RestRequestBuilder builder The request builder. ICacheProvider cache The memory cache in use. Boolean isExemptFromGlobalLimits Whether this request is exempt from global rate limits, and doesn't need to consider them. Returns Type Description Remora.Rest.RestRequestBuilder The builder, with the context."
  },
  "api/Remora.Discord.Rest.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Remora.Discord.Rest.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Remora.Discord",
    "keywords": "Class ServiceCollectionExtensions Defines various extension methods for the IServiceCollection interface. Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.Extensions Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddDiscordRest(IServiceCollection, Func<IServiceProvider, String>, Action<IHttpClientBuilder>) Adds the services required for Discord's REST API. Declaration public static IServiceCollection AddDiscordRest(this IServiceCollection serviceCollection, Func<IServiceProvider, string> tokenFactory, Action<IHttpClientBuilder> buildClient = null) Parameters Type Name Description IServiceCollection serviceCollection The service collection. Func < IServiceProvider , String > tokenFactory A function that creates or retrieves the authorization token. Action < IHttpClientBuilder > buildClient Extra client building operations. Returns Type Description IServiceCollection The service collection, with the services added. | Improve this Doc View Source Decorate<TInterface, TDecorator>(IServiceCollection) Registers a decorator service, replacing the existing interface. Declaration public static IServiceCollection Decorate<TInterface, TDecorator>(this IServiceCollection services) where TInterface : class where TDecorator : class, TInterface Parameters Type Name Description IServiceCollection services The service collection. Returns Type Description IServiceCollection The service collection, with the decorated service. Type Parameters Name Description TInterface The interface type to decorate. TDecorator The decorator type. Remarks Implementation based off of https://greatrexpectations.com/2018/10/25/decorators-in-net-core-with-dependency-injection/ ."
  },
  "api/Remora.Discord.Rest.html": {
    "href": "api/Remora.Discord.Rest.html",
    "title": "Namespace Remora.Discord.Rest | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Rest Classes Constants Holds various constants. TokenStore Represents a storage class for a single token. Interfaces ITokenStore Represents a storage class for a single token."
  },
  "api/Remora.Discord.Rest.ITokenStore.html": {
    "href": "api/Remora.Discord.Rest.ITokenStore.html",
    "title": "Interface ITokenStore | Remora.Discord",
    "keywords": "Interface ITokenStore Represents a storage class for a single token. Namespace : Remora.Discord.Rest Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public interface ITokenStore Properties | Improve this Doc View Source Token Gets the token. Declaration string Token { get; } Property Value Type Description String"
  },
  "api/Remora.Discord.Rest.TokenStore.html": {
    "href": "api/Remora.Discord.Rest.TokenStore.html",
    "title": "Class TokenStore | Remora.Discord",
    "keywords": "Class TokenStore Represents a storage class for a single token. Inheritance Object TokenStore Implements ITokenStore Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public class TokenStore : ITokenStore Constructors | Improve this Doc View Source TokenStore(String) Initializes a new instance of the TokenStore class. Declaration public TokenStore(string token) Parameters Type Name Description String token The token to store. Properties | Improve this Doc View Source Token Gets the token. Declaration public string Token { get; } Property Value Type Description String Implements ITokenStore"
  },
  "api/Remora.Discord.Rest.Utility.html": {
    "href": "api/Remora.Discord.Rest.Utility.html",
    "title": "Namespace Remora.Discord.Rest.Utility | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Rest.Utility Classes ImagePacker Packs images into a base64 representation."
  },
  "api/Remora.Discord.Rest.Utility.ImagePacker.html": {
    "href": "api/Remora.Discord.Rest.Utility.ImagePacker.html",
    "title": "Class ImagePacker | Remora.Discord",
    "keywords": "Class ImagePacker Packs images into a base64 representation. Inheritance Object ImagePacker Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Rest.Utility Assembly : Remora.Discord.Rest.dll Syntax [PublicAPI] public static class ImagePacker Methods | Improve this Doc View Source PackImageAsync(Optional<Stream>, CancellationToken) Packs the given stream into a base64-encoded string, type-prefixed string. Declaration public static async Task<Result<Optional<string>>> PackImageAsync(Optional<Stream> stream, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Remora.Rest.Core.Optional < Stream > stream The stream. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < Remora.Rest.Core.Optional < String >>> A creation result which may or may not have succeeded. | Improve this Doc View Source PackImageAsync(Stream, CancellationToken) Packs the given stream into a base64-encoded string, type-prefixed string. Declaration public static async Task<Result<string>> PackImageAsync(Stream stream, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Stream stream The stream. CancellationToken ct The cancellation token for this operation. Returns Type Description Task < Remora.Results.Result < String >> A creation result which may or may not have succeeded."
  },
  "api/Remora.Discord.Unstable.Extensions.html": {
    "href": "api/Remora.Discord.Unstable.Extensions.html",
    "title": "Namespace Remora.Discord.Unstable.Extensions | Remora.Discord",
    "keywords": "Namespace Remora.Discord.Unstable.Extensions Classes ServiceCollectionExtensions Defines various extension methods to the IServiceCollection class."
  },
  "api/Remora.Discord.Unstable.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Remora.Discord.Unstable.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Remora.Discord",
    "keywords": "Class ServiceCollectionExtensions Defines various extension methods to the IServiceCollection class. Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Remora.Discord.Unstable.Extensions Assembly : Remora.Discord.Unstable.dll Syntax [PublicAPI] public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddExperimentalDiscordApi(IServiceCollection, String) Adds experimental features from the Discord API. Declaration public static IServiceCollection AddExperimentalDiscordApi(this IServiceCollection serviceCollection, string optionsName = \"Discord\") Parameters Type Name Description IServiceCollection serviceCollection The service collection. String optionsName The name of the serializer options, if any. You should probably leave this set to the default value. Returns Type Description IServiceCollection The service collection, with the services."
  },
  "guides/getting-started.html": {
    "href": "guides/getting-started.html",
    "title": "Getting Started | Remora.Discord",
    "keywords": "Getting Started This guide will walk you through setting up a basic ping-pong bot with Remora.Discord, showing you the basic concepts of the library. At the end of the tutorial, you should have the tools you need to start diving into more complex bots and use cases. There'll be some assumptions made in this guide related to commands and terminal environments - primarily, a system with bash is assumed, but the commands should be easily transferable to any shell language. Creating your project First of all, ensure that you have version 6.0 of the .NET Core SDK installed. If you don't have it yet, you can follow the instructions on this page for your system. Next up, we'll create a simple console program that'll serve as the host for our bot - you can do this in many different ways, but we'll stick to the terminal in this guide. Feel free to use your favourite IDE instead, such as JetBrains Rider or VS Code . dotnet new console -n \"PingPong\" cd PingPong dotnet add package Remora.Discord Opening up the Program.cs file, we can start to set up our environment. Setting up a gateway client Since we're writing a bot that's going to respond to a simple command, we need a connection to Discord's realtime gateway. This is facilitated through the DiscordGatewayClient class, as well as a bot account you'll need to create with Discord themselves. From this account, you'll get a bot token, which the gateway client will use to authenticate with the gateway. For now, we'll do everything as top-level statements in our Program.cs file, but as your bot grows, it's almost a certainty that you'll need to expand out to more types, files, and namespaces. This guide also deliberately avoids more integrated features, such as hosted services and generic app hosts - that said, it is highly recommended that you build real bots around those technologies. Check out the samples if you want to know more! The first thing we'll do is create a CancellationTokenSource . This is going to be our primary way of gracefully shutting down our bot, letting it notify the Discord gateway that it's disconnecting, and allowing it to shut down any Responders that are currently running (more on those later). For simplicity's sake, we'll set up our program to respond to CTRL+C at the command line, and terminate the gateway client if it catches that keypress. var cancellationSource = new CancellationTokenSource(); Console.CancelKeyPress += (sender, eventArgs) => { eventArgs.Cancel = true; cancellationSource.Cancel(); }; After this, we'll set up a service provider. Remora.Discord uses dependency injection throughout its codebase, and it's through these systems we register and access various types and services from the library. var botToken = \"YOUR_TOKEN_HERE\"; var services = new ServiceCollection() .AddDiscordGateway(_ => botToken) .BuildServiceProvider(); A quick note here - do not place your bot token in the source code of your program when you write your real bot. It's a massive security risk, and is only done here for the sake of this guide. You should store your token outside of the program in some kind of database or file (appsettings, plaintext file, etc) that is not directly accessible from your source code. With that out of the way, have a look at the snippet above. We register a set of services from Remora.Discord via a convenience extension method called AddDiscordGateway - this method adds everything you need to start using the gateway client. It takes a single parameter, which is a function that returns your bot token. In our case, that just references our local variable where we've stored the token. To get a gateway client instance, we can then request it from the service provider we've created. var gatewayClient = services.GetRequiredService<DiscordGatewayClient>(); Connecting to the gateway At this point, the gateway client is fully functional, but has not connected to the gateway yet. To do this, we call the RunAsync method, and pass in the cancellation token from the source we created earlier. var runResult = await gatewayClient.RunAsync(cancellationSource.Token); Most things that deal with networking or external services have a fair chance to fail, halt, or otherwise not complete perfectly. Remora.Discord is written to try its damnedest to never let a potential runtime error bring down your program, which means that any operation that could conceivably run into an issue like that returns an IResult (or a type that implements that interface). This is a safe and predictable wrapper around either a failed or a successful operation - in the case of a failure, it'll contain a human-readable message that should help you understand what went wrong. In the case of RunAsync , this is a GatewayConnectionResult , which can contain some additional information about what caused the gateway client to stop running. Let's implement some error handling next. var log = services.GetRequiredService<ILogger<Program>>(); if (!runResult.IsSuccess) { switch (runResult.Error) { case ExceptionError exe: { log.LogError ( exe.Exception, \"Exception during gateway connection: {ExceptionMessage}\", exe.Message ); break; } case GatewayWebSocketError: case GatewayDiscordError: { log.LogError(\"Gateway error: {Message}\", runResult.Error.Message); break; } default: { log.LogError(\"Unknown error: {Message}\", runResult.Error.Message); break; } } } Console.WriteLine(\"Bye bye\"); Under normal circumstances, the gateway client will gracefully handle errors and try to keep you connected to the gateway (either by reconnecting and resuming, or by creating a new session) until you ask it to turn off via the cancellation token provided to RunAsync . If runResult isn't successful, you can be fairly certain something outside of normal operation has happened - either it's a programming error on the part of the library, or something that's made the gateway unable or unwilling to continue trying to connect to the gateway. In general, if the error is recoverable, Remora.Discord will try to fulfill your requests until it can no longer justify any further efforts (often, this means some sort of timeout or max number of retries). At this point, you should be able to run the program and see your bot come online in Discord. Hooray! If you want to see an overview of what the gateway client is doing, you can configure a logging provider in the service provider - AddConsole from Microsoft.Extensions.Logging.Console is usually a good choice for simple projects. Adding logging will produce some output similar to the following. info: Remora.Discord.Gateway.DiscordGatewayClient[0] Retrieving gateway endpoint... info: Remora.Discord.Gateway.DiscordGatewayClient[0] Connecting to the gateway... info: Remora.Discord.Gateway.DiscordGatewayClient[0] Creating a new session... info: Remora.Discord.Gateway.DiscordGatewayClient[0] Connected. Creating a Responder Now, in its current state, our bot doesn't do much of anything. Sure, it runs and connects, but that's no fun! Let's add a simple Responder that can - as the name suggests - respond to events from Discord's gateway. Responders are defined as any class that implements one or more IResponder<T> interfaces, where T is an event from the Discord gateway. If the gateway client gets an event that one or more responders are interested it, it will instantiate them and dispatch it to the responders, letting them handle it on their own. A responder can take as little or as much time as it needs to handle an event without affecting the gateway - they're entirely separate systems, save for the fact that they also share the cancellation token with the gateway client. Let's create our responder now. public class PingPongResponder : IResponder<IMessageCreate> { } This responder will only respond to IMessageCreate events from the gateway - that is, events that contain information about a message someone has posted, be they user or bot. You can implement as many IResponder<T> interfaces as you like, and the responder will react to them all. One thing to note is that a responder is not persistent - that is, it is not the same instance that responds to the events, even events of the same type. The responder is what's called a Scoped service in DI parlance, and each event from the gateway carries its own scope. This means that if you want to retain information between events, you'll need to outsource that to some other type - most likely registered as a Singleton , or Scoped in an outer scope. The IResponder<T> interface is relatively simple, only defining a single method. public async Task<Result> RespondAsync ( IMessageCreate gatewayEvent, CancellationToken ct = default ) { } Here, we can see the event coming in, and a type that implements IResult rearing its head again. Responders, much like any user-facing operation, can fail! Maybe it can't find some resource it needs, or maybe something couldn't be parsed properly - anything that results in the responder being unable to finish its task should result in a failed result being returned. We can also see that the cancellation token from earlier is available to us - this is the same token that we passed to RunAsync , and we should respect it. If cancellation has been requested, we should bail out with a failed result as soon as we can. Adding a command Now, our command will be very simple, and won't really be much more than a direct match against the message contents, but it gets the point across. In the future, we'll have a proper command framework available, but that's outside of the scope of this quickstart. if (gatewayEvent.Content != \"!ping\") { return Result.FromSuccess(); } var embed = new Embed(Description: \"Pong!\", Colour: Color.LawnGreen); If the message isn't something we're interested in, we return a successful result - after all, if we just don't care, it's hardly a failure of our own code. If the message does match, however, we'd like to send an embed back to the user with a pong to show that we got their ping. new 'ing up an embed is simple enough, but we need to send it back to the user in the same channel, too. This is done through Discord's REST API, which we also have access to. This, however, we need to explicitly request through - you guessed it - dependency injection. Let's jump out of the response method for a moment, and implement a constructor that takes the API we're interested in. private readonly IDiscordRestChannelAPI _channelAPI; public PingPongResponder(IDiscordRestChannelAPI channelAPI) { _channelAPI = channelAPI; } Every section of Discord's REST API is available in this form, as an interface defining the various endpoints. Back in our responder method, we can now use the channel API. if (gatewayEvent.Content != \"!ping\") { return Result.FromSuccess(); } var embed = new Embed(Description: \"Pong!\", Colour: Color.LawnGreen); return (Result)await _channelAPI.CreateMessageAsync ( gatewayEvent.ChannelID, embeds: new[] { embed }, ct: ct ); The CreateMessageAsync method takes a lot of various parameters, but we're really only interested in the embed and channel parameters right now - therefore, we can skip over the other optional parameters and just pass in the ones we care about. Adding the responder to the gateway client With that done, our responder is implemented and ready to go! There's only one final thing to do before we can run our bot and see it in action - we need to make it available to the gateway client via - say it with me - dependency injection! Back in our Main method, where we configure our services, we'll make a small addition. var services = new ServiceCollection() .AddDiscordGateway(_ => botToken) .AddResponder<PingPongResponder>() .BuildServiceProvider(); And that's it! The AddResponder<T> method registers the responder as a scoped service for all of the IResponder<T> interfaces it implements. Example program Putting everything together, your program should now look something like this. using System; using System.Drawing; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Logging; using Remora.Discord.API.Abstractions.Gateway.Events; using Remora.Discord.API.Abstractions.Rest; using Remora.Discord.API.Objects; using Remora.Discord.Gateway; using Remora.Discord.Gateway.Extensions; using Remora.Discord.Gateway.Responders; using Remora.Discord.Gateway.Results; using Remora.Results; namespace Remora.Discord.Docs.Custom.Guides.Getting_Started; var cancellationSource = new CancellationTokenSource(); Console.CancelKeyPress += (sender, eventArgs) => { eventArgs.Cancel = true; cancellationSource.Cancel(); }; var botToken = \"YOUR_TOKEN_HERE\"; // Do not place your bot token in the source code of your program // when you write your real bot. It's a massive security risk, // and is only done here for the sake of this guide. You should store // your token outside of the program in some kind of database or file // (appsettings, plaintext file, etc) that is not directly accessible // from your source code. var services = new ServiceCollection() .AddDiscordGateway(_ => botToken) .AddResponder<PingPongResponder>() .BuildServiceProvider(); var gatewayClient = services.GetRequiredService<DiscordGatewayClient>(); var log = services.GetRequiredService<ILogger<Program>>(); var runResult = await gatewayClient.RunAsync(cancellationSource.Token); if (!runResult.IsSuccess) { switch (runResult.Error) { case ExceptionError exe: { log.LogError ( exe.Exception, \"Exception during gateway connection: {ExceptionMessage}\", exe.Message ); break; } case GatewayWebSocketError: case GatewayDiscordError: { log.LogError(\"Gateway error: {Message}\", runResult.Error.Message); break; } default: { log.LogError(\"Unknown error: {Message}\", runResult.Error.Message); break; } } } Console.WriteLine(\"Bye bye\"); public class PingPongResponder : IResponder<IMessageCreate> { private readonly IDiscordRestChannelAPI _channelAPI; public PingPongResponder(IDiscordRestChannelAPI channelAPI) { _channelAPI = channelAPI; } public async Task<Result> RespondAsync ( IMessageCreate gatewayEvent, CancellationToken ct = default ) { if (gatewayEvent.Content != \"!ping\") { return Result.FromSuccess(); } var embed = new Embed(Description: \"Pong!\", Colour: Color.LawnGreen); return (Result)await _channelAPI.CreateMessageAsync ( gatewayEvent.ChannelID, embeds: new[] { embed }, ct: ct ); } } Conclusion Now, running your bot, going into Discord, and running your command should net you the following. Congratulations! You've written your first bot using Remora.Discord, and familiarized yourself with the basic concepts of the library. Hopefully, this should set you on the right path, and give you the tools you need to create great bots with the library. If you're interested in looking at some bots authored by the community or by the library author(s), have a look at the samples in the repository. If you have any questions, please don't hesitate to ask, or open an issue in the main repo. Good luck!"
  },
  "guides/undocumented-features.html": {
    "href": "guides/undocumented-features.html",
    "title": "Using Undocumented Features | Remora.Discord",
    "keywords": "Using Undocumented Features The unfortunate reality of using the Discord API is that, while the online documentation is extensive, it is not exhaustive. Discord often exposes undocumented fields, endpoints, and data structures that may still be of use to developers, even though they aren't ready, finished, or thoroughly documented. Remora has a few ways for you to access these undocumented features, but beware! As with any unstable API surface, things may break from one second to the next without warning. Data Undocumented Fields If you want to implement access to an undocumented field on an existing type, create a new record that inherits from the existing model, and register it with the DI system. public record SomeExistingDataWithMoreStuff(int Existing, int Additional) : SomeExistingData(Existing); Note that to override an existing data model, you have to register it after Remora's own setup. // Add the base types from Remora var serviceCollection = new ServiceCollection() .AddDiscordGateway(_ => botToken) .AddDiscordCommands(true); // Add overriding data models serviceCollection.Configure<JsonSerializerOptions> ( options => { options.AddDataObjectConverter<ISomeExistingData, SomeExistingDataWithMoreStuff>(); } ); You can also specialize various parts of the data model when registering it, such as property names (which is useful for C#-ifying naming of boolean properties) and their type converters. Undocumented Data Structures Any undocumented data structure can be added to Remora externally, and treated as if it were bundled with Remora using the existing DI system. Suppose we have the following undocumented data: { \"some_name\": 10 } You would then model and register the following structures. public interface ISomeData { int SomeName { get; } } public record SomeData(int SomeName) : ISomeData; Registration is the same as if you were implementing an undocumented field, but you may register it before Remora's own types. Gateway Undocumented Events & Commands Any undocumented event or command can be added to Remora the same way as you would add a new undocumented data structure. However, you only need to model the data portion of the event or command. Suppose we have the following undocumented event: { \"t\": \"SOME_UNDOCUMENTED_EVENT\", \"s\": 4, \"op\": 0, \"d\": { \"some_name\": 10 } } You would then model and register the following event data. Note that event names must match the interface name you create - that is, if the event is named SOME_EVENT , your interface must be named ISomeEvent . public interface ISomeUndocumentedEvent { int SomeName { get; } } public record SomeUndocumentedEvent(int SomeName) : ISomeUndocumentedEvent; REST Features that relate to the REST API is customized through one of two methods. The first is the RestHttpClient type, which can be accessed and used through DI. It's a named, transient HttpClient , which takes care of minutia like authorization headers and respecting rate limits for you. You would mainly use this type when you want to make requests to completely undocumented endpoints, or to take complete control over a call to a known endpoint. public class Somewhere { private readonly RestHttpClient _client; public Somewhere(RestHttpClient client) { _client = client; } } The second is through the concrete implementations of the API interfaces, which allow you to perform smaller tweaks or changes to existing API methods, such as adding headers or JSON payload fields. Undocumented Endpoints To access an undocumented endpoint, you may use the RestHttpClient directly to make any kind of HTTP request, similar to how you might use a normal HttpClient . All requests made by this client are prepended with the most recently versioned Discord API base endpoint, which typically looks like this: https://discord.com/api/v9/ . Therefore, you should only use relative endpoints when making requests. var result = await _client.GetAsync<ISomeData>($\"somewhere/{someId}/data\"); Refer to the existing implementations of endpoints in the library for examples of how to add JSON parameters, HTTP headers, or similar data. Undocumented Parameters & Headers If you want to provide additional data to an existing endpoint, such as JSON parameters, HTTP headers, or query string parameters, you can easily add customizations to all requests made by the API within a particular scope. This feature is only available to you when you inject the concrete implementation of an API category, however, and not through the interface. This means that if you want to, for example, send an additional JSON field when sending a message, you would need to inject DiscordRestChannelAPI and not IDiscordRestChannelAPI . This is useful when an endpoint is discovered to allow undocumented parameters, or metadata headers such as X-Audit-Log-Reason . Once you have the concrete implementation available to you, creating a customization is simple. using (_ = _api.WithCustomization(r => r.WithJson(json => json.WriteString(\"name\", \"value\")))) { // This call will now have \"name\": \"value\" in its JSON payload, in addition // to the normal data. var result = await _api.SomeEndpointAsync(); } // This call will not have any additional data var result = await _api.SomeEndpointAsync(); The customization uses the same types and logic for configuring a request's parameters, methods, and headers as implementing a custom endpoint, so if you learn one you should have no trouble using the other. Multiple customizations may be in effect at the same time, and will be applied in the order you create them. A customization is removed from the client when it is disposed."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome! | Remora.Discord",
    "keywords": "Welcome! Hi, and welcome to the online documentation for Remora.Discord! Here, you'll find everything you need to get started with the library - tutorials, API references, and more. To get started as a new user, it's recommended to check out Getting Started , where we'll go through setting up a basic bot with the library. If you're interested in contributing to the library, great! The best place to start is by reading through the contribution guidelines . After that, check out available and open issues on GitHub , or come up with an idea of your own. Quick Reference API Documentation Getting Started Using Undocumented Features Project README"
  }
}